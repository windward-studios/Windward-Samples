<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WindwardReportsAPI</name>
    </assembly>
    <members>
        <member name="T:net.windward.api.csharp.AdoDataSourceImpl">
            <summary>
            This supplies a data source to Windward Reports using ADO.NET. The DataSourceProvider class is built on the concept of
            xml nodes. For this class, a node is a DbDataReader returned by a ADO call to DbCommand.ExecuteReader().<br/>
            
            An xml file always has the concept of the current node. This is not the case with a sql database - there is no current
            DbDataReader. A DbDataReader is only generated by the wr:query and the wr:foreach tags. Therefore, all other tags only
            make sense if they use the var attribute from a query or foreach to identify the DbDataReader they are to be applied
            to. A tag not identifying a DbDataReader will throw an exception.<br/>
            
            A query or foreach tag can reference a var from another query or foreach tag using ${var.item}.. An XPath query can
            describe a node as well as an element. In this class a query defines a DbDataReader and is only an element.<br/>
            
            Also, with xml you can use xpath in each tag performing complex logic in determining what text to return. It
            is very different for sql. The foreach or query can have complex logic. But the other tags can only return
            an element from a result set that the foreach/query earlier returned or do a single select.<br/>
            
            When using a var (&lt;wr:forEach var="result"/&gt;) that identifies a result set, you can use the following in a tag:<list type="bullet">
            <item>${result[1]} - is column element [1] in the row presently on (1-based)</item>
            <item>${result[2][1]} - is column element [1] in the row + 2 presently on (0-based)</item>
            <item>${result.NAME} - is the column element named NAME in the row presently on</item>
            <item>${result[2].NAME} - is the column element named NAME in the row + 2 presently on</item>
            <item>${result.columnNames[1]} - is the name of column 1 (1-based)</item>
            </list>
            
            The use of result[N] where N is a row number is limited to values of 0...N where N is step-1. result[1] is treated
            as column 1 of the row presently on, it is only result[0][1] and result[0].NAME that can hit rows other than the
            row presently on. This functionality requires a result set that can move to previous as well as next. If the ADO
            driver you use cannot handle a call to previous, you cannot use this functionality.<br/>
            
            An &lt;if select= ... &gt; will return true if the passed in select returns a DbDataReader with one or more rows. An
            &lt;if select="select count (*) from customers" notEmpty="true"&gt; will perform two steps. The first step is it will
            return false if there are no results returned. If results are returned it assumes the select is a count and will do a
            <c>return DbDataReader.getInt(1) > 0;</c>. This does not look at the select statement, it is the notEmpty="true" that
            puts it in this mode.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.AdoDataSourceImpl.#ctor(System.String,System.String)">
            <summary>
            Create a DataSourceProvider that uses Ado to access a SQL database. This constructor calls
            new DbConnection(connectionString) to create a connection. Each forEach and query tag will also cause
            a connection to be created.<br/>
            
            Example:<br/>
            Access: "System.Data.Odbc", "Driver={Microsoft Access Driver (*.mdb, *.accdb)};Dbq=Northwind.mdb"<br/>
            DB2: "IBM.Data.DB2", "server=db2.windwardreports.com;database=SAMPLE;Uid=demo;Pwd=demo;"<br/>
            Excel: "System.Data.OleDb", "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=Northwind Mini - Data.xlsx;Extended Properties=\"Excel 12.0 Xml;HDR=YES\""<br/>
            MySql: "MySql.Data.MySqlClient", "server=mysql.windwardreports.com;database=sakila;user id=demo;password=demo;"<br/>
            ODBC: "System.Data.Odbc", "Driver={Sql Server};Server=localhost;Database=Northwind;User ID=test;Password=pass;"<br/>
            OleDB: "System.Data.OleDb", "Provider=sqloledb;Data Source=localhost;Initial Catalog=Northwind;User ID=test;Password=pass;"<br/>
            Oracle: "Oracle.DataAccess.Client", "Data Source=oracle.windwardreports.com:1521;Persist Security Info=True;Password=HR;User ID=HR"<br/>
            Do not use System.Data.OracleClient - even Microsoft discourages its use.<br/>
            SqlServer: "System.Data.SqlClient", "Data Source=mssql.windwardreports.com;Initial Catalog=Northwind;user=demo;password=demo;"
            </summary>
            <param name="providerName">The name of the provider. For example, for SqlServer this would be "System.Data.SqlClient".</param>
            <param name="connectionString">The connection string used in the DbConnection constructor.</param>
        </member>
        <member name="M:net.windward.api.csharp.AdoDataSourceImpl.#ctor(System.Type,System.String)">
            <summary>
            Create a DataSourceProvider that uses Ado to access a SQL database. This constructor calls
            new DbConnection(connectionString) to create a connection. Each forEach and query tag will also cause
            a connection to be created.<br/>
            
            Example:<br/>
            Access: typeof(System.Data.Odbc), "Driver={Microsoft Access Driver (*.mdb, *.accdb)};Dbq=Northwind.mdb"<br/>
            DB2: typeof(IBM.Data.DB2), "server=db2.windwardreports.com;database=SAMPLE;Uid=demo;Pwd=demo;"<br/>
            Excel: typeof(System.Data.OleDb), "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=Northwind Mini - Data.xlsx;Extended Properties=\"Excel 12.0 Xml;HDR=YES\""<br/>
            MySql: typeof(MySql.Data.MySqlClient), "server=mysql.windwardreports.com;database=sakila;user id=demo;password=demo;"<br/>
            ODBC: typeof(System.Data.Odbc), "Driver={Sql Server};Server=localhost;Database=Northwind;User ID=test;Password=pass;"<br/>
            OleDB: typeof(System.Data.OleDb), "Provider=sqloledb;Data Source=localhost;Initial Catalog=Northwind;User ID=test;Password=pass;"<br/>
            Oracle: typeof(Oracle.DataAccess.Client), "Data Source=oracle.windwardreports.com:1521/HR;Persist Security Info=True;Password=HR;User ID=HR"<br/>
            Do not use System.Data.OracleClient - even Microsoft discourages its use.<br/>
            SqlServer: typeof(System.Data.SqlClient), "Data Source=mssql.windwardreports.com;Initial Catalog=Northwind;user=demo;password=demo;"
            </summary>
            <param name="type">The type of the DbConnection driver. For example, for SqlServer this would be typeof(SqlConnection).</param>
            <param name="connectionString">The connection string used in the DbConnection constructor.</param>
        </member>
        <member name="M:net.windward.api.csharp.DataSetImpl.#ctor(System.String,System.String,WindwardInterfaces.net.windward.api.csharp.IReportDataSource)">
            <summary>
            Create a dataset datasource.
            </summary>
            <param name="name">The name of this data set.</param>
            <param name="select">The select this data set is based on.</param>
            <param name="datasource">The datasource instance to query data from.</param>
        </member>
        <member name="T:net.windward.api.csharp.DataSourceImplBase">
            <summary>
            Base class for all the datasource implementations.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.DataSourceImplBase.ParamMode">
            <summary>
            The parameter substitution mode.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.DataSourceImplBase.InternalParameters">
            <summary>
            <b>For internal Windward use only. Do not call!</b>
            This makes a copy and assigns the copy to the datasource. Therefore it overwrites any shared set of variables.
            Only use this in AutoTag when using a datasource outside the context of running a report.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.DataSourceImplBase.Datasource">
            <summary>
            Return the underlying datasource provider. This always returns a DataSourceProvider object but as that
            is non-CLS and an interface method cannot be declared internal, we play this game.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.DataSourceImplBase.Close">
            <summary>
            Called when processing is complete. Used to close any resources opened by this object.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.DataSourceImplBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:net.windward.api.csharp.errorhandling.ErrorInfo">
            <summary>
            Error information that is returning by the error handling.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.errorhandling.ErrorInfo.#ctor(net.windward.xmlreport.errorhandling.ErrorInfo)">
            <summary>
            Create a new instance of ErrorInfo by wrapping a corresponding object returned
            by the Java engine.
            </summary>
            <param name="proxy">An underlying Java object.</param>
        </member>
        <member name="M:net.windward.api.csharp.errorhandling.ErrorInfo.#ctor">
            <summary>
            Create a new instance with an empty list of issues.
            Used internally by AutoTag.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.errorhandling.ErrorInfo.HasErrors">
            <summary>
            Test if there were any issues during a report generation.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.errorhandling.ErrorInfo.Errors">
            <summary>
            Get a list of issues produced during a report generation.  There are two types of issues: error and warning.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.errorhandling.Issue">
            <summary>
            An issue enconterred during a report generation.  This is a base class for two possible kinds of issues: errors
            and warnings.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.errorhandling.Issue.IsError">
            <summary>
            Test if this issue is an error.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.errorhandling.Issue.IsWarning">
            <summary>
            Test if this issue is a warning.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.errorhandling.Issue.Message">
            <summary>
            Get a message describing this issue.  Maybe an empty string.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.errorhandling.Issue.Date">
            <summary>
            The date/time when this issue encounterred.  The value represents the local date and time.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.errorhandling.Issue.IssueType">
            <summary>
            Types of issues that can be tracked by the error handling.  They can be set via a tag's error-handling attribute
            or the Report Designer's Options dialog.  If a type is selected, it would be checked and reported,
            otherwise it would be ignored.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.errorhandling.Issue.IssueType.Type">
            <summary>
            Ignore tag type errors.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.errorhandling.Issue.IssueType.Formatting">
            <summary>
            Ignore tag formatting errors.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.errorhandling.Issue.IssueType.Select">
            <summary>
            Ignore tag select errors.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.errorhandling.Issue.IssueType.NodeDoesNotExist">
            <summary>
            A tag's node must exist.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.errorhandling.Issue.IssueType.NodeNull">
            <summary>
            A tag's node must exist and it must not be null.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.errorhandling.Issue.IssueType.Verify">
            <summary>
            A verification issue.  The verification of generated report is performed during processComplete call.
            It checks for things like an image is off page, etc.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.errorhandling.Issue.Type">
            <summary>
            A type of this issue.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.errorhandling.Issue.Tag">
            <summary>
            A tag that led to this issue.  This is the tag from the source template.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.errorhandling.Tag">
            <summary>
            A tag view as it is returned by the error handling.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.errorhandling.Tag.FullTag">
            <summary>
            Get a string representation of this tag.  If an error occurs during this method execution the empty string is
            returned and a warning is written to the log.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.errorhandling.Tag.DataSourceName">
            <summary>
            Get the data source name this tag is bound to.  This returns the empty string for the default data source.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.errorhandling.Tag.Nickname">
            <summary>
            Get the nickname of this tag.  If the tag has no nickname, the empty string is returned.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.errorhandling.Tag.Name">
            <summary>
            Get the name of this tag, e.g. out, set, etc.  The name always is returned as a lower-case string.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.errorhandling.Tag.UnderlyingTag">
            <summary>
            Get the underlying tag this view is representing.
            Used internally by AutoTag.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.HtmlBitmap">
            <summary>
            Holds the contents of a bitmap in a html report. Depending on how the images were created
            this may have the bitmap data. It always has the bitmap filename.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.HtmlBitmap.FORMAT">
            <summary>
            The format of the bitmap.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.HtmlBitmap.FORMAT.UNKNOWN">
            <summary>
            Do not know the bitmap format.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.HtmlBitmap.FORMAT.PNG">
            <summary>
            The picture's data is a png file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.HtmlBitmap.FORMAT.JPG">
            <summary>
            The picture's data is a jpeg file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.HtmlBitmap.FORMAT.TIF">
            <summary>
            The picture's data is a tiff file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.HtmlBitmap.FORMAT.BMP">
            <summary>
            The picture's data is a bmp/dib file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.HtmlBitmap.FORMAT.GIF">
            <summary>
            The picture's data is a gif file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.HtmlBitmap.FORMAT.WMF">
            <summary>
            The picture's data is a wmf file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.HtmlBitmap.FORMAT.WMZ">
            <summary>
            The picture's data is a wmz file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.HtmlBitmap.FORMAT.EMF">
            <summary>
            The picture's data is a emf file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.HtmlBitmap.FORMAT.EMZ">
            <summary>
            The picture's data is a emz file.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.HtmlBitmap.#ctor(System.String,System.Byte[],net.windward.api.csharp.HtmlBitmap.FORMAT)">
            <summary>
            Create a bitmap object.
            </summary>
            <param name="filename">The filename of the bitmap.</param>
            <param name="data">The file data, may be null.</param>
            <param name="format">The format of the bitmap.</param>
        </member>
        <member name="P:net.windward.api.csharp.HtmlBitmap.Filename">
            <summary>
            The filename of the bitmap.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.HtmlBitmap.Extension">
            <summary>
            Return the extension for this file type. This is not the filename extension, it is the standard
            extension for this file type. The extension returned is the one used in the MIME type for this type.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.HtmlBitmap.Filedata">
            <summary>
            The file data, may be null.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.HtmlBitmap.BitmapFormat">
            <summary>
            The format of the bitmap.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ImportMetrics">
            <summary>
            Imported document(s) pulled in from a template.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ImportMetrics.IMPORT_TYPE">
            <summary>
            The import type. These numbers match ImportInfo.java!
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ImportMetrics.IMPORT_TYPE.UNDEFINED">
            <summary>
            The import type is not defined.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ImportMetrics.IMPORT_TYPE.TEMPLATE">
            <summary>
            The import type is a template.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ImportMetrics.IMPORT_TYPE.BITMAP">
            <summary>
            The import type is a bitmap.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ImportMetrics.IMPORT_TYPE.PDF">
            <summary>
            The import type is a PDF file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ImportMetrics.IMPORT_TYPE.TXT">
            <summary>
            The import type is a TXT file.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ImportMetrics.Convert(System.Collections.Generic.IEnumerable{net.windward.xmlreport.ImportInfo})">
            <summary>
            Convert an ImportInfo collection to an ImportMetrics collection
            </summary>
            <param name="info">The source info.</param>
            <returns>The converted metrics.</returns>
        </member>
        <member name="P:net.windward.api.csharp.ImportMetrics.Type">
            <summary>
            The type of imported file.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ImportMetrics.Tag">
            <summary>
            The full import tag that gets this file.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ImportMetrics.Filename">
            <summary>
            The filename of the file imported.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ImportMetrics.Children">
            <summary>
            The child imports of this imported template.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.JsonDataSourceImpl.MODE">
            <summary>
            To define what the string passed in to the constructor is.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.JsonDataSourceImpl.MODE.CONNECTION_STRING">
            <summary>
            It's a full-blown connection string.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.JsonDataSourceImpl.MODE.RAW_TEXT">
            <summary>
            constructor using mode the string is the JSON in the string.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.JsonDataSourceImpl.#ctor(System.String,net.windward.api.csharp.JsonDataSourceImpl.MODE)">
            <summary>
            Create a JsonDataSource using the passed in connection string.
            </summary>
            <param name="jsonConnectionString">Connection string to read the JSON file.</param>
            <param name="mode">The mode for the passed in string.</param>
        </member>
        <member name="M:net.windward.api.csharp.JsonDataSourceImpl.#ctor(System.IO.Stream)">
            <summary>
            Create a JSON data source
            </summary>
            <param name="fileStream">stream of the json file</param>
        </member>
        <member name="M:net.windward.api.csharp.JsonDataSourceImpl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:net.windward.api.csharp.ODataDataSourceImpl">
            <summary>
            Implements the interface to accessing an OData datasource.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ODataDataSourceImpl.#ctor(System.String)">
            <summary>
            Create a DataSourceProvider that uses OData. This will connect to the OData datasource multiple times..
            </summary>
            <param name="connectionString">The connection string for this object.</param>
        </member>
        <member name="T:net.windward.api.csharp.PodUpdate">
            <summary>
            Wrapper for the J# UdtUpdate class.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.PodUpdate.Guid">
            <summary>
            The GUID for this pod.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.PodUpdate.Factory(System.IO.Stream)">
            <summary>
            Builds an array of all Pods in the passed in file.
            </summary>
            <param name="rdlxFile">The UDT file to parse</param>
            <returns>All Pods in the file.</returns>
        </member>
        <member name="M:net.windward.api.csharp.PodUpdate.Convert(System.Collections.Generic.IEnumerable{net.windward.api.csharp.PodUpdate})">
            <summary>
            Convert from Pods to Udts
            </summary>
            <param name="pods">The Pods to convert.</param>
            <returns>The converted UDTs.</returns>
        </member>
        <member name="T:net.windward.api.csharp.PropertyValue">
            <summary>
            Value of a property.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.PropertyValue.StringValue">
            <summary>
            Gets a string value.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.PropertyValue.IntValue">
            <summary>
            Gets an integer value.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.PropertyValue.BoolValue">
            <summary>
            Gets a boolean value.
            A value considered as false if it is a null or empty string or
            a string that equals to one of: false, 0 (zero), off, no.
            Any other value is treated as a true value.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.PropertyValue.IsAllowedAreFlags">
            <summary>
            Allowed values are flags, several can be set as ; delimited.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.PropertyValue.AllowedValues">
            <summary>
            Allowed values for a String enum value. null if not an enum.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.PropertyValue.Min">
            <summary>
            The min value allowed for an int value. Integer.MIN if not set.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.PropertyValue.Max">
            <summary>
            The max value allowed for an int value. Integer.MAX if not set.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.Report">
            <summary>
            This class is the base class that takes a template stream and 0...N DataSoureces (xml and/or ado) and merges them to
            create a report stream. The way to use this is to construct an object that extends this class, set any options, then
            call the process methods.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.engineProcess">
            <summary>
            The underlying ProcessReport this is wrapping.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.Properties">
            <summary>
            As soon as the engine process is created, initialize properties
            with the engine's properties object.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.outNet">
            <summary>
            This is the output Stream passed by the caller. It is null if there is none and then will be set with a
            wrapper the first time GetReport is called.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.outJava">
            <summary>
            This is the output stream we create to pass to the engine. It is null if no stream is passed in.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.Report.RENDER_EXTENT">
            <summary>
            The values for the property RenderExtent. Explicit values must match ProcessReportAPI.RENDER_EXTENT_*.
            </summary>
            [Flags]
        </member>
        <member name="F:net.windward.api.csharp.Report.RENDER_EXTENT.ALL">
            <summary>
            The extent will be the entire document, nothing is cropped.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.RENDER_EXTENT.CROP_MARGINS">
            <summary>
            The margins will be cropped, even if that removes content.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.RENDER_EXTENT.CROP_HEADER_AND_FOOTER">
            <summary>
            The header and footer will not be rendered. This does not crop the header/footer area, use
            RENDER_EXTENT_CROP_MARGINS with this to crop that part out.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.RENDER_EXTENT.CROP_TO_CONTENT">
            <summary>
            The smallest rectangle for each page that does not crop content. Each page can be a different size.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.RENDER_EXTENT.CROP_EVERYTHING">
            <summary>
            Combination of CROP_MARGINS, CROP_HEADER_AND_FOOTER, and CROP_CONTENT. This gets you the tightest possible picture.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.Report.TEMPLATE_TYPE">
            <summary>
            Set the type of the template. If this is not set it will be auto-determined by reading the template file.
            These match ProcessReport.TEMPLATE_TYPE_*
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.TEMPLATE_TYPE.UNKNOWN">
            <summary>Parse file to determine type</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.TEMPLATE_TYPE.DOCX">
            <summary>The Word DOCX format</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.TEMPLATE_TYPE.DOCM">
            <summary>The Word DOCX format with macros</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.TEMPLATE_TYPE.XLSX">
            <summary>The Excel XLSX format</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.TEMPLATE_TYPE.XLSM">
            <summary>The Excel XLSX format with macros</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.TEMPLATE_TYPE.PPTX">
            <summary>The PowerPoint XLSX format</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.TEMPLATE_TYPE.PPTM">
            <summary>The PowerPoint XLSX format</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.TEMPLATE_TYPE.HTML">
            <summary>HTML format.</summary>
        </member>
        <member name="T:net.windward.api.csharp.Report.REPORT_TYPE">
            <summary>
            The format of the final report output.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.REPORT_TYPE.RTF">
            <summary>
            The output report stream will be a TEMPLATE document.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.REPORT_TYPE.PDF">
            <summary>
            The output report stream will be a PDF document.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.REPORT_TYPE.HTML">
            <summary>
            The output report stream will be an HTML document.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.REPORT_TYPE.TXT">
            <summary>
            The output report stream will be an ASCII text document.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.REPORT_TYPE.DOCX">
            <summary>
            The output will be a DOCX document.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.REPORT_TYPE.XLSX">
            <summary>
            The output will be an XLSX document.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.REPORT_TYPE.PPTX">
            <summary>
            The output will be a PPTX document.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.REPORT_TYPE.PRINTER">
            <summary>
            The output will be a PRINTER document.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.Report.CHARSET">
            <summary>
            The charset used in the output where a charset is required.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.CHARSET.DEFAULT">
            <summary>
            Set the charset based on Windward Report's internal rules. For html this is utf-8 (unicode)
            unless it's HTML_1 in which case it's the rtf template language. For txt it's the template's native format.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.CHARSET.UNICODE">
            <summary>
            Set the charset to unicode.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.CHARSET.TEMPLATE">
            <summary>
            Set the charset to the default in the template file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.CHARSET.RTF">
            <summary>
            Set the charset to the default in the template file. This is called RTF because the original product only supported
            rtf files as templates. Please use TEMPLATE instead.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.Report.TAG_STYLE">
            <summary>
            How unprocessed tags are written out. These match ProcessReport.TAG_STYLE_*
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.TAG_STYLE.TEXT">
            <summary>
            Written out as a text tag.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.TAG_STYLE.FIELD">
            <summary>
            Written out as a field (Word), macro (Excel), or hyperlink (PowerPoint).
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.TAG_STYLE.FIELD_2007">
            <summary>
            Written out as FIELD, bitmap (Open XML), or chart (Open XML).
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.TAG_STYLE.CONTROL_2007">
            <summary>
            Written out as a Control (Word), bitmap (Open XML), or chart (Open XML). DO NOT USE!
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.Report.COPY_METADATA">
            <summary>
            Get/set if the Windward metadata will be copied to the generated report. These values match the const ints in the java engine.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.COPY_METADATA.NEVER">
            <summary>Never copy the windward metadata to the output report.</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.COPY_METADATA.IF_NO_DATASOURCE">
            <summary>Copy the windward metadata to the output report if no datasources were applied to the report. This is the default.</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.COPY_METADATA.ALWAYS">
            <summary>Always copy the windward metadata to the output report.</summary>
        </member>
        <member name="T:net.windward.api.csharp.Report.HYPHENATION">
            <summary>
            Get/set if hyphenation is on in the engine. These values match the const ints in the java engine.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.HYPHENATION.OFF">
            <summary>Do not hyphenate.</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.HYPHENATION.TEMPLATE">
            <summary>Hyphenate if the template has auto-hyphenate on. This is the default.</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.HYPHENATION.ON">
            <summary>Hyphenate.</summary>
        </member>
        <member name="T:net.windward.api.csharp.Report.DATA_MODE">
            <summary>
            The settings for the DataMode. 0 means none. These map to ProcessReportApi.DATA_MODE_* so keep the values matched.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.DATA_MODE.DATA">
            <summary>Data file will include the data from each tag.</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.DATA_MODE.SELECT">
            <summary>Data file will include the select for each tag as an attribute.</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.DATA_MODE.ALL_ATTRIBUTES">
            <summary>Data file will include all tag attributes (including select) as an attribute.</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.DATA_MODE.INCLUDE_BITMAPS">
            <summary>Data file will include the contents of any imported bitmap. The bitmap will be uuencoded.</summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.DATA_MODE.EMBED">
            <summary>The data file will be embedded in the generated report.</summary>
        </member>
        <member name="T:net.windward.api.csharp.Report.ERROR_HANDLING">
            <summary>
            The settings for the TrackErrors property.
            These map to ProcessReportApi.ERROR_HANDLING_ values.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.ERROR_HANDLING.NONE">
            <summary>
            The bitmask that turns the complete error handling functionality off.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.ERROR_HANDLING.TRACK_ERRORS">
            <summary>
            Handle errors as indicated by a tag properties.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.ERROR_HANDLING.VERIFY">
            <summary>
            Perform verification during a report generation.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.ERROR_HANDLING.ONLY">
            <summary>
            Special mode where it does not generate the report, just checks for errors.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.ERROR_HANDLING.ALL">
            <summary>
            The bitmask that turns the complete error handling functionality on.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.Report.MODE_PROCESS_EMBEDDED">
            <summary>
            Used to set the mode for handling embedded objects in the template. This includes non OpenXML output as
            the screenshot of the object can be written to PDF, Printer, etc.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.MODE_PROCESS_EMBEDDED.DROP">
            <summary>
            Drop embedded objects, they are not included in the output.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.MODE_PROCESS_EMBEDDED.COPY">
            <summary>
            Copy embedded objects across as is.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.MODE_PROCESS_EMBEDDED.IF_DATA_APPLIED">
            <summary>
            Process an embedded object applying the parent template datasources and variables. If any tags were processed
            write out the generated object and screenshot.If no tags were processed, copy across the embedded object as is.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.MODE_PROCESS_EMBEDDED.ALWAYS">
            <summary>
            Always process an embedded object and write out the generated object and screenshot, even if no tags were processed.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.MODE_PROCESS_EMBEDDED.KEEP_ORIGINAL_SCREENSHOT">
            <summary>
            Same as IF_DATA_APPLIED but the object is NOT re-rendered for a new screenshot.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.LOCALE_DEFAULT">
            <summary>
            Set the locale based on Windward Report's internal rules. This will set it to the 
            template native format. You can use null instead of this constant.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.LOCALE_SYSTEM">
            <summary>
            Set the locale to the system's default locale. You can use Locale.getDefault() instead of this constant.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.EngineProcess">
            <summary>
            The underlying ProcessReport object.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.License">
            <summary>
            Sets the license key for windward to do for this report. If set this license takes priority of the license key
            from the configuration file or the static Report.ApplyLicenseKey() method.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.Parameters">
             <summary>
             Adds a map that is used for ${variable} substitution. The key values cannot
             have any of the characters ${} in them. When ${key} is found in any tag, it is replaced with the matching value.
             The key and value are not evaluated in any way, it is just a text substitution. This replace occurs before
             any other evaluation of a tag so the value can have ${variable} values that will then be evaluated.
             This call sets the map so calling it a second time replaces the map passed in the first time. The map is copied
             so on return changes to the passed in map will not affect the data source.
            
             You can pass in either DateTime or DateTime objects on the set call. However, when you call get, they will all
             be DateTimeOffset objects (the engine converts att DaleTime objects to DateTimeOffset).
             </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.BaseDirectory">
            <summary>
            The base directory used for relative files in the import tag.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.TemplateDrillDownInfo">
            <summary>
            This is not part of the public API. The base directory used for template files in the drill-down tag.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.ReportType">
            <summary>
            Get the report format of the output stream.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.RenderExtent">
            <summary>
            How the generated report will be cropped. This is not supported by all report types. This is presently only
            supported by ProcessImage and ProcessTxt. Future support will be printer, PostScript, and page-based HTML.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.RenderPages">
            <summary>
            The pages that will be generated. The string is in the form "0, 4, 6-11, 15" The numbers must be increasing with
            no overlap. This is not supported by all report types. Set to null for all pages. Pages are 0-based. This is
            presently only supported by ReportImage. Future support will be printer, PostScript, text, and page-based HTML.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.ReportCharset">
            <summary>
            Html and txt files are generated using a charset (the rest use unicode). Normally html
            files are generated using utf-8 (unicode) except for HTML_1 which uses the native charset.
            Txt files are normally generated using the native charset. The native charset is not the
            .NET native charset, it is the default charset set in the template document. This call
            allows you to force to charset the report is written in. The passed in value is the Windows
            codepage (Western Europe is 1252). This has nothing to do with reading
            in the template, it only affects the charset the output report is written in. The special
            enums CHARSET_* allow you to set this to values other than a specific charset.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.Locale">
            <summary>
            This call set's the locale used in creating a report. If not set, the default is <b>not</b> the system
            locale - it is the locale of the report template. This affects; 1) The output report locale for html and
            rtf reports, 2) The charset used for txt reports, 3) The rules used for soft line breaks (this mostly affects
            Thai), and 4) the locale used for &lt;wr:out&gt;.
            
            The passed in value can be any locale or the values LOCALE_DEFAULT or LOCALE_SYSTEM. LOCALE_DEFAULT will use
            the locale in the report template. LOCALE_DEFAULT will use the system locale.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.Description">
            <summary>
            The description of the document. For Windward Scout reports only, this will be written to the run entry in the database.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.Title">
            <summary>
            The title of the document. In html this will set both the TITLE tag and the title meta-tag.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.Subject">
            <summary>
            The subject of the document. In html this will set the description meta-tag.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.Keywords">
            <summary>
            The keywords of the document. This are delimited by a ','. In html this will set the keywords meta-tag.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.DebugMode">
            <summary>
            Set debug mode on or off. If debug mode is on, common user errors will be written
            to the report rather than throwing an exception.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.NumPages">
            <summary>
            Returns how many pages long a report is. Can only be called after process completes. For html and text reports
            (which by definition are 1 page long) it will return the number of pages it would be if it was a paged report.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.TagStyle">
            <summary>
            The style unprocessed tags are written out as.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.TemplateVersion">
            <summary>
            The version of Windward/AutoTag this template was created for. The default is the latest major version number.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.PreservePodFraming">
            <summary>
            True if UDT framing should be preserved for UDTs in the document. This is only valid for an OpenXML output format.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.TrackImports">
            <summary>
            True if you want to call getImports after processing datasources. Default is false.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.RemoveUnusedFormats">
            <summary>
            True if unused styles, fonts, etc. are not included in the generated report. Default is true.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.Timeout">
            <summary>
            Get/set the number of seconds to timeout generating a report. If the report takes longer than this amount of time,
            it will throw a TimeoutException. A time of 0 means there is no timeout. The default is 0. The count starts
            when you call processSetup but will only throw the exception in processData and processComplete.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.CopyMetadata">
            <summary>
            Get/set if the Windward metadata will be copied to the generated report. This can only occur if the template and generated report are both 
            OpenXML files. The default is IF_NO_DATASOURCE. 
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.Hyphenate">
            <summary>
            Get/set if the generated report will be hyphenated (for PDF output only).
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.UseExternalOutputBuilder">
            <summary>
            Returns true if it will use the external output builder. The external output builder must be loaded and be capable
            of rendering from the template type to the output type, using all properties set in the ProcessReport object.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.OutputBuilderData">
            <summary>
            Data to pass to the output builder. For the embedded Windward builder this is either null or the Office
            Application object.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.DebugHandler">
            <summary>
            The debug handler assigned to this report if debugging.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.DataMode">
            <summary>
            As the report is run, the data for each tag can also be placed in an associated data.xml file. This xml will have a node for each tag 
            and depending on the settings, the node will contain the tag attributes and/or the data extracted from the datasource for that tag.
            
            This data file can be returned to the caller and/or embedded in the generated report. The embed option is only for OpenXML and PDF reports.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.ModeProcessEmbedded">
            <summary>
            What to do processing embedded objects. Writing an embedded object to the generated report can only be done for
            the case of DOCX -> DOCX and XLSX -> XLSX(and in the future, PPTX -> PPTX). But for any other case, the
            screenshot of the object can be written(except TXT and CSV obviously). So these settings are valid for all
            combinations, but implemented in the context of object -> bitmap.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.DataStream">
            <summary>
            The stream to write the data.xml file to.
            
            As the report is run, the data for each tag can also be placed in an associated data.xml file. This xml will have a node for each tag 
            and depending on the settings, the node will contain the tag attributes and/or the data extracted from the datasource for that tag.
            
            You may not set this if the DataMode includes DATA_MODE_EMBED. Setting this has no impact if DataMode == 0.
            
            You can only get the if DataMode != 0. If you did not set DataStream this will return a MemoryStream with the generated data.xml 
            file in UTF-8. You should only call this after calling processComplete.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.DataProcessorVersion">
            <summary>
            Returns version of data processor being used by this report object.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.Version">
            <summary>
            The version of Windward Reports. Version numbers are generally in the form "MAJOR.MINOR.RELEASE" or "MAJOR.MINOR.RELEASE beta".
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.VersionMajor">
            <summary>
            The major version number of Windward Reports. Version numbers are in the form MAJOR.MINOR.RELEASE.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.VersionMinor">
            <summary>
            The minor version number of Windward Reports. Version numbers are in the form MAJOR.MINOR.RELEASE.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.VersionRelease">
            <summary>
            The release version number of Windward Reports. Version numbers are in the form MAJOR.MINOR.RELEASE.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.Report.ApplyLicenseKey(System.String)">
            <summary>
            Set the license key to be used at runtime. Must be called before Report.Init() is called. 
            </summary>
            <param name="key">base-64 license key</param>
        </member>
        <member name="M:net.windward.api.csharp.Report.ReportTypeToExtension(net.windward.api.csharp.Report.REPORT_TYPE)">
            <summary>
            Convert a REPORT_TYPE to the extension for that file type. Does not include the . before the extension. For HTML it
            returns html and for a printer it returns printer. It returns xml for both WordML and SpreadML.
            </summary>
            <param name="type">The report type, such as REPORT_TYPE.DOCX</param>
            <returns>The file extension such as "docx"</returns>
        </member>
        <member name="M:net.windward.api.csharp.Report.ctorOutput(System.IO.Stream)">
            <summary>
            Sets up the output stream and it's java stream wrapper. If it is null, creates a MemoryStream.
            </summary>
            <param name="report">The Stream to write the report to. If null creates MemoryStream.</param>
        </member>
        <member name="M:net.windward.api.csharp.Report.Init">
            <summary>
            Initializes the reporting engine. It is not necessary to call this method as the reporting engine will do
            so if it was not called before generating any reports. It is useful to call this when initializing as this
            method will take several seconds and will write the starup lines to the console. It is safe to call this
            several times as it will just return after the first time it is called.
            </summary>
            <exception cref='T:net.windward.util.LicenseException'>Thrown if the license key check fails. The message will list the license check that failed.</exception>
        </member>
        <member name="P:net.windward.api.csharp.Report.OutputBuilder">
            <summary>
            Set the output builder. Use this method instead of the properties file if you want to provide an object. 
            This must be called after init.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.Report.Shutdown">
            <summary>
            Releases all resources used by Windward Reports. You cannot call Windward Reports after calling this method.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.Report.ProcessSetup">
            <summary>
            Process the template and get the report ready to process data files. This should only be called once for a given
            Report object! This method can only be called by objects create with Report(template) or
            Report(template, report).
            </summary>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
            <exception cref='T:net.windward.tags.TagException'>thrown if there is an unmatched if/while - end. Not thrown in debug mode.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
            <exception cref='T:net.windward.format.TemplateParseException'>thrown if there is a problem parsing the template.</exception>
            <exception cref='T:net.windward.env.DataSourceException'>thrown if there is a problem with the datasource.</exception>
            <exception cref='T:java.io.IOException'>thrown if have problems accessing the xml, template, or report streams</exception>
        </member>
        <member name="M:net.windward.api.csharp.Report.ProcessSetup(net.windward.api.csharp.Report.TEMPLATE_TYPE)">
            <summary>
            Process the template and get the report ready to process data files. This should only be called once for a given
            Report object! This method can only be called by objects create with Report(template) or
            Report(template, report).
            </summary>
            <param name="type">The format of the template file.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
            <exception cref='T:net.windward.tags.TagException'>thrown if there is an unmatched if/while - end. Not thrown in debug mode.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
            <exception cref='T:net.windward.format.TemplateParseException'>thrown if there is a problem parsing the template.</exception>
            <exception cref='T:net.windward.env.DataSourceException'>thrown if there is a problem with the datasource.</exception>
            <exception cref='T:java.io.IOException'>thrown if have problems accessing the xml, template, or report streams</exception>
        </member>
        <member name="M:net.windward.api.csharp.Report.ProcessTemplate(System.String,System.IO.Stream,System.String)">
            <summary>
            Generates a document from the passed in template. All parameters and datasources are read from the template
            and applied to the generation.
            </summary>
            <param name="outputExtension">The output format for the generated document. This is the extension like "pdf".
            Printer is not supported in this call.</param>
            <param name="template">The template to generate.</param>
            <param name="rootFolder">The location of the template. This is needed solely for file based datasources
            and relative paths to imported files. If neither of those are used in this template, this can be null.</param>
            <returns>The generated document.</returns>
        </member>
        <member name="M:net.windward.api.csharp.Report.Factory(System.String,System.IO.Stream)">
            <summary>
            Create a report object based on the passed in extension. This calls Setup() on the created object.
            </summary>
            <param name="outputExtension">The output format for the generated document. This is the extension like "pdf".
            Printer is not supported in this call.</param>
            <param name="template">The template to generate.</param>
            <returns>The requested Report object.</returns>
        </member>
        <member name="M:net.windward.api.csharp.Report.GetMetrics(System.IO.Stream)">
            <summary>
             Returns information about all vars, datasources, and tags referenced in the template. If there is a
             &lt;wr:set var='name' value='3'/&gt; that will not be in this vars list.
            </summary>
            <param name="template">The report template.</param>
            <returns>The information about of all vars, datasources, and tags.</returns>
            <exception cref='T:net.windward.tags.TagException'>thrown if there is an unmatched if/while - end. Not thrown in debug mode.</exception>
            <exception cref='T:java.io.IOException'>thrown if have problems accessing the template stream</exception>
        </member>
        <member name="M:net.windward.api.csharp.Report.GetMetrics(System.IO.Stream,System.Boolean,System.String)">
            <summary>
            Get the metrics embedded in the passed in template.
            </summary>
            <param name="template">The template to scan.</param>
            <param name="ignoreTags">true to not look at tags for needed ${vars}.</param>
            <param name="license">Optionally pass in a license to use for this call.</param>
            <returns>The metrics in the passed in template.</returns>
        </member>
        <member name="M:net.windward.api.csharp.Report.GetTagTree(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Create an XML file of the tags in the template.
            </summary>
            <param name="template">The template to scan.</param>
            <param name="xmlTagTree">Write the xml file to this stream.</param>
            <param name="license">Optionally pass in a license to use.</param>
        </member>
        <member name="M:net.windward.api.csharp.Report.Clean(System.IO.Stream,System.IO.Stream,net.windward.api.csharp.Report.TEMPLATE_TYPE,System.Boolean,net.windward.api.csharp.Report.TAG_STYLE,System.Collections.Generic.IEnumerable{net.windward.api.csharp.Report.CleanDatasource},WindwardInterfaces.net.windward.datasource.DataSourceWrapper.PARAM_MODE,System.Int32)">
            <summary>
            Clean the requested template.
            </summary>
            <param name="template">The input template stream.</param>
            <param name="cleaned">The stream to write the cleaned template to.</param>
            <param name="cleanedType">The template type for the cleaned template.</param>
            <param name="removeUnused">true to remove unused styles, fonts, etc.</param>
            <param name="tagStyle">The style tags are written out as.</param>
            <param name="datasources">The type of each datasource to be cleaned.</param>
            <param name="paramMode">The parameter mode to convert tags to.</param>
            <param name="versionTemplate">The version the template was created under. -1 for unknown.</param>
        </member>
        <member name="M:net.windward.api.csharp.Report.Clean(System.IO.Stream,System.IO.Stream,net.windward.api.csharp.Report.TEMPLATE_TYPE,System.Boolean,net.windward.api.csharp.Report.TAG_STYLE,System.Collections.Generic.IEnumerable{net.windward.api.csharp.Report.CleanDatasource},WindwardInterfaces.net.windward.datasource.DataSourceWrapper.PARAM_MODE,System.Int32,System.Boolean)">
            <summary>
            Clean the requested template.
            </summary>
            <param name="template">The input template stream.</param>
            <param name="cleaned">The stream to write the cleaned template to.</param>
            <param name="cleanedType">The template type for the cleaned template.</param>
            <param name="removeUnused">true to remove unused styles, fonts, etc.</param>
            <param name="tagStyle">The style tags are written out as.</param>
            <param name="datasources">The type of each datasource to be cleaned.</param>
            <param name="paramMode">The parameter mode to convert tags to.</param>
            <param name="versionTemplate">The version the template was created under. -1 for unknown.</param>
            <param name="fixExpressions">Attempt to fix evaluable expressions.</param>
        </member>
        <member name="M:net.windward.api.csharp.Report.Clean(System.IO.Stream,System.IO.Stream,net.windward.api.csharp.Report.TEMPLATE_TYPE,System.Boolean,net.windward.api.csharp.Report.TAG_STYLE,System.Collections.Generic.IEnumerable{net.windward.api.csharp.Report.CleanDatasource},WindwardInterfaces.net.windward.datasource.DataSourceWrapper.PARAM_MODE,System.Int32,System.Boolean,System.String)">
            <summary>
            Clean the requested template.
            </summary>
            <param name="template">The input template stream.</param>
            <param name="cleaned">The stream to write the cleaned template to.</param>
            <param name="cleanedType">The template type for the cleaned template.</param>
            <param name="removeUnused">true to remove unused styles, fonts, etc.</param>
            <param name="tagStyle">The style tags are written out as.</param>
            <param name="datasources">The type of each datasource to be cleaned.</param>
            <param name="paramMode">The parameter mode to convert tags to.</param>
            <param name="versionTemplate">The version the template was created under. -1 for unknown.</param>
            <param name="fixExpressions">Attempt to fix evaluable expressions.</param>
            <param name="license">The license to use for this operation. If null, use the system license.</param>
        </member>
        <member name="M:net.windward.api.csharp.Report.FindPods">
            <summary>
            Finds Pods Located in this document. You need to call setup and then this method.
            </summary>
            
        </member>
        <member name="M:net.windward.api.csharp.Report.BuildSchema(System.IO.Stream)">
            <summary>
             Create a UDT schema file for this template.
            </summary>
            <param name="schemaFile">The file to write to.</param>
        </member>
        <member name="M:net.windward.api.csharp.Report.CleanSelects(System.Collections.Generic.IEnumerable{net.windward.api.csharp.Report.CleanDatasource},WindwardInterfaces.net.windward.datasource.DataSourceWrapper.PARAM_MODE)">
            <summary>
            This is <b>not</b> part of the official API. This will convert selects to the parameter syntax.
            </summary>
            <param name="datasources">The datasources to convert.</param>
            <param name="mode">The DATASOURCE_PARAM_MODE method to convert to.</param>
        </member>
        <member name="M:net.windward.api.csharp.Report.CleanSelects(System.Collections.Generic.IEnumerable{net.windward.api.csharp.Report.CleanDatasource},WindwardInterfaces.net.windward.datasource.DataSourceWrapper.PARAM_MODE,System.Boolean)">
            <summary>
            This is <b>not</b> part of the official API. This will convert selects to the parameter syntax.
            </summary>
            <param name="datasources">The datasources to convert.</param>
            <param name="mode">The DATASOURCE_PARAM_MODE method to convert to.</param>
            <param name="fixExpressions">Attempt to fix evaluable expressions.</param>
        </member>
        <member name="M:net.windward.api.csharp.Report.ProcessData(WindwardInterfaces.net.windward.api.csharp.IReportDataSource,System.String)">
            <summary>
            Process a set of data for the report. This method can be called multiple times - but only once for each datasource.
            This method can only be called by objects create with ProcessReport(template) or ProcessReport(template,
            report).
            Do not pass in buffered streams if you have the option. ProcessReport wraps all streams in buffers, generally
            BufferedReader and BufferedWriter.
            </summary>
            <param name="data">The data that will be placed into the report where there are tags.</param>
            <param name="datasource">The name of the datasource to process. Only tags with this datasource will be processed. A
            value of "" is legitimate and signifies the default datasource.</param>
            <exception cref='T:net.windward.tags.TagException'>thrown if there is an unmatched if/while - end. Not thrown in debug mode.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
            <exception cref='T:net.windward.env.DataSourceException'>thrown if there is a problem with the datasource.</exception>
            <exception cref='T:java.io.IOException'>thrown if have problems accessing the xml, template, or report streams</exception>
        </member>
        <member name="M:net.windward.api.csharp.Report.ProcessData(System.Collections.Generic.IDictionary{System.String,WindwardInterfaces.net.windward.api.csharp.IReportDataSource})">
            <summary>
            Process multiple sets of data for the report. This method can be called multiple times - but only once for each datasource.
            This method can only be called by objects create with ProcessReport(template) or ProcessReport(template,
            report).
            Do not pass in buffered streams if you have the option. ProcessReport wraps all streams in buffers, generally
            BufferedReader and BufferedWriter.
            </summary>
            <param name="dataProviders">The list of data source providers. Each element maps the provider name to its actual implementation
            (an instance of IReportDataSource). The providers is the data that will be placed into the report where there are tags.
            Only tags with these datasources will be processed. A value of "" is legitimate and signifies the default datasource.</param>
            <exception cref='T:net.windward.tags.TagException'>thrown if there is an unmatched if/while - end. Not thrown in debug mode.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
            <exception cref='T:net.windward.env.DataSourceException'>thrown if there is a problem with the datasource.</exception>
            <exception cref='T:java.io.IOException'>thrown if have problems accessing the xml, template, or report streams</exception>
        </member>
        <member name="M:net.windward.api.csharp.Report.BatchSetup(System.Collections.Generic.IDictionary{System.String,WindwardInterfaces.net.windward.api.csharp.IReportDataSource},System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Prepares the object to run batch reports. Call processSetup() before calling this method. Do not call processData()
            or processComplete() after calling this method.After this setup batchNext() can be called repetitively for each
            batched report.
            </summary>
            <param name="dataProviders">All of the datasources to process. key = the name of the datasource, value = the datasource.</param>
            <param name="batchForEach">The text of a forEach tag that is the batch query. The datasource for this tag must be in the
            dataProviders.</param>
            <param name="batchParameters">Parameters that may have ${var} parameters in the value part of the entry. This is returned
            in each iteration with the ${var} values substituted with the string value of that var.The key value is ignored by the engine.</param>
        </member>
        <member name="M:net.windward.api.csharp.Report.BatchNext(System.IO.Stream)">
            <summary>
            Generates the next document in the batch and returns the results of that document. Returns null if no more to run.
            Performs the equivilent of processData(), processComplete() for each generated report.
            </summary>
            <param name="report">The stream to write the generated report to. If null the engine will create a MemoryStream.</param>
            <returns>The generated document and ${var} substitutions in the parameter map.</returns>
        </member>
        <member name="M:net.windward.api.csharp.Report.ProcessComplete">
            <summary>
            Process the final report and create the output. This must be called after processData and before getReport.
            This should only be called once for a given ProcessReport object! This method can only be called by objects
            create with Report(template) or Report(template, report).
            </summary>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
            <exception cref='T:net.windward.tags.TagException'>thrown if there is an unmatched if/while - end. Not thrown in debug mode.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
            <exception cref='T:net.windward.env.DataSourceException'>thrown if there is a problem with the datasource.</exception>
            <exception cref='T:java.io.IOException'>thrown if have problems accessing the xml, template, or report streams</exception>
        </member>
        <member name="P:net.windward.api.csharp.Report.ImportInfo">
            <summary>
            Get all imports in the processed template. This must be called after processData as that is what finds the imports.
            You must set TrackImports = true; before processing for this value to be populated.
            </summary>
            <returns>all imports in the processed template.</returns>
        </member>
        <member name="M:net.windward.api.csharp.Report.Abort">
            <summary>
            Call to abort the report processing. The report will throw a TimeoutException shortly after this is called.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.TrackErrors">
             <summary>
             Turn on/off the error handling functionality.  Call this method on an instance of Report class before
             calling its Process* methods.
            
             The error handling is off by default.
            
             Use values of ERROR_HANDLING enumeration.
             </summary>
        </member>
        <member name="M:net.windward.api.csharp.Report.GetErrorInfo">
             <summary>
             If the error handling is on, call this to obtain information on issues that were encountered during a report
             generation.  A correct time for calling this method is after all needed Process* methods are executed.
            
             Calling the method if the error handling is off or before any Process* methods has no effect and simply returns
             ErrorInfo with an empty list of issues.
             </summary>
             <returns>An instance of ErrorInfo implementation.</returns>
        </member>
        <member name="M:net.windward.api.csharp.Report.GetReport">
            <summary>
            Return the final report. In the case of the ProcessReport(template) constructor, this is gauranteed to be of
            type MemoryStream. If an output stream was passed in on construction, this will return that stream. This can only 
            be called after process() or processData().  For a ReportHtml with split pages enabled, the Pages property should
            be accessed instead.
            </summary>
            <returns>The report as a stream.</returns>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
        </member>
        <member name="M:net.windward.api.csharp.Report.Close">
            <summary>
            Call when you are done with this object, including done with the OutputStream returned by getReport if that
            stream was created by ProcessReport.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.Report.Duplicate(System.IO.Stream)">
            <summary>
            Creates and returns a copy of this object. You may call this before or after calling processData(). You may then
            call processData() on the created object. You must call this after calling processSetup() and before calling
            processComplete().
            While this mostly does a deep copy, it does not do a deep copy of image data.
            </summary>
            <param name="output">The stream to write the report to. If null will create a MemoryStream.</param>
            <returns>A new instance of this object.</returns>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
        </member>
        <member name="M:net.windward.api.csharp.Report.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:net.windward.api.csharp.Report.DrillDownInfo">
            <summary>
            This is <b>not</b> part of the public interface. This provides the properties for the drilldown tag.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.Report.DrillDownInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Create the object. This object is immutable.
            </summary>
            <param name="templateDir">The directory the template file is in.</param>
            <param name="pipeName">The named pipe name. WDDP_DOCX_1234 or similiar.</param>
            <param name="guid">The AutoTag document guid of the template.</param>
        </member>
        <member name="M:net.windward.api.csharp.Report.DrillDownInfo.#ctor(net.windward.xmlreport.ProcessReport.DrillDownTemplate)">
            <summary>
            Create the object. This object is immutable.
            </summary>
            <param name="templateInfo">A DrillDownTemplate to populate this from.</param>
        </member>
        <member name="P:net.windward.api.csharp.Report.DrillDownInfo.TemplateDir">
            <summary>
            The directory the template file is in. This will always have a trailing /.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.DrillDownInfo.PipeName">
            <summary>
            The named pipe name. WDDP_DOCX_1234 or similiar.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.DrillDownInfo.Guid">
            <summary>
            The AutoTag document guid of the template.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.Report.DrillDownInfo.ToDrillDownInfo">
            <summary>
            Converts to the engine class for this info.
            </summary>
            <returns>The DrillDownTemplate equivilent of this class.</returns>
        </member>
        <member name="T:net.windward.api.csharp.Report.BatchReport">
            <summary>
            The result of running a batch report.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.Report.BatchReport.#ctor(System.IO.Stream,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.BatchReport.Report">
            <summary>
            The output stream the report was written to. This is a MemoryStream if created by the engine.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.BatchReport.NumPages">
            <summary>
            The number of pages in this generated report.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.BatchReport.Parameters">
            <summary>
            Parameters that may have ${var} parameters in the value part of the entry. This is returned in each
            iteration with the ${var} values substituted with the string value of that var.The key value is
            ignored by the engine.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.Report.CleanDatasource">
            <summary>
            Pass in the datasources to clean.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.Report.CleanDatasource.DATASOURCE_TYPE">
            <summary>
            What type the datasource is. The int values must match ProcessReport.CleanDatasource.TYPE_*.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.CleanDatasource.DATASOURCE_TYPE.OTHER">
            <summary>
            Datasource is an unknown type.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.CleanDatasource.DATASOURCE_TYPE.SQL">
            <summary>
            Datasource is a SQL database.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.CleanDatasource.DATASOURCE_TYPE.XML">
            <summary>
            Datasource is an XML file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.CleanDatasource.DATASOURCE_TYPE.JSON">
            <summary>
            Datasource is a JSON file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.CleanDatasource.DATASOURCE_TYPE.ODATA">
            <summary>
            Datasource is an OData datasource.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.Report.CleanDatasource.DATASOURCE_TYPE.SALESFORCE">
            <summary>
            Datasource is a Salesforce datasource.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.Report.CleanDatasource.#ctor(net.windward.api.csharp.Report.CleanDatasource.DATASOURCE_TYPE,System.String,System.Boolean)">
            <summary>
            Create the object.
            </summary>
            <param name="type">What type of datasource.</param>
            <param name="name">The name of the datasource.</param>
            <param name="removeQuotes">true if '${var}' should be converted to ${var}.</param>
        </member>
        <member name="P:net.windward.api.csharp.Report.CleanDatasource.Type">
            <summary>
            What type of datasource.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.CleanDatasource.Name">
            <summary>
            The name of the datasource.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.Report.CleanDatasource.RemoveQuotes">
            <summary>
            true if '${var}' should be converted to ${var}.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportCsv">
            <summary>
            This class is the main program that takes a template stream and a datasource and
            merges them to create a CSV report stream. This output format only reads tables in the template. All other parts of the template are ignored.
            The way to use this is to construct a ReportCsv object, set any options, then call process.
            The calling method must close all streams after calling process. process will flush the
            output (report) stream before returning.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportCsv.proc">
            <summary>
            The underlying process.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportCsv.#ctor(System.IO.Stream)">
            <summary>
            Create a ReportCsv object with the passed in template. The report will be in the CSV format.
            </summary>
            <param name="template">The report template.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportCsv.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Create a ReportCsv object with the passed in template, writing it to the passed in report stream.
            The report will be in the CSV format.
            </summary>
            <param name="template">The report template.</param>
            <param name="report">The stream to write the report to.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportCsv.Duplicate(System.IO.Stream)">
            <summary>
            Creates and returns a copy of this object. You may call this before or after calling processData(). You may then
            call processData() on the created object. You must call this after calling processSetup() and before calling
            processComplete().
            While this mostly does a deep copy, it does not do a deep copy of image data.
            </summary>
            <param name="output">The stream to write the report to. If null will create a MemoryStream.</param>
            <returns>A new instance of this object.</returns>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
        </member>
        <member name="P:net.windward.api.csharp.ReportCsv.TrimWhitespace">
            <summary>
            If cells should have whitespace trimmed from beginning and end. The default is false.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportCsv.CellSeparator">
            <summary>
            The character used to seperate cells. The default is a ,
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportCsv.QuoteChar">
            <summary>
            The character used to quote a cell. The default is "
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportCsv.Newline">
            <summary>
            The string used to create a newline. The default is \r\n
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportDocx">
            <summary>
            This class is the main program that takes a template stream and a datasource and
            merges them to create a DOCX report stream. The way to use this is to construct a
            ReportDocx object, set any options, then call process.
            The calling method must close all streams after calling process. process will flush the
            output (report) stream before returning.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportDocx.proc">
            <summary>
            The underlying process.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportDocx.#ctor(System.IO.Stream)">
            <summary>
            Create a ReportDocx object with the passed in template. The report will be in the DOCX format.
            </summary>
            <param name="template">The report template.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportDocx.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Create a ReportDocx object with the passed in template, writing it to the passed in report stream.
            The report will be in the DOCX format.
            </summary>
            <param name="template">The report template.</param>
            <param name="report">The stream to write the report to.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportDocx.Duplicate(System.IO.Stream)">
            <summary>
            Creates and returns a copy of this object. You may call this before or after calling processData(). You may then
            call processData() on the created object. You must call this after calling processSetup() and before calling
            processComplete().
            While this mostly does a deep copy, it does not do a deep copy of image data.
            </summary>
            <param name="output">The stream to write the report to. If null will create a MemoryStream.</param>
            <returns>A new instance of this object.</returns>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
        </member>
        <member name="T:net.windward.api.csharp.ReportHtml">
            <summary>
            This class is the main program that takes a template stream and a datasource and
            merges them to create a html report stream. The way to use this is to construct a
            ReportHtml object, set any options, then call process.
            The calling method must close all streams after calling process. process will flush the
            output (report) stream before returning.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportHtml.proc">
            <summary>
            The underlying process.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportHtml.BROWSER">
            <summary>
            Specifies the browser to build the html for.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportHtml.BROWSER.HTML">
            <summary>
            Create a HTML file that conforms to html 2.0. This provides only very basic html tags.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportHtml.BROWSER.HTML4">
            <summary>
            Create a HTML file that conforms to html 4.1. This provides full tag usage without any
            browser specific tags.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportHtml.BROWSER.NETSCAPE">
            <summary>
            The browser is Netscape/Mozilla/Firefox.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportHtml.BROWSER.IE">
            <summary>
            The browser is Internet Explorer.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportHtml.BROWSER.OP5">
            <summary>
            The browser is Opera.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportHtml.BROWSER.DHTML">
            <summary>
            Create a HTML file that conforms to the DHTML spec.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportHtml.BROWSER.XHTML">
            <summary>
            Create a HTML file that conforms to the XHTML spec.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportHtml.CSS">
            <summary>
            Specifies how the css information is attached to the html file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportHtml.CSS.NO">
            <summary>
            No css. For browsers that don't support css.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportHtml.CSS.INCLUDE">
            <summary>
            Put the css contents in the output (html) file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportHtml.CSS.SEPARATE">
            <summary>
            Put the css contents in the css stream.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportHtml.CSS.EXISTS">
            <summary>
            Assume they have the css file already. Don't need to rebuild it.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportHtml.#ctor(System.IO.Stream)">
            <summary>
            Create a ReportHtml object with the passed in template. The report will be in the html format.
            </summary>
            <param name="template">The report template.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportHtml.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Create a ReportHtml object with the passed in template, writing it to the passed in report stream.
            The report will be in the html format.
            </summary>
            <param name="template">The report template.</param>
            <param name="report">The stream to write the report to.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportHtml.Duplicate(System.IO.Stream)">
            <summary>
            Creates and returns a copy of this object. You may call this before or after calling processData(). You may then
            call processData() on the created object. You must call this after calling processSetup() and before calling
            processComplete().
            While this mostly does a deep copy, it does not do a deep copy  image data.
            </summary>
            <param name="output">The stream to write the report to. If null will create a MemoryStream.</param>
            <returns>A new instance of this object.</returns>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
        </member>
        <member name="P:net.windward.api.csharp.ReportHtml.FullFile">
            <summary>
            The report can be generated as either a complete html file, or as just the body.
            If it is set to full file, the report will have everything from &lt;html&gt; to &lt;/html&gt;.
            If not set, it will be a body, and can be included with additional html as just
            part of the body of a final html file. In this case the returned stream must be
            placed inside a &lt;body&gt;...&lt;/body&gt;. Default is true.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportHtml.Spec">
            <summary>
            Sets the spec that the produced report must run under. The produced report will
            not use any html tags that are not supported by the set spec. Default is HTML_4_1.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportHtml.CssType">
            <summary>
            If the css information will be written to a separate file, as part of the html file,
            or skipped (because the file already exists). Default is CSS.NO.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportHtml.CssFilename">
            <summary>
            The css filename. Null if there is no separate css file.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportHtml.EmbedImages">
            <summary>
            When set to true, tells the engine to embed all images in the HTML file
            instead of using separate image files; more information found on
            Wikipedia: http://en.wikipedia.org/wiki/Data_URI_scheme
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportHtml.SplitPages">
            <summary>
            When set to true, tells the engine to split HTML output into multiple
            documents, one for each page of the document.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportHtml.SplitPagesStatic">
            <summary>
            Gets html.split_pages property from properties file; SplitPages
            property should be used instead, this method is a static method
            intended for use before a ReportHtml object is instantiated.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportHtml.CssStream">
            <summary>
            The css stream. Null if not CSS.SEPARATE.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportHtml.Bitmaps">
            <summary>
            Get the bitmap names/data for the bitmaps in a report. This method can only be called
            after processing a report. This will have an entry for every bitmap in the template. However,
            if Windward Reports is naming the files and/or creating the data then images that
            are not needed in the final report will have a filename of "" and an data size of 0.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportHtml.Pages">
            <summary>
            Get an array of pages where each page is represented by a byte array (for easy file output)
            This only returns the array if the html.split_pages property is enabled, otherwise it returns null.
            This can only be called after processing a report.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportHtml.AddImageName(System.String)">
            <summary>
            Set a single image name. If there are no images, this is it. If there are already
            images, this adds this name to the end of the list. This method can only be called
            before processing a report.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:net.windward.api.csharp.ReportHtml.SetImagePath(System.String,System.String,System.String)">
            <summary>
            Set a path that all images will be saved to. All images will be written to the disk as
            they are read from the template. If this is called, you may not also call addImageName.
            You can however after processing call getImageNames and the filenames will be in there
            (but not the streams).
            The path can be just a series of folders like "c:/dir1/dir2/" or it can include the
            begining of the filename like "c:/dir1/dir2/tmp". The first will create the file
            "c:/dir1/dir2/00001.jpg" while the second will create the file "c:/dir1/dir2/tmp00001.jpg".
            Note: file and prefix should not end with a /
            Note: as Windward Reports has no idea when the created file is no longer needed, it will
            not delete any files created.
            Note: The path seperator can be / or \.
            </summary>
            <param name="path">The path of the file on the disk relative to the default directory of your program.</param>
            <param name="html">The path of the file relative to the default directory of the client browser.</param>
            <param name="prefix">The prefix to use when creating the filename. This can be null.</param>
        </member>
        <member name="T:net.windward.api.csharp.ReportImage">
            <summary>
            This class is the main program that takes a template stream and a datasource and
            merges them to create a Image report stream. The way to use this is to construct a
            ReportImage object, set any options, then call process.
            The calling method must close all streams after calling process. process will flush the
            output (report) stream before returning.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportImage.FORMAT">
            <summary>
            Specify the file format for generated report.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportImage.FORMAT.BMP">
            <summary>BMP bitmap format.</summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportImage.FORMAT.EPS">
            <summary>Encapsulated PostScript vector format.</summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportImage.FORMAT.GIF">
            <summary>GIF bitmap format.</summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportImage.FORMAT.JPG">
            <summary>JPEG bitmap format.</summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportImage.FORMAT.PNG">
            <summary>PNG bitmap format.</summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportImage.FORMAT.SVG">
            <summary>SVG vector format.</summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportImage.FORMAT.TIF">
            <summary>TIFF bitmap format.</summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportImage.proc">
            <summary>
            The underlying process.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportImage.#ctor(System.IO.Stream,net.windward.api.csharp.ReportImage.FORMAT,System.Int32)">
              <summary>
             Create a ProcessImage object with the passed in template. Objects created with this constructor must call
              processSetup, processData, and processComplete.Objects created with this constructor cannot call process.
              The report will be in the requested bitmap format.
            
              Use this constructor for raster (need DPI) formats.
              </summary>
              <param name="template">The report template</param>
             <param name="imageFormat">The bitmap format for the pages. One of the BITMAP_* enums.</param>
             <param name="dpi">The Dots Per Inch to render the bitmaps at.</param>
        </member>
        <member name="M:net.windward.api.csharp.ReportImage.#ctor(System.IO.Stream,net.windward.api.csharp.ReportImage.FORMAT)">
              <summary>
             Create a ProcessImage object with the passed in template. Objects created with this constructor must call
              processSetup, processData, and processComplete.Objects created with this constructor cannot call process.
              The report will be in the requested bitmap format.
            
              Use this constructor for vector (no DPI) formats.
              </summary>
              <param name="template">The report template</param>
             <param name="imageFormat">The bitmap format for the pages. RENDER_EPS or RENDER_SVG.</param>
        </member>
        <member name="M:net.windward.api.csharp.ReportImage.Duplicate(System.IO.Stream)">
            <summary>
            Unsupported for images as this writes an array of page objects, not a single output stream.
            </summary>
            <param name="output">The stream to write the report to</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="P:net.windward.api.csharp.ReportImage.ImageFormat">
            <summary>
            The bitmap format for the pages.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportImage.Dpi">
            <summary>
            The Dots Per Inch to render the bitmaps at. Ignored for SVG.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportImage.Pages">
            <summary>
            Get the generated images, each page is a distinct bitmap or XML (SVG). These are bit images of the file.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportOpenXml">
            <summary>
            This is a base class for all of the OpenXML template types.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportOpenXml.IsCopyDrawings">
            <summary>
            true if drawings are to be copied to output. Drawings are only copied for DOCX -> DOCX and XLSX -> XLSX. Default is true.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportOpenXml.IsCopyShapes">
            <summary>
            true if shapes are to be copied to output. Shapes are only copied for DOCX -> DOCX and XLSX -> XLSX. Default is true.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportOpenXml.IsChartsAsCharts">
            <summary>
            true if chart tags that are in the template as a chart, will be rendered as charts in the generated report. If * false, then charts 
            will be generated as bitmaps. This setting is only for chart tags that are stored in the template as a chart. It is only relevant 
            for output to OpenXML formats.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportOpenXml.IsRecalculateOnOpen">
            <summary>
            true if the document is to perform recalculation when first opened.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportPdf">
            <summary>
            This class is the main program that takes a template stream and a datasource and
            merges them to create a pdf report stream. The way to use this is to construct a
            ReportPdf object, set any options, then call process.
            The calling method must close all streams after calling process. process will flush the
            output (report) stream before returning.
            
            If you wish to sign a pdf file using a Verisign certificate, please go to
            http://itextpdf.sourceforge.net/howtosign.html
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPdf.proc">
            <summary>
            The underlying process.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportPdf.FONT">
            <summary>
            Set how fonts are to be used in the pdf file. The defaule it EMBED.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.FONT.INTERNAL">
            <summary>
            Will only use the Acrobat internal fonts which are Helvetica (Arial), Times-Roman,
            Courier, Symbol, and Zapfdingbats. All fonts will be mapped to one of these five fonts.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.FONT.NO_EMBED">
            <summary>
            Will use the font specified in the template but will not embed the font itself in
            the pdf file. This adds very little to the size of the final file. However, if Acrobat
            cannot create a font for the filename specified, it will not display the final file.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.FONT.EMBEDED">
            <summary>
            Will use the font specified in the template and will embed the font in the final
            pdf file. This will provide the most accurate final pdf file and all fonts can be rendered.
            However, it makes the final file a lot larger. (This is the default.)
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportPdf.COMP">
            <summary>
            How to compress the pdf file. The default is FAST.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.COMP.NONE">
            <summary>
            No compression. Fine for small files and where bandwidth is not an issue and
            processing time is.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.COMP.FAST">
            <summary>
            Fast compression. Will perform any compression that reduces the final
            file size significantly and does not take that much processing time. This provides a
            good balance between processing time and file size.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.COMP.MAX">
            <summary>
            Maximum compression. Will compress everything with the best compression algorithm
            for each block. This will take significant processing time but will produce the smallest
            final file. Best for situations where bandwidth is a major issue.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportPdf.ALLOW">
            <summary>
            The PDF file permissions. The default is to allow everything.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.ALLOW.ASSEMBLY">
            <summary>
            Allow assembly of the pdf report.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.ALLOW.COPY">
            <summary>
            Allow copy (cut &amp; paste) of the pdf report.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.ALLOW.DEGRADED_PRINTING">
            <summary>
            Allow degraded printing of the pdf report.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.ALLOW.FILL_IN">
            <summary>
            Allow fill-in of the pdf report.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.ALLOW.MOD_ANNOTATIONS">
            <summary>
            Allow modifications of annotations in the pdf report.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.ALLOW.MOD_CONTENTS">
            <summary>
            Allow modification of contents in the pdf report.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.ALLOW.PRINTING">
            <summary>
            Allow printing the pdf report.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.ALLOW.SCREEN_READERS">
            <summary>
            Allow screen capture of the pdf report.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.ReportPdf.ALLOW.ALL">
            <summary>
            Allow everything. This is the default.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportPdf.#ctor(System.IO.Stream)">
            <summary>
            Create a ReportPdf object with the passed in template. The report will be in the pdf format.
            </summary>
            <param name="template">The report template.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportPdf.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Create a ReportPdf object with the passed in template, writing it to the passed in report stream.
            The report will be in the pdf format.
            </summary>
            <param name="template">The report template.</param>
            <param name="report">The stream to write the report to.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportPdf.Duplicate(System.IO.Stream)">
            <summary>
            Creates and returns a copy of this object. You may call this before or after calling processData(). You may then
            call processData() on the created object. You must call this after calling processSetup() and before calling
            processComplete().
            While this mostly does a deep copy, it does not do a deep copy of image data.
            </summary>
            <param name="output">The stream to write the report to. If null will create a MemoryStream.</param>
            <returns>A new instance of this object.</returns>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
        </member>
        <member name="P:net.windward.api.csharp.ReportPdf.FontLevel">
            <summary>
            Set the font level. Basically a higher font level means a more accurate final pdf
            file - but also a large one.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPdf.CompressionLevel">
            <summary>
            Set the compression level. Basically a higher compression level means a smaller final pdf
            file - but also a longer processing time.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPdf.Security">
            <summary>
            Set the security for the created pdf report.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPdf.OwnerPassword">
            <summary>
            Set the owner password for the report. Set to "" for no password. If this is not set and 
            UserPassword or Security are set - then a random OwnerPassword will be created.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPdf.UserPassword">
            <summary>
            Set the user password for the report. Set to "" for no password.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPdf.KeyLength">
            <summary>
            Set the password key length. Must be set to 40 or 128.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPdf.PdfA">
            <summary>
            true if build a PDF/A-1b file. This will force all fonts to be embedded.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportPostScript">
            <summary>
            This class is the main program that takes a template stream and a datasource and
            merges them to create a PostScript report stream. The way to use this is to construct a
            ReportPostScript object, set any options, then call process.
            The calling method must close all streams after calling process. process will flush the
            output (report) stream before returning.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPostScript.proc">
            <summary>
            The underlying process.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportPostScript.#ctor(System.IO.Stream)">
             <summary>
            Create a ProcessPostScript object with the passed in template. Objects created with this constructor must call
             processSetup, processData, and processComplete.Objects created with this constructor cannot call process.
             The report will be in the PostScript format.
             </summary>
             <param name="template">The report template</param>
        </member>
        <member name="M:net.windward.api.csharp.ReportPostScript.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Create a ProcessPostScript object with the passed in template. Objects created with this constructor must call
            processSetup, processData, and processComplete.Objects created with this constructor cannot call process.
            The report will be in the PostScript format. 
            </summary>
            <param name="template">The report template</param>
            <param name="report">The stream to write the report to</param>
        </member>
        <member name="M:net.windward.api.csharp.ReportPostScript.#ctor(net.windward.xmlreport.ProcessPostScript,System.IO.Stream)">
            <summary>
            Creates and returns a copy of this object. You may call this before or after calling processData(). You may then
            call processData() on the created object. You must call this after calling processSetup() and before calling
            processComplete().
            While this mostly does a deep copy, it does not do a deep copy of image data.
            This will always return a ProcessTxt object.
            </summary>
            <param name="src">The process report to copy</param>
            <param name="report">The stream to write the report to</param>
        </member>
        <member name="M:net.windward.api.csharp.ReportPostScript.Duplicate(System.IO.Stream)">
            <summary>
            Creates and returns a copy of this object. You may call this before or after calling processData(). You may then
            call processData() on the created object. You must call this after calling processSetup() and before calling
            processComplete().
            While this mostly does a deep copy, it does not do a deep copy of image data.
            </summary>
            <param name="output">The stream to write the report to</param>
            <returns></returns>
        </member>
        <member name="T:net.windward.api.csharp.ReportPptx">
            <summary>
            This class is the main program that takes a word, excel, or powerpoint template stream and a datasource and
            merges them to create a PPTX report stream. The way to use this is to construct a
            ReportPptx object, set any options, then call process.
            The calling method must close all streams after calling process. process will flush the
            output (report) stream before returning.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPptx.proc">
            <summary>
            The underlying process.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportPptx.#ctor(System.IO.Stream)">
            <summary>
            Create a ReportPptx object with the passed in template. The report will be in the PPTX format.
            </summary>
            <param name="template">The report template, as a word, excel, or powerpoint document.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportPptx.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Create a ReportPptx object with the passed in template, writing it to the passed in report stream.
            The report will be in the PPTX format.
            </summary>
            <param name="template">The report template, as a word, excel, or powerpoint document.</param>
            <param name="report">The stream to write the report to.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportPptx.Duplicate(System.IO.Stream)">
            <summary>
            Creates and returns a copy of this object. You may call this before or after calling processData(). You may then
            call processData() on the created object. You must call this after calling processSetup() and before calling
            processComplete().
            While this mostly does a deep copy, it does not do a deep copy of image data.
            </summary>
            <param name="output">The stream to write the report to. If null will create a MemoryStream.</param>
            <returns>A new instance of this object.</returns>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
        </member>
        <member name="T:net.windward.api.csharp.ReportPrinter">
            <summary>
            Process object for a printer report.
            Contains properties for controlling the process and configuring various settings.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportPrinter.#ctor(System.IO.Stream,System.String)">
            <summary>
            Creates a new ReportPrinter object using the specified template and printer.
            The printer name is usually in the form \\server\printer.
            </summary>
            <param name="template">the template</param>
            <param name="printer">the printer name</param>
        </member>
        <member name="M:net.windward.api.csharp.ReportPrinter.Duplicate(System.IO.Stream)">
            <summary>
            Not supported for printer reports.
            </summary>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="P:net.windward.api.csharp.ReportPrinter.Printer">
            <summary>
            Gets or sets the name of the printer. The printer name is usually in the form \\server\name.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPrinter.FirstPagePrinter">
            <summary>
            Gets or sets the first-page printer.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPrinter.Tray">
            <summary>
            Gets or sets the tray.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPrinter.FirstPageTray">
            <summary>
            Gets or sets the first-page tray.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPrinter.Configuration">
            <summary>
            Gets the printer configuration.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportPrinter.JobName">
            <summary>
            Get or set the name of the print job.  This is an arbitrary name which is passed on to the print job spooler.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportProperties">
            <summary>
            Collection of Windward properties.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportProperties.#ctor(net.windward.xmlreport.ReportProperties)">
            <summary>
            Not a public API! Do not use!
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportProperties.Get(System.String)">
            <summary>
            Gets a property by its name.
            
            Look up for a property in order:
            - an explicit value set per report (current)
            - configuration file
            - default value
            The first value found is returned.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportProperties.Item(System.String)">
            <summary>
            Get a property by it's name.
            </summary>
            <param name="key">The name of the property.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:net.windward.api.csharp.ReportProperties.GetString(System.String)">
            <summary>
            Get a property by it's name as a String.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:net.windward.api.csharp.ReportProperties.GetInt(System.String)">
            <summary>
            Get a property by it's name as an int.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:net.windward.api.csharp.ReportProperties.GetChar(System.String)">
            <summary>
            Get a property by it's name as a char.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:net.windward.api.csharp.ReportProperties.GetBoolean(System.String)">
            <summary>
            Get a property by it's name as a boolean.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:net.windward.api.csharp.ReportProperties.Set(System.String,System.String)">
            <summary>
            Sets a value for the given property. This becomes the current value, overriding whatever was set before.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportProperties.Set(System.String,System.Int32)">
            <summary>
            Sets a value for the given property. This becomes the current value, overriding whatever was set before.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportProperties.Set(System.String,System.Boolean)">
            <summary>
            Sets a value for the given property. This becomes the current value, overriding whatever was set before.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportProperties.Set(System.String,System.Char)">
            <summary>
            Sets a value for the given property. This becomes the current value, overriding whatever was set before.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportProperties.IsSet(System.String)">
            <summary>
            Tests if a property was set, either explicitly or via the properties file.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportRtf">
            <summary>
            This class is the main program that takes a template stream and a datasource and
            merges them to create a rtf report stream. The way to use this is to construct a
            ReportRtf object, set any options, then call process.
            The calling method must close all streams after calling process. process will flush the
            output (report) stream before returning.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportRtf.proc">
            <summary>
            The underlying process.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportRtf.#ctor(System.IO.Stream)">
            <summary>
            Create a ReportRtf object with the passed in template. The report will be in the rtf format.
            </summary>
            <param name="template">The report template.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportRtf.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Create a ReportRtf object with the passed in template, writing it to the passed in report stream.
            The report will be in the rtf format.
            </summary>
            <param name="template">The report template.</param>
            <param name="report">The stream to write the report to.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportRtf.Duplicate(System.IO.Stream)">
            <summary>
            Creates and returns a copy of this object. You may call this before or after calling processData(). You may then
            call processData() on the created object. You must call this after calling processSetup() and before calling
            processComplete().
            While this mostly does a deep copy, it does not do a deep copy of image data.
            </summary>
            <param name="output">The stream to write the report to. If null will create a MemoryStream.</param>
            <returns>A new instance of this object.</returns>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
        </member>
        <member name="P:net.windward.api.csharp.ReportRtf.CopyAllTags">
            <summary>
            Set copy unknown tags mode on or off. If the copy mode is on, all rtf tags that are
            understood but not processed will be copied to the report. This will not copy tags
            that are not understood (or that are understood but cannot be copied stand-alone).
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportRtf.ExtraPict">
            <summary>
            Get if writes each image twice. The second time is the image that WordPad uses. Turning this on makes files a
            lot bigger. It is STRONGLY recomended that you do not set this to true as it makes files with images a LOT bigger.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportText">
            <summary>
            This class is the main program that takes a template stream and a datasource and
            merges them to create a text report stream. The way to use this is to construct a
            ReportText object, set any options, then call process.
            The calling method must close all streams after calling process. process will flush the
            output (report) stream before returning.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportText.proc">
            <summary>
            The underlying process.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportText.#ctor(System.IO.Stream)">
            <summary>
            Create a ReportText object with the passed in template. The report will be in the text format.
            </summary>
            <param name="template">The report template.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportText.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Create a ReportText object with the passed in template, writing it to the passed in report stream.
            The report will be in the text format.
            </summary>
            <param name="template">The report template.</param>
            <param name="report">The stream to write the report to.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportText.Duplicate(System.IO.Stream)">
            <summary>
            Creates and returns a copy of this object. You may call this before or after calling processData(). You may then
            call processData() on the created object. You must call this after calling processSetup() and before calling
            processComplete().
            While this mostly does a deep copy, it does not do a deep copy of image data.
            </summary>
            <param name="output">The stream to write the report to. If null will create a MemoryStream.</param>
            <returns>A new instance of this object.</returns>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
        </member>
        <member name="P:net.windward.api.csharp.ReportText.UseSoftEoln">
            <summary>
            If true, then then soft line breaks will be inserted and paragraphs will wrap to the next line. If false then
            all paragraphs will be placed on a single line of output. The default is true.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportText.ShowHeaders">
            <summary>
            Returns true if the header and footers are printed in the report. False and they will not be printed.
            The default is false.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportText.BreakPage">
            <summary>
            Returns true if a Ctrl-L is in the report for each page break. The default is false.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportText.FontName">
            <summary>
            The font used when formatting txt output. The default is Courier New.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportText.FontSize">
            <summary>
            Get the font size used when formatting txt output. This is set in TWIPS or 20ths of a point. So a value of
            240 (the default) is 12 points.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.ReportXlsx">
            <summary>
            This class is the main program that takes a template stream and a datasource and
            merges them to create a XLSX report stream. The way to use this is to construct a
            ReportXlsx object, set any options, then call process.
            The calling method must close all streams after calling process. process will flush the
            output (report) stream before returning.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.ReportXlsx.proc">
            <summary>
            The underlying process.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.ReportXlsx.#ctor(System.IO.Stream)">
            <summary>
            Create a ReportXlsx object with the passed in template. The report will be in the XLSX format.
            </summary>
            <param name="template">The report template.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportXlsx.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Create a ReportXlsx object with the passed in template, writing it to the passed in report stream.
            The report will be in the XLSX format.
            </summary>
            <param name="template">The report template.</param>
            <param name="report">The stream to write the report to.</param>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
        </member>
        <member name="M:net.windward.api.csharp.ReportXlsx.Duplicate(System.IO.Stream)">
            <summary>
            Creates and returns a copy of this object. You may call this before or after calling processData(). You may then
            call processData() on the created object. You must call this after calling processSetup() and before calling
            processComplete().
            While this mostly does a deep copy, it does not do a deep copy of image data.
            </summary>
            <param name="output">The stream to write the report to. If null will create a MemoryStream.</param>
            <returns>A new instance of this object.</returns>
            <exception cref='T:net.windward.util.LicenseException'>thrown if called too often for the license type.</exception>
            <exception cref='T:net.windward.xmlreport.AlreadyProcessedException'>thrown if call process multiple times on an object.</exception>
        </member>
        <member name="M:net.windward.api.csharp.SaxonDataSourceImpl.#ctor(System.String,System.String)">
            <summary>
            Create a SaxonDataSource using the passed in connection string.
            </summary>
            <param name="xmlConnectionString">Connection string to read the XML file.</param>
            <param name="schemaConnectionString">Connection string to read the schema file. Pass null if none.</param>
        </member>
        <member name="M:net.windward.api.csharp.SaxonDataSourceImpl.#ctor(System.IO.Stream)">
            <summary>
            Takes in xml stream data and creates an xml datasource with xpath 2.0
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:net.windward.api.csharp.SaxonDataSourceImpl.#ctor(System.String)">
            <summary>
            Creates an xpath 2.0 datasource
            </summary>
            <param name="xmlStr">The xml data as a string (not a location)</param>
        </member>
        <member name="M:net.windward.api.csharp.SaxonDataSourceImpl.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Creates an xpath 2.0 datasource with a schema
            </summary>
            <param name="xml"></param>
            <param name="schema"></param>
        </member>
        <member name="M:net.windward.api.csharp.SaxonDataSourceImpl.GetEncoding(System.IO.Stream)">
            <summary>
            Determines a text file's encoding by analyzing the xml header.
            </summary>
            <param name="filename">The text file to analyze.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:net.windward.api.csharp.SaxonDataSourceImpl.#ctor(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates an xpath 2.0 datasource
            </summary>
            <param name="nav"></param>
        </member>
        <member name="T:net.windward.api.csharp.SFDataSourceImpl">
            <summary>
            Implements the interface to accessing an SFData datasource.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.SFDataSourceImpl.#ctor(WindwardSalesforceDriver.SalesForce.SforceService,System.String,System.String,System.Boolean)">
            <summary>
            Create a DataSourceProvider that uses SFData.
            </summary>
            <param name="binding">The base binding to use for the Salesforce server.</param>
            <param name="username">Salesforce login username.</param>
            <param name="password">Salesforce login password. In this case the security token 
            is part of the password.</param>
            <param name="logoutWhenDone">Set to false if you will be using the same datasource object to run multiple templates.</param>
        </member>
        <member name="M:net.windward.api.csharp.SFDataSourceImpl.#ctor(WindwardSalesforceDriver.SalesForce.SforceService,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a DataSourceProvider that uses SFData.
            </summary>
            <param name="binding">The base binding to use for the Salesforce server.</param>
            <param name="username">Salesforce login username.</param>
            <param name="password">Salesforce login password.</param>
            <param name="securityToken">Salesforce account security token.</param>
            <param name="logoutWhenDone">Set to false if you will be using the same datasource object to run multiple templates.</param>
        </member>
        <member name="M:net.windward.api.csharp.SFDataSourceImpl.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a DataSourceProvider that uses SFData.
            </summary>
            <param name="username">Salesforce login username.</param>
            <param name="password">Salesforce login password.</param>
            <param name="securityToken">Salesforce account security token.</param>
            /// <param name="logoutWhenDone">Set to false if you will be using the same datasource object to run multiple templates.</param>
        </member>
        <member name="M:net.windward.api.csharp.SFDataSourceImpl.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Create a DataSourceProvider that uses SFData.
            </summary>
            <param name="username">Salesforce login username.</param>
            <param name="password">Salesforce login password+securitytoken.</param>
            /// <param name="logoutWhenDone">Set to false if you will be using the same datasource object to run multiple templates.</param>
        </member>
        <member name="M:net.windward.api.csharp.SFDataSourceImpl.#ctor(net.windward.datasource.DataSourceProvider,System.Boolean)">
            <summary>
            Copy constructor. Does not copy the user variables or queries.
            </summary>
            <param name="toCopy">Data source to copy. Does not copy </param>
            <param name="logoutWhenDone">Set to false if you will be using the same datasource object to run multiple templates.</param>
        </member>
        <member name="M:net.windward.api.csharp.SFDataSourceImpl.#ctor(System.String,System.String)">
            <summary>
            Create a DataSourceProvider that uses SFData
            </summary>
            <param name="soapApiEndpoint">Enterprise endpoint used when logged in for future api requests</param>
            <param name="accessToken">Access token recieved from oauth</param>
        </member>
        <member name="P:net.windward.api.csharp.SFDataSourceImpl.IsSupported">
            <summary>
            Returns true if Salesforce driver is supported. If false, then calling any constructors will throw an exception.
            This is only supported on .Net Framework.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.TemplateMetrics">
            <summary>
            Information about a template.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.TemplateMetrics.#ctor(net.windward.xmlreport.TemplateInfo)">
            <summary>
            Create the object from a TemplateInfo object.
            </summary>
            <param name="info">The metrics for the template.</param>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.TemplateType">
            <summary>
             The format of the template.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.RootPath">
            <summary>
            The root path applied to this datasource. Can be null.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.Datasources">
            <summary>
            All datasources that must be processed for this template.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.Tags">
            <summary>
            All tags that are defined in the template. Organized into three arrays as such:
            The first array contains all of the tags in the document body.
            The second array cointans all of the tags found in the header and footer.
            The third and final array contains all of the tags found in the footnotes.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.Vars">
            <summary>
            All vars that must be defined by a caller in the template.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.PodGuids">
            <summary>
            The POD guids in the template.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.TemplateVariables">
            <summary>
            All of the template variables defined in the metadata.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.DataSourceProfiles">
            <summary>
            All the datasources in the template's metadata. The properties are the set of name/value pairs that define the
            datasource. All include name, root-path, full-type, and windows-identity or username and password. XML includes
            url and schema. SQL includes provider-class and connection-string or server and database. There are additional
            properties for various cases (such as ODBC which has a provider).
            Many properties (like name) can have no value and then will not be in the returned Dictionary.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.BatchForEach">
            <summary>
            The forEach tag (text form) for batch runs. null if no query.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.AutoTagData">
            <summary>
            The autotag data for this template. null if there is none. Warning, this schema can change between versions
            and use of this property is not supported.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.AutotagVersion">
            <summary>
            The version of the metadata. null if no metadata.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.AutotagXml">
            <summary>
            The template metadata as an XML file. null if there is none. Warning, this schema can change between versions
            and use of this property is not supported.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.TemplateMetrics.DataSourceProfile">
            <summary>
            Information stored in the template for a datasource.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.DataSourceProfile.Name">
            <summary>
            The name of the datasource. Will be the empty string for an unnamed datasource.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.DataSourceProfile.VendorType">
            <summary>
            The AutoTag defined datasource type.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.DataSourceProfile.Properties">
            <summary>
            All the properties set for this datasource.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.DataSourceProfile.Datasets">
            <summary>
            The datasets in this datasource. Can be size 0 (no datasets).
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.TemplateMetrics.DataSourceProfile.GetReportDataSource(System.String)">
            <summary>
            Creates a datasource object from the info in this
            </summary>
            <param name="rootFolder">The location of the template. This is needed solely for file based datasources
            with a relative path to the data file. If not needed, this can be null.</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateMetrics.DataSourceProfile.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{net.windward.api.csharp.TemplateMetrics.DataSourceProfile.DataSetProfile})">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="T:net.windward.api.csharp.TemplateMetrics.DataSourceProfile.DataSetProfile">
            <summary>
            A dataset in a datasource.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.DataSourceProfile.DataSetProfile.Name">
            <summary>
            The name of this dataset.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.DataSourceProfile.DataSetProfile.Select">
            <summary>
            The select of this dataset.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateMetrics.DataSourceProfile.DataSetProfile.Properties">
            <summary>
            All the properties for this dataset.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.TemplateMetrics.DataSourceProfile.DataSetProfile.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="T:net.windward.api.csharp.TemplateVariable">
            <summary>
            A var in a template that must be defined before running it.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.TemplateVariable.VAR_TYPE">
            <summary>
            What type of variable this data is
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.VAR_TYPE.BOOLEAN">
            <summary>
            It's a boolean. Default value will be false.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.VAR_TYPE.CURRENCY">
            <summary>
            It's a currency as in $1,234.56. Default value will be a decimal.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.VAR_TYPE.DATE">
            <summary>
            It's a date. No time component. Default value will be a DateTime.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.VAR_TYPE.INTEGER">
            <summary>
            It's an integer - no decimal point. Default value will be an int16/32/64.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.VAR_TYPE.FLOAT">
            <summary>
            It's a real number. Default value will be a float/double.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.VAR_TYPE.SELECT">
            <summary>
            Uses a select to get all allowed values. Default value will be an object of one of the other allowed VAR_TYPEs.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.VAR_TYPE.TEXT">
            <summary>
            Any text of any kind. Default value will be a string.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.VAR_TYPE.AUTO_SELECT">
            <summary>
            Uses a select to get all allowed values. Created automatically from metadata element.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.TemplateVariable.CAL_OFFSET">
            <summary>
            What offset from the date run to set the calendar value to. These have set integer values that are identical
            in ScheduleVarItem and in .aspx pages - do not change them.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.CAL_OFFSET.FIXED">
            <summary>
            Use the value saved for the map var.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.CAL_OFFSET.TODAY">
            <summary>
            Set the value to today.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.CAL_OFFSET.START_OF_WEEK">
            <summary>
            Set the value to the first day of the week we are on. This uses the culture of the server that runs the event.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.CAL_OFFSET.START_OF_MONTH">
            <summary>
            Set the value to the first day of the month we are on. This uses the culture of the server that runs the event.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.CAL_OFFSET.START_OF_QUARTER">
            <summary>
            Set the value to the first day of the quarter we are on. This uses the culture of the server that runs the event.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariable.CAL_OFFSET.START_OF_YEAR">
            <summary>
            Set the value to the first day of the year we are on. This uses the culture of the server that runs the event.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.ConvertToVarType(System.Data.DbType)">
            <summary>
            Convert a DbType to the matching VAR_TYPE
            </summary>
            <param name="type">DbType to convert.</param>
            <returns>Equivalent VAR_TYPE.</returns>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.#ctor(System.String,System.String,System.Boolean,net.windward.api.csharp.TemplateVariable.VAR_TYPE,System.Object,net.windward.api.csharp.TemplateVariable.CAL_OFFSET,System.String)">
            <summary>
            Create a non-SELECT object.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="udtGuid">The guid (can be null) for this if a UDT.</param>
            <param name="required">true if this variable must be set.</param>
            <param name="varType">What type of data this variable is.</param>
            <param name="defValue">The default value for this var. Can be null.</param>
            <param name="calOffset">For a default date, the calendar offset.</param>
            <param name="description">The description of this variable. This is optional.</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,net.windward.api.csharp.TemplateVariable.VAR_TYPE,System.Object,System.String,System.String,System.String,System.String)">
            <summary>
            Create a SELECT object.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="udtGuid">The guid (can be null) for this if a UDT.</param>
            <param name="required">true if this variable must be set.</param>
            <param name="allowAll">Can return all values for this select variable.</param>
            <param name="allowList">Can return a list of values for this select variable.</param>select
            <param name="allowFilter">Can return a filtered result for this select variable.</param>
            <param name="allowSort">Can return a sorted result for this select variable.</param>
            <param name="varType">What type of data this variable is. This should be SELECT.</param>
            <param name="defValue">The default value for this var. Can be null.</param>
            <param name="description">The description of this variable. This is optional.</param>
            <param name="datasource">The name of the datasource for the select.</param>
            <param name="select">The select for this var if a select var.</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.#ctor(System.String,System.String,System.Boolean,net.windward.api.csharp.TemplateVariable.VAR_TYPE,System.Collections.Generic.IEnumerable{net.windward.api.csharp.TemplateVariableValue},System.Collections.Generic.IEnumerable{net.windward.api.csharp.TemplateVariableValue},net.windward.api.csharp.TemplateVariable.CAL_OFFSET,System.String)">
            <summary>
            Create a non-SELECT object.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="udtGuid">The guid (can be null) for this if a UDT.</param>
            <param name="required">true if this variable must be set.</param>
            <param name="varType">What type of data this variable is.</param>
            <param name="defaultValues">The default value for this var. Can be [0].</param>
            <param name="allowedValues">The default value for this var. Can be [0].</param>
            <param name="calOffset">For a default date, the calendar offset.</param>
            <param name="description">The description of this variable. This is optional.</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,net.windward.api.csharp.TemplateVariable.VAR_TYPE,System.Collections.Generic.IEnumerable{net.windward.api.csharp.TemplateVariableValue},System.Collections.Generic.IEnumerable{net.windward.api.csharp.TemplateVariableValue},System.String,System.String,System.String,System.String)">
            <summary>
            Create a SELECT object.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="udtGuid">The guid (can be null) for this if a UDT.</param>
            <param name="required">true if this variable must be set.</param>
            <param name="allowAll">Can return all values for this select variable.</param>
            <param name="allowList">Can return a list of values for this select variable.</param>
            <param name="allowFilter">Can return a filtered result for this select variable.</param>
            <param name="allowSort">Can return a sorted result for this select variable.</param>
            <param name="varType">What type of data this variable is. This should be SELECT.</param>
            <param name="defaultValues">The default value for this var. Can be [0].</param>
            <param name="allowedValues">The default value for this var. Can be [0].</param>
            <param name="description">The description of this variable. This is optional.</param>
            <param name="datasource">The name of the datasource for the select.</param>
            <param name="select">The select for this var if a select var.</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.#ctor(System.String,net.windward.api.csharp.TemplateVariable)">
            <summary>
            Create a variable object with a new name.
            </summary>
            <param name="name">The new name.</param>
            <param name="src">Everything else is copied from this.</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.#ctor(net.windward.api.csharp.TemplateVariable)">
            <summary>
            Copy constructor. Copies ActiveValue and ActiveSort but no other Active* members.
            </summary>
            <param name="src">The source object to copy from.</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.#ctor(net.windward.xmlreport.TemplateVariable)">
            <summary>
            From Java Constructor
            </summary>
            <param name="src">The java object to convert from</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.ConvertTemplateVariableValue(java.util.List)">
            <summary>
            Converts Java TemplateVariableValue to C# TemplateVariableValue
            </summary>
            <param name="list">Java TemplateVariableValues</param>
            <returns>List of C# TemplateVariableValues </returns>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.IsInherited">
            <summary>
            True if this variable was inherited from a container. You can use this variable but you can't CRUD it.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.Name">
            <summary>
            The name of the variable.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.UdtGuid">
            <summary>
            If this is from a UDT it optionally has the GUID of the UDT item.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.Required">
            <summary>
            true if this variable must be set.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.AllowAll">
            <summary>
            Can return all values for this select variable.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.AllowList">
            <summary>
            Can return a list of values for this select variable.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.AllowFilter">
            <summary>
            Can set a filter for values for this select variable.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.AllowSort">
            <summary>
            Can sort values for this select variable.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.VarType">
            <summary>
            What type of data this variable is.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.DefaultValues">
            <summary>
            The default values for this var. Can be length 0 (which means no default).
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.AllowedValues">
            <summary>
            The allowed values for this var. Can be length 0 (which means anything is allowed OR the list was too long).
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.CalOffset">
            <summary>
            The date default value can be set to a calendar offset.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.Description">
            <summary>
            The description of this variable. This is optional.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.Datasource">
            <summary>
            The name of the datasource for the select.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.Select">
            <summary>
            The Select for this var if a select var. null if not a select var.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.SelectFormat">
            <summary>
            The Select format for this var if a select var. null if not a select var.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariable.AutoMetadata">
            <summary>
            If this is an auto-select, this is the metadata for the select. For SQL this is [dbo.]table.column using the raw values (no surrounding spaces) and 
            for XML it is the full XPath to that node.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.ToXml(System.Xml.XmlWriter,System.String)">
            <summary>
            Write out the xml for this var.
            </summary>
            <param name="xmlWriter">Write to this XML.</param>
            <param name="nodeName">The parent node name.</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.ToXml(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{net.windward.api.csharp.TemplateVariable})">
            <summary>
            Build the xml for the data stored in the template of all vars.
            </summary>
            <param name="xmlWriter">The XML document being built.</param>
            <param name="vars">The collection of vars to store.</param>
            <returns>The parent element of all the vars.</returns>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.FromXml(System.Xml.XmlElement)">
            <summary>
            Read the xml stored with the template to get all vars.
            </summary>
            <param name="elem">The parent element for this part of the XML.</param>
            <returns>The extracted vars.</returns>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.SingleFromXml(System.Xml.XmlElement)">
            <summary>
            Builds a TemplateVar from xml.
            </summary>
            <param name="nodeVar">The xml containing a var's properties.</param>
            <returns>The created var.</returns>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariable.GetValue(System.String,net.windward.api.csharp.TemplateVariable.VAR_TYPE)">
            <summary>
             Convert a string to the requested object type.
            </summary>
            <param name="defString">The value as a string.</param>
            <param name="defType">The value type.</param>
            <returns></returns>
        </member>
        <member name="T:net.windward.api.csharp.TemplateVariableValue">
            <summary>
            A value in the TemplateVar. Used for default and allowed values. Also used for the value of a parameter.
            </summary>
        </member>
        <member name="T:net.windward.api.csharp.TemplateVariableValue.VALUE_REFERENCE">
            <summary>
            What the value is referencing.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariableValue.VALUE_REFERENCE.LITERAL">
            <summary>
            Contains a literal value.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariableValue.VALUE_REFERENCE.PARAM_VALUE">
            <summary>
            Contains the name of a parameter.
            </summary>
        </member>
        <member name="F:net.windward.api.csharp.TemplateVariableValue.VALUE_REFERENCE.SELECT">
            <summary>
            Has a select for both the label (optional) and the value (required).
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariableValue.#ctor(System.String,net.windward.api.csharp.TemplateVariableValue.VALUE_REFERENCE,System.String,System.Object)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="name">The name of this variable.</param>
            <param name="valueReference">What the value is returning.</param>
            <param name="label">The display text for a value.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariableValue.#ctor(net.windward.api.csharp.TemplateVariableValue.VALUE_REFERENCE,System.Object)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="valueReference">What the value is returning.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariableValue.#ctor(net.windward.api.csharp.TemplateVariableValue.VALUE_REFERENCE,System.Object,System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="valueReference">What the value is returning.</param>
            <param name="value">The value.</param>
            <param name="label">The display text for a value.</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariableValue.#ctor(net.windward.api.csharp.TemplateVariableValue)">
            <summary>
            Copy constructor
            </summary>
            <param name="src">Source object.</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariableValue.#ctor(net.windward.xmlreport.TemplateVariableValue)">
            <summary>
            From Java object constructor
            </summary>
            <param name="src">Java Object</param>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariableValue.Name">
            <summary>
            The name of this value.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariableValue.ValueReference">
            <summary>
            What the value is returning.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariableValue.Label">
            <summary>
            The display text for a value.
            </summary>
        </member>
        <member name="P:net.windward.api.csharp.TemplateVariableValue.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariableValue.ToXml(System.Xml.XmlWriter)">
            <summary>
             Write this out in xml to serialize.
            </summary>
            <param name="xmlWriter">The document writing to.</param>
        </member>
        <member name="M:net.windward.api.csharp.TemplateVariableValue.FromXml(System.Xml.XmlElement)">
            <summary>
            Create the object from the passed in xml.
            </summary>
            <param name="element">The info stored in xml.</param>
            <returns>The info object created from the xml.</returns>
        </member>
        <member name="T:net.windward.api.csharp.XmlDataSourceImpl">
            <summary>
            This supplies a data source to Windward Reports using XPathDatasource.<br/>
            
            To reference a data element from a &lt;wr:forEach ... var="item" &gt; or &lt;wr:query ... var="item" &gt; tag inside
            another tag, use the following construct: '${item}/xpath' where xpath is an xpath reference from the node defined by
            item and the reference will return a single element.<br/>
            
            When inside a forEach where step='N' where N &gt; 1, you can also use ${item[1]}/xpath ... ${item[N-1]}/xpath to
            reference data for the N rows in each step. ${item[0]}/xpath is legal but redundent. You can also use &lt;wr:if
            test='$item[1]}'&gt; which will return true if the row[1] exists. Keep in mind that [1], [2], ... is not an absolute
            count but an offset from the base row presently on in the loop. And you cannot index past the set of rows that are
            the row presently on and the rows that will be skipped by step.
            </summary>
        </member>
        <member name="M:net.windward.api.csharp.XmlDataSourceImpl.#ctor(System.String,System.String)">
            <summary>
            Create a SaxonDataSource using the passed in connection string.
            </summary>
            <param name="xmlConnectionString">Connection string to read the XML file.</param>
            <param name="schemaConnectionString">Connection string to read the schema file. Pass null if none.</param>
        </member>
        <member name="M:net.windward.api.csharp.XmlDataSourceImpl.#ctor(System.Xml.XPath.XPathNavigator)">
            <summary>
            Create a DataSourceProvider that uses an XPathNavigator as the data. All other constructors call this constructor.
            </summary>
            <param name="xmlData">xmlData The xml for the data.</param>
        </member>
        <member name="M:net.windward.api.csharp.XmlDataSourceImpl.#ctor(System.Xml.XPath.XPathDocument)">
            <summary>
            Create a DataSourceProvider that uses an XPathDocument as the data source.
            </summary>
            <param name="xmlData">A well formed xml data file.</param>
        </member>
        <member name="M:net.windward.api.csharp.XmlDataSourceImpl.#ctor(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Create a DataSourceProvider that uses an XmlNode DOM as it's datasource. This can be XlmDocument.DocumentElement.
            </summary>
            <param name="xmlData">A well formed xml data file.</param>
            <param name="preserveWhitespace">true if whitespace is to be preserved. This will mean a slightly slower process.</param>
        </member>
        <member name="M:net.windward.api.csharp.XmlDataSourceImpl.#ctor(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Create a datasource provider from the passed in stream.
            </summary>
            <param name="xmlData">A well formed xml data file.</param>
            <param name="xmlSchema">A well formed schema document for the data file.</param>
            <param name="preserveWhitespace">true if whitespace is to be preserved. This will mean a slightly slower process</param>
        </member>
        <member name="M:net.windward.api.csharp.XmlDataSourceImpl.#ctor(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Create a datasource provider from the passed in readers.
            </summary>
            <param name="xmlData">A well formed xml data file.</param>
            <param name="preserveWhitespace">true if whitespace is to be preserved. This will mean a slightly slower process</param>
        </member>
        <member name="M:net.windward.api.csharp.XmlDataSourceImpl.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a DataSourceProvider that uses an xml stream as the data.
            </summary>
            <param name="xmlData">A well formed xml data file.</param>
            <param name="preserveWhitespace">true if whitespace is to be preserved. This will mean a slightly slower process.</param>
        </member>
        <member name="M:net.windward.api.csharp.XmlDataSourceImpl.#ctor(System.String,System.Boolean)">
            <summary>
            Create a DataSourceProvider that uses the passed in String as the xml. This is not a filename, this is
            the actual xml to be queried.
            </summary>
            <param name="xmlData">Well formed xml in a string.</param>
            <param name="preserveWhitespace">true if whitespace is to be preserved. This will mean a slightly slower process.</param>
        </member>
        <member name="M:net.windward.api.csharp.XmlDataSourceImpl.SetNamespaces(System.Collections.Generic.IEnumerable{WindwardReportsDrivers.net.windward.datasource.xml.XPathNamespace})">
            <summary>
            Explicitly set the namespaces for this datasource. This will remove all the default namespaces (if any) and/or
            namespaces previously explicitly set.
            </summary>
            <param name="namespaces">The namespaces for this datasource.</param>
        </member>
        <member name="T:WindwardReportsAPI.net.windward.api.csharp.JoinReports">
            <summary>
            Join multiple reports into a single file.
            </summary>
        </member>
        <member name="M:WindwardReportsAPI.net.windward.api.csharp.JoinReports.JoinPdf(System.Collections.Generic.IEnumerable{net.windward.api.csharp.Report},System.IO.Stream)">
            <summary>
            Join multiple reports into a single generated PDF.
            </summary>
            <param name="reports">The reports to combine. These reports must have had processComplete() called on them. 
            All must be of the type ProcessPdf.  All must not set the output stream (Windward then creates a MemoryStream).</param>
            <param name="pdfReport">The stream to write the compined reports to. This will be a PDF file.</param>
            <returns>The number of pages in the final document.</returns>
        </member>
    </members>
</doc>
