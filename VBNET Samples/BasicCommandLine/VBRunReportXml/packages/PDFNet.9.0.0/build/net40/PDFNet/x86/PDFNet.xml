<?xml version="1.0"?>
<doc>
    <assembly>
        "PDFNet"
    </assembly>
    <members>
        <member name="M:pdftron.PDF.RefreshOptions.SetUseRoundedCorners(System.Boolean)">
            <summary>
Sets the value for UseRoundedCorners in the options object
Whether we should use the corner radii specified in Annot.BorderStyle. Off by default.
</summary>
            <param name="value">value the new value for UseRoundedCorners.</param>
        </member>
        <member name="M:pdftron.PDF.RefreshOptions.GetUseRoundedCorners">
            <summary>
Gets the value UseRoundedCorners from the options object
Whether we should use the corner radii specified in Annot.BorderStyle. Off by default.
</summary>
            <returns>the current value for UseRoundedCorners.</returns>
        </member>
        <member name="M:pdftron.PDF.RefreshOptions.SetUseNonStandardRotation(System.Boolean)">
            <summary>
Sets the value for UseNonStandardRotation in the options object
Whether we should use rotation in the annotation even if it is not a multiple of 90. Off by default.
</summary>
            <param name="value">value the new value for UseNonStandardRotation.</param>
        </member>
        <member name="M:pdftron.PDF.RefreshOptions.GetUseNonStandardRotation">
            <summary>
Gets the value UseNonStandardRotation from the options object
Whether we should use rotation in the annotation even if it is not a multiple of 90. Off by default.
</summary>
            <returns>the current value for UseNonStandardRotation.</returns>
        </member>
        <member name="M:pdftron.PDF.RefreshOptions.SetRefreshExisting(System.Boolean)">
            <summary>
Sets the value for RefreshExisting in the options object
Whether we should refresh annotations with existing appearances. Defaults to false when used in PDFDoc.RefreshAnnotAppearances and true when used in Annot.RefreshAppearance.
</summary>
            <param name="value">value the new value for RefreshExisting.</param>
        </member>
        <member name="M:pdftron.PDF.RefreshOptions.GetRefreshExisting">
            <summary>
Gets the value RefreshExisting from the options object
Whether we should refresh annotations with existing appearances. Defaults to false when used in PDFDoc.RefreshAnnotAppearances and true when used in Annot.RefreshAppearance.
</summary>
            <returns> the current value for RefreshExisting.</returns>
        </member>
        <member name="M:pdftron.PDF.RefreshOptions.SetDrawBackgroundOnly(System.Boolean)">
            <summary>
Sets the value for DrawBackgroundOnly in the options object
If true draw only the background and border, which can be useful when generating the rest of the annotation content elsewhere. Off by default.
</summary>
            <param name="value">the new value for DrawBackgroundOnly.</param>
        </member>
        <member name="M:pdftron.PDF.RefreshOptions.GetDrawBackgroundOnly">
            <summary>
Gets the value DrawBackgroundOnly from the options object
If true draw only the background and border, which can be useful when generating the rest of the annotation content elsewhere. Off by default.
</summary>
            <returns>the current value for DrawBackgroundOnly.</returns>
        </member>
        <member name="M:pdftron.PDF.RefreshOptions.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="M:pdftron.PDF.OCROptions.SetUsePDFPageCoords(System.Boolean)">
            <summary>
Sets the value for UsePDFPageCoords in the options object
Sets origin of the coordinate system for input/output
</summary>
            <param name="value"> If true, sets origin of the coordinate system for input/output to the bottom left corner and reverses the direction of y-coordinate axis from downward to upward, otherwise top left corner is used as the origin and the y-coordinate axis direction is downward</param>
        </member>
        <member name="M:pdftron.PDF.OCROptions.AddDPI(System.Int32)">
            <summary>
Knowing proper image resolution is important, 
as it enables the OCR engine to translate pixel heights of characters to their respective font sizes. 
We do our best to retrieve resolution information from the input's metadata, however it occasionally can be corrupt or missing. 
Hence we allow manual override of source's resolution, which supersedes any metadata found (both explicit as in image metadata and implicit as in PDF).
</summary>
            <param name="dpi">image resolution</param>
        </member>
        <member name="M:pdftron.PDF.OCROptions.AddTextZonesForPage(pdftron.PDF.RectCollection,System.Int32)">
            <summary>
Adds a collection of known text regions for the given page.
This information will be used as a hint to improve OCR quality.
</summary>
            <param name="regions">optional list of known text regions</param>
            <param name="pageNum">the page number the added regions belong to</param>
        </member>
        <member name="M:pdftron.PDF.OCROptions.AddLang(System.String)">
            <summary>
Adds a  to the Langs array
The list of languages
</summary>
            <param name="value">The list of languages</param>
        </member>
        <member name="M:pdftron.PDF.OCROptions.AddIgnoreZonesForPage(pdftron.PDF.RectCollection,System.Int32)">
            <summary>
Adds a collection of ignorable regions for the given page
Optional list of page areas that will be not be processed
</summary>
            <param name="regions">optional list of page areas to be excluded from analysis</param>
            <param name="pageNum">the page number the added regions belong to</param>
        </member>
        <member name="M:pdftron.PDF.OCROptions.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.AddSheets(System.String)">
            <summary>
Adds a  to the Sheets array
The list of sheets to be converted -- only applies to .rvt conversions
</summary>
            <param name="value">The list of sheets to be converted -- only applies to .rvt conversions</param>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.SetRasterDPI(System.Double)">
            <summary>
Sets the value for RasterDPI in the options object
Rasterization dpi used when rendering 3D content. Currently only applies to .rvt conversions
</summary>
            <param name="value">Rasterization dpi used when rendering 3D content. Currently only applies to .rvt conversions</param>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.GetRasterDPI">
            <summary>
Gets the value RasterDPI from the options object
Rasterization dpi used when rendering 3D content. Currently only applies to .rvt conversions
</summary>
            <returns>a double, Rasterization dpi used when rendering 3D content. Currently only applies to .rvt conversions.</returns>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.SetPageWidth(System.Double)">
            <summary>
Sets the value for PageWidth in the options object
The width of the output pdf, in millimeters
</summary>
            <param name="value">The width of the output pdf, in millimeters</param>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.GetPageWidth">
            <summary>
Gets the value PageWidth from the options object
The width of the output pdf, in millimeters
</summary>
            <returns>a double, The width of the output pdf, in millimeters.</returns>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.SetPageHeight(System.Double)">
            <summary>
Sets the value for PageHeight in the options object
The height of the output pdf, in millimeters
</summary>
            <param name="value">The height of the output pdf, in millimeters</param>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.GetPageHeight">
            <summary>
Gets the value PageHeight from the options object
The height of the output pdf, in millimeters
</summary>
            <returns>a double, The height of the output pdf, in millimeters.</returns>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.SetColorMode(System.String)">
            <summary>
Sets the value for ColorMode in the options object
Sets the color palette used by the drawing export. Possible values are Mono (i.e., monochrome) and Gray (i.e., grayscale), otherwise drawing's original palette is used
</summary>
            <param name="value">Sets the color palette used by the drawing export. Possible values are Mono (i.e., monochrome) and Gray (i.e., grayscale), otherwise drawing's original palette is used</param>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.SetBackgroundColor(pdftron.PDF.ColorPt)">
            <summary>
Sets the value for BackgroundColor in the options object
Sets background color for cad conversion (display palette may be adjusted to contrast the chosen background color)
</summary>
            <param name="value">Sets background color for cad conversion (display palette may be adjusted to contrast the chosen background color)</param>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.GetBackgroundColor">
            <summary>
Gets the value BackgroundColor from the options object
Sets background color for cad conversion (display palette may be adjusted to contrast the chosen background color)
</summary>
            <returns>a ColorPt^, Sets background color for cad conversion (display palette may be adjusted to contrast the chosen background color).</returns>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.SetAutoRotate(System.Boolean)">
            <summary>
Sets the value for AutoRotate in the options object
Maps the orientation to the sheet dimensions
</summary>
            <param name="value">Maps the orientation to the sheet dimensions</param>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.GetAutoRotate">
            <summary>
Gets the value AutoRotate from the options object
Maps the orientation to the sheet dimensions
</summary>
            <returns>a bool, Maps the orientation to the sheet dimensions.</returns>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.SetAllowThinLines(System.Boolean)">
            <summary>
Sets the value for AllowThinLines in the options object
Sets drawing line weights to zero
</summary>
            <param name="value">Sets drawing line weights to zero</param>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.GetAllowThinLines">
            <summary>
Gets the value AllowThinLines from the options object
Sets drawing line weights to zero
</summary>
            <returns>a bool, Sets drawing line weights to zero.</returns>
        </member>
        <member name="M:pdftron.PDF.CADConvertOptions.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="M:pdftron.PDF.AdvancedImagingConvertOptions.SetDefaultDPI(System.Double)">
            <summary>
Sets the value for DefaultDPI in the options object
Default dpi used when rendering content when resolution is not provided in the image file. No image pixel data is lost by specifiying this option. Note: In case of DICOM images, we assume that the resolution is specified by Pixel Spacing attribute.
</summary>
            <param name="value">Default dpi used when rendering content when resolution is not provided in the image file. No image pixel data is lost by specifiying this option. Note: In case of DICOM images, we assume that the resolution is specified by Pixel Spacing attribute.</param>
        </member>
        <member name="M:pdftron.PDF.AdvancedImagingConvertOptions.GetDefaultDPI">
            <summary>
Gets the value DefaultDPI from the options object
Default dpi used when rendering content when resolution is not provided in the image file. No image pixel data is lost by specifiying this option. Note: In case of DICOM images, we assume that the resolution is specified by Pixel Spacing attribute.
</summary>
            <returns>a double, Default dpi used when rendering content when resolution is not provided in the image file. No image pixel data is lost by specifiying this option. Note: In case of DICOM images, we assume that the resolution is specified by Pixel Spacing attribute..</returns>
        </member>
        <member name="M:pdftron.PDF.AdvancedImagingConvertOptions.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.SetTemplateParamsJson(System.String)">
            <summary>
Sets the value for TemplateParamsJson in the options object
JSON string representing the data to be merged into a PDFTron office template
</summary>
            <param name="value">JSON string representing the data to be merged into a PDFTron office template</param>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.GetTemplateParamsJson">
            <summary>
Gets the value TemplateParamsJson from the options object
JSON string representing the data to be merged into a PDFTron office template
</summary>
            <returns>a String^, JSON string representing the data to be merged into a PDFTron office template.</returns>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.SetSmartSubstitutionPluginPath(System.String)">
            <summary>
Sets the value for SmartSubstitutionPluginPath in the options object
The path at which the pdftron-provided font resource plugin resides
</summary>
            <param name="value">The path at which the pdftron-provided font resource plugin resides</param>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.GetSmartSubstitutionPluginPath">
            <summary>
Gets the value SmartSubstitutionPluginPath from the options object
The path at which the pdftron-provided font resource plugin resides
</summary>
            <returns>a String^, The path at which the pdftron-provided font resource plugin resides.</returns>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.SetResourceDocPath(System.String)">
            <summary>
Sets the value for ResourceDocPath in the options object
The path at which a .docx resource document resides
</summary>
            <param name="value">The path at which a .docx resource document resides</param>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.GetResourceDocPath">
            <summary>
Gets the value ResourceDocPath from the options object
The path at which a .docx resource document resides
</summary>
            <returns>a String^, The path at which a .docx resource document resides.</returns>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.SetLocale(System.String)">
            <summary>
Sets the value for Locale in the options object
ISO 639-1 code of the current system locale. For example: 'en-US', 'ar-SA', 'de-DE', etc.
</summary>
            <param name="value">ISO 639-1 code of the current system locale. For example: 'en-US', 'ar-SA', 'de-DE', etc.</param>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.GetLocale">
            <summary>
Gets the value Locale from the options object
ISO 639-1 code of the current system locale. For example: 'en-US', 'ar-SA', 'de-DE', etc.
</summary>
            <returns>a String^, ISO 639-1 code of the current system locale. For example: 'en-US', 'ar-SA', 'de-DE', etc..</returns>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.SetLayoutResourcesPluginPath(System.String)">
            <summary>
Sets the value for LayoutResourcesPluginPath in the options object
The path at which the pdftron-provided font resource plugin resides
</summary>
            <param name="value">The path at which the pdftron-provided font resource plugin resides</param>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.GetLayoutResourcesPluginPath">
            <summary>
Gets the value LayoutResourcesPluginPath from the options object
The path at which the pdftron-provided font resource plugin resides
</summary>
            <returns>a String^, The path at which the pdftron-provided font resource plugin resides.</returns>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.SetExcelMaxAllowedCellCount(System.Int32)">
            <summary>
Sets the value for ExcelMaxAllowedCellCount in the options object
Cell border width for table cells that would normally be drawn with no border. In units of points. Can be used to achieve a similar effect to the "show gridlines" display option within Microsoft Excel.
</summary>
            <param name="value">Cell border width for table cells that would normally be drawn with no border. In units of points. Can be used to achieve a similar effect to the "show gridlines" display option within Microsoft Excel.</param>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.GetExcelMaxAllowedCellCount">
            <summary>
Gets the value ExcelMaxAllowedCellCount from the options object
Cell border width for table cells that would normally be drawn with no border. In units of points. Can be used to achieve a similar effect to the "show gridlines" display option within Microsoft Excel.
</summary>
            <returns>a int, Cell border width for table cells that would normally be drawn with no border. In units of points. Can be used to achieve a similar effect to the "show gridlines" display option within Microsoft Excel..</returns>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.SetExcelDefaultCellBorderWidth(System.Double)">
            <summary>
Sets the value for ExcelDefaultCellBorderWidth in the options object
Cell border width for table cells that would normally be drawn with no border. In units of points. Can be used to achieve a similar effect to the "show gridlines" display option within Microsoft Excel.
</summary>
            <param name="value">Cell border width for table cells that would normally be drawn with no border. In units of points. Can be used to achieve a similar effect to the "show gridlines" display option within Microsoft Excel.</param>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.GetExcelDefaultCellBorderWidth">
            <summary>
Gets the value ExcelDefaultCellBorderWidth from the options object
Cell border width for table cells that would normally be drawn with no border. In units of points. Can be used to achieve a similar effect to the "show gridlines" display option within Microsoft Excel.
</summary>
            <returns>a double, Cell border width for table cells that would normally be drawn with no border. In units of points. Can be used to achieve a similar effect to the "show gridlines" display option within Microsoft Excel..</returns>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.SetDisplayChangeTracking(System.Boolean)">
            <summary>
Sets the value for DisplayChangeTracking in the options object
If this option is true, will display office change tracking markup present in the document (i.e, red strikethrough of deleted content and underlining of new content). Otherwise displays the resolved document content, with no markup. Defaults to true.
</summary>
            <param name="value">If this option is true, will display office change tracking markup present in the document (i.e, red strikethrough of deleted content and underlining of new content). Otherwise displays the resolved document content, with no markup. Defaults to true.</param>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.GetDisplayChangeTracking">
            <summary>
Gets the value DisplayChangeTracking from the options object
If this option is true, will display office change tracking markup present in the document (i.e, red strikethrough of deleted content and underlining of new content). Otherwise displays the resolved document content, with no markup. Defaults to true.
</summary>
            <returns>a bool, If this option is true, will display office change tracking markup present in the document (i.e, red strikethrough of deleted content and underlining of new content). Otherwise displays the resolved document content, with no markup. Defaults to true..</returns>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.SetApplyPageBreaksToSheet(System.Boolean)">
            <summary>
Sets the value for ApplyPageBreaksToSheet in the options object
Whether we should split Excel workheets into pages so that the output resembles print output.
</summary>
            <param name="value">Whether we should split Excel workheets into pages so that the output resembles print output.</param>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.GetApplyPageBreaksToSheet">
            <summary>
Gets the value ApplyPageBreaksToSheet from the options object
Whether we should split Excel workheets into pages so that the output resembles print output.
</summary>
            <returns>a bool, Whether we should split Excel workheets into pages so that the output resembles print output..</returns>
        </member>
        <member name="M:pdftron.PDF.OfficeToPDFOptions.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="M:pdftron.PDF.DiffOptions.SetColorB(pdftron.PDF.ColorPt)">
            <summary>
Sets the value for ColorB in the options object
The difference color for the second page
</summary>
            <param name="value">The difference color for the second page</param>
        </member>
        <member name="M:pdftron.PDF.DiffOptions.GetColorB">
            <summary>
Gets the value ColorB from the options object
The difference color for the second page
</summary>
            <returns>a ColorPt^, The difference color for the second page.</returns>
        </member>
        <member name="M:pdftron.PDF.DiffOptions.SetColorA(pdftron.PDF.ColorPt)">
            <summary>
Sets the value for ColorA in the options object
The difference color for the first page.
</summary>
            <param name="value">The difference color for the first page.</param>
        </member>
        <member name="M:pdftron.PDF.DiffOptions.GetColorA">
            <summary>
Gets the value ColorA from the options object
The difference color for the first page.
</summary>
            <returns>a ColorPt^, The difference color for the first page..</returns>
        </member>
        <member name="M:pdftron.PDF.DiffOptions.SetBlendMode(pdftron.PDF.GState.BlendMode)">
            <summary>
Sets the value for BlendMode in the options object
How the two colors should be blended.
</summary>
            <param name="value">How the two colors should be blended.</param>
        </member>
        <member name="M:pdftron.PDF.DiffOptions.GetBlendMode">
            <summary>
Gets the value BlendMode from the options object
How the two colors should be blended.
</summary>
            <returns>a GState::BlendMode, How the two colors should be blended..</returns>
        </member>
        <member name="M:pdftron.PDF.DiffOptions.SetAddGroupAnnots(System.Boolean)">
            <summary>
Sets the value for AddGroupAnnots in the options object
Whether we should add an annot layer indicating the difference regions
</summary>
            <param name="value">Whether we should add an annot layer indicating the difference regions</param>
        </member>
        <member name="M:pdftron.PDF.DiffOptions.GetAddGroupAnnots">
            <summary>
Gets the value AddGroupAnnots from the options object
Whether we should add an annot layer indicating the difference regions
</summary>
            <returns>a bool, Whether we should add an annot layer indicating the difference regions.</returns>
        </member>
        <member name="M:pdftron.PDF.DiffOptions.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="M:pdftron.PDF.WordToPDFOptions.SetSmartSubstitutionPluginPath(System.String)">
            <summary>
Sets the value for SmartSubstitutionPluginPath in the options object
The path at which the pdftron-provided font resource plugin resides
</summary>
            <param name="value">The path at which the pdftron-provided font resource plugin resides</param>
        </member>
        <member name="M:pdftron.PDF.WordToPDFOptions.GetSmartSubstitutionPluginPath">
            <summary>
Gets the value SmartSubstitutionPluginPath from the options object
The path at which the pdftron-provided font resource plugin resides
</summary>
            <returns>a String^, The path at which the pdftron-provided font resource plugin resides.</returns>
        </member>
        <member name="M:pdftron.PDF.WordToPDFOptions.SetResourceDocPath(System.String)">
            <summary>
Sets the value for ResourceDocPath in the options object
The path at which the a .docx resource document resides
</summary>
            <param name="value">The path at which the a .docx resource document resides</param>
        </member>
        <member name="M:pdftron.PDF.WordToPDFOptions.GetResourceDocPath">
            <summary>
Gets the value ResourceDocPath from the options object
The path at which the a .docx resource document resides
</summary>
            <returns>a String^, The path at which the a .docx resource document resides.</returns>
        </member>
        <member name="M:pdftron.PDF.WordToPDFOptions.SetLayoutResourcesPluginPath(System.String)">
            <summary>
Sets the value for LayoutResourcesPluginPath in the options object
The path at which the pdftron-provided font resource plugin resides
</summary>
            <param name="value">The path at which the pdftron-provided font resource plugin resides</param>
        </member>
        <member name="M:pdftron.PDF.WordToPDFOptions.GetLayoutResourcesPluginPath">
            <summary>
Gets the value LayoutResourcesPluginPath from the options object
The path at which the pdftron-provided font resource plugin resides
</summary>
            <returns>a String^, The path at which the pdftron-provided font resource plugin resides.</returns>
        </member>
        <member name="M:pdftron.PDF.WordToPDFOptions.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="M:pdftron.PDF.ConversionOptions.SetFileExtension(System.String)">
            <summary>
Sets the value for FileExtension in the options object
Override file extension used to determine conversion type.
</summary>
            <param name="value">The new value for FileExtension.</param>
            <returns> this object, for call chaining</returns>
        </member>
        <member name="M:pdftron.PDF.ConversionOptions.GetFileExtension">
            <summary>
Gets the value of FileExtension from the options object
Override file extension used to determine conversion type.
</summary>
            <returns>a String^, the current value for FileExtension.</returns>
        </member>
        <member name="M:pdftron.PDF.ConversionOptions.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="M:pdftron.PDF.OptionsBase.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="M:pdftron.PDF.RectCollection.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="M:pdftron.PDF.Details.AnnotManager.RemoveAnnotsFromTilingPage(System.UInt32)">
            <summary>
Removes all annotations from the specified page (UI only, tracking remains intact)
This however does not remove any annotations from the list that is tracked by the annotation manager.
This is to be used only when the page is intended to be added back/redrawn.
</summary>
        </member>
        <member name="M:pdftron.PDF.Details.AnnotTile.SetVisualElement(System.Windows.Controls.Viewbox)">
            <summary>
Changes the visual element associated with this annot tile object
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.AccountForVerticalScrollViewerOut(System.Double)">
            <summary>When the vertical scroll viewer is visible, it displaces the content in a way that PDFViewImpl doesn't expect.
Going through this function accounts for that. This function is used when we need to return a screen point to the user.
</summary>
            <returns>The new value of x adjusted to take account of the scroll viewer.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.AccountForVerticalScrollViewerIn(System.Double)">
            <summary>When the vertical scroll viewer is visible, it displaces the content in a way that PDFViewImpl doesn't expect.
Going through this function accounts for that. This function is used when we need to return a screen point to the user.
</summary>
            <returns>The new value of x adjusted to take account of the scroll viewer.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.AccountForHorizontalScrollViewerOut(System.Double)">
            <summary>When the horizontal scroll viewer is visible, it displaces the content in a way that PDFViewImpl doesn't expect.
Going through this function accounts for that. This function is used when we need to return a screen point to the user.
</summary>
            <returns>The new value of y adjusted to take account of the scroll viewer.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.AccountForHorizontalScrollViewerIn(System.Double)">
            <summary>When the horizontal scroll viewer is visible, it displaces the content in a way that PDFViewImpl doesn't expect.
Going through this function accounts for that. This function is used when we get a screen point from the user.
</summary>
            <returns>The new value of y adjusted to take account of the scroll viewer.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetSnappingMode(System.UInt32)">
            <summary> Set the snapping mode for the SnapToNearestInDoc method. The default is snap to line endpint, midpoints and intersections
</summary>
            <param name="mode_flags">A bitwise combination of modes from the GeometryCollection.SnappingMode enumeration</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetDelayForTilesAfterResize(System.Int32)">
            <summary>Sets the time before new tiles are made visible once the viewer is resized. Will not affect rendering
</summary>
            <param name="milliseconds">The time to wait in milliseconds
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetOCGContext(pdftron.PDF.OCG.Context)">
            <summary>Sets the Optional Content Group (OCG) context that should be used when rendering the page. 
This function can be used to selectively render optional content (such as PDF layers) based on the 
states of optional content groups in the given context.
</summary>
            <param name="ctx">Optional Content Group (OCG) context, or NULL if the rasterizer should render all content on the page.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetViewerCache(pdftron.SDF.SDFDoc,System.UInt32,System.Boolean)">
            <summary> Sets the cache parameters of the page cache on disk (which caches content streams and
		  mipmapped images) for this specific document.  These parameters will override the default cache
		  parameters. Note that if this function is called after the document has been rasterized, it has no
		  effect.
</summary>
            <param name="document">The document whose settings will be modified
</param>
            <param name="max_cache_size">The maximum size, in bytes, of the entire document's page cache. Set to zero to disable the viewer cache.
</param>
            <param name="on_disk">If set to 'true', cache will be stored on the local filesystem. If set to 'false', cache will be stored in heap memory.
</param>
            <remarks> Default Desktop: max_cache_size = 512 MB, on_disk = true | Default Mobile:  max_cache_size = 100 MB, on_disk = false 
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetLinkAt(System.Int32,System.Int32)">
            <summary>Gets the link info at a given point, specified in client space.
</summary>
            <param name="x">the x position in client space
</param>
            <param name="y">the y position in client space
</param>
            <returns>link information or null if no link is found in the queried location.
</returns>
            <remarks>To get valid links, Url extraction must be set to true before setting the document.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetUrlExtraction(System.Boolean)">
            <summary>Enables or disables URL extraction. Default is disabled.
</summary>
            <param name="enabled">true to enable URL extraction, false to disable.
</param>
            <remarks>If set to enabled when the document is already opened, it may not find links on pages that were already rendered. It is suggested to set this flag before opening the document.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.HasSelectionOnPage(System.Int32)">
            <summary>Check whether a given page has any text selection on it.</summary>
            <returns>true if given page number has any text selection on it,
false otherwise.
</returns>
            <param name="page">the given page number
</param>
            <remarks>Useful when there are selections on multiple pages at the same time.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetSelectionEndPage">
            <summary>Gets the last page number that has text selection on it.</summary>
            <returns>the last page number that has text selection on it.
</returns>
            <remarks>Useful when there are selections on multiple pages at the same time.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetSelectionBeginPage">
            <summary>Gets the first page number that has text selection on it.</summary>
            <returns>the first page number that has text selection on it.
Useful when there are selections on multiple pages at the same time.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetSelection(System.Int32)">
            <summary>Gets the current text selection for a given page.</summary>
            <returns>Current text selection for a given page.
If there is only selection on one page, then page number
does not need to be provided.
</returns>
            <param name="page">the page number
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.CopySelectedTextToClipboardAsUnicode">
            <summary>Copys the text current selected text to clipboard as unicode.</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.ClearSelection">
            <summary>Remove any text selection.</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.HasSelection">
            <summary>Checks whether there is a text selection.</summary>
            <returns>return true if there is selection, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SelectAll">
            <summary>Selects all text on the page.</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Select(pdftron.PDF.PDFViewWPF.Selection)">
            <summary>Selects a region according to a PDFViewWPF::Selection object.
</summary>
            <param name="selection">An instance of the Selection class
</param>
            <returns>True if some text was selected, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Select(pdftron.PDF.Highlights!System.Runtime.CompilerServices.IsConst)">
            <summary>Selects texts identified by Highlights.
</summary>
            <returns>true if some text was selected, false otherwise.</returns>
            <param name="highlights">an instance of Highlights class
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Select(System.Boolean,System.Boolean,pdftron.PDF.PDFViewWPF.TextSelectionMode,System.Double,System.Double,System.Double,System.Double)">
            <summary>Selects texts
</summary>
            <returns>true if some text was selected, false otherwise.</returns>
            <param name="select_all">true if select all is on
</param>
            <param name="select_one_line">true if select one line is on
</param>
            <param name="tm">the text selection mode
</param>
            <param name="x1">the x coordinate of the first selection point
</param>
            <param name="y1">the y coordinate of the first selection point
</param>
            <param name="x2">the x coordinate of the second selection point
</param>
            <param name="y2">the y coordinate of the second selection point
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Select(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>Selects texts using structural mode.
</summary>
            <returns>true if some text was selected, false otherwise.</returns>
            <param name="x1">the x coordinate of the first selection point
</param>
            <param name="y1">the y coordinate of the first selection point
</param>
            <param name="page1">the first page number
</param>
            <param name="x2">the x coordinate of the second selection point
</param>
            <param name="y2">the y coordinate of the second selection point
</param>
            <param name="page2">the second page number
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Select(System.Double,System.Double,System.Double,System.Double)">
            <summary>Selects text within the given region using the current text selection mode.
</summary>
            <returns>true if some text was selected, false otherwise.</returns>
            <param name="x1">the x coordinate of the first corner defining the selection rectangle.
</param>
            <param name="y1">the y coordinate of the first corner defining the selection rectangle.
</param>
            <param name="x2">the x coordinate of the opposite corner defining the selection rectangle.
</param>
            <param name="y2">the y coordinate of the opposite corner corner defining the selection rectangle.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetTextSelectionMode(pdftron.PDF.PDFViewWPF.TextSelectionMode)">
            <summary>Sets the selection mode used for text highlighting.</summary>
            <param name="tm">the text selection mode
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetFindTextProgress">
            <summary> Returns the progress of the FindTextAsync
</summary>
            <returns>A number between 0 and 100, indicating the progress</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.CancelFindText">
            <summary> Cancels the current find text job, if there is one.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.FindText(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Selects text by searching for a given string of text.
</summary>
            <param name="str">the text to be found
</param>
            <param name="match_case">specify whether to match case
</param>
            <param name="match_whole_word">specify whether to match the whole word
</param>
            <param name="search_up">specify whether to search from the end towards the begining
</param>
            <param name="reg_exp">specify whether to use regular expression
</param>
            <remarks>This function runs in asynchronous mode: it launches a search thread and returns immediately.
The result of a text search will be raised in the 
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.ExecuteAction(pdftron.PDF.Action)">
            <summary>
Requests action object to be executed by PDFViewCtrl. Action must belong to the document 
currently displayed in PDFViewCtrl.
</summary>
            <param name="action"> object that is to be executed.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.ExecuteAction(pdftron.PDF.ActionParameter)">
            <summary>
Requests action object to be executed by PDFViewCtrl. Action must belong to the document 
currently displayed in PDFViewCtrl.
</summary>
            <param name="action_param"> Action bound with its related information, such as field.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.RefreshAndUpdate(pdftron.PDF.ViewChangeCollection)">
            <summary>
Helper function that will refresh annotation and/or field appearance if needed, and then
render modified page areas, all based on the content of the view_change parameter.
</summary>
            <param name="view_change">contains all the updated fields and rectangles.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetAnnotationAt(System.Double,System.Double)">
            <summary> Gets the annotation at the (x, y) position expressed in screen coordinates.
</summary>
            <param name="x"> x coordinate of the screen point
</param>
            <param name="y"> y coordinate of the screen point
</param>
            <returns>The annotation closest to the point. If no annotation was found, it returns a null pointer. </returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.DragResizeAnnot(pdftron.PDF.Annot,System.UInt32,System.Double,System.Double,System.Double,System.Double)">
            <summary> Moves and resizes the specified annotation, using the given parameters. This method is for UI manipulation only.
Calling this method will not modify the underlying document.
</summary>
            <param name="annot"> The Annot object whose corresponding UI element needs to be manipulated.
</param>
            <param name="pageNumber"> The page number on whuch the annotation is located.
</param>
            <param name="width"> The new width of the annotation.
</param>
            <param name="height"> The new height of the annotation.
</param>
            <param name="deltaX"> The change in the X coordinate of the position of the left edge of the annotation bounding box
The new position is calculated as the sum of the old position and the delta value.
</param>
            <param name="deltaY"> The change in the Y coordinate of the position of the left edge of the annotation bounding box
The new position is calculated as the sum of the old position and the delta value.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetScreenRectForAnnot(pdftron.PDF.Annot,System.Int32)">
            <summary> Return the annotation rect in screen points
</summary>
            <param name="page_num">given page number
</param>
            <param name="annot">annotation object
</param>
            <returns>The annotation rect in screen points
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Activate">
            <summary> Reactivates the PDFViewWPF after a call to Deactivate.
Rendering, FindText, thumbnail requests, etc, will not work until the PDFViewWPF has been reactivated.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Deactivate">
            <summary> This will stop rendering and then remove any content that is not visible on the screen.
Use Activate to reactivate the PDFViewWPF.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.ShowRect(System.Int32,pdftron.PDF.Rect)">
            <summary>Changes the viewing area to fit a rectangle rect on page page_num. Rectangle must be specified in page coordinates. This will adjust current page and zoom appropriately.
</summary>
            <param name="page_num">given page number
</param>
            <param name="rect">rectangle specifies the region to show in view
</param>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SmartZoom(System.Int32,System.Int32)">
            <summary>Sets the zoom factor to a new value using the given pixel coordinate (x,y) to find an intersecting paragraph.
The width of the paragraph helps to determine the zoom value, center of the paragraph is used as a zoom center.
Paragraph has to contain more than one line and be wider than 1/5th of a page width.
When called on a paragraph wider than current zoom level the new zoom level is set to fit the entire page(zoom out). 
</summary>
            <param name="x">the horizontal coordinate to look for a paragraph.
</param>
            <param name="y">the vertical coordinate to look for a paragraph.
</param>
            <returns>true if successful, false if no paragraph intersects the given point.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetZoom(System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>Sets the zoom factor to a new value using the given pixel coordinate (x,y) as a zoom center, which will stay fixed on the screen. 
The zoom point (x,y) is represented in the screen coordinate system, which starts in the upper-left corner of the client window.
Should you want to move (x, y) to the center of the client window, you can use the OnScroll() subsequently:
</summary>
            <param name="x">the horizontal coordinate to zoom in.
</param>
            <param name="y">the vertical coordinate to zoom in.
</param>
            <param name="zoom">new scaling component used to display the page content.
</param>
            <param name="isPartOfChain">If true, this zoom is taken to be part of a chain of zoom actions.
Set this to true if your zoom action is part of a chain of zoom events, such as ctrl + mouse wheel or
a pinch manipulation
</param>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetZoom(System.Int32,System.Int32,System.Double)">
            <summary>Sets the zoom factor to a new value using the given pixel coordinate (x,y) as a zoom center, which will stay fixed on the screen. 
The zoom point (x,y) is represented in the screen coordinate system, which starts in the upper-left corner of the client window.
Should you want to move (x, y) to the center of the client window, you can use the OnScroll() subsequently:
</summary>
            <param name="x">the horizontal coordinate to zoom in.
</param>
            <param name="y">the vertical coordinate to zoom in.
</param>
            <param name="zoom">new scaling component used to display the page content.
</param>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetZoom(System.Double,System.Boolean)">
            <summary>Sets the zoom factor to a new value. The function zooms to a point at the center of the screen.
</summary>
            <param name="zoom"> new scaling component used to display the page content.
</param>
            <param name="isPartOfChain">If true, this zoom is taken to be part of a chain of zoom actions.
Set this to true if your zoom action is part of a chain of zoom events, such as ctrl + mosue wheel or
a pinch manipulation
</param>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetZoom(System.Double)">
            <summary>Sets the zoom factor to a new value. The function zooms to a point at the center of the screen.
</summary>
            <param name="zoom"> new scaling component used to display the page content.
</param>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetZoom">
            <summary>Gets current zoom (or scaling) component used to display the page content.
</summary>
            <returns>current zoom (or scaling) component used to display the page content.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetVerticalAlign(System.Int32)">
            <summary>Sets the vertical alignment used for rendering pages within the view.
</summary>
            <param name="align">an integer specifying the vertical alignment. Depending 
of whether align is positive, negative, or zero - pages will be bottom, 
top or center aligned.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetHorizontalAlign(System.Int32)">
            <summary>Sets the horizontal alignment used for rendering pages within the view.
</summary>
            <param name="align">an integer specifying the horizontal alignment. Depending 
of whether align is positive, negative, or zero - pages will be right, 
left or center aligned. 
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetBackgroundColor(System.Windows.Media.Color)">
            <summary>Sets the default background color used to paint the area surrounding each page.</summary>
            <param name="color">color specifying the default background color
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetDefaultPageColor(System.Windows.Media.Color)">
            <summary>Sets the default 'paper' color used to draw background of each page.</summary>
            <param name="color">color specifying the default page color
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetPageTransparencyGrid(System.Boolean)">
            <summary>Enables or disables the transparency grid (check board pattern) to reflect 
page transparency.</summary>
            <param name="trans_grid_visible">if true, the grid is turned on
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetPageBorderVisibility(System.Boolean)">
            <summary>Enables or disables drawing of a thin border around each page.</summary>
            <param name="border_visible">if true, the border will be visible
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.RotateCounterClockwise">
            <summary>Rotates all pages in the document 90 degrees counter-clockwise.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.RotateClockwise">
            <summary>Rotates all pages in the document 90 degrees clockwise.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetRotation">
            <summary>Gets the current rotation
</summary>
            <returns>the current rotation of this PDFViewWPF
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetRasterizerType(pdftron.PDF.PDFRasterizer.Type)">
            <summary>Sets the core graphics library used for rasterization and rendering. Using this method it is possible to quickly switch between different implementations. By default, PDFNet uses a built-in, high-quality, and platform independent rasterizer.
</summary>
            <param name="type">Rasterizer type.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetThinLineAdjustment(System.Boolean,System.Boolean)">
            <summary>Set thin line adjustment parameters.
</summary>
            <param name="pixel_grid_fit">if true (horizontal/vertical) thin lines will be snapped to 
integer pixel positions. This helps make thin lines look sharper and clearer. This
option is turned off by default and it only works if path hinting is enabled.
</param>
            <param name="stroke_adjust">if true auto stroke adjustment is enabled. Currently, this would 
make lines with sub-pixel width to be one-pixel wide. This option is turned on by default.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetPathHinting(System.Boolean)">
            <summary>Enable or disable path hinting. Path hinting is used to slightly adjust paths in order to avoid or alleviate artifacts of hair line cracks between
   certain graphical elements. This option is turned on by default.
</summary>
            <param name="enable">whether to enable path hinting.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetAntiAliasing(System.Boolean)">
            <summary>Enable or disable anti-aliasing. 
Anti-Aliasing is a technique used to improve the visual quality of images when displaying them on low resolution devices (for example, low DPI computer monitors).			
</summary>
            <param name="enable_aa">whether to enable Anti-aliasing
</param>
            <remarks>Anti-aliasing is enabled by default.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetColorPostProcessMode">
            <returns>the current color post processing mode.</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetColorPostProcessMode(pdftron.PDF.PDFRasterizer.ColorPostProcessMode)">
            <summary>
Draws the page into a given memory buffer.
Set the color post processing transformation.
This transform is applied to the rasterized bitmap as the final step
in the rasterization process, and is applied directly to the resulting
bitmap (disregarding any color space information). Color post
processing only supported for RGBA output.
</summary>
            <param name="mode">mode is the specific transform to be applied.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetOverprint(pdftron.PDF.PDFViewWPF.OverprintPreviewMode)">
            <summary>Enable or disable support for overprint. Overprint is a device dependent feature and the results will vary depending on the output color space and supported colorants (i.e. CMYK, CMYK+spot, RGB, etc). By default overprint is enabled for only PDF/X files.
</summary>
            <param name="op">e_op_on: always enabled; e_op_off: always disabled; e_op_pdfx_on: enabled for PDF/X files only.
</param>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.OverprintPreviewMode.e_op_pdfx_on">
            <summary>overprint is on only for PDF/X files.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.OverprintPreviewMode.e_op_on">
            <summary>overprint is always on.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.OverprintPreviewMode.e_op_off">
            <summary>overprint is always off.</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.OverprintPreviewMode">
Determines if overprint is used.
</member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetGamma(System.Double)">
            <summary>Sets the gamma factor used for anti-aliased rendering.
</summary>
            <param name="exp">exponent value of gamma function. Typical values are in the range from 0.1 to 3.
</param>
            <remarks>Gamma correction can be used to improve the quality of anti-aliased image output and can (to some extent) decrease the appearance common anti-aliasing artifacts (such as pixel width lines between polygons).
Gamma correction is used only in the built-in rasterizer.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetImageSmoothing(System.Boolean)">
            <summary> Enable or disable image smoothing.			
The rasterizer allows a tradeoff between rendering quality and rendering speed.
This function can be used to indicate the preference between rendering speed and quality.image smoothing is enabled by default.
</summary>
            <param name="smoothing_enabled">whether to enable image smoothing
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  image smoothing option has effect only if the source image has higher resolution 
that the output resolution of the image on the rasterized page. PDFNet automatically
controls at what resolution/zoom factor, 'image smoothing' needs to take effect.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetHighlightFields(System.Boolean)">
            <summary>Enable or disable highlighting form fields. Default is disabled.
</summary>
            <param name="highlight_fields">true to highlight, false otherwise. 
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetDrawAnnotations(System.Boolean)">
            <summary>Enable or disable annotation and forms rendering. By default, annotations and forms are rendered.
</summary>
            <param name="render_annots">True to draw annotations, false otherwise.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetRenderedContentCacheSize(System.UInt64)">
            <summary>Sets the suggested memory size of rendered content. 

PDFViewWPF keeps invisible content in order to achieve smoother viewing experience; however, this increases memory usage. 
Based on the memory footprint of your app, you may want to customize it.

Note that this limit refers to the underlying buffers of rendered content, and does not include
space used by the operating system when creating images and maintaining the ScrollViewer

Setting this size to 0 will cause only rendering if directly visible content.
</summary>
            <param name="allowed_max">the allowed heap memory usage in MB (default 96)
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetCaching(System.Boolean)">
            <summary>Enables of disables caching of images, fonts, and other resources. Disabling caching can lower memory requirements at the expense of rendering speed.
</summary>
            <param name="enabled">	if true caching is enabled, if false caching is disabled. by default caching is enabled
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetCurrentPage(System.Int32)">
            <summary>Sets the current page to the given page.
</summary>
            <param name="page_num">new page number
</param>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GotoPreviousPage">
            <summary>Sets the current page to the previous page in the document.
</summary>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GotoNextPage">
            <summary>Sets the current page to the next page in the document.
</summary>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GotoLastPage">
            <summary>Sets the current page to the last page in the document.
</summary>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GotoFirstPage">
            <summary>Sets the current page to the first page in the document.
</summary>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetPageCount">
            <summary>Gets the total number of pages in the document.
</summary>
            <returns>the total number of pages in the document.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetVisiblePages">
            <summary>Gets the pages that are currently visible on the screen
</summary>
            <returns>An array of pages visible on the screen
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetCurrentPage">
            <summary>Gets the current page displayed in the view.
</summary>
            <returns>the current page displayed in the view.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.CanViewerScrollRight">
            <summary> Returns whether or not the viewer can scroll right.
</summary>
            <returns> true if there is space to the right of the view port.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.CanViewerScrollLeft">
            <summary> Returns whether or not the viewer can scroll left.
</summary>
            <returns> true if there is space to the left of the view port.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.CanViewerScrollDown">
            <summary> Returns whether or not the viewer can scroll downward.
</summary>
            <returns> true if there is space below the view port.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.CanViewerScrollUp">
            <summary> Returns whether or not the viewer can scroll upward.
</summary>
            <returns> true if there is space above the view port.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetVScrollPos">
            <summary>Gets the current vertical scroll position in scrollable space.
</summary>
            <returns>Gets the current vertical scroll position.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetHScrollPos">
            <summary>Gets the current horizontal scroll position in scrollable space. 
</summary>
            <returns>the current horizontal scroll position.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetVScrollPos(System.Double)">
            <summary>Sets the vertical scroll position in scrollable space.
</summary>
            <code>
Should you want to center to a location (px, py) expressed in a page space, 
you can use the following code:

	//focus 
	view.SetCurrentPage(page_num);
	view.ConvPagePtToScreenPt(px, py, page_num);
	view.SetZoom((int)px, (int)py, view.GetZoom());

	//center
	int width = view.GetBufferWidth();
	int height = view.GetBufferHeight();
	int dx = (int)(px - (double)width/2 + 0.5);
	int dy = (int)(py - (double)height/2 + 0.5);
	view.OnScroll(dx, dy);
</code>
            <param name="pos">new vertical scroll position.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetHScrollPos(System.Double)">
            <summary>Sets the horizontal scroll position in scrollable space.
</summary>
            <param name="pos">new horizontal scroll position.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetViewHeight">
            <summary>Gets the height of the main view in pixels.
</summary>
            <returns>the height of the main view in pixels.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetViewWidth">
            <summary>Gets the width of the main view in pixels.
</summary>
            <returns>the width of the main view in pixels.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetExtendedCanvasHeight">
            <summary> Gets the height of the Canvas, including gray space.
</summary>
            <returns> the height of the Canvas, including gray space.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetExtendedCanvasWidth">
            <summary>
Gets the width of the Canvas, including gray space.
</summary>
            <returns> the width of the Canvas, including gray space.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetCanvasHeight">
            <summary>Gets the height of the space occupied by pages.
</summary>
            <returns>The height of the space occupied by pages.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetCanvasWidth">
            <summary>Gets the width of the space occupied by pages.
</summary>
            <returns>The width of the space occupied by pages.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetCanvas">
            <summary>Gets a canvas that is hosted in the main scrolling window of the PDFViewWPF
This lets you add shapes or widgets on top of the PDFViewWPF content
</summary>
            <returns>The current active Canvas
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetPageSpacing(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the vertical and horizontal padding and column spacing between adjacent pages in the view.
</summary>
            <param name="horizSpace">horizontal column spacing (represented in pixels) between adjacent pages in the view. Default is 10.
</param>
            <param name="vertSpace">vertical column spacing (represented in pixels) between adjacent pages in the view. Default is 10.
</param>
            <param name="horizPad">horizontal padding (represented in pixels) on the left and right side of the view. Default is 10.
</param>
            <param name="vertPad">vertical padding (represented in pixels) on the top and bottom side of the view. Default is 10.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.IsFinishedRendering">
            <summary>checks if the rendering thread has finished.
</summary>
            <returns>true if the rendering thread has finished, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.CancelRendering">
            <summary>Cancels rendering in progress. If PDFViewCtrl is not busy rendering the page, the function has no side effects.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.RequestRendering">
            <summary>Requests that PDFViewCtrl start rendering, if necessary.
</summary>
            <remarks>
Invalidate() simply causes the window to be repainted at the system level. It
does not make PDFViewWPF to render anything new. RequestRendering() tells PDFViewWPF
to check if there are regions (both visible and invisible) that have not been rendered; if so
a background rendering thread will be started. This function should be called if 
CancelRendering() was called to stop the ongoing rendering thread. Update() tells
PDFViewWPF to discard the rendered content and start a rendering
thread. This function should be used if the content of the PDF is modified.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.ShowAnnotation(pdftron.PDF.Annot)">
            <summary>Enable rendering of a particular annotation. Only has an effect if HideAnnotation() has previously been called on the same annot.
</summary>
            <param name="annot">The annotation object to resume rendering.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.HideAnnotation(pdftron.PDF.Annot)">
            <summary>Disable rendering of a particular annotation. This does not change the annotation itself, just how it is displayed in this viewer instance.
</summary>
            <param name="annot">The annotation object to cease drawing for.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.UpdatePageLayout">
            <summary>Updates the page layout withing the view. This function must be called after document page sequence is modified (such as when a page is being added to or removed from a document) or after changes to page dimensions (e.g. after a page is rotated or resized).
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Update(pdftron.PDF.Field)">
            <summary>Redraws all instances (Widgets) of the field.
</summary>
            <param name="field">he field for which to update all occurances.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Update(pdftron.PDF.Annot,System.Int32)">
            <summary>Redraws the area covered with a given annotation.
</summary>
            <param name="annot">The annotation to update.
</param>
            <param name="pageNum">The page number on which the annotation is located.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Update(pdftron.PDF.Rect)">
            <summary>Redraws the given area in the buffer.
</summary>
            <param name="updateRect">The rectangle to update expressed in screen coordinates.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Update(System.Boolean)">
            <summary>Redraws the contents.
</summary>
            <param name="all">If true, all the rendered contents are discarded and re-rendered; otherwise, 
only the visible region will be re-rendered.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Update">
            <summary>Redraws the contents in the visible region.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.ConvPagePtToScreenPt(System.Double@,System.Double@,System.Int32)">
            <summary>Converts a point in a page space to a point in screen space.
</summary>
            <param name="x">x coordinate of the page point
</param>
            <param name="y">y coordinate of the page point
</param>
            <param name="page_num">the page number for the page used as the origin of the destination coordinate system. Negative values are used to represent the current page. Pages are indexed starting from one.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.ConvScreenPtToPagePt(System.Double@,System.Double@,System.Int32)">
            <summary>Converts a point in screen space to a point in a page space.
</summary>
            <param name="x">x coordinate of the screen point
</param>
            <param name="y">y coordinate of the screen point
</param>
            <param name="page_num">the page number for the page used as the origin of the destination coordinate system. Negative values are used to represent the current page. Pages are indexed starting from one.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.ConvPagePtToCanvasPt(System.Double@,System.Double@,System.Int32)">
            <summary>Converts a point expressed in a page space to a point in canvas space.
</summary>
            <param name="x">x coordinate of the page point
</param>
            <param name="y">y coordinate of the page point
</param>
            <param name="page_num">	the page number for the page used as the origin of the destination coordinate system. Negative values are used to represent the current page. Pages are indexed starting from one.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.ConvCanvasPtToPagePt(System.Double@,System.Double@,System.Int32)">
            <summary>Converts a point expressed in canvas space to a point on a page space.
</summary>
            <param name="x">x coordinate of the canvas point
</param>
            <param name="y">x coordinate of the canvas point
</param>
            <param name="page_num">the page number for the page used as the origin of the destination coordinate system. Negative values are used to represent the current page. Pages are indexed starting from one.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.ConvCanvasPtToScreenPt(System.Double@,System.Double@)">
            <summary>Converts a point expressed in canvas space to a point in sceen space.
</summary>
            <param name="x">x coordinate of canvas point. 
</param>
            <param name="y">x coordinate of canvas point. 
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.ConvScreenPtToCanvasPt(System.Double@,System.Double@)">
            <summary>Converts a point expressed in screen space to a point in canvas space.
</summary>
            <param name="x">x coordinate of screen point. 
</param>
            <param name="y">y coordinate of screen point. 
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetPageNumberFromScreenPt(System.Double,System.Double)">
            <summary>Gets the number of the page given point in space. The positive number indicates a valid page, whereas number less than 1 means that no page was found.
</summary>
            <param name="x">x coordinate under the given screen coordinate
</param>
            <param name="y">y coordinate under the given screen coordinate
</param>
            <returns>the number of the page located under the given screen coordinate
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.CancelAllThumbRequests">
            <summary> Cancels all thumbnail requests initiated by GetThumbAsync(int pageNum).
See GetThumbAsync(int pageNum) for more information.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetThumbAsync(System.Int32)">
            <summary>
This will request a thumbnail for the page given by pageNum. 
When the thumbnail is ready, the OnThumbnailGenerated event will be raised with the finished thumbnail.
If multiple requests are made, the thumbnail requests will be processed starting with the last request.
The exception is that the current thumbnail being rendered will always finish.

It is recommended to cancel all thumbnail requests once they are not needed any more, using PDFViewCtrl.CancelAllThumbRequests();

If caching is enabled, this request will be much faster once the thumb has been rendered once.
You can enable caching by using pdftron.PDFNet.SetViewerCache and pdftron.PDFNet.SetDefaultDiskCachingEnabled(true);
</summary>
            <param name="pageNum">
The page which we want to receive a thumbnail for.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.ClearThumbCache">
            <summary>
Remove all thumbnails from the persistent disk cache.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetupThumbnails(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Double)">
            <summary>
Enables or disables thumbnail view features.
Thumbnail view is used before a PDF page is fully rendered. If runtime
thumb view generation is enabled, PDFViewCtrl generates thumbnail views
at runtime. If a PDF file already contains the thumbnail views, runtime
thumb view generation can be turned off, which is more efficient.

It is recommended that this not be called after SetDoc in order to 
avoid clearing cached thumbnails. Calling this method with different parameters 
will also clear the persistent disk cache if it is in use.


If runtime thumb view generation is enabled, the thumbMaxSideLength
will be used as a reference to calculate the thumbnail resolution.
</summary>
            <param name="use_embedded_thumbs">
Enables or disables using thumbnails embedded in the PDF
document as a preview of the rendered page. This flag is
currently ignored, but functionality may be added to support
embedded thumbnails in the future.
</param>
            <param name="generate_thumbs_at_runtime">
Enables or disables generating thumbnails at runtime.
 Default is enabled.
</param>
            <param name="use_disk_cache">
Enables or disables storing thumbnails in a cache file on disk.
default is enabled.
</param>
            <param name="thumb_max_side_length">
The maximum size, in pixels, of a dimension of generated
 thumbnails.
</param>
            <param name="max_abs_cache_size">
The maximum absolute size, in bytes, the thumbnail cache file may take up
on disk.
</param>
            <param name="max_perc_cache_size">
The maximum percentage of free disk space, in the range 0 - 1.0, the thumbnail
cache file may take up.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.DocTryLock">
            <summary>
Tries to lock the PDFDoc instance used by PDFViewCtrl in non-blocking manner.
</summary>
            <returns>true if the lock was successfully acquired, false otherwise</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.DocTryLock(System.Int32)">
            <summary>
Tries to lock the PDFDoc instance used by PDFViewCtrl in non-blocking manner.
</summary>
            <returns>true if the lock was successfully acquired, false otherwise</returns>
            <param name="milliseconds">
The maximum amount of time in milliseconds to wait for the lock to become available.
The default is 0.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.DocTryLockRead(System.Int32)">
            <summary>
Tries to obtain a read lock for the PDFDoc instance used by PDFViewCtrl
for reading in non-blocking manner.
</summary>
            <returns>true if the lock was successfully acquired, false otherwise</returns>
            <param name="milliseconds">
The maximum amount of time in milliseconds to wait for the lock to become available.
The default is 0.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.DocTryLockRead">
            <summary>
Tries to obtain a read lock for the PDFDoc instance used by PDFViewCtrl
for reading in non-blocking manner.
</summary>
            <returns>true if the lock was successfully acquired, false otherwise</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.DocUnlockRead">
            <summary>
Removes the read lock from the PDFDoc instance used by PDFViewCtrl
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.DocLockRead">
            <summary>
Locks the PDFDoc instance used by PDFViewCtrl to prevent competing write threads 
(using Lock()) from accessing the document at the same time. Other reader threads 
however, will be allowed to access the document.
Threads attempting to obtain write access to the document will wait in 
suspended state until the thread that owns the lock calls doc.UnlockRead().
</summary>
            <remarks>
To avoid deadlocks obtaining a write lock while holding
a read lock is not permitted and will throw an exception. If this situation is encountered
please either unlock the read lock before the write lock is obtained
or acquire a write lock (rather than read lock) in the first place.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.DocUnlock">
            <summary>Unlocks the PDFDoc instance used by PDFViewCtrl and restarts the
rendering thread if it was canceled by calling DocLock.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.DocLock(System.Boolean)">
            <summary> Locks the PDFDoc instance used by PDFViewCtrl.

Simultaneous access to a PDFDoc instance is not allowed. Since
PDFViewCtrl renders a PDFDoc in a rendering thread, UI access to the same
PDFDOc instance should lock the document first and then unlock it with
DocUnlock afterwards.
</summary>
            <param name="cancel_rendering">
If true, rendering thread is canceled first before trying to
lock the document. This ensures a quick return from this
function. Otherwise, this function can halt the UI and the app
may be unresponsive before the rendering thread finishes. If
the rendering thread is canceled, unlocking the document
DocUnlock will restart the rendering thread.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetRightToLeftLanguage(System.Boolean)">
            <summary>Tells PDFViewCtrl the content in the viewed PDF document reads from right to left.
</summary>
            <param name="flag">Set to true for right to left languages.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetProgressiveRenderingInterval(System.Int32)">
            <summary>Sets the interval at which the rendering will be updated
</summary>
            <param name="milliseconds">The time between updates in units milliseconds. Default is 750, or 0.75 seconds.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetProgressiveRendering">
            <summary>Gets whether the control will render progressively or will just draw once the entire view has been rendered.
</summary>
            <returns>true if progressive rendering is enabled, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetProgressiveRendering(System.Boolean)">
            <summary>Sets whether the control will render progressively or will just draw once the entire view has been rendered.
Progressive rendering is useful when a PDF page contain lots of elements 
(e.g. many vector paths, text, or many little images). When progressive rendering 
is enabled PDFNet will use painter algorithm to draw the page. This way user may 
be able to see partially rendered page. If a page contains only a single large 
image, there would be no visible benefit from progressive rendering. 
</summary>
            <param name="progressive">if true the view will be rendered progressively
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetPageViewMode">
            <summary>Gets the current page viewing mode
</summary>
            <returns>the current page viewing mode
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetPageViewMode(pdftron.PDF.PDFViewWPF.PageViewMode)">
            <summary>the new page viewing mode. The default PageView mode is e_fit_width.
</summary>
            <param name="mode">Sets the page viewing mode.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetPageRefViewMode">
            <summary>Gets the reference page view mode. See more details about reference page view mode in SetPageRefViewMode(PageViewMode).
</summary>
            <returns>The current reference page view mode.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetPageRefViewMode(pdftron.PDF.PDFViewWPF.PageViewMode)">
            <summary>Sets the reference page view mode. In a non-continous page presentation mode, the reference page view 
mode is used to determine the page view mode upon a page change event. For example, if the reference page view 
mode is set to e_fit_width, the new page coming in will be displayed with width-fit mode.
</summary>
            <param name="mode">The reference page view mode to set.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetPagePresentationMode">
            <summary>Gets the current page presentation mode.
</summary>
            <returns>the current page presentation mode.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetPagePresentationMode(pdftron.PDF.PDFViewWPF.PagePresentationMode)">
            <summary>Sets the current page presentation mode.
</summary>
            <param name="mode">the new page presentation mode. The default PagePresentationMode is e_single_continuous.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.OpenUniversalDocument(pdftron.PDF.DocumentConversion)">
            <summary>Sets the PDF document to be displayed.
</summary>
            <param name="conversion">A document conversion to open
</param>
            <remarks> This method acquires a write lock on the current document,
so the document must be unlocked when this method is called. </remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.OpenURLAsync(System.String,System.String,System.String,pdftron.PDF.HTTPRequestOptions)">
            <summary> Open a PDF file at the given url. This works best with PDF's that
are linearized, as pages can be downloaded and viewed in random access order,
without the need to download the entire document. A viewing session can also be
persisted across multiple viewing/application sessions to remove redundant downloads 
and improve overall performance by using the optional cache_file parameter.
</summary>
            <param name="url"> the url to open
</param>
            <param name="cache_file"> the cache file to be used. By default a temporary file will 
be created and no caching will occur. Note that if disk caching is disabled this file 
will not be used. Using cache_file can increase overall performance.
</param>
            <param name="password"> The PDF document password to use if the PDF itself
is password protected.
</param>
            <param name="options"> Optional HTTP request options to use with every HTTP request.</param>
            <remarks>Use SetDownloadReportHandler to track the download events.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.OpenURLAsync(System.String,System.String,System.String)">
            <summary> Open a PDF file at the given url. This works best with PDF's that
are linearized, as pages can be downloaded and viewed in random access order,
without the need to download the entire document. A viewing session can also be
persisted across multiple viewing/application sessions to remove redundant downloads 
and improve overall performance by using the optional cache_file parameter.
</summary>
            <param name="url"> the url to open
</param>
            <param name="cache_file"> the cache file to be used. By default a temporary file will 
be created and no caching will occur. Note that if disk caching is disabled this file 
will not be used. Using cache_file can increase overall performance.
</param>
            <param name="password"> The PDF document password to use if the PDF itself
is password protected.
</param>
            <remarks>Use SetDownloadReportHandler to track the download events.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.OpenURLAsync(System.String)">
            <summary> Open a PDF file at the given url. This works best with PDF's that
are linearized, as pages can be downloaded and viewed in random access order,
without the need to download the entire document.
</summary>
            <param name="url"> the url to open
</param>
            <remarks>Use SetDownloadReportHandler to track the download events.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetDownloadReportHandler(pdftron.PDF.PDFViewDownloadDelegate,System.Object)">
            <summary>Sets the download report handling function to be called on download events,
such as when a new page or thumbnail is available, and any download related errors.
</summary>
            <param name="download_proc">Download report handling callback function (or delegate in .NET)
</param>
            <param name="data">Custom data to be passed as a parameter to 'download_proc'.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.CloseDoc">
            <summary>Closes the document currently opened in PDFViewWPF.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.GetDoc">
            <summary>Gets Currently associated document with this PDFViewWPF.
</summary>
            <returns>Currently associated document with this PDFViewWPF.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.SetDoc(pdftron.PDF.PDFDoc)">
            <summary>Associates this PDFViewWPF with a given PDF document.
</summary>
            <param name="doc">A document to be displayed in the view.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.#ctor">
            <summary> default <c>PDFViewWPF</c> constructor
</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.PixelsPerUnitWidth">
            <summary>Gets or sets the number of pixels per unit width or height. This will be used to determine the resolution of the PDFViewWPF
in order to make sure that the PDF document is rasterized at a resolution that corresponds to the device's pixel density, as opposed
to the device-independent size of the PDFViewWPF.

For example, if shape with width 96 covers 120 pixels on the screen, then set this value to 120/96 = 1.25.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.DesiredLinearDeceleration">
            <summary>Gets or sets the rate the linear movement slows in device-independent units (1/96th inch per unit) per squared millisecond.</summary>
        </member>
        <member name="E:pdftron.PDF.PDFViewWPF.OnAction">
            <summary>Occurs when the PDFViewCtrl is about to execute an action.
In order to prevent the viewer from executing the action internally, you can set
ActionEventArgs.Handled to true;
</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.ActionEventArgs.Handled">
            <summary>If set to true, the PDFViewCtrl will not try to execute it internally.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.ActionEventArgs.Action">
            <summary>Gets the Action that is about to be executed</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.ActionEventArgs">
            <summary>Class for Transporting the OnAction event</summary>
        </member>
        <member name="E:pdftron.PDF.PDFViewWPF.OnConversionChanged">
            <summary>Called when an update is available.

Note that the DocumentConversion passed in as a parameter might be ahead of the
PDFViewWPF in terms of how many pages are converted. This event reports how many
pages the PDFViewWPF is currently aware of.
</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.OnConversionEventHandler">
            <summary>Delegate for when the PDFViewWPF is processing a conversion
</summary>
        </member>
        <member name="E:pdftron.PDF.PDFViewWPF.OnThumbnailGenerated">
            <summary>Occurs when a thumbnail that was requested though GetThumbAsync(int pageNum) is ready.
See GetThumbAsync(int pageNum) for more information.
</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.OnThumbnailGeneratedEventHandler">
            <summary>Delegate for when PDFViewWPF has finished rendering a requested thumbnail.
</summary>
            <example>To create a BitmapSource from this event use the following
<code>
PixelFormat fmt = PixelFormats.Bgra32;
BitmapSource bps = BitmapSource.Create(w, h, 96.0, 96.0, fmt, null, thumb, (w * fmt.BitsPerPixel + 7) / 8);
</code></example>
            <param name="pageNumber">page number that this thumbnail is for.
</param>
            <param name="thumb">raw thumbnail image in Bgra32 format.
</param>
            <param name="w">width of the thumbnail.
</param>
            <param name="h">height of the thumbnail.
</param>
        </member>
        <member name="E:pdftron.PDF.PDFViewWPF.OnRenderFinished">
            <summary>Raised when the PDFViewWPF has finished rendering a region of the PDF Document
This does not include progressive rendering.
</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.OnRenderFinishedEventHandler">
            <summary>Delegate for when the PDFViewWPF has finished rendering a region of the PDF Document
</summary>
        </member>
        <member name="E:pdftron.PDF.PDFViewWPF.LayoutChanged">
            <summary>Raised when the layout changes
This event is used to notify any subscriber that the layout has changes, so that they can
adjust their content on the screen to line up with the document. Use this in conjunction with
CurrentZoomChanged to cover all cases where the PDFViewWPF might change appearance.
</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.LayoutChangedHandler">
            <summary>Delegate for when the layout changes
This event is used to notify any subscriber that the layout has changes, so that they can
adjust their content on the screen to line up with the document. Use this in conjunction with
CurrentZoomChanged to cover all cases where the PDFViewWPF might change appearance.
</summary>
        </member>
        <member name="E:pdftron.PDF.PDFViewWPF.OnSetDoc">
            <summary>Raised when the current document is set and ready</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.OnSetdocHandler">
            <summary>Delegate for when a doc is set. Once this even is raised, the doc should be ready for zooming and scrolling</summary>
        </member>
        <member name="E:pdftron.PDF.PDFViewWPF.CurrentScrollChanged">
            <summary>Raised when the current zoom level changes</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.CurrentScrollChangedHandler">
            <summary>Routed event, raised when scroll is changed.</summary>
        </member>
        <member name="E:pdftron.PDF.PDFViewWPF.CurrentZoomChanged">
            <summary>Raised when the current zoom level changes</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.CurrentZoomChangedHandler">
            <summary>Delegate for when the current zoom level changes</summary>
        </member>
        <member name="E:pdftron.PDF.PDFViewWPF.CurrentPageNumberChanged">
            <summary>Raised when the current page changes</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.CurrentPageNumberChangedHandler">
            <summary>Delegate for when the current page changes</summary>
        </member>
        <member name="E:pdftron.PDF.PDFViewWPF.FindTextFinished">
            <summary>Raised when a text search is finished</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.FindTextFinsihedHandler">
            <summary>Delegate for when a text search is finished</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.ConvertedPages">
            <summary>Gets the number of pages that have been converted since starting the conversion with
OpenUniversalDocument </summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.IsConverting">
            <summary>Gets whether or not the PDFViewWPF is currently converting
a document to PDF.
Use the OnConversionChanged event to detect changes to this property </summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.VisualScrollBarWidth">
            <summary>This property is used by the PDFViewWPF to do some internal calculations relating converting between screen and page coordinates.
Set this only if you have changed the implicit style so that the width of a ScrollBar in a ScrollViewer has changed.
Provide the PDFViewWPF with the new value so that calculations are correct.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.VisualScrollBarWidthProperty">
            <summary>This property is used by the PDFViewWPF to do some internal calculations relating converting between screen and page coordinates.
Set this only if you have changed the implicit style so that the width of a ScrollBar in a ScrollViewer has changed.
Provide the PDFViewWPF with the new value so that calculations are correct.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.VerticalScrollBarVisibilityProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.VerticalScrollBarVisibility" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.HorizontalScrollBarVisibilityProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.HorizontalScrollBarVisibility" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.CurrentPageViewModeProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.CurrentPageViewMode" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.CurrentPagePresentationModeProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.CurrentPagePresentationMode" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.ZoomProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.Zoom" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.VerticalScrollPositionProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.VerticalScrollPosition" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.HorizontalScrollPositionProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.HorizontalScrollPosition" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.DefaultPageColorProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.DefaultPageColor" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.GammaFactorExponentProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.GammaFactorExponent" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.UseURLExtractionProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.UseURLExtraction" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.StrokeAdjustThinLines">
            <summary> Gets or sets a boolean value indicating whether the stroke will be adjusted for thin lines.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.StrokeAdjustThinLinesProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.StrokeAdjustThinLines" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.FitThinLinesToPixelGrid">
            <summary> Gets or sets a value indicating whether thin lines will be fit to the pixel grid.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.FitThinLinesToPixelGridProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.FitThinLinesToPixelGrid" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.UseRightToLeftLanguage">
            <summary> Gets or sets a boolean value indicating whether right-to-left is turned on for the current document.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.UseRightToLeftLanguageProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.UseRightToLeftLanguage" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.ProgressiveRenderingInterval">
            <summary> Gets or sets the interval in milliseconds, at which progressive rendering is performed. This property is effective only
when <see cref="P:pdftron.PDF.PDFViewWPF.UseProgressiveRendering" /> is set to true.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.ProgressiveRenderingIntervalProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.ProgressiveRenderingInterval" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.UseProgressiveRendering">
            <summary> Gets or sets a boolean value to indicating whether progressive rendering will be used or not.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.UseProgressiveRenderingProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.UseProgressiveRendering" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.UsePathHinting">
            <summary> Gets or sets a boolean value indicating whether path hinting will be used.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.UsePathHintingProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.UsePathHinting" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.UsePageTransperencyGrid">
            <summary> Gets or sets a boolean value indicating whether a page transparency grid will be used.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.UsePageTransperencyGridProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.UsePageTransperencyGrid" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.UseImageSmoothing">
            <summary> Gets or sets a boolean value indicating whether image smoothing will be applied to images.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.UseImageSmoothingProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.UseImageSmoothing" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.HighlightFields">
            <summary> Gets or sets a boolean value indicating whether fields will be highlighted in the display.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.HighlightFieldsProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.HighlightFields" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.DrawAnnotations">
            <summary> Gets or sets a boolean value indicating whether annotation objects are drawn or not.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.DrawAnnotationsProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.DrawAnnotations" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.UseCaching">
            <summary> Gets or sets a boolean value indicating whether caching is used.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.UseCachingProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.UseCaching" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.UseAntiAliasing">
            <summary> Gets or sets a boolean indicating whether anti-aliasing is used while rendering the document.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.UseAntiAliasingProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.UseAntiAliasing" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.CurrentDocument">
            <summary> Gets or sets the current document as a <see cref="T:pdftron.PDF.PDFDoc" /> object..
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.CurrentDocumentProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.CurrentDocument" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.IsPageBorderVisible">
            <summary> Gets or sets a boolean indicating whether the page border is visible.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.IsPageBorderVisibileProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.IsPageBorderVisible" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="P:pdftron.PDF.PDFViewWPF.CurrentPageNumber">
            <summary> Gets or sets the currently active page number.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.CurrentPageNumberProperty">
            <summary>Indicates the <see cref="P:pdftron.PDF.PDFViewWPF.CurrentPageNumber" /> property of the <see cref="T:pdftron.PDF.PDFViewWPF" /> object.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.PDFViewWPFConversionType.e_conversion_failed">
            <summary>The Conversion has failed.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.PDFViewWPFConversionType.e_conversion_progress">
            <summary>New content is available, but the conversion is still in progress.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.PDFViewWPFConversionType.e_conversion_finished">
            <summary>A new page has been downloaded.</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.PDFViewWPFConversionType">
            <summary>ConversionType lists the events triggered by calling OpenUniversalDocument</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.TextSelectionMode.e_rectangular">
            <summary>Selects all words that intersect the given selection rectangle.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.TextSelectionMode.e_structural">
            <summary>Selects text based on the logical structure of the page. This type of selection is similar to HTML like selection in web-browsers.</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.TextSelectionMode">
            <summary>TextSelectionMode lists different text selection modes that can be used to highlight text. </summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.PageViewMode.e_zoom">
            <summary>Page is zoomed. The zoom factor is specified using SetZoom() function. </summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.PageViewMode.e_fit_height">
            <summary>Page zoom is automatically adjusted so that page height fits into available space. </summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.PageViewMode.e_fit_width">
            <summary>Page zoom is automatically adjusted so that page width fits into available space. </summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.PageViewMode.e_fit_page">
            <summary>Page zoom is automatically adjusted so that entire page fits into available space. </summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.PageViewMode">
            <summary>PageViewMode lists common modes of viewing PDF pages. </summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.PagePresentationMode.e_facing_continuous_cover">
            <summary>Display the pages in two columns, with odd-numbered pages on the right.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.PagePresentationMode.e_facing_cover">
            <summary>Display the pages two at a time, with odd-numbered pages on the right.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.PagePresentationMode.e_facing_continuous">
            <summary>Display the pages in two columns, with odd-numbered pages on the left.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.PagePresentationMode.e_facing">
            <summary>Display the pages two at a time, with odd-numbered pages on the left.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.PagePresentationMode.e_single_continuous">
            <summary>Display the pages in one column.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewWPF.PagePresentationMode.e_single_page">
            <summary>Display one page at a time.</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.PagePresentationMode">
            <summary> PagePresentationMode lists common modes of presenting PDF pages. </summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.LinkInfo.GetRect">
            <summary>Gets the bounding rectangle of the link.
</summary>
            <returns>Bounding rectangle of the link, which specifies the area containing the link.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.LinkInfo.GetUrl">
            <summary>Gets the url string of the link.
</summary>
            <returns>A string representing the URL of the link</returns>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.LinkInfo">
            <summary>LinkInfo is a utility class that retains link information when used with GetLinkAt().</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Selection.GetAsHtml">
            <summary>Gets the current text selection in HTML format. HTML text will contain styling information such as text color, font size, style etc.
</summary>
            <returns>the current text selection in HTML format.
</returns>
            <remarks>this function can be used to implement clipboard copy and paste that preserves text formating.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Selection.GetAsUnicode">
            <summary>Gets the current text selection represented as an Unicode string.
</summary>
            <returns>the current text selection represented as an Unicode string.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Selection.GetQuads">
            <summary>Gets the list of tight bounding quads in the current text selection.
</summary>
            <returns>an array of vertices representing a list of bounding quads for the selected text. 
Each bounding quad is represented using 8 numbers in an array of doubles. Each two consecutive
values represent the x and y coordinates of a quad vertex and the four vertices are arranged counter-clockwisely.
Note that the first vertex is not guaranteed to be the lower-left vertex.</returns>
            <remarks>the 'quads' array is owned by the current selection and does not need to be explicitly released.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewWPF.Selection.GetPageNum">
            <summary>Gets the page number containing the selected text.
</summary>
            <returns>the page number containing the selected text.
</returns>
        </member>
        <member name="T:pdftron.PDF.PDFViewWPF.Selection">
            <summary>Selection is a utility class that allows access to PDFViewCtrl's current selection. </summary>
        </member>
        <member name="M:trn.PDF.PDFViewImpl.GetAnnotationListAt(System.Int32,System.Int32,System.Int32,System.Int32)">
 Gets the list of annotations at line (x1, y1, x2, y2) expressed in screen coordinates

 @param x1 x coordinate of the screen point at one of the end points of the line
 @param y1 y coordinate of the screen point at one of the end points of the line
 @param x2 x coordinate of the screen point at another end point of the line
 @param y2 y coordinate of the screen point at another end point of the line
 @return the list of annotations at line (x1, y1, x2, y2).

</member>
        <member name="M:trn.PDF.PDFViewImpl.ConvScreenPtToCanvasPt(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
Converts a point expressed in screen coordinates to a point on canvas.

</member>
        <member name="M:trn.PDF.PDFViewImpl.SetPageBox(trn.PDF.Page.Box)">
 Selects the page box/region to rasterize.

 @param region Page box to rasterize. By default will rasterize page crop box.

</member>
        <member name="M:trn.PDF.PDFViewImpl.SetPageViewMode(trn.PDF.PDFView.PageViewMode,System.Boolean)">
@default The default PageView mode is e_fit_width.

</member>
        <member name="M:trn.Common.GetParallelLinesToSegmentLine(trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,trn.vec2&lt;System.Double&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 get two segment lines parallel to a segment line with a certain distance.

 @param ln_start the starting point of the input line
 @param ln_end the ending point of the input line
 @param dist the distance between the input line and each output line
 @param ln1_start the starting point of the first output line
 @param ln1_end the ending point of the first output line
 @param ln2_start the starting point of the second output line
 @param ln2_end the ending point of the second output line

</member>
        <member name="M:trn.Common.LineSegmentIntersectsPolyLine(trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.ConstArrayRef&lt;trn.vec2&lt;System.Double&gt;&gt;)">
 Checks if a line segment intersects a polyline.

 @param ln_start the starting point of the line
 @param ln_end the ending point of the test line
 @param polygon array with all vertices of the polyline

 @return true if there exists an intersection between the line segment and the polyline, else false

</member>
        <member name="M:trn.Common.LineSegmentInsidePolygon(trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.ConstArrayRef&lt;trn.vec2&lt;System.Double&gt;&gt;)">
 Checks if a line segment is inside a polygon.

 @param ln_start the starting point of the line
 @param ln_end the ending point of the test line
 @param polygon array with all vertices of the polygon

 @return true if the whole line segment is inside the polygon, else false

</member>
        <member name="M:trn.Common.LineSegmentIntersectsPolygon(trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.ConstArrayRef&lt;trn.vec2&lt;System.Double&gt;&gt;)">
 Checks if a line segment intersects a polygon.

 @param ln_start the starting point of the line
 @param ln_end the ending point of the test line
 @param polygon array with all vertices of the polygon

 @return true if there exists an intersection between the line segment and the polygon, else false

</member>
        <member name="M:trn.Common.LineSegmentInsideRect(trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.CommonRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Checks if a line segment is inside a rectangle.

 @param ln_start the starting point of the line
 @param ln_end the ending point of the test line
 @param rect the rectangle

 @return true if the whole line segment is inside the rectangle, else false

</member>
        <member name="M:trn.Common.LineSegmentIntersectsRect(trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.CommonRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Checks if a line segment intersects a rectangle.
 use Anti-Grain Geometry library but the flexible one in terms of boundary conditions
    the original one gives wrong answer e.g., for (0,0,50,50,50,50,100,50)

 @param ln_start the starting point of the line
 @param ln_end the ending point of the test line
 @param rect the rectangle

 @return true if there exists an intersection between the line segment and the rectangle, else false

</member>
        <member name="M:trn.Common.LineSegmentInsideEllipse(trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Checks if a line segment is inside an ellipse.

 @param ln_start the starting point of the line
 @param ln_end the ending point of the test line
 @param ell_radius the radii of the ellipse in x and y direction

 @return true if the whole line segment is inside the ellipse, else false

</member>
        <member name="M:trn.Common.LineSegmentIntersectsEllipse(trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Checks if a line segment intersects an ellipse.

 @param ln_start the starting point of the line
 @param ln_end the ending point of the test line
 @param ell_radius the radii of the ellipse in x and y direction

 @return true if there exists an intersection between the line segment and the ellipse, else false

</member>
        <member name="M:trn.Common.TwoLineSegmentsIntersect(trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Checks if two line segments intersect.
 NOTE: here it is assumed that a line segment intersects itself.

 @param ln1_start the starting point of the first line
 @param ln1_end the ending point of the first line
 @param ln2_start the starting point of the second line
 @param ln2_end the ending point of the second line

 @return true if there exists an intersection between two line segments, else false

</member>
        <member name="M:trn.Common.PointInsideRect(trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.CommonRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Checks if a point is inside a rectangle.

 @param point the test point
 @param rect the rectangle

 @return true if the test point is inside the rectangle, else false

</member>
        <member name="M:trn.Common.PointInsidePolygon(trn.vec2&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.ConstArrayRef&lt;trn.vec2&lt;System.Double&gt;&gt;)">
 Checks if a point is inside a polygon.
 This function is the same as above. However, it was implemented to be consistent with the following functions.

 @param point the test point
 @param polygon array with all vertices of the polygon

 @return true if the test point is inside the polygon, else false

</member>
        <member name="M:trn.Common.PointInsidePolygon(std.vector&lt;trn.PDF.Point,std.allocator&lt;trn.PDF.Point&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.PDF.Point!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Checks if a point is inside a polygon.

 @param in_polygon vector or Points with all vertices of the polygon
 @param test_point the test point (x, y)

</member>
        <member name="M:trn.Common.PointInsidePolygon(std.vector&lt;trn.PDF.Point,std.allocator&lt;trn.PDF.Point&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Checks if a point is inside a polygon.

 The algorithm was taken from here:
 http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
 Other good source: http://erich.realtimerendering.com/ptinpoly/
 
 @param in_polygon vector of Points with all vertices of the polygon
 @param test_point_x x value of the test point (x, y)
 @param test_point_y y value of the test point (x, y)

</member>
        <member name="M:trn.Common.DistancePointLineSegment(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Calculates the shortest distance from a point C (x3, y3) to a line segment
 defined by two endpoints A (x1, y1) and B (x2, y2). Sources:
 http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment
 http://paulbourke.net/geometry/pointlineplane/

 @param x1 x value of the starting point A (x1, y1) of the line segment
 @param y1 y value of the starting point A (x1, y1) of the line segment
 @param x2 x value of the ending point B (x2, y2) of the line segment
 @param y2 y value of the ending point B (x2, y2) of the line segment
 @param x3 x value of the test point C (x3, y3)
 @param y3 y value of the test point C (x3, y3)

 @return the shortest distance from the test point to the line segment.

</member>
        <member name="M:trn.Common.DistancePointEllipse(System.Double,System.Double,System.Double,System.Double,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Calculates the distance from a point to an ellipse. The ellipse must be centered at the origin
 and must be axis–aligned with its major axis on the x–axis.

 @param dU x value of the test point (u, v)
 @param dV y value of the test point (u, v)
 @param dA semi-major axis value for the ellipse (x/a)^2 + (y/b)^2 = 1
 @param dB semi-minor axis value for the ellipse (x/a)^2 + (y/b)^2 = 1
 @param eEpsilon zero tolerance for Newton's method (ie, 1e-08)
 @param riIFinal number of iterations used
 @param rdX x value of the closest point (x, y) over the ellipse
 @param rdY y value of the closest point (x, y) over the ellipse

 @return the distance between the test point (u, v) and the ellipse.

</member>
        <member name="M:trn.Common.DistancePointEllipseSpecial(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDerefer">
 The following methods used to calculate the distance between a point and an
 ellipse were found here:
 http://cdserv1.wbut.ac.in/81-8147-617-4/Linux/MagicSoftware/WildMagic2/Documentation/DistancePointToEllipse2.pdf
 http://www.geometrictools.com/LibMathematics/Distance/DistanceBody.html

 Extracted from the article above:
 "It is sufficient to solve this problem when the ellipse is centered at the origin and is axis–aligned with the
 major axis on the x–axis. Other ellipses can be rotated and translated to such an ellipse and the distance
 can be measured in that system. The basic idea is in Graphics Gems IV in an article by John Hart on
 computing distance between point and ellipsoid, but that article focuses on a conversion of the problem to
 computing the largest root of a polynomial. The presentation and implementation here avoids the conversion
 to polynomials, instead working directly with a rational function that appears in the aforementioned article."

</member>
        <member name="M:pdftron.PDF.Details.AnnotTile.MultiplyBlend(System.Windows.Media.VisualBrush,System.Windows.UIElement)">
            <summary>Multiply blends two bitmaps and updates the 'front' bitmap with the result.</summary>
            <param name="back">The brush representing the background image.</param>
            <param name="front">The UI element representing the foreground image.</param>
        </member>
        <member name="P:pdftron.PDF.Details.AnnotTile.IsMultiplyBlended">
            <summary>Indicates whether the current annotation is multiply blended with the page content beneath it.</summary>
        </member>
        <member name="P:pdftron.PDF.Details.AnnotTile.Description">
            <summary>Gives a quick handy desription of the annot.</summary>
        </member>
        <member name="P:pdftron.PDF.Details.AnnotTile.VisualElement">
            <summary> Gets a FrameworkElement reference for the visual element 
of the annotation. This will return null if there is not visual 
element associated with the current annotation tile.
</summary>
        </member>
        <member name="P:pdftron.PDF.Details.AnnotTile.IsAttached">
            <summary> Gets a bool indicating whether the current tile's visual element is
attached to any parent. </summary>
        </member>
        <member name="P:pdftron.PDF.Details.AnnotTile.IsVectorImage">
            <summary>Indicates whether the current tile is a vector or a bitmap.</summary>
        </member>
        <member name="P:pdftron.PDF.Details.AnnotTile.VectorData">
            <summary>The string representing the vector drawing instructions used by this tile.</summary>
        </member>
        <member name="T:pdftron.PDF.Details.AnnotTile">
            <summary>
Represents an annotation tile that is present on the UI.
It holds all the information relevant to the annotation and some 
buffered data related to the visual representation of the annotation.
</summary>
        </member>
        <member name="M:pdftron.PDFNet.AddPDFTronCustomHandler(System.Int32)">
            <summary> Add PDFTron Custom Security Handler
</summary>
            <param name="custom_id">The user's custom id. The id should match what was used to create PDFTronCustomSecurityHandler when encrypting the document.
</param>
            <remarks>Calling this function is a requirement to load files encrypted with PDFTronCustomSecurityHandler.</remarks>
            <exception cref="!:PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDFNet.GetSystemFontList">
            <summary> Get available fonts on the system.
</summary>
            <returns> A JSON list of fonts accessible to PDFNet
</returns>
            <exception cref="!:PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDFNet.SetDefaultFlateCompressionLevel(System.Int32)">
            <summary> Sets the default compression level for Flate (ZLib).
</summary>
            <param name="level"> An integer in range 0-9 representing the compression value to use as
a default for any Flate streams (e.g used to compress content streams, PNG images, etc).
The library normally uses the default compression level (Z_DEFAULT_COMPRESSION).
For most images, compression values in the range 3-6 compress nearly as well as higher
levels, and do so much faster. For on-line applications it may be desirable to have
maximum speed Z_BEST_SPEED = 1). You can also specify no compression (Z_NO_COMPRESSION = 0).
Default is Z_DEFAULT_COMPRESSION (-1).
</param>
        </member>
        <member name="M:pdftron.PDFNet.GetVersion">
            <summary> Gets the version.

</summary>
            <returns> PDFNet version number.
</returns>
        </member>
        <member name="M:pdftron.PDFNet.SetPersistentCachePath(System.String)">
            <summary> Set the location of persistent cache files.

</summary>
            <param name="path"> path to persistent cache folder
</param>
            <remarks>This method is provided for applications that require tight control of
the location where temporary files are created.</remarks>
        </member>
        <member name="M:pdftron.PDFNet.SetTempPath(System.String)">
            <summary> Set the location of temporary folder.

</summary>
            <param name="path">the temp_path
</param>
            <remarks>This method is provided for applications that require tight control of
the location where temporary files are created.</remarks>
        </member>
        <member name="M:pdftron.PDFNet.AddFontSubst(pdftron.PDFNet.CharacterOrdering,System.String)">
            <summary> Adds the font subst.

</summary>
            <param name="ordering">the ordering
</param>
            <param name="fontpath">the fontpath
</param>
            <returns> true, if successful
</returns>
        </member>
        <member name="M:pdftron.PDFNet.AddFontSubst(System.String,System.String)">
            <summary> AddFontSubst functions can be used to create font substitutes
that can override default PDFNet font selection algorithm.

These functions are useful in situations where referenced fonts
are not present in the document and PDFNet font substitution
algorithm is not producing desired results.

AddFontSubst(fontname, fontpath) maps the given font name (i.e. 'BaseFont'
entry from the font dictionary) to a font file.

AddFontSubst(ordering, fontpath) maps the given character ordering (see
Ordering entry in CIDSystemInfo dictionary; Section 5.6.2 in PDF Reference)
to a font file. This method is less specific that the former variant of
AddFontSubst, and can be used to override a range of missing fonts (or
any missing font) with a predefined substitute.

The following is an example of using these functions to provide user
defined font substitutes:

</summary>
            <param name="fontname">the fontname
</param>
            <param name="fontpath">the fontpath
</param>
            <returns> true, if successful
</returns>
            <example>
                <code>
PDFNet.initialize();
PDFNet.setResourcesPath("c:/myapp/resources");
// Specify specific font mappings...
PDFNet.addFontSubst("MinionPro-Regular", "c:/myfonts/MinionPro-Regular.otf");
PDFNet.addFontSubst("Times-Roman", "c:/windows/fonts/times.ttf");
PDFNet.addFontSubst("Times-Italic", "c:/windows/fonts/timesi.ttf");

// Specify more general font mappings...
PDFNet.addFontSubst(PDFNet.e_Identity, "c:/myfonts/arialuni.ttf");  // Arial Unicode MS
PDFNet.addFontSubst(PDFNet.e_Japan1, "c:/myfonts/KozMinProVI-Regular.otf");
PDFNet.addFontSubst(PDFNet.e_Japan2, "c:/myfonts/KozMinProVI-Regular.otf");
PDFNet.addFontSubst(PDFNet.e_Korea1, "c:/myfonts/AdobeSongStd-Light.otf");
PDFNet.addFontSubst(PDFNet.e_CNS1, "c:/myfonts/AdobeMingStd-Light.otf");
PDFNet.addFontSubst(PDFNet.e_GB1, "c:/myfonts/AdobeMyungjoStd-Medium.otf");
//...
PDFDoc doc = new PDFDoc("c:/my.pdf");
//...
</code>
            </example>
        </member>
        <member name="F:pdftron.PDFNet.CharacterOrdering.e_Korea1">
            <summary>Korean</summary>
        </member>
        <member name="F:pdftron.PDFNet.CharacterOrdering.e_CNS1">
            <summary>Chinese; Traditional</summary>
        </member>
        <member name="F:pdftron.PDFNet.CharacterOrdering.e_GB1">
            <summary>Chinese; Simplified</summary>
        </member>
        <member name="F:pdftron.PDFNet.CharacterOrdering.e_Japan2">
            <summary>Japanese</summary>
        </member>
        <member name="F:pdftron.PDFNet.CharacterOrdering.e_Japan1">
            <summary>Japanese</summary>
        </member>
        <member name="F:pdftron.PDFNet.CharacterOrdering.e_Identity">
            <summary>Generic/Unicode</summary>
        </member>
        <member name="T:pdftron.PDFNet.CharacterOrdering">
            <summary>character ordering</summary>
        </member>
        <member name="M:pdftron.PDFNet.SetViewerCache(System.UInt32,System.Boolean)">
            <summary> Sets the default parameters for the viewer cache.  Any subsequently opened documents
will use these parameters.
</summary>
            <param name="max_cache_size">The maximum size, in bytes, of the entire document's page cache.
</param>
            <param name="on_disk">Whether or not to store cache on disk
</param>
            <remarks> Default Desktop: max_cache_size = 512 MB, on_disk = true | Default Mobile:  max_cache_size = 100 MB, on_disk = false 
</remarks>
        </member>
        <member name="M:pdftron.PDFNet.SetDefaultDiskCachingEnabled(System.Boolean)">
            <summary>Sets the default policy on using temporary files.</summary>
            <param name="use_disk">if parameter is true then new documents are allowed to create
temporary files; otherwise all document contents will be stored in memory.</param>
        </member>
        <member name="M:pdftron.PDFNet.SetDefaultDeviceRGBProfile(System.String)">
            <summary> Sets the default ICC color profile for DeviceRGB color space.

</summary>
            <param name="icc_filename">the new default device rgb profile
</param>
            <remarks>  You can use this method to override default PDFNet settings.
For more information on default color spaces please refer to
section 'Default Color Spaces' in Chapter 4.5.4 of PDF Reference Manual.
</remarks>
        </member>
        <member name="M:pdftron.PDFNet.SetDefaultDeviceCMYKProfile(System.String)">
            <summary> Sets the default ICC color profile for DeviceCMYK color space.

</summary>
            <param name="icc_filename">the new default device cmyk profile
</param>
            <remarks>  You can use this method to override default PDFNet settings.
For more information on default color spaces please refer to
section 'Default Color Spaces' in Chapter 4.5.4 of PDF Reference Manual.
</remarks>
        </member>
        <member name="M:pdftron.PDFNet.SetColorManagement(pdftron.PDFNet.CMSType)">
            <summary> Used to set a specific Color Management System (CMS) for
use during color conversion operators, image rendering, etc.

</summary>
            <param name="cms">identifies the type of color management to use.
</param>
        </member>
        <member name="F:pdftron.PDFNet.CMSType.e_no_cms">
            <summary>No ICC color management.</summary>
        </member>
        <member name="F:pdftron.PDFNet.CMSType.e_icm">
            <summary>Use Windows ICM2 (available only on Windows platforms).</summary>
        </member>
        <member name="F:pdftron.PDFNet.CMSType.e_lcms">
            <summary>Use LittleCMS (available on all supported platforms).</summary>
        </member>
        <member name="T:pdftron.PDFNet.CMSType">
            <summary>color management system types</summary>
        </member>
        <member name="M:pdftron.PDFNet.AddResourceSearchPath(System.String)">
            <summary> Adds a search location for PDFNet resource files.

</summary>
            <param name="val">- The resource directory path to add to the searched list.
</param>
            <remarks>  Starting with v.4.5 PDFNet does't require a separate resource
file (pdfnet.res) on all desktop/server platfroms. As a result, this function
is not longer required for proper PDFNet initialization. The function is still
available on embedded systems and for backwards compatibility. This function can
be also used to specify search paths for ICC profiles, fonts, and other
user defined resources.
</remarks>
        </member>
        <member name="M:pdftron.PDFNet.SetResourcesPath(System.String)">
            <summary> Sets the location of PDFNet resource file.

</summary>
            <param name="val">- The default resource directory path.
</param>
            <returns> true if path is found, false otherwise.
</returns>
            <remarks>  Starting with v.4.5 PDFNet does't require a separate resource
file (pdfnet.res) on all desktop/server platfroms. As a result, this function
is not longer required for proper PDFNet initialization. The function is still
available on embedded systems and for backwards compatibility. The function can
be also used to specify a deault search path for ICC profiles, fonts, and other
user defined resources.
</remarks>
        </member>
        <member name="M:pdftron.PDFNet.Terminate">
            <summary> Terminates PDFNet library.
<c>Terminate()</c> is usually called once, when the process is terminated. 

</summary>
            <remarks>it is unsafe to call any other PDFNet API after you terminate
the library.
</remarks>
        </member>
        <member name="M:pdftron.PDFNet.Initialize(System.String)">
            <summary> Initializes PDFNet library.
Initialize() is usually called once, during process initialization.

</summary>
            <param name="lic_key">license key used to activate the product.
If the license_key is not specified, the product will work in demo mode.
If the license_key is invalid, the function will throw an exception.
</param>
            <remarks>  With the exception of SetPersistentCache and SetTempPath, it is unsafe to call any other PDFNet API without first initializing 
the library
</remarks>
        </member>
        <member name="M:pdftron.PDFNet.IsJavaScriptEnabled">
            <summary>
Test whether JavaScript is enabled.
</summary>
            <returns> true, if it is enabled, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDFNet.EnableJavaScript(System.Boolean)">
            <summary>
A swtich that can be used to turn on/off JavaScript engine
</summary>
            <param name="enable"> true to enable JavaScript engine, false to disable.</param>
        </member>
        <member name="M:pdftron.PDFNet.Initialize">
            <summary> Initializes PDFNet library.
<c>Initialize()</c> is usually called once, during process initialization.		
</summary>
            <remarks>  With the exception of SetPersistentCache and SetTempPath, it is unsafe to call any other PDFNet API without first initializing 
the library
</remarks>
        </member>
        <member name="T:pdftron.PDFNet">
            <summary> PDFNet contains global library initialization, registration, configuration,
and termination methods. 
	
there is only a single, static instance of PDFNet class. Initialization
and termination methods need to be called only once per application session. 
</summary>
        </member>
        <member name="T:pdftron.PDF.Details.PreDeletedTile">
            <summary> Because tiles arrive in a background thread, it is possible that core requests them to be deleted
before they have been added to the UI. If this happens, the tile is added here so that when the tile arrives,
we can discard it.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDF2HtmlReflowParagraphsModule.IsModuleAvailable">
            <summary>
Find out whether the pdf2html module is available (and licensed).
</summary>
            <returns>returns true if pdf2html operations can be performed</returns>
        </member>
        <member name="T:pdftron.PDF.PDF2HtmlReflowParagraphsModule">
            <summary>
static interface to PDFTron SDKs PDF to HTML functionality
</summary>
        </member>
        <member name="M:pdftron.PDF.PDF2WordModule.IsModuleAvailable">
            <summary>
Find out whether the pdf2word module is available (and licensed).
</summary>
            <returns>returns true if pdf2word operations can be performed</returns>
        </member>
        <member name="T:pdftron.PDF.PDF2WordModule">
            <summary>
static interface to PDFTron SDKs PDF to Word functionality
</summary>
        </member>
        <member name="M:pdftron.PDF.AdvancedImagingModule.IsModuleAvailable">
            <summary>
Find out whether the AdvancedImaging module is available (and licensed).
</summary>
            <returns>returns true if AdvancedImaging operations can be performed</returns>
        </member>
        <member name="T:pdftron.PDF.AdvancedImagingModule">
            <summary>
static interface to PDFTron SDKs AdvancedImaging functionality
</summary>
        </member>
        <member name="M:pdftron.PDF.Reflow.SetAnnot(System.String)">
            <summary>
Updates PDF annotation.
</summary>
            <param name="in_json">update instructions (JSON)</param>
            <returns>returns JSON string</returns>
        </member>
        <member name="M:pdftron.PDF.Reflow.GetAnnot(System.String)">
            <summary>
Gets PDF annotation(s) as JSON.
</summary>
            <param name="in_id">an annotation ID, or an empty string</param>
            <returns>returns JSON string</returns>
        </member>
        <member name="M:pdftron.PDF.Reflow.GetHtml">
            <summary>
Converts PDF to HTML.
</summary>
            <returns>returns HTML as a string</returns>
        </member>
        <member name="T:pdftron.PDF.Reflow">
            <summary>
Reflow annotations between PDF and HTML
</summary>
            <remark>
DocumentConversion instances are created through methods belonging to
the Convert class. See Convert.ReflowWithPage for an example.
</remark>
        </member>
        <member name="M:pdftron.PDF.TimestampingConfiguration.TestConfiguration(pdftron.PDF.VerificationOptions)">
            <summary>
Tests a timestamping configuration for usability and reports any failures. This function
does not throw on many common failures, unlike the real signing, thereby allowing early 
diagnosis of things like connectivity issues with timestamp authorities.
</summary>
            <param name="in_opts">a set of verification options to try to use.</param>
            <returns> A result object containing information about the status of the configuration test and any errors that occurred during it</returns>
        </member>
        <member name="M:pdftron.PDF.TimestampingConfiguration.SetUseNonce(System.Boolean)">
            <summary>
Setter for whether to use a nonce (unique random number) during timestamping. 
This is on by default, and should be on whenever a timestamp authority 
supports it, because it helps prevent replay attacks.
</summary>
            <param name="in_use_nonce">a boolean value representing whether or not to use a nonce.</param>
        </member>
        <member name="M:pdftron.PDF.TimestampingConfiguration.SetTimestampAuthorityServerPassword(System.String)">
            <summary>
Setter for a username to use during timestamping.
</summary>
            <param name="in_password">a string representing a password.</param>
        </member>
        <member name="M:pdftron.PDF.TimestampingConfiguration.SetTimestampAuthorityServerUsername(System.String)">
            <summary>
Setter for a username to use during timestamping.
</summary>
            <param name="in_username">a string representing a username.</param>
        </member>
        <member name="M:pdftron.PDF.TimestampingConfiguration.SetTimestampAuthorityServerURL(System.String)">
            <summary>
Setter to change the timestamp authority (TSA) URL to use during timestamping.
</summary>
            <param name="in_url">a string representing a URL of a timestamp authority.</param>
        </member>
        <member name="M:pdftron.PDF.TimestampingConfiguration.#ctor(System.String)">
            <summary>
Constructor
</summary>
            <param name="in_url">a string representing a URL of a timestamp authority (TSA) to use during timestamping</param>
        </member>
        <member name="T:pdftron.PDF.TimestampingConfiguration">
            <summary>
A class representing a set of options for timestamping a document.
</summary>
        </member>
        <member name="M:pdftron.PDF.TimestampingTestResult.GetResponseVerificationResult">
            <summary>
If a timestamp response was successfully retrieved from a timestamp authority, returns
the result of verifying it. If a timestamp response was not received, throws. One should
call HasResponseVerificationResult first to see if a detailed result is available before calling
this function.
</summary>
            <returns>a timestamp response verification result</returns>
        </member>
        <member name="M:pdftron.PDF.TimestampingTestResult.HasResponseVerificationResult">
            <summary>
Returns whether a timestamp response verification result is available. This means
that false will be returned when a timestamp response was not received or was empty
(e.g. network failures, improper server configuration, bad URL, etc.). This function
should be called to check for the availability of a verification result before actually
attempting to retrieve one using GetResponseVerificationResult (which throws if a result is not
available).
</summary>
            <returns>whether a timestamp response verification result is available</returns>
        </member>
        <member name="M:pdftron.PDF.TimestampingTestResult.GetString">
            <summary>
Retrieves a result message regarding the timestamping configuration testing operation.
</summary>
            <returns> a string result message. </returns>
            <remarks> Output may change in future versions </remarks>
        </member>
        <member name="M:pdftron.PDF.TimestampingTestResult.GetStatus">
            <summary>
Retrieves the overall status of the timestamping configuration testing operation.
</summary>
            <returns> a boolean value representing the status</returns>
        </member>
        <member name="T:pdftron.PDF.TimestampingTestResult">
            <summary>
A class representing the result of testing a timestamping configuration.
</summary>
        </member>
        <member name="M:pdftron.PDF.EmbeddedTimestampVerificationResult.GetUnsupportedFeatures">
            <summary>

Retrieves reports about unsupported features encountered during verification of the timestamp.
Current possible values:
"GeneralizedTime format with length &lt;number greater than 15%gt;",
"unsupported digest algorithm"

</summary>
            <returns>a container of strings representing unsupported features encountered during verification of the timestamp</returns>
            <remarks>Output may change in future versions. </remarks>
        </member>
        <member name="M:pdftron.PDF.EmbeddedTimestampVerificationResult.GetMessageImprintDigestAlgorithm">
            <summary>
Retrieves an enumeration value representing the digest algorithm used inside the message imprint field of the timestamp to digest the main signature value.
</summary>
            <returns>A DigestAlgorithm enumeration value</returns>
        </member>
        <member name="M:pdftron.PDF.EmbeddedTimestampVerificationResult.GetCMSSignatureDigestAlgorithm">
            <summary>
Retrieves an enumeration value representing the digest algorithm used to sign the timestamp token.
</summary>
            <returns>A DigestAlgorithm enumeration value</returns>
        </member>
        <member name="M:pdftron.PDF.EmbeddedTimestampVerificationResult.GetTrustVerificationResult">
            <summary>
Retrieves the detailed result associated with the trust step of the verification operation that returned this EmbeddedTimestampVerificationResult, 
if such a detailed trust result is available. Must call HasTrustVerificationResult first and check for a true result.
</summary>
            <returns>A TrustVerificationResult object</returns>
            <remarks>This function will throw if there is no trust result available. </remarks>
        </member>
        <member name="M:pdftron.PDF.EmbeddedTimestampVerificationResult.HasTrustVerificationResult">
            <summary>
Returns whether there is a detailed TrustVerificationResult in this EmbeddedTimestampVerificationResult.
</summary>
            <returns>A boolean</returns>
        </member>
        <member name="M:pdftron.PDF.EmbeddedTimestampVerificationResult.GetTrustStatusAsString">
            <summary>
Retrieves the result condition associated with the trust verification step, as a descriptive string.
</summary>
            <returns>a string. </returns>
            <remarks>Output may change in future versions. </remarks>
        </member>
        <member name="M:pdftron.PDF.EmbeddedTimestampVerificationResult.GetMessageImprintDigestStatusAsString">
            <summary>
Retrieves the result condition associated with the message imprint digest verification step, as a descriptive string.
</summary>
            <returns>a string. </returns>
            <remarks>Output may change in future versions. </remarks>
        </member>
        <member name="M:pdftron.PDF.EmbeddedTimestampVerificationResult.GetCMSDigestStatusAsString">
            <summary>
Retrieves the result condition associated with the CMS signed digest verification step, as a descriptive string.
</summary>
            <returns>a string. </returns>
            <remarks>Output may change in future versions. </remarks>
        </member>
        <member name="M:pdftron.PDF.EmbeddedTimestampVerificationResult.GetTrustStatus">
            <summary>
Retrieves the result condition associated with the trust verification step.
</summary>
            <returns>A TrustStatus-type enumeration value</returns>
        </member>
        <member name="M:pdftron.PDF.EmbeddedTimestampVerificationResult.GetMessageImprintDigestStatus">
            <summary>
Retrieves the result condition associated with the message imprint digest verification step.
</summary>
            <returns>A DigestStatus-type enumeration value</returns>
        </member>
        <member name="M:pdftron.PDF.EmbeddedTimestampVerificationResult.GetCMSDigestStatus">
            <summary>
Retrieves the result condition associated with the CMS signed digest verification step.
</summary>
            <returns>A DigestStatus-type enumeration value</returns>
        </member>
        <member name="M:pdftron.PDF.EmbeddedTimestampVerificationResult.GetVerificationStatus">
            <summary>
Retrieves the main verification status. The main status is determined based on the other statuses.
</summary>
            <returns>A boolean representing whether or not the verification operation was completely successful</returns>
        </member>
        <member name="T:pdftron.PDF.EmbeddedTimestampVerificationResult">
            <summary>
This class represents the result of verifying a secure embedded
timestamp digital signature.
</summary>
        </member>
        <member name="M:pdftron.Crypto.X509Certificate.GetData">
            <summary>
Retrieves the certificate as binary DER-encoded data. (DER is short for Distinguished Encoding Rules.).
</summary>
            <returns>a container holding the bytes of the extension in the form of binary DER-encoded data</returns>
        </member>
        <member name="M:pdftron.Crypto.X509Certificate.GetExtensions">
            <summary>
Retrieves all extensions (as first specified in V3 of X509, see RFC 5280) from the certificate.
</summary>
            <returns>a container of X509Extension objects</returns>
        </member>
        <member name="M:pdftron.Crypto.X509Certificate.GetSerialNumber">
            <summary>
Retrieves the serialNumber entry from the certificate.
</summary>
            <returns>a big-integer-style container holding bytes representing the components of an integral serial number in big-endian order</returns>
        </member>
        <member name="M:pdftron.Crypto.X509Certificate.GetFingerprint(pdftron.Crypto.DigestAlgorithm.Type)">
            <summary>
Retrieves, in a string, a text representation of a cryptographically-secure digest of the certificate that can be used to identify it uniquely. 
</summary>
            <param name="in_digest_algorithm">An enumeration representing the digest algorithm to use. Currently supported are SHA-1 (SHA-160), SHA-256, SHA-384, and SHA-512.</param>
            <returns>a string representation of the fingerprint, in the form of double ASCII characters representing hex bytes, separated by colons</returns>
            <remarks> Default algorithm parameter is currently SHA-256, but may change in future without further warning, pursuant to security needs.</remarks>
        </member>
        <member name="M:pdftron.Crypto.X509Certificate.ToString">
            <summary>
Returns a string representation of the certificate.
</summary>
            <returns>a string representation of the certificate</returns>
            <remarks> Output may change in future versions.</remarks>
        </member>
        <member name="M:pdftron.Crypto.X509Certificate.GetRawX509VersionNumber">
            <summary>
Retrieves the version number representing which version of X509 the certificate corresponds to, from the certificate.
</summary>
            <returns>an integer containing the version number</returns>
            <remarks>The X509 version number in the certificate, which we return unchanged here, is zero-indexed and therefore is one less in value than the actual version. e.g. X509v3 is represented by a returned version number of 2.</remarks>
        </member>
        <member name="M:pdftron.Crypto.X509Certificate.GetNotAfterEpochTime">
            <summary>
Retrieves the notAfter time from the certificate's Validity entry in the form of an integral value representing an epoch time.
</summary>
            <returns>an integer containing an epoch time</returns>
        </member>
        <member name="M:pdftron.Crypto.X509Certificate.GetNotBeforeEpochTime">
            <summary>
Retrieves the notBefore time from the certificate's Validity entry in the form of an integral value representing an epoch time.
</summary>
            <returns>an integer containing an epoch time</returns>
        </member>
        <member name="M:pdftron.Crypto.X509Certificate.GetSubjectField">
            <summary>
Retrieves the names of the certificate subject as a map of OIDs (i.e. one of the object identifiers from the X.500 attribute types) to string values. The subject field represents the identity of the entity associated with the certificate's public key. The returned value will contain all of the AttributeTypeAndValue items from all of the RelativeDistinguishedNames in the Name of the subject. See RFC 5280, section 4.1.2.6 and Appendix A.1 (page 116).
</summary>
            <returns>an X501DistinguishedName object</returns>
        </member>
        <member name="M:pdftron.Crypto.X509Certificate.GetIssuerField">
            <summary>
Retrieves the names of the certificate issuer as a map of OIDs (i.e. one of the object identifiers from the X.500 attribute types) to string values. The issuer field identifies the entity that has signed and issued the certificate. The returned value will contain all of the AttributeTypeAndValue items from all of the RelativeDistinguishedNames in the Name of the issuer. See RFC 5280, section 4.1.2.4 and Appendix A.1 (page 116).
</summary>
            <returns>an X501DistinguishedName object</returns>
        </member>
        <member name="T:pdftron.Crypto.X509Certificate">
            <summary>
This class represents an X509 public-key certificate, as specified in RFC 5280.
</summary>
        </member>
        <member name="M:pdftron.Crypto.X501DistinguishedName.GetAllAttributesAndValues">
            <summary>
Retrieves all of the attribute-type-to-value pairs in this distinguished name.
</summary>
            <returns>a container of X501AttributeTypeAndValue objects</returns>
        </member>
        <member name="M:pdftron.Crypto.X501DistinguishedName.GetStringValuesForAttribute(pdftron.Crypto.ObjectIdentifier)">
            <summary>

Returns a container full of string representations of all the values in this distinguished name that match a particular attribute's object identifier (OID).
</summary>
            <param name="in_oid">the object identifier representing the sought attribute.</param>
            <returns>a container of string values containing any strings associated with the supplied attribute</returns>
        </member>
        <member name="M:pdftron.Crypto.X501DistinguishedName.HasAttribute(pdftron.Crypto.ObjectIdentifier)">
            <summary>
Returns whether this distinguished name contains a particular attribute, identified by its object identifier (OID).
</summary>
            <param name="in_oid">the object identifier representing the sought attribute.</param>
            <returns>a boolean value representing whether this distinguished name contains the supplied attribute</returns>
        </member>
        <member name="T:pdftron.Crypto.X501DistinguishedName">
            <summary>
This class represents a distinguished name (DN) as defined in X.501.
See the X.500 standards, RFC 5280, and an OID repository for more information.
</summary>
        </member>
        <member name="M:pdftron.Common.ByteRange.GetSize">
            <summary>
Retrieves the size of the byte range.
</summary>
            <returns>an unsigned integer</returns>
        </member>
        <member name="M:pdftron.Common.ByteRange.GetEndOffset">
            <summary>
Retrieves the end offset of the byte range.
</summary>
            <returns>an unsigned integer</returns>
        </member>
        <member name="M:pdftron.Common.ByteRange.GetStartOffset">
            <summary>
Retrieves the start offset of the byte range.
</summary>
            <returns>an unsigned integer</returns>
        </member>
        <member name="T:pdftron.Common.ByteRange">
            <summary>
This class represents a Byte Range.
</summary>
        </member>
        <member name="M:pdftron.Crypto.X501AttributeTypeAndValue.GetStringValue">
            <summary>
Retrieves the value associated with the contained OID (object identifier) as a string, if the value is defined by the OID to be of a string type.
</summary>
            <returns>a string containing the string value</returns>
        </member>
        <member name="M:pdftron.Crypto.X501AttributeTypeAndValue.GetAttributeTypeOID">
            <summary>
Retrieves the OID (i.e. one of the object identifiers from the X.500 attribute types) in the form of integer components in a container.
</summary>
            <returns>an ObjectIdentifier object</returns>
        </member>
        <member name="T:pdftron.Crypto.X501AttributeTypeAndValue">
            <summary>
This class represents an AttributeTypeAndValue as mentioned in RFC 5280 in the context of DistinguishedNames and as defined in ITU X.501.
</summary>
        </member>
        <member name="M:pdftron.Crypto.X509Extension.GetData">
            <summary>
Retrieves the raw binary DER-encoded data of the extension. (DER is short for Distinguished Encoding Rules.)
</summary>
            <returns>a container holding the bytes of the extension in the form of binary DER-encoded data</returns>
        </member>
        <member name="M:pdftron.Crypto.X509Extension.ToString">
            <summary>
Returns a string representation of the extension.
</summary>
            <returns>a string representation of the extension</returns>
            <remarks> Output may change in future versions.</remarks>
        </member>
        <member name="M:pdftron.Crypto.X509Extension.GetObjectIdentifier">
            <summary>
Retrieves the OID (object identifier) of the extension in the form of integer components in a container. The meaning of an OID can be determined from an OID repository.
</summary>
            <returns>an ObjectIdentifier object</returns>
        </member>
        <member name="M:pdftron.Crypto.X509Extension.IsCritical">
            <summary>
Retrieves whether the extension is 'critical'. See RFC 5280 for an explanation of what this means.
</summary>
            <returns>a boolean representing the criticality flag of the extension</returns>
        </member>
        <member name="T:pdftron.Crypto.X509Extension">
            <summary>
This class represents an X509v3 certificate extension. See RFC 5280
as a specification.
</summary>
        </member>
        <member name="M:pdftron.Crypto.ObjectIdentifier.#ctor(System.Int32[])">
            <summary>
Constructor from array of unsigned integer components of an object identifier.
</summary>
            <param name="in_arr">array of integers to use</param>
        </member>
        <member name="M:pdftron.Crypto.ObjectIdentifier.#ctor(pdftron.Crypto.ObjectIdentifier.Predefined)">
            <summary>
Constructs an ObjectIdentifier from an enum.
</summary>
            <param name="in_oid_enum">the enumerated value to use</param>
            <remarks>Not all possible OID values are available as enum values.</remarks>
        </member>
        <member name="M:pdftron.Crypto.ObjectIdentifier.GetRawValue">
            <summary>
Retrieves the value of the object identifier.
</summary>
            <returns>the value of the object identifier, as a container of integer components</returns>
        </member>
        <member name="T:pdftron.Crypto.ObjectIdentifier">
            <summary>
This class represents an object identifier (OID), as defined by ITU and used in X.509.
</summary>
        </member>
        <member name="M:pdftron.PDF.ShapedText.GetGlyphYPos(System.Int32)">
            <summary>
The Y position of the glyph at the requested index. This number has been scaled by GetScale().
</summary>
            <param name="index">the index of the glyph position to be retrieved. Must be less than GetNumGlyphs()</param>
            <returns>returns the Y position for the glyph at the specified index</returns>
        </member>
        <member name="M:pdftron.PDF.ShapedText.GetGlyphXPos(System.Int32)">
            <summary>
The X position of the glyph at the requested index. This number has been scaled by GetScale().
</summary>
            <param name="index">the index of the glyph position to be retrieved. Must be less than GetNumGlyphs()</param>
            <returns>returns the X position for the glyph at the specified index</returns>
        </member>
        <member name="M:pdftron.PDF.ShapedText.GetGlyph(System.Int32)">
            <summary>
Get the glyph ID at the indicated place in the shaped sequence. This number is specific to the font file used to generate the shaping results, and does not always have a clean mapping to a particular Unicode codepoint in the original string.
</summary>
            <param name="index">the index of the glyph to be retrieved. Must be less than GetNumGlyphs()</param>
            <returns>returns the glyph ID for the indicated place in the shaped result</returns>
        </member>
        <member name="M:pdftron.PDF.ShapedText.GetNumGlyphs">
            <summary>
Number of glyphs present in the shaped text. Might be different from the .
</summary>
            <returns>returns the the number of utf32 codepoints in this shaped text</returns>
        </member>
        <member name="M:pdftron.PDF.ShapedText.GetText">
            <summary>
The original source text string.
</summary>
            <returns>returns the source text string</returns>
        </member>
        <member name="M:pdftron.PDF.ShapedText.GetFailureReason">
            <summary>
In the case where GetShapingStatus() returns something other than FullShaping, this method will return a more detailed reason behind the failure.
</summary>
            <returns />
        </member>
        <member name="M:pdftron.PDF.ShapedText.GetShapingStatus">
            <summary>
Get the state of the shaping operation. Even if the shaping did not fully succeed, this object can be added to an elementbuilder, and will fallback to placing unshped text. See GetFailureReason() in the case this method returns something other than FullShaping.
</summary>
            <returns />
        </member>
        <member name="M:pdftron.PDF.ShapedText.GetScale">
            <summary>
Scaling factor of this shaped text relative to the em size. A scaling factor of 1 means that all units are relative to the em size. PDF scaling is typically 1000 units per em.
</summary>
            <returns>returns the scaling factor for the glyph positions</returns>
        </member>
        <member name="T:pdftron.PDF.ShapedText">
            <summary>
A sequence of positioned glyphs -- the visual representation of a
given text string
</summary>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetUnsupportedFeatures">
            <summary>

Retrieves reports about unsupported features encountered during verification.
This function is the canonical source of information about all unsupported features encountered.
Current possible values:
"Document Security Store" (includes VRI, which is part of DSS dictionary),
"unsupported signature encoding",
"usage rights signature",
"legal content attestations",
"unsupported digest algorithm"
</summary>
            <returns>a container of strings representing unsupported features encountered during verification</returns>
            <remarks> Output may change in future versions. </remarks>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetPermissionsStatusAsString">
            <summary>
Retrieves the result condition about permissions checks performed on any unsigned modifications associated with a digital signature verification operation, as a descriptive string.
</summary>
            <returns>a string</returns>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetTrustStatusAsString">
            <summary>
Retrieves the trust-related result condition associated with a digital signature verification operation, as a descriptive string.
</summary>
            <returns>a string</returns>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetDigestStatusAsString">
            <summary>
Retrieves the digest-related result condition associated with a digital signature verification operation, as a descriptive string.
</summary>
            <returns>a string</returns>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetDocumentStatusAsString">
            <summary>
Retrieves the document-related result condition associated with a digital signature verification operation, as a descriptive string.
</summary>
            <returns>a string</returns>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetDigestAlgorithm">
            <summary>
Retrieves an enumeration value representing the digest algorithm used to sign the signature that is associated with this verification result.
For DocTimeStamp signatures, returns the weakest algorithm found (between the CMS and message imprint digests).
</summary>
            <returns>A DigestAlgorithm enumeration value</returns>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetDisallowedChanges">
            <summary>
Retrieves a list of informational structures regarding any disallowed changes that have been made to the document since the signature associated with this verification result was signed.
</summary>
            <returns>a collection of DisallowedChange objects.</returns>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetTrustVerificationResult">
            <summary>
Retrieves the detailed result associated with the trust step of the verification operation that returned this VerificationResult, if such a detailed trust result is available. Must call HasTrustVerificationResult first and check for a true result.
</summary>
            <returns>An optional TrustVerificationResult</returns>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.HasTrustVerificationResult">
            <summary>
Returns whether there is a detailed TrustVerificationResult in this VerificationResult or not.
</summary>
            <returns>A boolean.</returns>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetPermissionsStatus">
            <summary>
Retrieves the result condition about permissions checks performed on any unsigned modifications associated with a digital signature verification operation.
</summary>
            <returns>A ModificationPermissionsStatus-type enumeration value</returns>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetTrustStatus">
            <summary>
Retrieves the trust-related result condition associated with a digital signature verification operation.
</summary>
            <returns>A TrustStatus-type enumeration value</returns>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetDigestStatus">
            <summary>
Retrieves the digest-related result condition associated with a digital signature verification operation.
</summary>
            <returns>A DigestStatus-type enumeration value</returns>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetDocumentStatus">
            <summary>
Retrieves the document-related result condition associated with a digital signature verification operation.
</summary>
            <returns>A DocumentStatus-type enumeration value</returns>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetVerificationStatus">
            <summary>
Retrieves the main verification status. The main status is determined based on the other statuses. Verification may
fail for many reasons; some of these reasons are the presence of features that are not supported yet. It may be desirable
for you to report unsupported signatures differently (for example, using a question mark rather than an X mark). Any 
unsupported features encountered can be retrieved by the use of the function GetUnsupportedFeatures on this class.
</summary>
            <returns>A boolean representing whether or not the verification operation was completely successful</returns>
        </member>
        <member name="M:pdftron.PDF.VerificationResult.GetDigitalSignatureField">
            <summary>
Retrieves the digital signature field associated with the digital signature verification operation that returned this result.
</summary>
            <returns>A DigitalSignatureField object</returns>
        </member>
        <member name="T:pdftron.PDF.VerificationResult">
            <summary>
The result of a verification operation performed on a digital signature.
</summary>
        </member>
        <member name="M:pdftron.PDF.TrustVerificationResult.GetCertPath">
            <summary>
Retrieves the certificate path that was used for verification.
</summary>
            <returns>a container of X509Certificate objects</returns>
        </member>
        <member name="M:pdftron.PDF.TrustVerificationResult.GetEmbeddedTimestampVerificationResult">
            <summary>
Returns the detailed timestamp result inside this TrustVerificationResult. One must call HasEmbeddedTimestampVerificationResult first to check whether the result is available.
</summary>
            <returns>an EmbeddedTimestampVerificationResult object</returns>
        </member>
        <member name="M:pdftron.PDF.TrustVerificationResult.HasEmbeddedTimestampVerificationResult">
            <summary>
Returns whether this TrustVerificationResult has a detailed timestamp result inside.
</summary>
            <returns>a boolean value representing whether this TrustVerificationResult has a detailed timestamp result inside</returns>
        </member>
        <member name="M:pdftron.PDF.TrustVerificationResult.GetTimeOfTrustVerificationEnum">
            <summary>
Retrieves the type of reference-time used for trust verification.
</summary>
            <returns>An enumerated value representing the type of reference-time used for trust verification</returns>
        </member>
        <member name="M:pdftron.PDF.TrustVerificationResult.GetTimeOfTrustVerification">
            <summary>
Retrieves the reference-time used for trust verification as an epoch time.
</summary>
            <returns>An integral value representing an epoch time</returns>
        </member>
        <member name="M:pdftron.PDF.TrustVerificationResult.GetResultString">
            <summary>
Retrieves a string representation of the details of the trust verification status.
</summary>
            <returns>A string</returns>
            <remarks>Output may change in future versions.</remarks>
        </member>
        <member name="M:pdftron.PDF.TrustVerificationResult.WasSuccessful">
            <summary>
Retrieves the trust verification status.
</summary>
            <returns>A boolean representing whether or not the trust verification operation was successful. Whether trust-related warnings are treated as errors or not depend on the VerificationOptions used for the verification operation</returns>
        </member>
        <member name="T:pdftron.PDF.TrustVerificationResult">
            <summary>
The detailed result of a trust verification step of a verification
operation performed on a digital signature.
</summary>
        </member>
        <member name="M:pdftron.PDF.VerificationOptions.EnableOnlineRevocationChecking(System.Boolean)">
            <summary>
 Enables/disables all online revocation checking modes. The default settings are that 
 online OCSP is turned on and online CRL is turned off, but the default CRL setting may change in
 future versions.
</summary>
            <remarks> 
 CRL checking is off by default because the technology is inherently complicated
 and resource - intensive, but may help improve verification rate when files are verified against
 a recent reference - time(e.g.maximum security mode), because online CRLs will be valid within
 that time.This mode will not be useful for old archival - type('LTV') documents
 verified in archiving - and-compatibility security mode, because their online OCSP and / or CRL
 responder servers may not be alive anymore.However, such LTV documents can be created
 (if the CRL responder servers are still active) by enabling online checking, verifying, and then
 embedding the data using DigitalSignatureField.EnableLTVOfflineVerification.
</remarks>
            <param name="in_on_or_off">what setting to use.</param>
        </member>
        <member name="M:pdftron.PDF.VerificationOptions.EnableOnlineOCSPRevocationChecking(System.Boolean)">
            <summary>
Enables/disables online OCSP revocation checking. The default setting is for it to be turned on.
</summary>
            <param name="in_on_or_off">what setting to use</param>
        </member>
        <member name="M:pdftron.PDF.VerificationOptions.EnableOnlineCRLRevocationChecking(System.Boolean)">
            <summary>
Enables / disables online CRL revocation checking.The default setting is
for it to be turned off, but this may change in future versions.
</summary>
            <remarks> 
 CRL checking is off by default because the technology is inherently complicated
 and resource - intensive, but may help improve verification rate when files are verified against
 a recent reference - time(e.g.maximum security mode), because online CRLs will be valid within
 that time.This mode will not be useful for old archival - type('LTV') documents
 verified in archiving - and-compatibility security mode, because their online OCSP and / or CRL
 responder servers may not be alive anymore.However, such LTV documents can be created
 (if the CRL responder servers are still active) by enabling online checking, verifying, and then
 embedding the data using DigitalSignatureField.EnableLTVOfflineVerification.
</remarks>
            <param name="in_on_or_off">what setting to use</param>
        </member>
        <member name="M:pdftron.PDF.VerificationOptions.EnableTrustVerification(System.Boolean)">
            <summary>
Sets a flag that can turn on or off the verification of the trust status of a digital signature.
</summary>
            <param name="in_on_or_off">A boolean.</param>
        </member>
        <member name="M:pdftron.PDF.VerificationOptions.EnableDigestVerification(System.Boolean)">
            <summary>
Sets a flag that can turn on or off the verification of the digest (cryptographic hash) component of a digital signature.
</summary>
            <param name="in_on_or_off">A boolean.</param>
        </member>
        <member name="M:pdftron.PDF.VerificationOptions.EnableModificationVerification(System.Boolean)">
            <summary>
Sets a flag that can turn on or off the verification of the permissibility of any modifications made to the document after the signing of the digital signature being verified, in terms of the document and field permissions specified by the digital signature being verified.
</summary>
            <param name="in_on_or_off">A boolean.</param>
        </member>
        <member name="M:pdftron.PDF.VerificationOptions.LoadTrustList(pdftron.FDF.FDFDoc)">
            <summary>
Bulk trust list loading API with trust flag support. Loads a trust list that is
structured in Acrobat's FDF Data/Cert Exchange format into the VerificationOptions
certificate store. Use of this function is strongly recommended instead of the P7C
API (i.e. AddTrustedCertificates). Certificates inside the FDF trust list that
cannot be decoded and loaded, will be skipped.
</summary>
            <param name="in_fdf_cert_exchange_data">an FDFDoc from the FDF cert exchange data</param>
        </member>
        <member name="M:pdftron.PDF.VerificationOptions.AddTrustedCertificates(System.Byte[])">
            <summary>
Bulk trust list loading API from P7C. Attempts to decode the input data as binary DER and trust multiple trusted
root certificates from it. Compatible with Acrobat's .P7C format, which is a variation on PKCS #7/CMS that only
contains certificates (i.e. no CRLs, no signature, etc.). If a certificate cannot be decoded, this is ignored
and an attempt is made to decode the next certificate. This overload takes no account of trust-level flags
because none are available in the P7C format. Therefore, when this function is used, all certificates in the
P7C file will be loaded as if trusted for everything, which may lead to false positives when compared to other PDF software.
(Most applications use the FDF Cert Exchange format.) The FDF-trust-list-loading function "LoadTrustList" should be
used instead whenever possible.
</summary>
            <param name="in_P7C_binary_DER_certificates_file_data">the P7C-format bulk certificate data, encoded in binary DER (Distinguished Encoding Rules)</param>
        </member>
        <member name="M:pdftron.PDF.VerificationOptions.AddTrustedCertificate(System.String,System.UInt16!System.Runtime.CompilerServices.IsConst)">
            <summary>
Adds a certificate to the store of trusted certificates inside this options object, by loading it from a file. This overload allows custom trust flags to be specified.
</summary>
            <param name="in_filepath">a path to a file containing the data of an X.509 public-key certificate encoded in binary DER (Distinguished Encoding Rules) format, or in PEM (appropriate Privacy-Enhanced Mail header+Base64 encoded DER+appropriate footer) format</param>
            <param name="in_trust_flags">a combination of trust flags (see enum CertificateTrustFlag) that determine for which situations this certificate should be trusted during trust verification.</param>
        </member>
        <member name="M:pdftron.PDF.VerificationOptions.AddTrustedCertificate(System.String)">
            <summary>
Adds a certificate to the store of trusted certificates inside this options object, by loading it from a file. This overload uses the e_default_trust CertificateTrustFlag, which matches Acrobat's behaviour, to determine the trust level of the certificate.
</summary>
            <param name="in_filepath">a path to a file containing the data of an X.509 public-key certificate encoded in binary DER (Distinguished Encoding Rules) format, or in PEM (appropriate Privacy-Enhanced Mail header+Base64 encoded DER+appropriate footer) format</param>
        </member>
        <member name="M:pdftron.PDF.VerificationOptions.AddTrustedCertificate(System.Byte[],System.UInt16!System.Runtime.CompilerServices.IsConst)">
            <summary>
Adds a certificate to the store of trusted certificates inside this options object. This overload allows custom trust flags to be specified.
</summary>
            <param name="in_certificate_data">a buffer consisting of the data of an X.509 public-key certificate encoded in binary DER (Distinguished Encoding Rules) format, or in PEM (appropriate Privacy-Enhanced Mail header + Base64 encoded DER + appropriate footer) format</param>
            <param name="in_trust_flags">a combination of trust flags (see enum CertificateTrustFlag) that determine for which situations this certificate should be trusted during trust verification.</param>
        </member>
        <member name="M:pdftron.PDF.VerificationOptions.AddTrustedCertificate(System.Byte[])">
            <summary>
Adds a certificate to the store of trusted certificates inside this options object. This overload uses the e_default_trust CertificateTrustFlag, which matches Acrobat's behaviour, to determine the trust level of the certificate.
</summary>
            <param name="in_certificate_data">a buffer consisting of the data of an X.509 public-key certificate encoded in binary DER (Distinguished Encoding Rules) format, or in PEM (appropriate Privacy-Enhanced Mail header + Base64 encoded DER + appropriate footer) format</param>
        </member>
        <member name="M:pdftron.PDF.VerificationOptions.#ctor(pdftron.PDF.VerificationOptions.SignatureVerificationSecurityLevel)">
            <summary>
Constructs a set of options for digital signature verification.
</summary>
            <param name="in_level">the general security level to use. Sets other security settings internally.</param>
        </member>
        <member name="F:pdftron.PDF.VerificationOptions.CertificateTrustFlag.e_complete_trust">
            <summary>another handy shortcut for testing</summary>
        </member>
        <member name="F:pdftron.PDF.VerificationOptions.CertificateTrustFlag.e_default_trust">
            <summary>handy shortcut for what Acrobat does by default -- trust for everything except javascript and dynamic</summary>
        </member>
        <member name="F:pdftron.PDF.VerificationOptions.CertificateTrustFlag.e_trust_anchor">
            <summary>analogous to "kPSSigTrustAnchor" in FDF cert exchange specification. If this flag is set, paths may end with this certificate, and no revocation checks are done for it.</summary>
        </member>
        <member name="F:pdftron.PDF.VerificationOptions.CertificateTrustFlag.e_identity">
            <summary>analogous to "kPSSigTrustIdentity" in FDF cert exchange specification. If this flag is not set, all other flags are ignored, and certificate is used only for path building.</summary>
        </member>
        <member name="F:pdftron.PDF.VerificationOptions.CertificateTrustFlag.e_javascript">
            <summary>analogous to "kPSSigTrustJavaScript" in FDF cert exchange specification. Just like in Acrobat, does not invalidate JavaScript-containing documents, just intended to stop viewers from allowing its use on documents which are not trusted for it.</summary>
        </member>
        <member name="F:pdftron.PDF.VerificationOptions.CertificateTrustFlag.e_dynamic_content">
            <summary>analogous to "kPSSigTrustDynamicContent" in FDF cert exchange specification. Just like in Acrobat, does not invalidate dynamic documents, just intended to stop viewers from allowing its use on documents which are not trusted for it.</summary>
        </member>
        <member name="F:pdftron.PDF.VerificationOptions.CertificateTrustFlag.e_certification_trust">
            <summary>analogous to "kPSSigTrustAuthenticDocuments" in FDF cert exchange specification. Allows certifications using this identity to be verified.</summary>
        </member>
        <member name="F:pdftron.PDF.VerificationOptions.CertificateTrustFlag.e_signing_trust">
            <summary>analogous to "kPSSigTrustSigning" in FDF cert exchange specification. Automatically set even when not specified, just like in Acrobat.</summary>
        </member>
        <member name="T:pdftron.PDF.VerificationOptions.CertificateTrustFlag">
            <summary>Certificate trust flags</summary>
        </member>
        <member name="T:pdftron.PDF.VerificationOptions">
            <summary>
Options pertaining to digital signature verification.
</summary>
        </member>
        <member name="M:pdftron.PDF.DisallowedChange.GetTypeAsString">
            <summary>
Returns a string value representing the semantic type of this disallowed change.
</summary>
            <returns>A string</returns>
        </member>
        <member name="M:pdftron.PDF.DisallowedChange.GetType">
            <summary>
Returns an enumeration value representing the semantic type of this disallowed change.
</summary>
            <returns>An enumeration value of type: Type of DisallowedChange</returns>
        </member>
        <member name="M:pdftron.PDF.DisallowedChange.GetObjNum">
            <summary>
Returns the SDF object number of the indirect object associated with this DisallowedChange.
</summary>
            <returns>An unsigned 32-bit integer value</returns>
        </member>
        <member name="T:pdftron.PDF.DisallowedChange">
            <summary>
Data pertaining to a change detected in a document during a digital
signature modification permissions verification step, the change bein
g both made after the signature was signed, and disallowed by t
he signature's permissions settings.
</summary>
        </member>
        <member name="M:pdftron.PDF.CADModule.IsModuleAvailable">
            <summary>
Find out whether the CAD module is available (and licensed).
</summary>
            <returns>returns true if CAD operations can be performed</returns>
        </member>
        <member name="T:pdftron.PDF.CADModule">
            <summary>
static interface to PDFTron SDKs CAD functionality
</summary>
        </member>
        <member name="M:pdftron.PDF.GeometryCollection.SnapToNearestPixel(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
return the point within the collection which is closest to the queried point. All values are in the page coordinate space.
</summary>
            <param name="x">the x coordinate to snap</param>
            <param name="y">the y coordinate to snap</param>
            <param name="dpi">the resolution of the rendered page, in pixels per inch</param>
            <param name="mode">a combination of flags from the SnappingMode enumeration</param>
            <returns>a point within the collection, closest to the queried point. If the collection is empty, the queried point will be returned unchanged</returns>
        </member>
        <member name="M:pdftron.PDF.GeometryCollection.SnapToNearest(System.Double,System.Double,System.Int32)">
            <summary>
return the point within the collection which is closest to the queried point. All values are in the page coordinate space.
</summary>
            <param name="x">the x coordinate to snap, in page coordinates</param>
            <param name="y">the y coordinate to snap, in page coordinates</param>
            <param name="mode">a combination of flags from the SnappingMode enumeration</param>
            <returns>a point within the collection, closest to the queried point. If the collection is empty, the queried point will be returned unchanged</returns>
        </member>
        <member name="T:pdftron.PDF.GeometryCollection">
            <summary>
A Preprocessed PDF geometry collection
</summary>
        </member>
        <member name="M:pdftron.PDF.OCRModule.ApplyOCRXmlToPDF(pdftron.PDF.PDFDoc,System.String)">
            <summary>
Add hidden text layer to a PDF consisting of raster image(s).
</summary>
            <param name="dst">The source and destination document</param>
            <param name="xml">XML representing OCR results</param>
        </member>
        <member name="M:pdftron.PDF.OCRModule.GetOCRXmlFromPDF(pdftron.PDF.PDFDoc,pdftron.PDF.OCROptions)">
            <summary>
Perform OCR on raster images within a PDF and return resulting XML string.
</summary>
            <param name="src">The source document</param>
            <param name="options">OCR options (optional)</param>
            <returns>XML string represeting OCR results</returns>
        </member>
        <member name="M:pdftron.PDF.OCRModule.GetOCRXmlFromImage(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.OCROptions)">
            <summary>
Perform OCR on an image and return resulting XML string. Side effect: source image is converted to PDF and stored in the destination document.
</summary>
            <param name="dst">The destination document</param>
            <param name="src">The path to the input image</param>
            <param name="options">OCR options (optional)</param>
            <returns>XML string represeting OCR results</returns>
        </member>
        <member name="M:pdftron.PDF.OCRModule.ApplyOCRJsonToPDF(pdftron.PDF.PDFDoc,System.String)">
            <summary>
Add hidden text layer to a PDF consisting of raster image(s).
</summary>
            <param name="dst">The source and destination document</param>
            <param name="json">JSON representing OCR results</param>
        </member>
        <member name="M:pdftron.PDF.OCRModule.GetOCRJsonFromPDF(pdftron.PDF.PDFDoc,pdftron.PDF.OCROptions)">
            <summary>
Perform OCR on raster images within a PDF and return resulting JSON string.
</summary>
            <param name="src">The source document</param>
            <param name="options">OCR options (optional)</param>
            <returns>JSON string represeting OCR results</returns>
        </member>
        <member name="M:pdftron.PDF.OCRModule.GetOCRJsonFromImage(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.OCROptions)">
            <summary>
Perform OCR on an image and return resulting JSON string. Side effect: source image is converted to PDF and stored in the destination document.
</summary>
            <param name="dst">The destination document</param>
            <param name="src">The path to the input image</param>
            <param name="options">OCR options (optional)</param>
            <returns>JSON string represeting OCR results</returns>
        </member>
        <member name="M:pdftron.PDF.OCRModule.ProcessPDF(pdftron.PDF.PDFDoc,pdftron.PDF.OCROptions)">
            <summary>
Add searchable and selectable text to raster images within a PDF.
</summary>
            <param name="dst">The source and destination document</param>
            <param name="options">OCR options (optional)</param>
        </member>
        <member name="M:pdftron.PDF.OCRModule.ImageToPDF(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.OCROptions)">
            <summary>
Convert an image to a PDF with searchable text.
</summary>
            <param name="dst">The destination document</param>
            <param name="src">The path to the input image</param>
            <param name="options">OCR options (optional)</param>
        </member>
        <member name="M:pdftron.PDF.OCRModule.IsModuleAvailable">
            <summary>
Find out whether the OCR module is available (and licensed).
</summary>
            <returns>returns true if OCR operations can be performed</returns>
        </member>
        <member name="T:pdftron.PDF.OCRModule">
            <summary>
static interface to PDFTron SDKs OCR functionality
</summary>
        </member>
        <member name="M:pdftron.SDF.DocSnapshot.Equals(pdftron.SDF.DocSnapshot)">
            <summary>
Returns whether this snapshot's document state is equivalent to another.
</summary>
            <param name="snapshot">the other snapshot with which to compare</param>
            <returns>Whether this snapshot's document state is equivalent to another</returns>
        </member>
        <member name="M:pdftron.SDF.DocSnapshot.IsValid">
            <summary>
Returns whether this snapshot is valid.
</summary>
            <returns>Whether this snapshot is valid</returns>
        </member>
        <member name="M:pdftron.SDF.DocSnapshot.GetHash">
            <summary>
Returns a hash that is unique to particular document states.
</summary>
            <returns>A hash that is unique to particular document states</returns>
        </member>
        <member name="T:pdftron.SDF.DocSnapshot">
            <summary>
Represents a state of the document.
</summary>
        </member>
        <member name="M:pdftron.SDF.ResultSnapshot.IsNullTransition">
            <summary>
Returns whether this transition is a null transition.
</summary>
            <returns>Whether this transition is a null transition</returns>
        </member>
        <member name="M:pdftron.SDF.ResultSnapshot.IsOk">
            <summary>
Returns whether this transition is valid or a null transition.
</summary>
            <returns>Whether this transition is valid or a null transition</returns>
        </member>
        <member name="M:pdftron.SDF.ResultSnapshot.PreviousState">
            <summary>
Retrieves the document state from which this transition has transitioned.
</summary>
            <returns>The previous document state</returns>
        </member>
        <member name="M:pdftron.SDF.ResultSnapshot.CurrentState">
            <summary>
Retrieves the document state to which this transition has transitioned.
</summary>
            <returns>The current document state</returns>
        </member>
        <member name="T:pdftron.SDF.ResultSnapshot">
            <summary>
Represents a transition between two document states.
</summary>
        </member>
        <member name="M:pdftron.SDF.UndoManager.TakeSnapshot">
            <summary>
Creates a snapshot of document state, transitions to the new snapshot.
</summary>
            <returns>A representation of the transition</returns>
        </member>
        <member name="M:pdftron.SDF.UndoManager.GetNextRedoSnapshot">
            <summary>
Gets the next state of the document. This state may be invalid if it is impossible to redo.
</summary>
            <returns>The next state of the document. This state may be invalid if it is impossible to redo</returns>
        </member>
        <member name="M:pdftron.SDF.UndoManager.CanRedo">
            <summary>
Returns a boolean indicating whether it is possible to redo from the current snapshot.
</summary>
            <returns>A boolean indicating whether it is possible to redo from the current snapshot</returns>
        </member>
        <member name="M:pdftron.SDF.UndoManager.Redo">
            <summary>
Restores to the next snapshot, if there is one.
</summary>
            <returns>A representation of the transition to the next snapshot, if there is one</returns>
        </member>
        <member name="M:pdftron.SDF.UndoManager.GetNextUndoSnapshot">
            <summary>
Gets the previous state of the document. This state may be invalid if it is impossible to undo.
</summary>
            <returns>The previous state of the document. This state may be invalid if it is impossible to undo</returns>
        </member>
        <member name="M:pdftron.SDF.UndoManager.CanUndo">
            <summary>
Returns whether it is possible to undo from the current snapshot.
</summary>
            <returns>Whether it is possible to undo from the current snapshot</returns>
        </member>
        <member name="M:pdftron.SDF.UndoManager.Undo">
            <summary>
Restores to the previous snapshot point, if there is one.
</summary>
            <returns>The resulting snapshot id</returns>
        </member>
        <member name="M:pdftron.SDF.UndoManager.DiscardAllSnapshots">
            <summary>
Forget all changes in this manager (without changing the document).
</summary>
            <returns>An invalid DocSnapshot</returns>
        </member>
        <member name="T:pdftron.SDF.UndoManager">
            <summary>
Undo-redo interface; one-to-one mapped to document
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.GetPDFViewTileSummary">
            <summary>
Get a summary of the held tiles of all the know instances of PDFViewImplTiled.
</summary>
            <returns>The json string representing the tile summary</returns>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.DisableLogBackend(pdftron.PDF.PDFNetInternalToolsLogBackend)">
            <summary>
Disable a particular log backend.
</summary>
            <param name="backend">The log backend to disable</param>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.EnableLogBackend(pdftron.PDF.PDFNetInternalToolsLogBackend)">
            <summary>
Enable a particular log backend.
</summary>
            <param name="backend">The log backend to enable</param>
            <returns>Returns true if the backend is available and functioning</returns>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.SetCutoffLogThreshold(pdftron.PDF.PDFNetInternalToolsLogLevel)">
            <summary>
set the global log cutoff. *No* log statements with a level less than this will pass.
</summary>
            <param name="threshold">The threshold. Entries with a priority greater than or equal to this level will be logged</param>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.SetDefaultLogThreshold(pdftron.PDF.PDFNetInternalToolsLogLevel)">
            <summary>
set the log level for streams that do not otherwise have their level set.
</summary>
            <param name="threshold">Entries with a priority greater than or equal to this level will be logged</param>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.SetThresholdForLogStream(System.String,pdftron.PDF.PDFNetInternalToolsLogLevel)">
            <summary>
set the log level for some particular stream.
</summary>
            <param name="stream_name">the name of the stream you wish to configure</param>
            <param name="stream_threshold">the stream threshold. Entries with a priority greater than or equal to this level will be logged</param>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.SetLogFileName(System.String)">
            <summary>
Set the filename to log to.
</summary>
            <param name="log_filename">the name of the file to log into</param>
            <returns>returns true we were able to open a log file successfully</returns>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.SetLogLocation(System.String,System.String)">
            <summary>
Set the directory and filename to log to. If the directory does not exist, it will be created.
</summary>
            <param name="log_directory">the path of the directory to log into</param>
            <param name="log_filename">the name of the file to log into</param>
            <returns>returns true we were able to open a log file successfully</returns>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.LogStreamMessage(pdftron.PDF.PDFNetInternalToolsLogLevel,System.String,System.String,System.String,System.Int32)">
            <summary>
Log a message to a particular stream using the core logging routines.
</summary>
            <param name="threshold">the importance of this log message</param>
            <param name="stream">the name of the stream to which the message belongs (a category label)</param>
            <param name="message">the message to be logged</param>
            <param name="filename">the filename from which the log message originates</param>
            <param name="line_number">the line number from which the log message originates</param>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.LogMessage(pdftron.PDF.PDFNetInternalToolsLogLevel,System.String,System.String,System.Int32)">
            <summary>
Log a message to a particular stream using the core logging routines.
</summary>
            <param name="threshold">the importance of this log message</param>
            <param name="message">the message to be logged</param>
            <param name="filename">the filename from which the log message originates</param>
            <param name="line_number">the line number from which the log message originates</param>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.RunUniversalConversionTests(System.String)">
            <summary>
Run universal conversion tests on all the documents found in the given path.
</summary>
            <param name="path_with_docs">The path to search within for documents to convert</param>
            <returns>The json string representing the test results</returns>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.GetDefaultConfigFile">
            <summary>
Get the default configuration json file. You could then modify it and pass it into ConfigureLogFromJsonString.
</summary>
            <returns>The json string representing the default log configuration</returns>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.ConfigureLogFromJsonString(System.String)">
            <summary>
Attempt to configure the logging ssytem with a json configuration file.
</summary>
            <param name="config_string">Configuration Data in json form</param>
            <returns>Indicates if the configuration was successful</returns>
        </member>
        <member name="M:pdftron.PDF.PDFNetInternalTools.IsLogSystemAvailable">
            <summary>
Find out whether the logging system is built into this particular binary.
</summary>
            <returns>returns true if TRN_LOG_ENABLE is defined in core</returns>
        </member>
        <member name="T:pdftron.PDF.PDFNetInternalTools">
            <summary>
Encapsulates the conversion of a single document from one format to another.
</summary>
            <remark>
DocumentConversion instances are created through methods belonging to
the Convert class. See Convert.WordToPDFConversion for an example.
</remark>
        </member>
        <member name="M:pdftron.PDF.CubicCurveBuilder.GetCubicYCoord(System.Int32)">
            <summary>
Get the cubic Y coordinate.
</summary>
            <param name="index">the index of the coordinate. Must be less than NumCubicPoints()</param>
            <returns>Y coordinate of the indicated point on the cubic curve</returns>
        </member>
        <member name="M:pdftron.PDF.CubicCurveBuilder.GetCubicXCoord(System.Int32)">
            <summary>
Get the cubic X coordinate.
</summary>
            <param name="index">the index of the coordinate. Must be less than NumCubicPoints()</param>
            <returns>X coordinate of the indicated point on the cubic curve</returns>
        </member>
        <member name="M:pdftron.PDF.CubicCurveBuilder.NumCubicPoints">
            <summary>
Number of generated cubic points.
</summary>
            <returns>Indicates that the conversion succeeded, failed, or was cancelled</returns>
        </member>
        <member name="M:pdftron.PDF.CubicCurveBuilder.AddSourcePoint(System.Double,System.Double)">
            <summary>
Add a source xy point.
</summary>
            <param name="x">the x coordinate</param>
            <param name="y">the y coordinate</param>
        </member>
        <member name="M:pdftron.PDF.CubicCurveBuilder.NumSourcePoints">
            <summary>
Number of source points.
</summary>
            <returns>Indicates that the conversion succeeded, failed, or was cancelled</returns>
        </member>
        <member name="T:pdftron.PDF.CubicCurveBuilder">
            <summary>
Creates Cubic Curves from linear points
</summary>
            <remark>
DocumentConversion instances are created through methods belonging to
the Convert class. See Convert.WordToPDFConversion for an example.
</remark>
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.GetDoc">
            <summary>
Gets the PDFDoc from the conversion. Can be accessed at any time during or after conversion.
</summary>
            <returns>The conversion's PDFDoc</returns>
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.GetWarningString(System.Int32)">
            <summary>
Retrieve warning strings that have been collected during the conversion process. Warning: experimental interface; this method may be renamed or replaced with equivalent functionality in the future.
</summary>
            <param name="index">the index of the string to be retrieved. Must be less than GetNumWarnings()</param>
            <returns>The value of the particular warning string</returns>
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.GetNumWarnings">
            <summary>
Return the number of warning strings generated during the conversion process. Warning: experimental interface; this method may be renamed or replaced with equivalent functionality in the future.
</summary>
            <returns>The number of stored warning strings</returns>
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.GetErrorString">
            <summary>
If the conversion finsihed with some kind of error, this returns the value of the the error description ()otherwise returns an empty string.
</summary>
            <returns>The error description. Will be blank unless GetConversionStatus returns Failure</returns>
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.GetNumConvertedPages">
            <summary>
Returns the number of pages which have been added to the destination document. Will never decrease, and will not change after the conversion status becomes "complete".
</summary>
            <returns>The number of pages that have been converted</returns>
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.GetProgressLabel">
            <summary>
Returns the label for the current conversion stage. May return a blank string. Warning: experimental interface; this method may be renamed or replaced with equivalent functionality in the future.
</summary>
            <returns>The stage label</returns>
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.GetProgress">
            <summary>
Returns a number from 0.0 to 1.0, representing the best estimate of conversion progress. This number is only an indicator, and should not be used to dictate program logic (in particular, it is possible for this method to return 1.0 while there is still work to be done. Use GetConversionStatus() to find out when the conversion is fully complete).
</summary>
            <returns>The conversion progress. Will never return a smaller number than a previous call</returns>
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.HasProgressTracking">
            <summary>
Determine whether this DocumentConversion has progress reporting capability.
</summary>
            <returns>True if GetProgress is expected to return usable values</returns>
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.IsCancelled">
            <summary>
Has the conversion been cancelled?.
</summary>
            <returns>Returns true if CancelConversion has been called previously</returns>
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.CancelConversion">
            <summary>
Cancel the current conversion, forcing TryConvert or Convert to return.
</summary>
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.GetConversionStatus">
            <summary>
Get the state of the conversion process. Pair this with ConvertNextPage().
</summary>
            <returns />
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.ConvertNextPage">
            <summary>
Perform the conversion. Will throw an exception on failure. Does nothing if the conversion is already complete. Use GetConversionStatus() to check if there is remaining content to be converted.
</summary>
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.Convert">
            <summary>
Perform the conversion. Will throw an exception on failure.
</summary>
        </member>
        <member name="M:pdftron.PDF.DocumentConversion.TryConvert">
            <summary>
Perform the conversion. If the result of the conversion is failure, then GetErrorString will contain further information about the failure.
</summary>
            <returns>Indicates that the conversion succeeded, failed, or was cancelled</returns>
        </member>
        <member name="T:pdftron.PDF.DocumentConversion">
            <summary>
Encapsulates the conversion of a single document from one format to another.
</summary>
            <remark>
DocumentConversion instances are created through methods belonging to
the Convert class. See Convert.WordToPDFConversion for an example.
</remark>
        </member>
        <member name="M:pdftron.PDF.Flattener.Dispose">
            <summary> Releases all resources used by the Flattener </summary>
        </member>
        <member name="M:pdftron.PDF.Flattener.Process(pdftron.PDF.PDFDoc,pdftron.PDF.Flattener.FlattenMode)">
            <summary>
Process each page in the PDF, flattening content that matches the mode criteria.
</summary>
            <param name="doc"> the document to flatten.
</param>
            <param name="mode"> indicates the criteria for which elements are flattened.
</param>
        </member>
        <member name="M:pdftron.PDF.Flattener.Process(pdftron.PDF.Page,pdftron.PDF.Flattener.FlattenMode)">
            <summary>
Process the given page, flattening content that matches the mode criteria.
</summary>
            <param name="page"> the page to flatten.
</param>
            <param name="mode"> indicates the criteria for which elements are flattened.
</param>
        </member>
        <member name="F:pdftron.PDF.Flattener.FlattenMode.e_fast">
            <summary>
Feature reduce PDF while trying to preserve some complex PDF features 
(such as vector figures, transparency, shadings, blend modes, Type3 fonts 
etc.) for pages that are already fast to render. This option can also 
result in smaller &amp; faster files compared to e_simple, but the pages may 
have more complex structure.
</summary>
        </member>
        <member name="F:pdftron.PDF.Flattener.FlattenMode.e_simple">
            <summary>
Feature reduce PDF to a simple two layer representation consisting 
of a single background RGB image and a simple top text layer.
</summary>
        </member>
        <member name="M:pdftron.PDF.Flattener.SetPathHinting(System.Boolean)">
            <summary>
Enable or disable path hinting.
</summary>
            <param name="path_hinting"> if true path hinting is enabled. Path hinting is used to slightly
adjust paths in order to avoid or alleviate artifacts of hair line cracks between
certain graphical elements. This option is turned on by default. 
</param>
        </member>
        <member name="M:pdftron.PDF.Flattener.SetThreshold(pdftron.PDF.Flattener.Threshold)">
            <summary>
Used to control how precise or relaxed text flattening is. When some text is 
preserved (not flattened to image) the visual appearance of the document may be altered.
</summary>
            <param name="threshold"> the threshold setting to use.
</param>
        </member>
        <member name="F:pdftron.PDF.Flattener.Threshold.e_keep_all">
            <summary>
Only render text that are completely occluded, or used as a clipping path.
</summary>
        </member>
        <member name="F:pdftron.PDF.Flattener.Threshold.e_keep_most">
            <summary>
Only render text that are seriously clipped or occluded.
</summary>
        </member>
        <member name="F:pdftron.PDF.Flattener.Threshold.e_default">
            <summary>
Render text that are somewhat clipped or occluded.
</summary>
        </member>
        <member name="F:pdftron.PDF.Flattener.Threshold.e_strict">
            <summary>
Render text that are marginally clipped or occluded.
</summary>
        </member>
        <member name="F:pdftron.PDF.Flattener.Threshold.e_very_strict">
            <summary>
Render (flatten) any text that is clipped or occluded.
</summary>
        </member>
        <member name="M:pdftron.PDF.Flattener.SetJPGQuality(System.UInt32)">
            <summary>
Specifies the compression quality to use when generating JPEG images.
</summary>
            <param name="quality"> the JPEG compression quality, from 0(highest compression) to 100(best quality).
</param>
        </member>
        <member name="M:pdftron.PDF.Flattener.SetPreferJPG(System.Boolean)">
            <summary>
Specifies whether to leave images in existing compression, or as JPEG.
</summary>
            <param name="jpg"> if true PDF will contain all JPEG images.
</param>
        </member>
        <member name="M:pdftron.PDF.Flattener.SetMaximumImagePixels(System.UInt32)">
            <summary>
Specifies the maximum image size in pixels.
</summary>
            <param name="max_pixels"> the maximum number of pixels an image can have.
</param>
        </member>
        <member name="M:pdftron.PDF.Flattener.SetDPI(System.UInt32)">
            <summary>
The output resolution, from 1 to 1000, in Dots Per Inch (DPI) at which to 
render elements which cannot be directly converted. 
the default value is 96 Dots Per Inch
</summary>
            <param name="dpi"> the resolution in Dots Per Inch
</param>
        </member>
        <member name="M:pdftron.PDF.Flattener.#ctor">
            <summary>
Flattener constructor
</summary>
        </member>
        <member name="T:pdftron.PDF.Flattener">
            <summary>
Flattener is a utility class that can be used to create PDFï¿½s that render 
faster on devices with lower memory and speeds.

By using the FlattenMode::e_flatten option each page in the PDF will be
reduced to a single background image, with the remaining text over top in vector
format. Some text may still get flattened, in particular any text that is clipped, 
or underneath, other content that will be flattened.

On the other hand the FlattenMode::e_simple will not flatten simple content, such
as simple straight lines, nor will it flatten Type3 fonts.
 Flattener is a optional PDFNet add-on that can be used to simplify and optimize 
existing PDF's to render faster on devices with lower memory and speeds.

PDF documents can frequently contain very complex page description (e.g. 
thousands of paths, different shadings, color spaces, blend modes, large images 
etc.) that may not be suitable for interactive viewing on mobile devices.
Flattener can be used to speed-up PDF rendering on mobile devices and on the Web 
by simplifying page content (e.g. flattening complex graphics into images) while 
maintaining vector text whenever possible.

By using the FlattenMode::e_simple option each page in the PDF will be
reduced to a single background image, with the remaining text over top in vector
format. Some text may still get flattened, in particular any text that is clipped, 
or underneath, other content that will be flattened.

On the other hand the FlattenMode::e_fast will not flatten simple content, such
as simple straight lines, nor will it flatten Type3 fonts.
</summary>
            <remarks>'Flattener' is available as a separately licensable add-on option to PDFNet 
core license.</remarks>
            <remarks>See 'pdftron.PDF.Optimizer' for alternate approach to optimize PDFs with 
focus on file size reduction.</remarks>
        </member>
        <member name="P:pdftron.PDF.PathData.defined">
            <summary> If PathData was acquired from Font.GetGlyphPath then this
indicates if this is an 'undefined character code'.</summary>
        </member>
        <member name="P:pdftron.PDF.PathData.points">
            <summary>The array of path data points.</summary>
        </member>
        <member name="P:pdftron.PDF.PathData.operators">
            <summary>Array of path segment types.</summary>
        </member>
        <member name="M:pdftron.PDF.PathData.#ctor(System.Boolean,System.Byte[],System.Double[])">
            <summary> Create a path data object </summary>
            <param name="defined">false if this is an undefined character code</param>
            <param name="operators">an array of path segment types</param>
            <param name="points">an array of path data points.</param>
        </member>
        <member name="M:pdftron.PDF.PathData.#ctor">
            <summary> Create empty path data object.

</summary>
        </member>
        <member name="F:pdftron.PDF.PathData.PathSegmentType.e_closepath">
            <summary> Close the current subpath by drawing a straight line from the current point 
to current subpath's initial point.
Number of arguments: 0
</summary>
        </member>
        <member name="F:pdftron.PDF.PathData.PathSegmentType.e_rect">
            <summary> A rectangle at the given (x,y) coordinate and the given width and height (w, h).
Number of arguments: 4
</summary>
        </member>
        <member name="F:pdftron.PDF.PathData.PathSegmentType.e_conicto">
            <summary>A quadratic Bï¿½zier curve from the current point to (x,y) using (x1,y1) as
the control point. Note that e_conicto does not appear in PDF content streams.
This operator is only used to represent glyph outlines (e.g. PDF::Font::GetGlyphPath()
may return a path containing e_conicto operator).
Number of arguments: 4
</summary>
        </member>
        <member name="F:pdftron.PDF.PathData.PathSegmentType.e_cubicto">
            <summary> A cubic Bï¿½zier curve from the current point to (x,y) using (x1,y1) as
the control point at the beginning of the curve and (x2,y2) as the control
point at the end of the curve.
Number of arguments: 6
</summary>
        </member>
        <member name="F:pdftron.PDF.PathData.PathSegmentType.e_lineto">
            <summary> A line from the current point to the given (x,y) coordinate which becomes 
the new current point.
Number of arguments: 2
</summary>
        </member>
        <member name="F:pdftron.PDF.PathData.PathSegmentType.e_moveto">
            <summary> Start a new sub-path at the given (x,y) coordinate.
Number of arguments: 2
</summary>
        </member>
        <member name="T:pdftron.PDF.PathData.PathSegmentType">
            <summary> Enumaration used to indicate operator type. </summary>
        </member>
        <member name="T:pdftron.PDF.PathData">
            <summary>
Contains the information required to draw the path. Contains an array of 
PathSegmentType Operators and corresponding path data Points. A point may 
be on or off (off points are control points). The meaning of a point 
depends on associated id (or segment type) in the path segment type array.
</summary>
        </member>
        <member name="M:pdftron.PDF.ContentReplacer.Dispose">
            <summary> Releases all resources used by the ContentReplacer </summary>
        </member>
        <member name="M:pdftron.PDF.ContentReplacer.Process(pdftron.PDF.Page)">
            <summary>
Apply the replacement instructions to the target page. Subsequent calls
to 'Process' can be made on other pages, and it will apply the same rules.
</summary>
            <param name="page"> The page to apply the content replacement instructions to.
</param>
        </member>
        <member name="M:pdftron.PDF.ContentReplacer.SetMatchStrings(System.String,System.String)">
            <summary>
Change the delimiters from '[' and ']' to arbitary strings.
</summary>
            <param name="start_str"> The starting delimiter string.
</param>
            <param name="end_str"> The ending delimiter string.
</param>
            <remarks> While empty strings are allowed as delimiters, a warning is displayed.
Otherwise there are no restrictions.  For example, after SetMatchStrings("{{", "}}"), 
AddString("TITLE", "Doctor") will replace any text consisting of "{{TITLE}}" with 
"Doctor".  Similarly, after SetMatchStrings("Beginning...", "...ending."), 
AddString("TITLE", "Doctor") will replace "Beginning...TITLE...ending." with "Doctor".  
</remarks>
        </member>
        <member name="M:pdftron.PDF.ContentReplacer.AddString(System.String,System.String)">
            <summary>
Any text of the form "[template_text]" will be replaced by "replacement_text".
</summary>
            <param name="template_text"> The text to remove.
</param>
            <param name="replacement_text"> The new text that will appear in place of 'template_text'.
</param>
            <remarks> Only text wrapped in '[' and ']' will be checked, and if it matches 'template_text',
then 'template_text' and the surrounding square braces will be replaced
by 'replacement_text'. For example AddString("TITLE", "Doctor") will replace any
text consisting of "[TITLE]" with "Doctor".
</remarks>
        </member>
        <member name="M:pdftron.PDF.ContentReplacer.AddText(pdftron.PDF.Rect,System.String)">
            <summary>
All text inside 'target_region' will be deleted and replaced with 'replacement_text'. 
</summary>
            <param name="target_region"> The rectangle defining the area in which all text will
be replaced by 'replacement_text'.
</param>
            <param name="replacement_text"> The new text that will replace the existing text
in 'target_region'.
</param>
            <remarks> The 'replacement_text' will be styled in the same font/color/style that is used 
by the original text. If there are multiple font styles, the most prevalent style will
be used. Also, the 'replacement_text' will wrap within the 'target_region', 
but if it is too long, the overflow text will not be visible, and no surrounding
content will be affected.
</remarks>
        </member>
        <member name="M:pdftron.PDF.ContentReplacer.AddImage(pdftron.PDF.Rect,pdftron.SDF.Obj)">
            <summary>
Replace the image that best fits 'target_region' with 'replacement_image'.
</summary>
            <param name="target_region"> The rectangle defining the area in which an image
that best fits the rectangle will be replaced by 'replacement_image'.
</param>
            <param name="replacement_image"> The 'SDF.Obj' of a 'PDF.Image' object.
</param>
            <remarks> The best fit is the image that closest matches 'target_region'. For example if
there are two images on the page, one taking up the entire page, and the other 
smaller, and the smaller one has similar dimensions and position of 
'target_region', then the smaller image would be replaced, not the larger.
Furthermore, if 'target_region' encloses multiple images, then only the image
with the largest area will be replaced.
</remarks>
        </member>
        <member name="M:pdftron.PDF.ContentReplacer.#ctor">
            <summary>
Create a new ContentReplacer object, to which replacement rules will be added.
The same object can be used to 'Process' multiple pages.
</summary>
        </member>
        <member name="T:pdftron.PDF.ContentReplacer">
            <summary>
ContentReplacer is a utility class for replacing content (text and images)
in existing PDF (template) documents.

Users can replace content in a PDF page using the following operations:
- Replace an image that exists in a target rectangle with a replacement image. 
- Replace text that exists in a target rectangle with replacement text. 
- Replace all instances of a specially marked string with replacement string.

<example>
The following code replaces an image in a target region. It also replaces
the text "[NAME]" and "[JOB_TITLE]" with "John Smith"
and "Software Developer" respectively. Notice the square braces ('[' and ']') on
the target strings in the original PDFDoc. These square braces are not included in
the actual function calls below, as they're implicitly added.

<code>
PDFDoc doc("../../TestFiles/BusinessCardTemplate.pdf");
doc.InitSecurityHandler();
ContentReplacer replacer;
Page pg = doc.GetPage(1);
Image img = Image::Create(doc, "../../TestFiles/peppers.jpg");
replacer.AddImage(page.GetMediaBox(), img.GetSDFObj());
replacer.AddString("NAME", "John Smith");
replacer.AddString("JOB_TITLE", "Software Developer");
replacer.Process(page);
</code></example></summary>
        </member>
        <member name="M:pdftron.PDF.Redactor.Redact(pdftron.PDF.PDFDoc,System.Collections.ArrayList,pdftron.PDF.Redactor.Appearance)">
            <summary> Apply the redactions specified in red_array to the PDFDoc doc.
</summary>
            <param name="doc"> the document to redact.
</param>
            <param name="red_arr"> an array of redaction regions.
</param>
            <param name="app"> optional parameter used to customize the appearance of the redaction overlay.
</param>
        </member>
        <member name="M:pdftron.PDF.Redactor.Redact(pdftron.PDF.PDFDoc,System.Collections.ArrayList,pdftron.PDF.Redactor.Appearance,System.Boolean)">
            <summary> Apply the redactions specified in red_array to the PDFDoc doc.
</summary>
            <param name="doc"> the document to redact.
</param>
            <param name="red_arr"> an array of redaction regions.
</param>
            <param name="app"> optional parameter used to customize the appearance of the redaction overlay.
</param>
            <param name="ext_neg_mode"> if true, negative redactions expand beyond the page to remove 
content from other pages in the document. if false, the redaction will be localized
to the given page.
</param>
        </member>
        <member name="M:pdftron.PDF.Redactor.Redact(pdftron.PDF.PDFDoc,System.Collections.ArrayList,pdftron.PDF.Redactor.Appearance,System.Boolean,System.Boolean)">
            <summary> Apply the redactions specified in red_array to the PDFDoc doc.
</summary>
            <param name="doc"> the document to redact.
</param>
            <param name="red_arr"> an array of redaction regions.
</param>
            <param name="app"> optional parameter used to customize the appearance of the redaction overlay.
</param>
            <param name="ext_neg_mode"> if true, negative redactions expand beyond the page to remove 
content from other pages in the document. if false, the redaction will be localized
to the given page.
</param>
            <param name="page_coord_sys"> if true, redaction coordinates are relative to the lower-left corner of the page,
otherwise the redaction coordinates are defined in PDF user coordinate system (which may or may not coincide with 
page coordinates).
</param>
        </member>
        <member name="P:pdftron.PDF.Redactor.Appearance.RedactedContentColor">
            <summary>
Specifies the color used to paint the regions where content was removed.
</summary>
            <remarks>Default value is Gray color.</remarks>
        </member>
        <member name="F:pdftron.PDF.Redactor.Appearance.ShowRedactedContentRegions">
            <summary>
Specifies whether an overlay should be drawn in place of the redacted content.
This option can be used to indicate the areas where the content was removed from
without revealing the content itself. 		
</summary>
            <remarks>Default value is False.</remarks>
            <remarks>The overlay region used RedactedContentColor as a fill color.</remarks>
        </member>
        <member name="P:pdftron.PDF.Redactor.Appearance.VertTextAlignment">
            <summary>
Specifies the vertical text alignment in the overlay:
  align&lt;0  -&gt; text will be top aligned.
  align==0 -&gt; text will be center aligned.
  align&gt;0  -&gt; text will be bottom aligned.
</summary>
        </member>
        <member name="P:pdftron.PDF.Redactor.Appearance.HorizTextAlignment">
            <summary>
Specifies the text alignment in the overlay:
  align&lt;0  -&gt; text will be left aligned.
  align==0 -&gt; text will be center aligned.
  align&gt;0  -&gt; text will be right aligned.
</summary>
        </member>
        <member name="P:pdftron.PDF.Redactor.Appearance.TextColor">
            <summary>
Specifies the color used to paint the text in the overlay (in RGB).
</summary>
        </member>
        <member name="P:pdftron.PDF.Redactor.Appearance.MaxFontSize">
            <summary>
Specifies the maximum font size used to represent the text in the overlay.
</summary>
        </member>
        <member name="P:pdftron.PDF.Redactor.Appearance.MinFontSize">
            <summary>
Specifies the minimum font size used to represent the text in the overlay.
</summary>
        </member>
        <member name="P:pdftron.PDF.Redactor.Appearance.TextFont">
            <summary>
Specifies the font used to represent the text in the overlay.
</summary>
        </member>
        <member name="P:pdftron.PDF.Redactor.Appearance.UseOverlayText">
            <summary>
Specifies if the text (e.g. "Redacted" etc.) should be placed on 
top of the overlay. The remaining properties relate to the positioning, 
and styling of the overlay text.
</summary>
        </member>
        <member name="P:pdftron.PDF.Redactor.Appearance.Border">
            <summary>
Border specifies if the overlay will be surrounded by a border.
</summary>
        </member>
        <member name="P:pdftron.PDF.Redactor.Appearance.NegativeOverlayColor">
            <summary>
NegativeOverlayColor defines the overlay background color in RGB color space for negative redactions.
</summary>
        </member>
        <member name="P:pdftron.PDF.Redactor.Appearance.PositiveOverlayColor">
            <summary>
PositiveOverlayColor defines the overlay background color in RGB color space for positive redactions.
</summary>
        </member>
        <member name="P:pdftron.PDF.Redactor.Appearance.RedactionOverlay">
            <summary>
If RedactionOverlay is set to true, Redactor will draw an overlay
covering all redacted regions. The rest of properties in the 
Appearance class defines visual properties of the overlay. 
if false the overlay region will not be drawn.
</summary>
        </member>
        <member name="T:pdftron.PDF.Redactor.Appearance">
            <summary> 
Class used to customize the appearance of the optional redaction overlay.
</summary>
        </member>
        <member name="M:pdftron.PDF.Redactor.Redaction.#ctor(System.Int32,pdftron.PDF.Rect,System.Boolean,System.String)">
            <summary />
            <param name="page_num">a page number on which to perform the redaction.
</param>
            <param name="bbox">the bounding box for the redaction in PDF page coordinate system.
</param>
            <param name="negative">if true, remove the content outside of the redaction area, 
otherwise remove the content inside the redaction area.
</param>
            <param name="text">optional anchor text to be placed in the redaction region.
</param>
        </member>
        <member name="T:pdftron.PDF.Redactor">
Redactor
<summary><para>
PDF Redactor is a separately licensable Add-on that offers options to remove 
(not just covering or obscuring) content within a region of PDF. 
With printed pages, redaction involves blacking-out or cutting-out areas of 
the printed page. With electronic documents that use formats such as PDF, 
redaction typically involves removing sensitive content within documents for 
safe distribution to courts, patent and government institutions, the media, 
customers, vendors or any other audience with restricted access to the content. 
</para><para>
The redaction process in PDFNet consists of two steps:
</para><para>
 a) Content identification: A user applies redact annotations that specify the 
pieces or regions of content that should be removed. The content for redaction 
can be identified either interactively (e.g. using 'pdftron.PDF.PDFViewCtrl' 
as shown in PDFView sample) or programmatically (e.g. using 'pdftron.PDF.TextSearch'
or 'pdftron.PDF.TextExtractor'). Up until the next step is performed, the user 
can see, move and redefine these annotations.
</para><para>
 b) Content removal: Using 'pdftron.PDF.Redactor.Redact()' the user instructs 
PDFNet to apply the redact regions, after which the content in the area specified 
by the redact annotations is removed. The redaction function includes number of 
options to control the style of the redaction overlay (including color, text, 
font, border, transparency, etc.).
</para><para>
PDFTron Redactor makes sure that if a portion of an image, text, or vector graphics 
is contained in a redaction region, that portion of the image or path data is 
destroyed and is not simply hidden with clipping or image masks. PDFNet API can also 
be used to review and remove metadata and other content that can exist in a PDF 
document, including XML Forms Architecture (XFA) content and Extensible Metadata 
Platform (XMP) content.
</para></summary></member>
        <member name="M:pdftron.PDF.HTML2PDF.SetCookieJar(System.String)">
            <summary> Path of file used for loading and storing cookies.

</summary>
            <param name="path">Path to file used for loading and storing cookies.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.SetImageQuality(System.Int32)">
            <summary> JPEG compression factor to use when generating PDF.

</summary>
            <param name="quality">Compression factor, e.g. 92.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.SetImageDPI(System.Int32)">
            <summary> Maximum DPI to use for images in the generated PDF.

</summary>
            <param name="dpi">Maximum dpi of images in produced PDF, e.g. 80.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.SetMargins(System.String,System.String,System.String,System.String)">
            <summary> Set margins of generated PDF.

</summary>
            <param name="top">Size of the top margin, e.g. "2cm". 
</param>
            <param name="bottom">Size of the bottom margin, e.g. "2cm".
</param>
            <param name="left">Size of the left margin, e.g. "2cm".
</param>
            <param name="right">Size of the right margin, e.g. "2cm".
</param>
            <remarks>  Supported units are mm, cm, m, in, pica(pc), pixel(px) and point(pt).
</remarks>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.SetPDFCompression(System.Boolean)">
            <summary> Use lossless compression to create PDF.

</summary>
            <param name="enable">If true loss less compression will be used to
create PDF.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.DumpOutline(System.String)">
            <summary> Save outline to a xml file.

</summary>
            <param name="xml_file">Path of where xml data representing outline 
of produced PDF should be saved to.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.SetOutline(System.Boolean,System.Int32)">
            <summary> Add bookmarks to the PDF.

</summary>
            <param name="enable">If true bookmarks will be generated for the
produced PDF.
</param>
            <param name="depth">Maximum depth of the outline (e.g. 4).
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.SetDPI(System.Int32)">
            <summary> Change the DPI explicitly for the output PDF.

</summary>
            <param name="dpi">Dots per inch, e.g. 80.
<remarks> This has no effect on X11 based systems.
Results also depend on SetSmartShrinking.
</remarks></param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.SetLandscape(System.Boolean)">
            <summary> Set page orientation for output PDF.

</summary>
            <param name="enable">If true generated PDF pages will be orientated to
landscape, otherwise orientation will be portrait.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.SetPaperSize(System.String,System.String)">
            <summary> Manually set the paper dimensions of the produced PDF.

</summary>
            <param name="width">Width of the page, e.g. "4cm".
</param>
            <param name="height">Height of the page, eg. "12in".
</param>
            <remarks>  Supported units are mm, cm, m, in, pica(pc), pixel(px) and point(pt).
</remarks>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.SetPaperSize(pdftron.PDF.PrinterMode.PaperSize)">
            <summary> Set paper size of output PDF

</summary>
            <param name="size">Paper size to use for produced PDF.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.Dispose">
            <summary> Releases all resources used by the HTML2PDF </summary>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.#ctor">
            <summary> Default constructor.

</summary>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.SetModulePath(System.String)">
            <summary> Set the first location that PDFNet will look for the html2pdf module.

</summary>
            <param name="path">A folder or file path. If non-empty, PDFNet will only
look in path for the html2pdf module, otherwise it will search in
the default locations for the module.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.GetLog">
            <summary> Get results of conversion, including errors and warnings, in human readable form.

</summary>
            <returns> String containing results of conversion.
</returns>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.SetQuiet(System.Boolean)">
            <summary> Display HTML to PDF conversion progress, warnings, and errors, to stdout.

</summary>
            <param name="quiet">If false, progress information is sent to stdout during conversion.
</param>
            <remarks> You can get the final results using GetLog.
</remarks>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.GetHTTPErrorCode">
            <summary> Return the largest HTTP error code encountered during conversion

</summary>
            <returns> the largest HTTP code greater then or equal to 300 encountered during loading
of any of the supplied objects, if no such error code is found 0 is returned.
</returns>
            <remarks> This function will only return a useful result after Convert has been called.
</remarks>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.Convert(pdftron.PDF.PDFDoc)">
            <summary> Convert HTML documents and append the results
to doc.

</summary>
            <remarks> html2pdf module must be located in the working directory, or
with the PDFNet library.
</remarks>
            <returns> true if successful, otherwise false. Use 
GetHttpErrorCode for possible HTTP errors.
</returns>
            <param name="doc">Target PDF to which converted HTML pages will
be appended to.
</param>
            <remarks> Use InsertFromURL and InsertFromHtmlString to
add HTML documents to be converted.
</remarks>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.InsertTOC(pdftron.PDF.HTML2PDF.TOCSettings)">
            <summary> Add a table of contents to the produced PDF.

</summary>
            <param name="settings">Settings for the table of contents.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.InsertTOC">
            <summary> Add a table of contents to the produced PDF.

</summary>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.InsertFromHtmlString(System.String,pdftron.PDF.HTML2PDF.WebPageSettings)">
            <summary> Convert HTML encoded in string.

</summary>
            <param name="html">String containing HTML code.
</param>
            <param name="settings">How the HTML content described in html is loaded.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.InsertFromHtmlString(System.String)">
            <summary> Convert HTML encoded in string.

</summary>
            <param name="html">String containing HTML code.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.InsertFromURL(System.String,pdftron.PDF.HTML2PDF.WebPageSettings)">
            <summary> Add a web page to be converted. A single URL typically 
results in many PDF pages.

</summary>
            <param name="url">HTML page, or relative path to local HTML page.
</param>
            <param name="settings">How the web page should be loaded and converted
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.InsertFromURL(System.String)">
            <summary> Add a web page to be converted. A single URL typically 
results in many PDF pages.
<param name="url">HTML page, or relative path to local HTML page
</param></summary>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.Convert(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.HTML2PDF.WebPageSettings)">
            <summary> Convert the HTML document at url and append the results
to doc.</summary>
            <remarks> html2pdf module must be located in the working directory, or
with the PDFNet library.
</remarks>
            <returns> true if successful, otherwise false. Use 
GetHttpErrorCode for possible HTTP errors.
</returns>
            <param name="doc">Target PDF to which converted HTML pages will
be appended to.
</param>
            <param name="url">HTML page, or relative path to local HTML page,
that will be converted to PDF format.
</param>
            <param name="settings">Modify how the web page is loaded and
converted.
</param>
            <remarks> If you wish to convert more than one web page you need to use
an instance of HTML2PDF.
</remarks>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.Convert(pdftron.PDF.PDFDoc,System.String)">
            <summary> Convert the HTML document at url and append the results
to doc.

</summary>
            <remarks> html2pdf module must be located in the working directory, or
with the PDFNet library.
</remarks>
            <returns> true if successful, otherwise false. Use 
GetHttpErrorCode for possible HTTP errors.
</returns>
            <param name="doc">Target PDF to which converted HTML pages will
be appended to.
</param>
            <param name="url">HTML page, or relative path to local HTML page,
that will be converted to PDF format.
</param>
            <remarks> If you wish to convert more than one web page you need to use
an instance of HTML2PDF.
</remarks>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.TOCSettings.SetXsl(System.String)">
            <summary> xsl style sheet used to convert outline XML into a
table of content.

</summary>
            <param name="style_sheet">Path to xsl style sheet to be used to generate
this table of contents.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.TOCSettings.SetTextSizeShrink(System.Double)">
            <summary> How much to shrink font for every level, e.g. 0.8

</summary>
            <param name="shrink">Rate at which lower level entries will appear smaller
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.TOCSettings.SetLevelIndentation(System.Int32)">
            <summary> Indentation used for every TOC level...

</summary>
            <param name="indentation">How much to indent each level, e.g. "2"
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.TOCSettings.SetCaptionText(System.String)">
            <summary> Caption text to be used with TOC.

</summary>
            <param name="caption">Text that will appear with the table of contents.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.TOCSettings.SetLinks(System.Boolean)">
            <summary> Create links from TOC to actual content.

</summary>
            <param name="enable">Entries in table of contents will
link to section in the PDF.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.TOCSettings.SetDottedLines(System.Boolean)">
            <summary> Use a dotted line when creating TOC.

</summary>
            <param name="enable">Table of contents will use dotted lines.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.TOCSettings.Dispose">
            <summary> Releases all resources used by the TOCSettings </summary>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.TOCSettings.#ctor">
            <summary> Default table of contents settings.

</summary>
        </member>
        <member name="T:pdftron.PDF.HTML2PDF.TOCSettings">
            <summary> Settings for table of contents.

</summary>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetProxy(pdftron.PDF.HTML2PDF.Proxy)">
            <summary> Use this proxy to load content from this web page.

</summary>
            <param name="proxy">Contains settings for proxy
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetProduceForms(System.Boolean)">
            <summary> Turn HTML forms into PDF forms.

</summary>
            <param name="forms">If true PDF pages produced from this web page
will have PDF forms for any HTML forms the web page has.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetInternalLinks(System.Boolean)">
            <summary> Convert internal links in HTML document into PDF references.

</summary>
            <param name="convert">If true PDF pages produced from this web page
will have links to other PDF pages.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetExternalLinks(System.Boolean)">
            <summary> Convert external links in HTML document to external
PDF links.

</summary>
            <param name="convert">If true PDF pages produced from this web page
can have external links.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetLoadErrorHandling(pdftron.PDF.HTML2PDF.WebPageSettings.ErrorHandling)">
            <summary> How to handle objects that failed to load.

</summary>
            <param name="type">If e_abort then conversion process is aborted, if
e_skip then the converter will not add this web page to the PDF
output, and if e_skip then the converter will try to add this
web page to the PDF output.
</param>
        </member>
        <member name="F:pdftron.PDF.HTML2PDF.WebPageSettings.ErrorHandling.e_ignore">
            <summary>Try to add the object to the final output.</summary>
        </member>
        <member name="F:pdftron.PDF.HTML2PDF.WebPageSettings.ErrorHandling.e_skip">
            <summary>Do not add the object to the final output.</summary>
        </member>
        <member name="F:pdftron.PDF.HTML2PDF.WebPageSettings.ErrorHandling.e_abort">
            <summary>Abort the conversion process.</summary>
        </member>
        <member name="T:pdftron.PDF.HTML2PDF.WebPageSettings.ErrorHandling">
            <summary> How to handle objects that failed to load. </summary>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetDebugJavaScriptOutput(System.Boolean)">
            <summary> Forward javascript warnings and errors to output.

</summary>
            <param name="forward">If true javascript errors and warnings will be forwarded
to stdout and the log.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetStopSlowScripts(System.Boolean)">
            <summary> Stop slow running javascript's.

</summary>
            <param name="stop">If true, slow running javascript's will be stopped.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetBlockLocalFileAccess(System.Boolean)">
            <summary> Allow local and piped files access to other local files.

</summary>
            <param name="block">If true local files will be inaccessible.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetZoom(System.Double)">
            <summary> Zoom factor to use when loading object.

</summary>
            <param name="zoom">How much to magnify the web content by, e.g. 2.2.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetJavaScriptDelay(System.Int32)">
            <summary> Amount of time to wait for a web page to start printing after
it's completed loading. Converter will wait a maximum of msec milliseconds
for javascript to call window.print().

</summary>
            <param name="msec">Maximum wait time in milliseconds, e.g. 1200.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetPassword(System.String)">
            <summary> Password to use when logging into the website.

</summary>
            <param name="password">The login password to use with the server, e.g. "elbarto".
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetUsername(System.String)">
            <summary> Username to use when logging into the website.

</summary>
            <param name="username">The login name to use with the server, e.g. "bart".
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetIncludeInOutline(System.Boolean)">
            <summary> Add sections from this web page to the outline and
table of contents.

</summary>
            <param name="include">If true PDF pages created from this web
page will show up in the outline, and table of contents,
otherwise, produced PDF pages will be excluded.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetPrintMediaType(System.Boolean)">
            <summary> Controls how content will be printed from this web page.
</summary>
            <param name="print">If true the print media type will be used, otherwise
the screen media type will be used to print content.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetAllowPlugins(System.Boolean)">
            <summary> Allow Netscape and flash plugins from this web page to
be run. Enabling will have limited success.
</summary>
            <param name="enable">If true Netscape and flash plugins will be run.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetUserStyleSheet(System.String)">
            <summary> Url or path to user specified style sheet.
</summary>
            <param name="url">URL or file path to user style sheet to be used
with this web page.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetDefaultEncoding(System.String)">
            <summary> Default encoding to be used when not specified by the web page.

</summary>
            <param name="encoding">Default encoding, e.g. utf-8 or iso-8859-1.
 </param>
            <remarks> Supported encodings are
Apple Roman, Big5, Big5-HKSCS, CP949, EUC-JP, EUC-KR, GB18030-0, IBM 850, 
IBM 866, IBM 874, ISO 2022-JP, ISO 8859-1 to 10, ISO 8859-13 to 16, 
Iscii-Bng, Dev, Gjr, Knd, Mlm, Ori, Pnj, Tlg, Tml, JIS X 0201, JIS X 0208, 
KOI8-R, KOI8-U, MuleLao-1, ROMAN8, Shift-JIS, TIS-620, TSCII, 
UTF-8, UTF-16, UTF-16BE, UTF-16LE, UTF-32, UTF-32BE, UTF-32LE, 
Windows-1250 to 1258, WINSAMI2.
</remarks>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetMinimumFontSize(System.Int32)">
            <summary> Set the smallest font size allowed, e.g 9.

</summary>
            <param name="size">No fonts will appear smaller than this.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetSmartShrinking(System.Boolean)">
            <summary> Allow intelligent shrinking to fit more content per page.

</summary>
            <param name="enable">If true intelligent shrinking is enabled and
the pixel/dpi ratio is non constant.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetAllowJavaScript(System.Boolean)">
            <summary> Allow javascript from this web page to be run.

</summary>
            <param name="enable">If true javascript's are allowed.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetLoadImages(System.Boolean)">
            <summary> Print the images of this web page.

</summary>
            <param name="load">If true images are printed.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.SetPrintBackground(System.Boolean)">
            <summary> Print the background of this web page.

</summary>
            <param name="background">If true background is printed.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.Dispose">
            <summary> Releases all resources used by the WebPageSettings </summary>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.WebPageSettings.#ctor">
            <summary> Default constructor

</summary>
        </member>
        <member name="T:pdftron.PDF.HTML2PDF.WebPageSettings">
            <summary> Settings that control how a web page is opened and converted to PDF.

</summary>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.Proxy.SetPassword(System.String)">
            <summary> Set the password to use when logging into the proxy with username

</summary>
            <param name="password">The password to use, e.g. "bart".
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.Proxy.SetUsername(System.String)">
            <summary> Set the username to use when logging into the proxy

</summary>
            <param name="username">The login name, e.g. "elbarto".
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.Proxy.SetPort(System.Int32)">
            <summary> Set the port number to use

</summary>
            <param name="port">A valid port number, e.g. 3128.
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.Proxy.SetHost(System.String)">
            <summary> Set the proxy host to use.

</summary>
            <param name="host">String defining the host name, e.g. "myserver" or "www.xxx.yyy.zzz"
</param>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.Proxy.SetType(pdftron.PDF.HTML2PDF.Proxy.Type)">
            <summary> Set the type of proxy to use.

</summary>
            <param name="type">If e_default, use whatever the html2pdf library decides
on. If e_none, explicitly sets that no proxy is to be used. If e_http
or e_socks5 then the corresponding proxy protocol is used.
</param>
        </member>
        <member name="F:pdftron.PDF.HTML2PDF.Proxy.Type.e_socks5">
            <summary> use socks5 proxy </summary>
        </member>
        <member name="F:pdftron.PDF.HTML2PDF.Proxy.Type.e_http">
            <summary> use http proxy </summary>
        </member>
        <member name="F:pdftron.PDF.HTML2PDF.Proxy.Type.e_none">
            <summary> explicitly sets that no proxy is to be used </summary>
        </member>
        <member name="F:pdftron.PDF.HTML2PDF.Proxy.Type.e_default">
            <summary> use whatever type of proxy the html2pdf library decides on </summary>
        </member>
        <member name="T:pdftron.PDF.HTML2PDF.Proxy.Type">
            <summary> Set the type of proxy to use. 

If e_default, use whatever the html2pdf library decides on. If e_none, explicitly sets that no proxy is to be used. 
If e_http or e_socks5 then the corresponding proxy protocol is used. </summary>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.Proxy.Dispose">
            <summary> Releases all resources used by the Proxy </summary>
        </member>
        <member name="M:pdftron.PDF.HTML2PDF.Proxy.#ctor">
            <summary> Default constructor

</summary>
        </member>
        <member name="T:pdftron.PDF.HTML2PDF.Proxy">
            <summary> Proxy settings to be used when loading content from web pages.

</summary>
            <remarks> These Proxy settings will only be used if type is not e_default.
</remarks>
        </member>
        <member name="T:pdftron.PDF.HTML2PDF">
            <summary>
                <para>
'pdftron.PDF.HTML2PDF' is an optional PDFNet Add-On utility class that can be 
used to convert HTML web pages into PDF documents by using an external
module (html2pdf). </para>
                <para>The html2pdf modules can be downloaded from http: www.pdftron.com/pdfnet/downloads.html.</para>
                <para>
Users can convert HTML pages to PDF using the following operations:
- Simple one line static method to convert a single web page to PDF. 
- Convert HTML pages from URL or string, plus optional table of contents, in user defined order. 
- Optionally configure settings for proxy, images, java script, and more for each HTML page. 
- Optionally configure the PDF output, including page size, margins, orientation, and more. 
- Optionally add table of contents, including setting the depth and appearance.
</para>
                <example>
The following code converts a single webpage to pdf

<code>
using System;
using System.IO;
using pdftron;
using pdftron.Common;
using pdftron.SDF;
using pdftron.PDF;

using (PDFDoc doc = new PDFDoc())
{
	if ( HTML2PDF.Convert(doc, "http://www.gutenberg.org/wiki/Main_Page") )
		doc.Save(outputFile, SDFDoc.SaveOptions.e_linearized);
}
</code>

The following code demonstrates how to convert multiple web pages into one pdf,
including any images and the background, but with lowered image quality to save space.

<code>
using System;
using System.IO;
using pdftron;
using pdftron.Common;
using pdftron.SDF;
using pdftron.PDF;

using (PDFDoc doc = new PDFDoc())
{
	HTML2PDF converter = new HTML2PDF();
	converter.SetImageQuality(25);

	HTML2PDF.WebPageSettings settings = new HTML2PDF.WebPageSettings();
	settings.SetPrintBackground(false);

	converter.InsertFromURL("http://www.gutenberg.org/wiki/Main_Page", settings);

	if ( HTML2PDF.Convert(doc, "http://en.wikipedia.org/wiki/Canada") )
		doc.Save(outputFile, SDFDoc.SaveOptions.e_linearized);
}
</code></example>
            </summary>
        </member>
        <member name="M:pdftron.PDF.Print.Dispose">
            <summary> Releases all resources used by the Print </summary>
        </member>
        <member name="M:pdftron.PDF.Print.StartPrintJob(pdftron.PDF.PDFDoc,System.String,System.String,System.String,pdftron.PDF.PageSet,pdftron.PDF.PrinterMode,pdftron.PDF.OCG.Context)">
            <summary> Print the PDFDoc to a printer. Depending on the OS and installed
libraries, the PDFDoc will be sent using the GDI or the XPS print path.
This function will block until the print job is done at the OS level.

</summary>
            <param name="in_pdfdoc">the in_doc
</param>
            <param name="in_printerName">the name of the printer to print to
</param>
            <param name="in_jobName">the name of the job for print queue monitoring,
can be empty.
</param>
            <param name="in_outputFileName">if not empty, the name of the output file to
save the printout into.  This could be a PostScript, PCL, XPS or other
file.
</param>
            <param name="in_pagesToPrint">  a PageSet defining which pages should be printed in the document.</param>
            <param name="in_printerMode">  options for the printer.</param>
            <param name="in_ctx"> (Optional) Optional Content Group setting, for example from PDFViewCtrl.GetOCGContext.</param>
            <remarks>  If the printer is grayscale, only grayscale data will be sent. </remarks>
            <Returns>  void.  Throws a trn::Common::Exception on failure. </Returns>
            <example>
 printer options example usage: 
<code>  
PrinterMode printerMode = new PrinterMode();
printerMode.PutNumber("CopyCount", 1); // must be greater than zero
printerMode.PutBool("Collation", true); // true or false

// duplexing: {e_DuplexAuto, e_Duplex_None, e_Duplex_LongSide, e_Duplex_ShortSide}
printerMode.PutNumber("Duplexing", PrinterMode::e_Duplex_Auto);

// output quality: {e_OutputQuality_Draft, e_OutputQuality_Low, e_OutputQuality_Medium, e_OutputQuality_High}
printerMode.PutNumber("OutputQuality", PrinterMode::e_OutputQuality_Medium);

// output color: {e_OutputColor_Color, e_OutputColor_Grayscale, e_OutputColor_Monochrome}
printerMode.PutNumber("OutputColor", PrinterMode::e_OutputColor_Grayscale);
printerMode.PutNumber("DPI", 300); // this will override e_PrintQuality_Medium setting
</code></example>
        </member>
        <member name="T:pdftron.PDF.Print">
            <summary> Print is a utility class for printing PDF documents to printers. </summary>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetUseRleImageCompression(System.Boolean)">
            <summary> Set whether RLE image compression is used for printing bitmaps.

</summary>
            <param name="useRleImageCompression">if true, printer spool file will be
reduced. However, some printers do not support this type of image
compression and will produce blank pages.  Default is false
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetScaleType(pdftron.PDF.PrinterMode.ScaleType)">
            <summary> Set the scaling of the document page to the output pages.

</summary>
            <param name="scaleType">one of {e_ScaleType_None, e_ScaleType_FitToOutputPage,
e_ScaleType_ReduceToOutputPage}. Default is e_ScaleType_None.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetScale(System.Double)">
            <summary> Set the scaling of the document pages to the output pages. Causes
SetScaleType(e_ScaleType_CustomScale) to be set.

</summary>
            <param name="scale">to apply to document pages.  1.0 is no scale, greater
than 1.0 increases document page sizes, less than 1.0 reduces
document pages sizes on output pages.  Default is 1.0
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetPaperSize(pdftron.PDF.PrinterMode.PaperSize)">
            <summary> Set the output printer paper size (assumed to be correct).

</summary>
            <param name="size">
                <c>PaperSize</c> object
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetPaperSize(pdftron.PDF.Rect)">
            <summary> Set the output printer paper size (assumed to be correct).

</summary>
            <param name="size">the size of the output paper size in points (72 points = 1 inch).
Default is US Letter or Rect(0, 0, 612, 792)
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetOutputQuality(pdftron.PDF.PrinterMode.OutputQuality)">
            <summary> Set the quality of the printing. Overridden if SetDPI is called.

</summary>
            <param name="quality">the new output quality
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetOutputPageBorder(System.Boolean)">
            <summary> Set the printing of page borders, helpful when printing multiple document
pages per output page.

</summary>
            <param name="printBorder">if true will add a thin frame around each page border.
Default is false.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetOutputColor(pdftron.PDF.PrinterMode.OutputColor)">
            <summary> Set the color output of the printing.

</summary>
            <param name="color">the new output color
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetOutputAnnot(pdftron.PDF.PrinterMode.PrintContentTypes)">
            <summary> Set the printing of annotations.

</summary>
            <param name="printContent">one of {e_PrintContent_DocumentOnly,
e_PrintContent_DocumentAndAnnotations}.
Default is e_PrintContent_DocumentAndAnnotations.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetOrientation(pdftron.PDF.PrinterMode.Orientation)">
            <summary> Set the orientation of the output document.

</summary>
            <param name="orientation">{e_Orientation_Portrait, e_Orientation_Landscape}
Default is e_Orientation_Portrait.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetNUp(System.UInt32,System.UInt32,pdftron.PDF.PrinterMode.NUpPageOrder)">
            <summary> Set the number of document pages to place on the output pages
across and vertically.  Pages will be automatically rotated to
best fit the page.

Typical values: (2,1) 2-up; (2,2) 4 per page, etc

</summary>
            <param name="x">number of document pages across.  Default is 1.
</param>
            <param name="y">number of document pages down.  Default is 1.
</param>
            <param name="pageOrder">order of document pages across and down output page
Default is e_PageOrder_LeftToRightThenTopToBottom.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetNUp(System.UInt32,System.UInt32)">
            <summary> Set the number of document pages to place on the output pages
across and vertically.  Pages will be automatically rotated to
best fit the page.

</summary>
            <param name="x">number of papes in horizontal direction
</param>
            <param name="y">number of pages in vertical direction
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetNUp(pdftron.PDF.PrinterMode.NUp,pdftron.PDF.PrinterMode.NUpPageOrder)">
            <summary> Set the number of document pages to place on the output pages
across and vertically.  Pages will be automatically rotated to
best fit the page.

</summary>
            <param name="nup">one of {e_NUp_1_1, e_NUp_2_1, e_NUp_2_2, e_NUp_3_2, e_NUp_3_3,
e_NUp_4_4}.  Default is e_NUp_1_1.
</param>
            <param name="pageOrder">order of document pages across and down output page.
Default is e_PageOrder_LeftToRightThenTopToBottom.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetNUp(pdftron.PDF.PrinterMode.NUp)">
            <summary> Set the number of document pages to place on the output pages
across and vertically.  Pages will be automatically rotated to
best fit the page.

</summary>
            <param name="nup">given <c>NUp</c> object
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetDuplexing(pdftron.PDF.PrinterMode.DuplexMode)">
            <summary> Set the duplexing mode.

</summary>
            <param name="mode">the new duplexing
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetDPI(System.Int32)">
            <summary> Set the DPI (dots per inch) of the printing.

</summary>
            <param name="dpi">the new dPI
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetCopyCount(System.Int32)">
            <summary> Set the number of copies to be printed.

</summary>
            <param name="copyCount">the number of copies to be printed, must be greater than zero
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetCollation(System.Boolean)">
            <summary> Set the collation of the printing, useful for multiple copies.

</summary>
            <param name="collation">if true, pages of copies will be printed 1, 2, 3.
if false, then pages of copies will be printed 1, 1, 1, ..., 2, 2, 2, ...
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetAutoRotate(System.Boolean)">
            <summary> Set automatic rotation of document pages to best fit the output pages.

</summary>
            <param name="autoRotate">if true will rotate document pages onto the output
pages. Default is true.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.SetAutoCenter(System.Boolean)">
            <summary> Set automatic centering of document pages onto the output pages.

</summary>
            <param name="autoCenter">if true will center document pages onto the output
pages. Default is true.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.Dispose">
            <summary> Releases all resources used by the PrinterMode </summary>
        </member>
        <member name="M:pdftron.PDF.PrinterMode.#ctor">
            <summary> Instantiate a new PrinterMode </summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.PrintContentTypes.e_PrintContent_DocumentAnnotationsAndComments">
            <summary>print document, annotations, and comments</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.PrintContentTypes.e_PrintContent_DocumentAndAnnotations">
            <summary>print document and annotations</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.PrintContentTypes.e_PrintContent_DocumentOnly">
            <summary>print document only</summary>
        </member>
        <member name="T:pdftron.PDF.PrinterMode.PrintContentTypes">
            <summary>Enumerated values for specifying the document content to print</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.NUpPageOrder.e_PageOrder_BottomToTopThenLeftToRight">
            <summary>bottom to top then left to right</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.NUpPageOrder.e_PageOrder_TopToBottomThenLeftToRight">
            <summary>top to bottom then left to right</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.NUpPageOrder.e_PageOrder_RightToLeftThenTopToBottom">
            <summary>right to left then top to bottom</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.NUpPageOrder.e_PageOrder_LeftToRightThenTopToBottom">
            <summary>left to right then top to bottom</summary>
        </member>
        <member name="T:pdftron.PDF.PrinterMode.NUpPageOrder">
            <summary>Enumerated values for specifying the ordering of document pages onto 
output pages</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.NUp.e_NUp_4_4">
            <summary>4 by 4 document pages to 1 output page</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.NUp.e_NUp_3_3">
            <summary>3 by 3 document pages to 1 output page</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.NUp.e_NUp_3_2">
            <summary>3 by 2 document pages to 1 output page</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.NUp.e_NUp_2_2">
            <summary>2 by 2 document pages to 1 output page</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.NUp.e_NUp_2_1">
            <summary>2 document pages to 1 output page</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.NUp.e_NUp_1_1">
            <summary>1 document page to 1 output page</summary>
        </member>
        <member name="T:pdftron.PDF.PrinterMode.NUp">
            <summary>Enumerated values for specifying the layout of multiple document pages
onto output pages</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.ScaleType.e_ScaleType_ReduceToOutputPage">
            <summary>shrink to fit the output page</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.ScaleType.e_ScaleType_FitToOutputPage">
            <summary>fit to the output page</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.ScaleType.e_ScaleType_None">
            <summary>no scaling</summary>
        </member>
        <member name="T:pdftron.PDF.PrinterMode.ScaleType">
            <summary>Enumerated values for specifying the scaling of document pages</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.Orientation.e_Orientation_Landscape">
            <summary>wider than tall</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.Orientation.e_Orientation_Portrait">
            <summary>taller than wide</summary>
        </member>
        <member name="T:pdftron.PDF.PrinterMode.Orientation">
            <summary>Enumerated values for specifying the orientation of output pages</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.OutputColor.e_OutputColor_Monochrome">
            <summary>single color (1bpp)</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.OutputColor.e_OutputColor_Grayscale">
            <summary>8bpp</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.OutputColor.e_OutputColor_Color">
            <summary>24bpp</summary>
        </member>
        <member name="T:pdftron.PDF.PrinterMode.OutputColor">
            <summary>Enumerated values for specifying the color mode for printing</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.OutputQuality.e_OutputQuality_High">
            <summary>printer high quality mode</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.OutputQuality.e_OutputQuality_Medium">
            <summary>printer medium quality mode</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.OutputQuality.e_OutputQuality_Low">
            <summary>printer low quality mode</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.OutputQuality.e_OutputQuality_Draft">
            <summary>printer draft mode</summary>
        </member>
        <member name="T:pdftron.PDF.PrinterMode.OutputQuality">
            <summary>Enumerated values for specifying the quality of the printing</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.DuplexMode.e_Duplex_ShortSide">
            <summary>flip the paper along the short side</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.DuplexMode.e_Duplex_LongSide">
            <summary>flip the paper along the long side</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.DuplexMode.e_Duplex_None">
            <summary>single-sided printing</summary>
        </member>
        <member name="F:pdftron.PDF.PrinterMode.DuplexMode.e_Duplex_Auto">
            <summary>use the current printer setting</summary>
        </member>
        <member name="T:pdftron.PDF.PrinterMode.DuplexMode">
            <summary> Enumerated values for specifying how the printed pages are flipped when duplexing</summary>
        </member>
        <member name="T:pdftron.PDF.PrinterMode.PaperSize">
            <summary> Paper sizes. </summary>
        </member>
        <member name="T:pdftron.PDF.PrinterMode">
            <summary> PrinterMode is a utility class used to set printer options for printing PDF documents.</summary>
        </member>
        <member name="M:pdftron.PDF.ViewerOptimizedOptions.SetOverprint(pdftron.PDF.PDFRasterizer.OverprintPreviewMode)">
            <summary>
Enable or disable support for overprint and overprint simulation. 
Overprint is a device dependent feature and the results will vary depending on 
the output color space and supported colorants (i.e. CMYK, CMYK+spot, RGB, etc).
Default is e_op_pdfx_on.
</summary>
            <param name="mode"> e_op_on: always enabled; e_op_off: always disabled; e_op_pdfx_on: enabled for PDF/X files only.
</param>
        </member>
        <member name="M:pdftron.PDF.ViewerOptimizedOptions.SetThumbnailSize(System.UInt32)">
            <summary>
The maximum allowed length for the thumbnail's height/width.
The default thumbnail size is 1024.
</summary>
            <param name="size"> the maximum dimension (width or height) that thumbnails will have.
</param>
        </member>
        <member name="M:pdftron.PDF.ViewerOptimizedOptions.SetThumbnailRenderingThreshold(System.Int32)">
            <summary>
For any pages that are not forced to include thumbnails this
function adjusts whether we should include them depending on the
complexity of the page. This can be used to include fewer or more thumbnails
as required by the use case. In particular reducing this value
will tend to increase the number of page thumbnails included and vice versa.
</summary>
            <param name="threshold">A number from 0 (include all thumbnails) to 100
(include only the first thumbnail) representing the complexity at which
SaveViewerOptimized would include the thumbnail. The default value is 50.
</param>
        </member>
        <member name="M:pdftron.PDF.ViewerOptimizedOptions.#ctor">
            <summary>
Creates an ViewerOptimizedOptions object with default settings
</summary>
        </member>
        <member name="T:pdftron.PDF.ViewerOptimizedOptions">
            <summary>
A class containing ViewerOptimizedOptions  
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetVRes(System.Int32)">
            <summary>
Sets the height of the output image, in pixels. 
</summary>
            <param name="vres"> specifies the width</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetHRes(System.Int32)">
            <summary>
Sets the width of the output image, in pixels. 
</summary>
            <param name="hres"> specifies the width</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetGamma(System.Double)">
            <summary>
Sets the gamma factor used for anti-aliased
rendering. Typical values are in the range
from 0.1 to 3. Gamma correction can be used
to improve the quality of anti-aliased
image output and can (to some extent)
decrease the appearance common
anti-aliasing artifacts (such as pixel
width lines between polygons).  The default
gamma is 0.
</summary>
            <param name="gamma"> specifies the gamma factor</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetDPI(System.Double)">
            <summary>
The output resolution, from 1 to 1000, in Dots Per Inch (DPI). The
higher the DPI, the larger the image. Resolutions larger than 1000 DPI can
be achieved by rendering image in tiles or stripes. The default resolution
is 92 DPI.
</summary>
            <param name="dpi"> specifies the output DPI</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetPalettized(System.Boolean)">
            <summary>
Enabled the output of palettized TIFFs.
This option is disabled by default.
</summary>
            <param name="enable"> if true then the TIFF will be palettized</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetTransparentPage(System.Boolean)">
            <summary>
Sets the page color to transparent. By
default, Convert assumes that the page is
drawn directly on an opaque white surface.
Some applications may need to draw the page
on a different backdrop. In this case any
pixels that are not covered during
rendering will be transparent.
This option is disabled by default.
</summary>
            <param name="enable"> if true then transparent page will be enabled</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetPrintmode(System.Boolean)">
            <summary>
Renders annotations in the print mode. This
option can be used to render 'Print Only'
annotations and to hide 'Screen Only'
annotations.
This option is disabled by default.
</summary>
            <param name="enable"> if true then print mode will be enabled</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetSmooth(System.Boolean)">
            <summary>
Enables or disables image
smoothing (default: enabled).
</summary>
            <param name="enable"> if false then images will not be smoothed</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetAnnots(System.Boolean)">
            <summary>
Enables or disables drawing of
annotations.
This option is enabled by default.
</summary>
            <param name="enable"> if false then annotations will not be drawn</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetMono(System.Boolean)">
            <summary>
Export the rendered image as 1 bit per
pixel (monochrome) image. The image will be
compressed using G4 CCITT compression
algorithm. By default, the image is not
dithered. To enable dithering use
'SetDither' option. This option is disabled by
default.
</summary>
            <param name="enable"> if true then monochrome will be enabled</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetGray(System.Boolean)">
            <summary>
Render and export the image in grayscale
mode. Sets pixel format to 8 bits per pixel
grayscale. By default, the image is
rendered and exported in RGB color space.
</summary>
            <param name="enable"> if true then grayscale will be enabled</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetDither(System.Boolean)">
            <summary>
Enables dithering when the image is
exported in palletized or monochrome mode.
This option is disabled by default.
</summary>
            <param name="enable"> if true then dithering will be enabled</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetCMYK(System.Boolean)">
            <summary>
Render and export the image in CMYK mode.
By default, the image is rendered and
exported in RGB color space.
</summary>
            <param name="enable"> if true then cmyk will be enabled</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetOverprint(pdftron.PDF.PDFRasterizer.OverprintPreviewMode)">
            <summary> 
Enable or disable support for overprint and overprint simulation. 
Overprint is a device dependent feature and the results will vary depending on 
the output color space and supported colorants (i.e. CMYK, CMYK+spot, RGB, etc). 
Default is e_op_pdfx_on.
</summary>
            <param name="mode"> e_op_on: always enabled; e_op_off: always disabled; e_op_pdfx_on: enabled for PDF/X files only.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetPages(System.String)">
            <summary>
Specifies the list of pages to convert. By
default, all pages are converted.
</summary>
            <param name="page_desc"> A description of the pages to be converted.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetClip(System.Double,System.Double,System.Double,System.Double)">
            <summary>
User definable clip box. By default, the
clip region is identical to current page
'box'.
</summary>
            <param name="x1"> The value of the x1 coordinate</param>
            <param name="y1"> The value of the y1 coordinate</param>
            <param name="x2"> The value of the x2 coordinate</param>
            <param name="y2"> The value of the y2 coordinate</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetRotate(pdftron.PDF.Page.Rotate)">
            <summary>
Rotates all pages by a given number of
degrees counterclockwise. The allowed
values are 0, 90, 180, and 270. The default
value is 0.
</summary>
            <param name="rotate"> The type cf box to use</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.SetBox(pdftron.PDF.Page.Box)">
            <summary>
Specifies the page box/region to rasterize.
Possible values are media, crop, trim,
bleed, and art.  By default, page crop
region will be rasterized.
</summary>
            <param name="type"> The type cf box to use</param>
        </member>
        <member name="M:pdftron.PDF.Convert.TiffOutputOptions.#ctor">
            <summary>
Creates an TiffOutputOptions object with default settings
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.EPUBOutputOptions.SetReuseCover(System.Boolean)">
            <summary>
Set whether the first content page in the EPUB uses the cover image or not. If this
is set to true, then the first content page will simply wrap the cover image in HTML.
Otherwise, the page will be converted the same as all other pages in the EPUB. Default is false.
</summary>
            <param name="reuse"> if true the first page will simply be EPUB cover image, 
otherwise, the first page will be converted the same as the other pages.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.EPUBOutputOptions.SetExpanded(System.Boolean)">
            <summary>
Create the EPUB in expanded format. Default is false.
</summary>
            <param name="expanded">if false a single EPUB file will be generated, otherwise, 
the generated EPUB will be in unzipped (expanded) format
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.EPUBOutputOptions.#ctor">
            <summary>
Creates an EPUBOutputOptions object with default settings
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.WordOutputOptions.SetDisableVerticalSplit(System.Boolean)">
            <summary>
Specifies whether to disable the detection of section columns. Default is false.
Enable this if your tables are coming out as section columns.
</summary>
            <param name="disable"> if true, the detection of section columns are disabled.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.WordOutputOptions.SetDoNotAdjustFonts(System.Boolean)">
            <summary>
Specifies whether to disable font adjustments during conversion. Default is false.
</summary>
            <param name="do_not_adjust"> if true, font adjustments are disabled during conversion.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.WordOutputOptions.SetConnectHyphens(System.Boolean)">
            <summary>
Specifies whether hyphens in the PDF should be connected. This only works with English words. Default is false.
</summary>
            <param name="connect"> if true, hyphens in the PDF will be connected.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.WordOutputOptions.SetMatchPDFLineBreaks(System.Boolean)">
            <summary>
Specifies whether PDF line breaks should come out as line breaks in the Word output. This causes each line
of text to become a separate paragraph. Default is false.
</summary>
            <param name="match"> if true, line breaks will come out as line breaks in the Word output.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.WordOutputOptions.SetShrinkCharacterSpacingToPreventWrap(System.Boolean)">
            <summary>
Specifies whether to shrink character spaces in order to prevent word wraps. Default is false.
</summary>
            <param name="shrink"> if true, character spaces are shrunk in order to prevent word wraps.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.WordOutputOptions.SetSearchableImageSetting(pdftron.PDF.Convert.WordOutputOptions.SearchableImageSetting)">
            <summary>
Specifies how image + hidden text pages should be converted. Default is e_ocr_image_text.
Note: this feature does not perform OCR.
</summary>
            <param name="setting"> the searchable image setting.
</param>
        </member>
        <member name="F:pdftron.PDF.Convert.WordOutputOptions.SearchableImageSetting.e_ocr_text">
            <summary>
Indicates that only the text is going to be visible.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.WordOutputOptions.SearchableImageSetting.e_ocr_image">
            <summary>
Indicates that only the images are going to be visible.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.WordOutputOptions.SearchableImageSetting.e_ocr_image_text">
            <summary>
Indicates that both text and image are going to be visible (default).
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.WordOutputOptions.SetBookmarkConversionMethod(pdftron.PDF.Convert.WordOutputOptions.BookmarkConversionMethod)">
            <summary>
Specifies if and how PDF bookmarks should be converted into Word. Default is e_bm_none.
</summary>
            <param name="method"> the bookmark conversion method
</param>
        </member>
        <member name="F:pdftron.PDF.Convert.WordOutputOptions.BookmarkConversionMethod.e_bm_extract">
            <summary>
Indicates that bookmarks are converted from PDF to Word.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.WordOutputOptions.BookmarkConversionMethod.e_bm_page">
            <summary>
Indicates that a bookmark is created for each page (default).
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.WordOutputOptions.BookmarkConversionMethod.e_bm_none">
            <summary>
Indicates that no bookmarks are created.
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.WordOutputOptions.SetPDFPassword(System.String)">
            <summary>
Specifies the password if the PDF requires one.
</summary>
            <param name="password"> the PDF password, if required; an empty string otherwise.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.WordOutputOptions.SetFileConversionTimeoutSeconds(System.Int32)">
            <summary>
Specifies the amount of time in seconds after which the conversion fails. Default is 300.
Very long files need more time to convert.
</summary>
            <param name="seconds"> the timeout in seconds.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.WordOutputOptions.SetWordOutputFormat(pdftron.PDF.Convert.WordOutputOptions.WordOutputFormat)">
            <summary>
Specifies the output document format (DOCX, DOC, RTF). It is the most useful when the output file extension
is not .docx, .doc or .rtf.
</summary>
            <param name="format"> the output document format (DOCX, DOC, RTF).
</param>
        </member>
        <member name="F:pdftron.PDF.Convert.WordOutputOptions.WordOutputFormat.e_wof_rtf">
            <summary>
Indicates an RTF output.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.WordOutputOptions.WordOutputFormat.e_wof_doc">
            <summary>
Indicates a DOC output.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.WordOutputOptions.WordOutputFormat.e_wof_docx">
            <summary>
Indicates a DOCX output (default).
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.WordOutputOptions.SetImageDPI(System.UInt32)">
            <summary>
Specifies the output image resolution, from 8 to 600, in Pixels Per Inch (PPI). The
higher the PPI, the larger the image. Default 192.
</summary>
            <param name="dpi"> the resolution in Pixels Per Inch.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.WordOutputOptions.SetJPGQuality(System.UInt32)">
            <summary>
Specifies the compression quality to use when generating JPEG images.
</summary>
            <param name="quality"> the JPEG compression quality, from 0 (highest compression) to 100 (best quality). Default is 75.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.WordOutputOptions.#ctor">
            <summary>
Creates a WordOutputOptions object with default settings
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetNoPageWidth(System.Boolean)">
            <summary>
Determines whether to flow contents across the entire browser window. Default is false.
Note: This option is only available for e_reflow_paragraphs mode.
</summary>
            <param name="enable"> if true, content will flow across entire page.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetDisableVerticalSplit(System.Boolean)">
            <summary>
Specifies whether to disable the detection of section columns. Default is false.
Enable this if your tables are coming out as section columns.
Note: This option is only available for e_reflow_paragraphs mode.
</summary>
            <param name="disable"> if true, the detection of section columns are disabled.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetConnectHyphens(System.Boolean)">
            <summary>
Specifies whether hyphens in the PDF should be connected. This only works with English words. Default is false.
Note: This option is only available for e_reflow_paragraphs mode.
</summary>
            <param name="connect"> if true, hyphens in the PDF will be connected.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetSimpleLists(System.Boolean)">
            <summary>
Determines whether to use &lt;LI&gt; tags for list items. Default is false.
Note: This option is only available for e_reflow_paragraphs mode.
</summary>
            <param name="enable"> if true, &lt;LI&gt; tags are used for list items.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetSearchableImageSetting(pdftron.PDF.Convert.HTMLOutputOptions.SearchableImageSetting)">
            <summary>
Specifies how image + hidden text pages should be converted. Default is e_ocr_image_text.
Note: This feature does not perform OCR.
Note: This option is only available for e_reflow_paragraphs mode.
</summary>
            <param name="setting"> the searchable image setting.
</param>
        </member>
        <member name="F:pdftron.PDF.Convert.HTMLOutputOptions.SearchableImageSetting.e_ocr_text">
            <summary>
Indicates that only the text is going to be visible.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.HTMLOutputOptions.SearchableImageSetting.e_ocr_image">
            <summary>
Indicates that only the images are going to be visible.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.HTMLOutputOptions.SearchableImageSetting.e_ocr_image_text">
            <summary>
Indicates that both text and image are going to be visible (default).
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetPDFPassword(System.String)">
            <summary>
Specifies the password if the PDF requires one.
Note: This option is only available for e_reflow_paragraphs mode.
</summary>
            <param name="password"> the PDF password, if required; an empty string otherwise.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetPages(System.Int32,System.Int32)">
            <summary>
Specifies a range of pages to be converted. By default all pages are converted. The first page has the page number of 1.
Use a negative value to specify the last page in the PDF.
Note: This option is only available for e_reflow_paragraphs mode.
</summary>
            <param name="pageFrom">the first page to be converted.</param>
            <param name="pageTo">the last page to be converted (inclusive).</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetFileConversionTimeoutSeconds(System.Int32)">
            <summary>
Specifies the amount of time in seconds after which the conversion fails. Default is 300.
Very long files need more time to convert.
Note: This option is only available for e_reflow_paragraphs mode.
</summary>
            <param name="seconds"> the timeout in seconds.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetEmbedImages(System.Boolean)">
            <summary>
Specifies whether images are embedded in the HTML without having to link to external files. Default is true.
Note: This option is only available for e_reflow_paragraphs mode.
</summary>
            <param name="embed"> if true, images are embedd in the HTML, otherwise, images are saved as external files.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetImageDPI(System.UInt32)">
            <summary>
Specifies the output image resolution, from 8 to 600, in Pixels Per Inch (PPI). The
higher the PPI, the larger the image. Default is 192.
Note: This option is only available for e_reflow_paragraphs mode.
</summary>
            <param name="dpi"> the resolution in Pixels Per Inch.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetTitle(System.String)">
            <summary>
Specifies the title for the output HTML.
Note: This option is only available for e_reflow_paragraphs mode.
</summary>
            <param name="title"> the title of the output HTML.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetReportFile(System.String)">
            <summary>
Generate a XML file that contains additional information about the conversion process. By default no report is generated.
Note: This option is only available for e_fixed_position mode.
</summary>
            <param name="path"> the file path to which the XML report is written to.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetSimplifyText(System.Boolean)">
            <summary>
Controls whether converter optimizes DOM or preserves text placement accuracy. Default is false.
Note: This option is only available for e_fixed_position mode.
</summary>
            <param name="enable"> if true, converter will try to reduce DOM complexity at the expense of text placement accuracy.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetInternalLinks(System.Boolean)">
            <summary>
Enable the conversion of internal document navigation. Default is false.
Note: This option is only available for e_fixed_position mode.
</summary>
            <param name="enable"> if true, links that specify page jumps are converted into HTML.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetExternalLinks(System.Boolean)">
            <summary>
Enable the conversion of external URL navigation. Default is false.
Note: This option is only available for e_fixed_position mode.
</summary>
            <param name="enable"> if true, links that specify external URL's are converted into HTML.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetScale(System.Double)">
            <summary>
Set an overall scaling of the generated HTML pages. Default is 1.0.
Note: This option is only available for e_fixed_position mode.
</summary>
            <param name="scale"> A number greater than 0 which is used as a scale factor. For example, calling SetScale(0.5) will reduce the HTML body of the page to half its original size, whereas SetScale(2) will double the HTML body dimensions of the page and will rescale all page content appropriately.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetContentReflowSetting(pdftron.PDF.Convert.HTMLOutputOptions.ContentReflowSetting)">
            <summary>
Switch between fixed (pre-paginated) and reflowable HTML generation. Default is e_fixed_position.
In e_reflow_paragraphs mode, conversions require that the optional PDFTron
pdf2html add-on module is available.
See also: the `PDF2HtmlReflowParagraphsModule` class
</summary>
            <param name="reflow"> the generated HTML will be either fixed or reflowable.
</param>
        </member>
        <member name="F:pdftron.PDF.Convert.HTMLOutputOptions.ContentReflowSetting.e_reflow_paragraphs">
            <summary>
Text flows within paragraphs.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.HTMLOutputOptions.ContentReflowSetting.e_fixed_position">
            <summary>
Content uses fixed positioning (default).
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetMaximumImagePixels(System.UInt32)">
            <summary>
Specifies the maximum image size in pixels. Default is 2000000.
Note: This option is only available for e_fixed_position mode.
</summary>
            <param name="max_pixels"> the maximum number of pixels an image can have
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetDPI(System.UInt32)">
            <summary>
The output resolution, from 1 to 1000, in Dots Per Inch (DPI) at which to render elements which cannot be directly converted. 
Default is 140.
Note: This option is only available for e_fixed_position mode.
</summary>
            <param name="dpi"> the resolution in Dots Per Inch
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetJPGQuality(System.UInt32)">
            <summary>
Specifies the compression quality to use when generating JPEG images.
</summary>
            <param name="quality"> the JPEG compression quality, from 0 (highest compression) to 100 (best quality).
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.SetPreferJPG(System.Boolean)">
            <summary>
 Use JPG files rather than PNG. This will apply to all generated images. Default is true.
</summary>
            <param name="prefer_jpg"> if true JPG images will be used whenever possible
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.HTMLOutputOptions.#ctor">
            <summary>
Creates an HTMLOutputOptions object with default settings
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.UseSilverlightFlashCompatible(System.Boolean)">
            <summary>
The latest XOD format is only partially supported in Silverlight and Flash
due to various optimizations in the text format and the addition of blend mode support. 
this option forces the converter to use an older version of XOD that is Silverlight/Flash compatible
but does not have these improvements. By default the latest XOD format is generated.
</summary>
            <param name="compatible"> if true will use the older XOD format which is not compatible with Silverlight/Flash.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetEncryptPassword(System.String)">
            <summary>
Encrypt XOD parts with AES 128 encryption using the supplied password. 
</summary>
            <param name="pass"> the encryption password.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetExternalParts(System.Boolean)">
            <summary>
Output XOD as a collection of loose files rather than a zip archive. 
This option should be used when using the external part retriever in Webviewer. Default is false.
</summary>
            <param name="generate"> if true XOD is output as a collection of loose files.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetAnnotationOutput(pdftron.PDF.Convert.XODOutputOptions.AnnotationOutputFlag)">
            <summary>
Choose how to output annotations. Default is e_internal_xfdf.
</summary>
            <param name="annot_output"> the chosen annotation output option
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetSilverlightTextWorkaround(System.Boolean)">
            <summary>
Outputs rotated text as paths. This option is used as a workaround to a bug in Silverlight 
where pages with rotated text could cause the plugin to crash. Default is false.
</summary>
            <param name="workaround"> if true rotated text will be changed to paths.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetJPGQuality(System.UInt32)">
            <summary>
Specifies the compression quality to use when generating JPEG images.
</summary>
            <param name="quality"> the JPEG compression quality, from 0(highest compression) to 100(best quality).
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetPreferJPG(System.Boolean)">
            <summary>
Where possible output JPG files rather than PNG. This will apply to both thumbnails and document images. Default is true.
</summary>
            <param name="prefer_jpg"> if true JPG images will be used whenever possible.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetFlattenThreshold(pdftron.PDF.Convert.FlattenThresholdFlag)">
            <summary>
Used to control how precise or relaxed text flattening is. When some text is 
preserved (not flattened to image) the visual appearance of the document may be altered.
</summary>
            <param name="threshold"> the threshold setting to use.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetFlattenContent(pdftron.PDF.Convert.FlattenFlag)">
            <summary>
Flatten images and paths into a single background image overlaid with 
vector text. This option can be used to improve speed on devices with 
little processing power such as iPads. Default is e_high_quality.
</summary>
            <param name="flatten"> select which flattening mode to use.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetMaximumImagePixels(System.UInt32)">
            <summary>
Specifies the maximum image size in pixels. Default is 2000000.
</summary>
            <remarks>This setting now will no longer reduce the total number of image pixels.
Instead a lower value will just produce more slices and vice versa. </remarks>
            <remarks>Since image compression works better with more pixels a larger
max pixels should generally create smaller files. </remarks>
            <param name="max_pixels"> the maximum number of pixels an image can have.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetOpacityMaskWorkaround(System.Boolean)">
            <summary>
If rendering is permitted, sets whether pages containing opacity masks should be rendered.
This option is used as a workaround to a bug in Silverlight where opacity masks are transformed incorrectly.
the default setting is not to render pages with opacity masks. Default is false. 
</summary>
            <param name="opacity_render"> if true pages with opacity masks will be rendered
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetElementLimit(System.UInt32)">
            <summary>
If rendering is permitted, sets the maximum number of page elements before that page will be rendered.
Default is 2000000000 which will never cause pages to be completely rendered in this manner.
</summary>
            <param name="element_limit"> the maximum number of elements before a given page will be rendered
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetThumbnailSize(System.UInt32,System.UInt32)">
            <summary>
The width and height of squares in which thumbnails will be contained. Default is 400 for normal pages and 1500 for large pages.
</summary>
            <param name="regular_size"> the maximum dimension that thumbnails for regular size pages will have.
</param>
            <remarks>A large page is a page larger than twice the area of the standard page size (8.5 X 11).</remarks>
            <param name="large_size"> the maximum dimension that thumbnails for large pages will have.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetThumbnailSize(System.UInt32)">
            <summary>
The width and height of squares in which thumbnails will be contained. Default is 400 for normal pages and 1500 for large pages.
</summary>
            <remarks>A large page is a page larger than twice the area of the standard page size (8.5 X 11).</remarks>
            <param name="size"> size the maximum dimension (width or height) that thumbnails will have.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XODOutputOptions.SetOutputThumbnails(System.Boolean)">
            <summary>
Sets whether per page thumbnails should be included in the file. Default is true.
</summary>
            <param name="include_thumbs"> if true thumbnails will be included
</param>
        </member>
        <member name="F:pdftron.PDF.Convert.XODOutputOptions.AnnotationOutputFlag.e_flatten">
            <summary>flatten all annotations that are not link annotations</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.XODOutputOptions.AnnotationOutputFlag.e_external_xfdf">
            <summary>output the annotation file externally to the same output path with extension .xfdf. This is not available when using streaming conversion</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.XODOutputOptions.AnnotationOutputFlag.e_internal_xfdf">
            <summary>include the annotation file in the XOD output. This is the default option.</summary>
        </member>
        <member name="T:pdftron.PDF.Convert.XODOutputOptions.AnnotationOutputFlag">
            <summary />
        </member>
        <member name="M:pdftron.PDF.Convert.XPSOutputOptions.SetOpenXps(System.Boolean)">
            <summary>
Sets whether the output format should be open xps. Default is Microsoft xps output.
</summary>
            <param name="openxps"> if true open xps output is used
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XPSOutputCommonOptions.SetOverprint(pdftron.PDF.PDFRasterizer.OverprintPreviewMode)">
            <summary>
Enable or disable support for overprint and overprint simulation. 
Overprint is a device dependent feature and the results will vary depending on 
the output color space and supported colorants (i.e. CMYK, CMYK+spot, RGB, etc).
Default is e_op_pdfx_on.
</summary>
            <param name="mode"> op e_op_on: always enabled; e_op_off: always disabled; 
e_op_pdfx_on: enabled for PDF/X files only.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XPSOutputCommonOptions.GenerateURLLinks(System.Boolean)">
            <summary>
Sets whether links should be generated from urls
found in the document. Default is false.
</summary>
            <param name="generate"> if true links will be generated from urls 
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XPSOutputCommonOptions.SetThickenLines(System.Boolean)">
            <summary>
Sets whether thin lines should be thickened. Default is true for XPS and false for XOD.
</summary>
            <param name="thicken">  if true then thin lines will be thickened
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XPSOutputCommonOptions.SetRenderPages(System.Boolean)">
            <summary>
Sets whether rendering of pages should be permitted when necessary to guarantee output
the default setting is to allow rendering in this case. Default is true.
</summary>
            <param name="render">  if false rendering is not permitted under any circumstance
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XPSOutputCommonOptions.SetDPI(System.UInt32)">
            <summary>
The output resolution, from 1 to 1000, in Dots Per Inch (DPI) at which to render elements which cannot be directly converted. 
Default is 140.
</summary>
            <param name="dpi">  the resolution in Dots Per Inch
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XPSOutputCommonOptions.SetPrintMode(System.Boolean)">
            <summary>
Sets whether ToXps should be run in print mode. Default is false.
</summary>
            <param name="print_mode">  if true print mode is enabled
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.XPSOutputCommonOptions.#ctor">
            <summary>
Creates an XPSConvertOptions object with default settings
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.Dispose">
            <summary> Releases all resources used by the Convert </summary>
        </member>
        <member name="M:pdftron.PDF.Convert.DocumentPaginatorWrapper.CreateHeaderFooterVisual(pdftron.PDF.Convert.WPFConverterOptions.DrawHeaderFooter,pdftron.PDF.Rect,pdftron.PDF.Rect,System.Windows.Size,System.Int32)">
            <summary>
Utility function to create the visual for the header and footers and call the appropriate function.
</summary>
            <param name="draw">Function to draw header or footer</param>
            <param name="bounds">Rectangle bounds of header or footer area.</param>
            <param name="bodyBounds">Rectangle bounds of body.</param>
            <param name="pageSize">Page size</param>
            <param name="pageNumber">Page number (0-based)</param>
            <returns />
        </member>
        <member name="M:pdftron.PDF.Convert.DocumentPaginatorWrapper.Move(System.Windows.Rect)">
            <summary>
Utility function to translate the body content on the page from 
the page origin (upper left corner) to the specified BodyRect origin.
</summary>
            <param name="rect">Input rect</param>
            <returns>Translated rectangle</returns>
        </member>
        <member name="M:pdftron.PDF.Convert.DocumentPaginatorWrapper.GetPage(System.Int32)">
            <summary>
The output serializer will call this function for each page, starting at pageNumber = 0
</summary>
            <param name="pageNumber">Page number (0-based) to return</param>
            <returns>Formated page</returns>
        </member>
        <member name="M:pdftron.PDF.Convert.DocumentPaginatorWrapper.#ctor(System.Windows.Documents.DocumentPaginator,pdftron.PDF.Convert.WPFConverterOptions)">
            <summary>
Constructor
</summary>
            <param name="paginator">paginator from document</param>
            <param name="options">Converter options such as page size, body rect, header and footer functions, etc.</param>
        </member>
        <member name="T:pdftron.PDF.Convert.DocumentPaginatorWrapper">
            <summary>
DocumentPaginatorWrapper places the body of the paginated page of BodyRect on each page
along with the header and footer.
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.Printer.GetMode">
            <summary>Get the current mode for print jobs.
</summary>
            <returns>the current print mode
</returns>
        </member>
        <member name="M:pdftron.PDF.Convert.Printer.SetMode(pdftron.PDF.Convert.Printer.Mode)">
            <summary>Control how the PDFNet converts files, in particular Office documents.
</summary>
            <param name="mode">set the print mode. Default is e_auto.
</param>
        </member>
        <member name="F:pdftron.PDF.Convert.Printer.Mode.e_prefer_builtin_converter">
            <summary>
For Office file conversions, use the built in converter if it is available for the converted file type.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.Printer.Mode.e_printer_only">
            <summary>
For Office file conversions, do not check for COM Interop availability, and use the printer path instead.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.Printer.Mode.e_interop_only">
            <summary>
For Office file conversions, force COM Interop to be used, regardless if this virtual printer is installed or not.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.Printer.Mode.e_auto">
            <summary>
By default one or more print paths will be used to create a PDF file.
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.Printer.IsInstalled">
            <summary>Determine if the "PDFTron PDFNet" printer is installed.
</summary>
            <returns>true if the named printer is installed, false otherwise
</returns>
        </member>
        <member name="M:pdftron.PDF.Convert.Printer.IsInstalled(System.String)">
            <summary>Determine if the PDFNet printer is installed.
</summary>
            <param name="in_printerName">the name of the printer to install and use for conversions. 
</param>
            <returns>true if the named printer is installed, false otherwise
</returns>
            <remarks>may or may not check if the printer with the given name is actually a PDFNet printer.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.Printer.SetPrinterName">
            <summary>Set the name of the PDFNet printer installed in this process session to "PDFTron PDFNet"
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.Printer.SetPrinterName(System.String)">
            <summary>Set the name of the PDFNet printer installed in this process session.
</summary>
            <param name="in_printerName">the Unicode name of the PDFNet printer
</param>
            <remarks>if no printer was installed in this process then the predefined string "PDFTron PDFNet" will be used.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.Printer.GetPrinterName">
            <summary>Get the name of the PDFNet printer installed in this process session.
</summary>
            <returns>the Unicode name of the PDFNet printer
</returns>
            <remarks>if no printer was installed in this process then the predefined string "PDFTron PDFNet" will be returned.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.Printer.Uninstall">
            <summary>Uninstall all printers using the PDFNet printer driver.
</summary>
            <remarks>Installing and uninstalling printer drivers requires the process to be running as administrator.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.Printer.Install">
            <summary>Install the PDFNet printer.
Installation can take a few seconds, so it is recommended that you install the printer once as part of 
your deployment process. Duplicated installations will be quick since the presence of the printer is checked 
before installation is attempted. There is no need to uninstall the printer after conversions, it can be left 
installed for later access.
</summary>
            <remarks>install PDFNet printer using "PDFTron PDFNet" as the printer name
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.Printer.Install(System.String)">
            <summary>Install the PDFNet printer.
Installation can take a few seconds, so it is recommended that you install the printer once as part of 
your deployment process. Duplicated installations will be quick since the presence of the printer is checked 
before installation is attempted. There is no need to uninstall the printer after conversions, it can be left 
installed for later access.
</summary>
            <param name="in_printerName">the name of the printer to install and use for conversions. If in_printerName is not provided then the name "PDFTron PDFNet" is used.
</param>
            <remarks>Installing and uninstalling printer drivers requires the process to be running as administrator.
</remarks>
        </member>
        <member name="T:pdftron.PDF.Convert.Printer">
            <summary>Convert::Printer is a utility class to install the a printer for print-based conversion of documents for Convert::ToPdf.
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.RequiresPrinter(System.String)">
            <summary> Utility function to determine if ToPdf will require the PDFNet
printer to convert a specific file to PDF.

</summary>
            <param name="in_filename">the path to the document to be checked
</param>
            <returns> true if ToPdf requires the printer to convert the file, false
otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Current implementation looks only at the file extension not
file contents. If the file extension is missing, false will be returned</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToPdf(pdftron.PDF.PDFDoc,System.Windows.Documents.DocumentPaginator,pdftron.PDF.Convert.WPFConverterOptions)">
            <summary>
Convert the object specified by doc to PDF
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.ToPdf(pdftron.PDF.PDFDoc,System.Windows.Documents.DocumentPaginator)">
            <summary>
Convert the object specified by doc to PDF
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.ToPdf(pdftron.PDF.PDFDoc,System.Object,pdftron.PDF.Convert.WPFConverterOptions)">
            <summary>
Convert the object specified by doc to PDF
</summary>
            <remarks>doc must implement IDocumentPaginatorSource.  
doc can be a FlowDocument as object or FixedDocument as object.
doc can also be a UIElement such as Canvas.
doc cannot be a Page, Window or Frame.</remarks>
            <param name="pdfdoc">The PDFDoc to append the converted Xaml to</param>
            <param name="doc">The object containing a Xaml document</param>
            <param name="options">specification of conversion options</param>
        </member>
        <member name="M:pdftron.PDF.Convert.ToPdf(pdftron.PDF.PDFDoc,System.Object)">
            <summary>
Convert the object specified by doc to PDF
</summary>
            <remarks>doc must implement IDocumentPaginatorSource.  
doc can be a FlowDocument as object or FixedDocument as object.
doc can also be a UIElement such as Canvas.
doc cannot be a Page, Window or Frame.</remarks>
            <param name="pdfdoc">The PDFDoc to append the converted Xaml to</param>
            <param name="doc">The object containing a Xaml document</param>
        </member>
        <member name="M:pdftron.PDF.Convert.ToPdf(pdftron.PDF.PDFDoc,System.IO.Stream,System.Windows.Markup.ParserContext,pdftron.PDF.Convert.WPFConverterOptions)">
            <summary>
Convert the xaml file in the input stream to PDF and append the results to pdfdoc
</summary>
            <param name="pdfdoc">The PDFDoc to append the converted Xaml to</param>
            <param name="inputXamlStream">The input stream containing the xaml</param>
            <param name="parserContext">context defining xaml namespaces</param>
            <param name="options">specification of conversion options</param>
        </member>
        <member name="M:pdftron.PDF.Convert.ToPdf(pdftron.PDF.PDFDoc,System.IO.Stream,System.Windows.Markup.ParserContext)">
            <summary>
Convert the xaml file in the input stream to PDF and append the results to pdfdoc
</summary>
            <param name="pdfdoc">The PDFDoc to append the converted Xaml to</param>
            <param name="inputXamlStream">The input stream containing the xaml</param>
            <param name="parserContext">context defining xaml namespaces</param>
        </member>
        <member name="M:pdftron.PDF.Convert.ToPdf(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.Convert.WPFConverterOptions)">
            <summary>
Convert the specified .xaml file to PDF and append the results to pdfdoc
</summary>
            <param name="pdfdoc">The PDFDoc to append the converted Xaml to</param>
            <param name="inputXamlFile">Path to .xaml file</param>
            <param name="options">specification of conversion options</param>
        </member>
        <member name="M:pdftron.PDF.Convert.ToPdf(pdftron.PDF.PDFDoc,System.String)">
            <summary> Convert the file or document to PDF and append to the specified PDF document.

</summary>
            <param name="in_pdfdoc">the PDFDoc to append the converted document to. The
PDFDoc can then be converted to XPS, EMF or SVG using the other functions
in this class.
</param>
            <param name="in_filename">the path to the document to be converted to XPS
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="F:pdftron.PDF.Convert.WPFConverterOptions.m_FooterFunc">
            <summary>
Store for the Footer drawing function. Drawn after the header, and before
the body is drawn.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.WPFConverterOptions.m_HeaderFunc">
            <summary>
Store for the Header drawing function.  Drawn before the body is drawn.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.WPFConverterOptions.m_NumColumns">
            <summary>
Number of columns for FlowDocument layout as an override for any defined
column width in the FlowDocument. If NumColumns == 0, then the default
FlowDocument column widths are used, otherwise BodyRect.Width()/NumColumns 
is used.  See the example CreateXamlTableAndConvert.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.WPFConverterOptions.m_FooterRect">
            <summary>
The Rectangle bounding the the Footer area, typically below the body area.
Relative to the PageSize, origin is at the upper left (x1, y1), and increases 
down to right.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.WPFConverterOptions.m_HeaderRect">
            <summary>
The Rectangle bounding the the Header area, typically above the body area.
Relative to the PageSize, origin is at upper left (x1, y1), and increases 
down to right.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.WPFConverterOptions.m_BodyRect">
            <summary>
The Rectangle bounding the body area for the content.  FlowDocuments will reflow
their content to fit within this bounding area as best they can.  FixedDocuments
may reflow.  Relative to PageSize, origin is at upper left (x1, y1), and 
increases down to right.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.WPFConverterOptions.m_PageSize">
            <summary>
The page size in 96 dpi units (as used in XPS)
</summary>
        </member>
        <member name="P:pdftron.PDF.Convert.WPFConverterOptions.FooterFunc">
            <summary>
Store for the Footer drawing function. Drawn after the header, and before
the body is drawn.
</summary>
        </member>
        <member name="P:pdftron.PDF.Convert.WPFConverterOptions.HeaderFunc">
            <summary>
Store for the Header drawing function.  Drawn before the body is drawn.
</summary>
        </member>
        <member name="P:pdftron.PDF.Convert.WPFConverterOptions.NumColumns">
            <summary>
Number of columns for FlowDocument layout as an override for any defined
column width in the FlowDocument. If NumColumns == 0, then the default
FlowDocument column widths are used, otherwise BodyRect.Width()/NumColumns 
is used.  See the example CreateXamlTableAndConvert.
</summary>
        </member>
        <member name="P:pdftron.PDF.Convert.WPFConverterOptions.FooterRect">
            <summary>
The Rectangle bounding the the Footer area, typically below the body area.
Relative to the PageSize, origin is at the upper left (x1, y1), and increases 
down to right.
</summary>
        </member>
        <member name="P:pdftron.PDF.Convert.WPFConverterOptions.HeaderRect">
            <summary>
The Rectangle bounding the the Header area, typically above the body area.
Relative to the PageSize, origin is at upper left (x1, y1), and increases 
down to right.
</summary>
        </member>
        <member name="P:pdftron.PDF.Convert.WPFConverterOptions.BodyRect">
            <summary>
The Rectangle bounding the body area for the content. FlowDocuments will reflow
their content to fit within this bounding area as best they can.  FixedDocuments
may reflow.  Relative to PageSize, origin is at upper left (x1, y1), and 
increases down to right.
</summary>
        </member>
        <member name="P:pdftron.PDF.Convert.WPFConverterOptions.PageSize">
            <summary>
The page size in 96 dpi units (as used in XPS)
</summary>
        </member>
        <member name="T:pdftron.PDF.Convert.WPFConverterOptions.DrawHeaderFooter">
            <summary>
Delegates for drawing headers and footers.
</summary>
            <remarks>All resources that you use in the header and footer delegates 
must persist until the document is serialized.</remarks>
            <param name="context">This is the drawing context that should be used</param>
            <param name="bounds">The bounds of the header with (x1, y1) upper left corner to (x2, y2)</param>
            <param name="bodyBounds">The bounds of the body area with (x1, y1) upper left corner to (x2, y2)</param>
            <param name="pageSize">The size of the page in pixels at 96 dpi</param>
            <param name="pageNumber">The page number is 0 based</param>
        </member>
        <member name="M:pdftron.PDF.Convert.WPFConverterOptions.#ctor">
            <summary>
Default constructor.  Sets the page size to (8.5 x 11), and margins to 1/2 inch.
Number of columns to 0 (don't override input) and no header and footer functions.
</summary>
        </member>
        <member name="T:pdftron.PDF.Convert.WPFConverterOptions">
            <summary>
pdftron.PDF.Convert can be used to to convert .xaml files into PDF documents
with control over headers and footers, main body placement,
and column widths.  Pagination is controlled by specifying the page size and 
body size (margins) and all pages are appended to a PDFDoc which can then be
further manipulated using the PDFNet API.

Three types of XAML objects are convertible using pdftron.PDF.Convert:
- FlowDocument's which describe content that is reflowable from page to page
- FixedDocument's which describe content that has been placed on a fixed page
- Blocks such as Canvas, RichTextBox, Section etc which can be wrapped or inserted 
  directly into a FlowDocument

Limitations:
There are many Xaml classes that cannot be added to FlowDocument or FixedDocuments and
therefore this sample converter cannot convert them.  Examples include 
Page, Window or Frame objects.
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.ToTiff(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.Convert.TiffOutputOptions)">
            <summary>Convert the PDF to multipage Tiff and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDF doc to convert to multipage Tiff
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <param name="options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToTiff(pdftron.PDF.PDFDoc,System.String)">
            <summary>Convert the PDF to multipage Tiff and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDF doc to convert to multipage Tiff
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToTiff(System.String,System.String,pdftron.PDF.Convert.TiffOutputOptions)">
            <summary>Convert a file to multipage Tiff and save to the specified path.

</summary>
            <param name="in_filename">the file to convert to multipage Tiff
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <param name="options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToTiff(System.String,System.String)">
            <summary>Convert a file to multipage Tiff and save to the specified path.

</summary>
            <param name="in_filename">the file to convert to multipage Tiff
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToEpub(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.Convert.HTMLOutputOptions,pdftron.PDF.Convert.EPUBOutputOptions)">
            <summary>Convert the PDFDoc to EPUB format and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to EPUB
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <param name="html_options">the HTML conversion options
</param>
            <param name="epub_options">the EPUB conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToEpub(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.Convert.EPUBOutputOptions)">
            <summary>Convert the PDFDoc to EPUB format and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to EPUB
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <param name="epub_options">the EPUB conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToEpub(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.Convert.HTMLOutputOptions)">
            <summary>Convert the PDFDoc to EPUB format and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to EPUB
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <param name="html_options">the HTML conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToEpub(pdftron.PDF.PDFDoc,System.String)">
            <summary>Convert the PDFDoc to EPUB format and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to EPUB
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToEpub(System.String,System.String,pdftron.PDF.Convert.HTMLOutputOptions,pdftron.PDF.Convert.EPUBOutputOptions)">
            <summary>Convert a file to EPUB format and save to the specified path.

</summary>
            <param name="in_filename">the file to convert to EPUB
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <param name="html_options">the HTML conversion options
</param>
            <param name="epub_options">the EPUB conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS, PDF.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToEpub(System.String,System.String,pdftron.PDF.Convert.EPUBOutputOptions)">
            <summary>Convert a file to EPUB format and save to the specified path.

</summary>
            <param name="in_filename">the file to convert to EPUB
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <param name="epub_options">the EPUB conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS, PDF.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToEpub(System.String,System.String,pdftron.PDF.Convert.HTMLOutputOptions)">
            <summary>Convert a file to EPUB format and save to the specified path.

</summary>
            <param name="in_filename">the file to convert to EPUB
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <param name="html_options">the HTML conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToEpub(System.String,System.String)">
            <summary>Convert a file to EPUB format and save to the specified path.

</summary>
            <param name="in_filename">the file to convert to EPUB
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS, PDF.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToWord(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.Convert.WordOutputOptions)">
            <summary>Convert the PDF to Word and save to the specified path.
This conversion requires that the optional PDFTron pdf2word add-on module is available.
See also: the `PDF2WordModule` class

</summary>
            <param name="in_pdfdoc">the PDF doc to convert to Word
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <param name="options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToWord(pdftron.PDF.PDFDoc,System.String)">
            <summary>Convert the PDF to Word and save to the specified path.
This conversion requires that the optional PDFTron pdf2word add-on module is available.
See also: the `PDF2WordModule` class

</summary>
            <param name="in_pdfdoc">the PDF doc to convert to Word
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToWord(System.String,System.String,pdftron.PDF.Convert.WordOutputOptions)">
            <summary>Convert a PDF file to Word and save to the specified path.
This conversion requires that the optional PDFTron pdf2word add-on module is available.
See also: the `PDF2WordModule` class

</summary>
            <param name="in_filename">the PDF file to convert to Word
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <param name="options">the conversion options
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.ToWord(System.String,System.String)">
            <summary>Convert a PDF file to Word and save to the specified path.
This conversion requires that the optional PDFTron pdf2word add-on module is available.
See also: the `PDF2WordModule` class

</summary>
            <param name="in_filename">the PDF file to convert to Word
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToHtml(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.Convert.HTMLOutputOptions)">
            <summary>Convert the PDF to HTML and save to the specified path.
In e_reflow_paragraphs mode, this conversion requires that the optional PDFTron
pdf2html add-on module is available.
See also: the `PDF2HtmlReflowParagraphsModule` class

</summary>
            <param name="in_pdfdoc">the PDF doc to convert to HTML
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <param name="options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToHtml(pdftron.PDF.PDFDoc,System.String)">
            <summary>Convert the PDF to HTML and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDF doc to convert to HTML
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToHtml(System.String,System.String,pdftron.PDF.Convert.HTMLOutputOptions)">
            <summary>Convert a file to HTML and save to the specified path.
In e_reflow_paragraphs mode, this conversion requires that the optional PDFTron
pdf2html add-on module is available.
See also: the `PDF2HtmlReflowParagraphsModule` class

</summary>
            <param name="in_filename">the file to convert to HTML
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <param name="options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS, PDF.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToHtml(System.String,System.String)">
            <summary>Convert a file to HTML and save to the specified path.

</summary>
            <param name="in_filename">the file to convert to HTML
</param>
            <param name="output_path">the path to where generated content will be stored
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS, PDF.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXod(System.String,pdftron.PDF.Convert.XODOutputOptions)">
            <summary> Generate a stream that incrementally converts the input file to XOD format.

</summary>
            <param name="in_filename">the in_filename
</param>
            <returns>converted file as Stream
</returns>
            <param name="options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS, PDF.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXod(System.String)">
            <summary> Generate a stream that incrementally converts the input file to XOD format.

</summary>
            <param name="in_filename">the in_filename
</param>
            <returns>converted XPS file as Stream
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS, PDF.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXod(pdftron.PDF.PDFDoc,pdftron.PDF.Convert.XODOutputOptions)">
            <summary> Generate a stream that incrementally converts the input file to XOD format.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to XPS
</param>
            <returns>converted file in Stream
</returns>
            <param name="options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS, PDF.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXod(pdftron.PDF.PDFDoc)">
            <summary> Generate a stream that incrementally converts the input file to XOD format.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to XPS
</param>
            <returns>converted file in Stream
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS, PDF.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXod(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.Convert.XODOutputOptions)">
            <summary> Convert the PDFDoc to XOD format and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to XPS
</param>
            <param name="out_filename">the out_filename
</param>
            <param name="options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS, PDF.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXod(pdftron.PDF.PDFDoc,System.String)">
            <summary> Convert the PDFDoc to XOD format and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to XPS
</param>
            <param name="out_filename">the out_filename
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS, PDF.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXod(System.String,System.String,pdftron.PDF.Convert.XODOutputOptions)">
            <summary> Convert the input file to XOD format and save to the specified path.

</summary>
            <param name="in_filename">the in_filename
</param>
            <param name="out_filename">the out_filename
</param>
            <param name="options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS, PDF.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXod(System.String,System.String)">
            <summary> Convert the input file to XOD format and save to the specified path.

</summary>
            <param name="in_filename">the in_filename
</param>
            <param name="out_filename">the out_filename
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS, PDF.
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXps(System.String)">
            <summary> Generate a stream that incrementally converts the input file to XPS format.

</summary>
            <param name="in_inputFilename">the path to the document to be converted to XPS
</param>
            <returns>converted file as Stream
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS.
Formats that require external applications for conversion use the 
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXps(System.String,pdftron.PDF.Convert.XPSOutputOptions)">
            <summary> Generate a stream that incrementally converts the input file to XPS format.

</summary>
            <param name="in_inputFilename">the path to the document to be converted to XPS
</param>
            <returns>converted file as Stream
</returns>
            <param name="options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXps(pdftron.PDF.PDFDoc,pdftron.PDF.Convert.XPSOutputOptions)">
            <summary> Generate a stream that incrementally converts the input file to XPS format.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to XPS
</param>
            <returns>converted file as Stream
</returns>
            <param name="options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXps(pdftron.PDF.PDFDoc)">
            <summary> Generate a stream that incrementally converts the input file to XPS format.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to XPS
</param>
            <returns>stream contains the converted document
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXps(System.String,System.String,pdftron.PDF.Convert.XPSOutputOptions)">
            <summary> Convert the file or document to XPS and write to the specified file.

</summary>
            <param name="in_inputFilename">the path to the document to be converted to XPS
</param>
            <param name="in_outputFilename">the path to the output XPS file
</param>
            <param name="options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS. 
Formats that require external applications for conversion use the
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXps(System.String,System.String)">
            <summary> Convert the file or document to XPS and write to the specified file.

</summary>
            <param name="in_inputFilename">the path to the document to be converted to XPS
</param>
            <param name="in_outputFilename">the path to the output XPS file
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Internally formats include BMP, EMF, JPEG, PNG, TIF, XPS.
Formats that require external applications for conversion use the 
Convert::Printer class and the PDFNet printer to be installed. This is
only supported on Windows platforms.  Document formats in this category
include RTF(MS Word or Wordpad), TXT (Notepad or Wordpad), DOC and DOCX
(MS Word), PPT and PPTX (MS PowerPoint), XLS and XLSX (MS Excel),
OpenOffice documents, HTML and MHT (Internet Explorer), PUB (MS Publisher),
MSG (MS Outlook).</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXps(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.Convert.XPSOutputOptions)">
            <summary> Convert the PDFDoc to XPS and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to XPS
</param>
            <param name="in_filename">the path to the document to create
</param>
            <param name="options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToXps(pdftron.PDF.PDFDoc,System.String)">
            <summary> Convert the PDFDoc to XPS and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to XPS
</param>
            <param name="in_filename">the path to the document to create
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToSvg(pdftron.PDF.Page,System.String,pdftron.PDF.Convert.SVGOutputOptions)">
            <summary> Convert the Page to SVG and save to the specified path.

</summary>
            <param name="in_page">the Page to convert to SVG
</param>
            <param name="in_filename">the path to the SVG file to create
</param>
            <param name="in_options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToSvg(pdftron.PDF.Page,System.String)">
            <summary> Convert the Page to SVG and save to the specified path.

</summary>
            <param name="in_page">the Page to convert to SVG
</param>
            <param name="in_filename">the path to the SVG file to create
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToSvg(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.Convert.SVGOutputOptions)">
            <summary> Convert the PDFDoc to SVG and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to SVG
</param>
            <param name="in_filename">the path to the SVG files to create, one file per page
</param>
            <param name="in_options">the conversion options
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToSvg(pdftron.PDF.PDFDoc,System.String)">
            <summary> Convert the PDFDoc to SVG and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to SVG
</param>
            <param name="in_filename">the path to the SVG files to create, one file per page
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.ToEmf(pdftron.PDF.Page,System.String)">
            <summary> Convert the Page to EMF and save to the specified path.

</summary>
            <param name="in_page">the Page to convert to EMF
</param>
            <param name="in_filename">the path to the EMF file to create
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This method is available only on Windows platforms. </remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.ToEmf(pdftron.PDF.PDFDoc,System.String)">
            <summary> Convert the PDFDoc to EMF and save to the specified path.

</summary>
            <param name="in_pdfdoc">the PDFDoc to convert to EMF
</param>
            <param name="in_filename">the path to the EMF files to create, one file per page
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This method is available only on Windows platforms. </remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.FromDICOM(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.AdvancedImagingConvertOptions)">
            <summary>
Convert the specified AdvancedImaging (i.e. DICOM) file to PDF and append converted pages to the specified PDF document.
This conversion requires that the optional PDFTron AdvancedImaging add-on module is available.
See also: the 'AdvancedImagingModule' class
</summary>
            <param name="in_pdfdoc"> the PDFDoc to append to </param>
            <param name="in_filename"> the path to the AdvancedImaging document to convert </param>
            <param name="options">The options to use when converting.</param>
            <remarks>
See the `AdvancedImagingConvertOptions` class for the available options.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.FromCAD(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.CADConvertOptions)">
            <summary>
Convert the specified CAD file to PDF and append converted pages to the specified PDF document.
This conversion requires that the optional PDFTron CAD add-on module is available.
See also: the 'CADModule' class
</summary>
            <param name="in_pdfdoc"> the PDFDoc to append to </param>
            <param name="in_filename"> the path to the CAD document to convert </param>
            <param name="options">The options to use when converting.</param>
            <remarks>
See the `CADConvertOptions` class for the available options.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.FromText(pdftron.PDF.PDFDoc,System.String,pdftron.SDF.Obj)">
            <summary>
Convert the specified plain text file to PDF and append converted pages to the specified PDF document.  
</summary>
            <param name="in_pdfdoc"> the PDFDoc to append to </param>
            <param name="in_filename"> the path to the plain text document to convert </param>
            <remarks>
in_options the conversion options. The availble options are:
| Option Name             | Type    | Note                                                    |
|-------------------------|---------|---------------------------------------------------------|
| BytesPerBite            | Integer | In bytes. Use for streaming conversion only.            |
| FontFace                | String  | Set the font face used for the conversion.              |
| FontSize                | Integer | Set the font size used for the conversion.              |
| LineHeightMultiplier    | Double  | Set the line height multiplier used for the conversion. |
| MarginBottom            | Double  | In inches. Set the bottom margin of the page.           |
| MarginLeft              | Double  | In inches. Set the left margin of the page.             |
| MarginRight             | Double  | In inches. Set the right margin of the page.            |
| MarginTop               | Double  | In inches. Set the top margin of the page.              |
| PageHeight              | Double  | In inches. Set the page height.                         |
| PageWidth               | Double  | In inches. Set the page width.                          |
| UseSourceCodeFormatting | Boolean | Set whether to use mono font for the conversion.        |
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.StreamingPDFConversion(pdftron.Filters.Filter,pdftron.PDF.ConversionOptions)">
            <summary>
Create a DocumentConversion object suitable for converting a file to pdf.
<br />This conversion will be performed entirely within PDFNet, and handles incoming files in .docx, .xlsx, pptx, .doc, .png, .jpg, .bmp, .gif, .jp2, .tif, .txt, .xml and .md format
<br />This method does not perform any  conversion logic and can be expected to return quickly. To do the actual conversion, use the returned DocumentConversion object (see PDF.DocumentConversion)
<br /> Font requirements: on some systems you may need to specify extra font resources to aid in conversion. Please see http://www.pdftron.com/kb_fonts_and_builtin_office_conversion
</summary>
            <param name="in_stream">the source data stream</param>
            <param name="options">the conversion options</param>
            <returns>A DocumentConversion object which encapsulates this particular conversion</returns>
            <remarks>
see StreamingPDFConversion() if you would like more control over the conversion process
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.StreamingPDFConversion(pdftron.PDF.PDFDoc,pdftron.Filters.Filter,pdftron.PDF.ConversionOptions)">
            <summary>
Create a DocumentConversion object suitable for converting a file to pdf and appending to an existing  PDF document. 
<br />This conversion will be performed entirely within PDFNet, and handles incoming files in .docx, .xlsx, pptx, .doc, .png, .jpg, .bmp, .gif, .jp2, .tif, .txt, .xml and .md format
<br />This method does not perform any  conversion logic and can be expected to return quickly. To do the actual conversion, use the returned DocumentConversion object (see PDF.DocumentConversion)
<br /> Font requirements: on some systems you may need to specify extra font resources to aid in conversion. Please see http://www.pdftron.com/kb_fonts_and_builtin_office_conversion
</summary>
            <param name="doc"> the conversion result will be appended to this pdf</param>
            <param name="in_stream">the source data stream</param>
            <param name="options">the conversion options</param>
            <returns>A DocumentConversion object which encapsulates this particular conversion</returns>
        </member>
        <member name="M:pdftron.PDF.Convert.OfficeToPDF(pdftron.PDF.PDFDoc,pdftron.Filters.Filter,pdftron.PDF.ConversionOptions)">
            <summary>
Convert the an office document (in .docx, .xlsx, pptx, or .doc format) to pdf and append to the specified PDF document. This conversion is performed entirely within PDFNet, and does not rely on Word interop or any other external functionality.
<br />Font requirements: on some systems you may need to specify extra font resources to aid in conversion. Please see http://www.pdftron.com/kb_fonts_and_builtin_office_conversion
</summary>
            <param name="doc"> the conversion result will be appended to this pdf</param>
            <param name="in_stream">the source data stream.</param>
            <param name="options">the conversion options</param>
            <remarks>
see StreamingPDFConversion() if you would like more control over the conversion process
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.StreamingPDFConversion(System.String,pdftron.PDF.ConversionOptions)">
            <summary>
Create a DocumentConversion object suitable for converting a file to pdf.
<br />This conversion will be performed entirely within PDFNet, and handles incoming files in .docx, .xlsx, pptx, .doc, .png, .jpg, .bmp, .gif, .jp2, .tif, .txt, .xml and .md format
<br />This method does not perform any  conversion logic and can be expected to return quickly. To do the actual conversion, use the returned DocumentConversion object (see PDF.DocumentConversion)
<br /> Font requirements: on some systems you may need to specify extra font resources to aid in conversion. Please see http://www.pdftron.com/kb_fonts_and_builtin_office_conversion
</summary>
            <param name="filePath">the path to the source document</param>
            <param name="options">the conversion options</param>
            <returns>A DocumentConversion object which encapsulates this particular conversion</returns>
        </member>
        <member name="M:pdftron.PDF.Convert.StreamingPDFConversion(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.ConversionOptions)">
            <summary>
Create a DocumentConversion object suitable for converting a file to pdf and appending to an existing  PDF document. 
<br />This conversion will be performed entirely within PDFNet, and handles incoming files in .docx, .xlsx, pptx, .doc, .png, .jpg, .bmp, .gif, .jp2, .tif, .txt, .xml and .md format
<br />This method does not perform any  conversion logic and can be expected to return quickly. To do the actual conversion, use the returned DocumentConversion object (see PDF.DocumentConversion)
<br /> Font requirements: on some systems you may need to specify extra font resources to aid in conversion. Please see http://www.pdftron.com/kb_fonts_and_builtin_office_conversion
</summary>
            <param name="doc"> the conversion result will be appended to this pdf</param>
            <param name="filePath">the path to the source document</param>
            <param name="options">the conversion options</param>
            <returns>A DocumentConversion object which encapsulates this particular conversion</returns>
        </member>
        <member name="M:pdftron.PDF.Convert.OfficeToPDF(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.ConversionOptions)">
            <summary>
Convert the an office document (in .docx, .xlsx, pptx, or .doc format) to pdf and append to the specified PDF document. This conversion is performed entirely within PDFNet, and does not rely on Word interop or any other external functionality.
<br />Font requirements: on some systems you may need to specify extra font resources to aid in conversion. Please see http://www.pdftron.com/kb_fonts_and_builtin_office_conversion
</summary>
            <param name="doc"> the conversion result will be appended to this pdf</param>
            <param name="filePath">the path to the source document</param>
            <param name="options">the conversion options</param>
            <remarks>
see StreamingPDFConversion() if you would like more control over the conversion process
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.CreateReflow(pdftron.PDF.Page,System.String)">
            <summary>
Create a Reflow object.
</summary>
            <param name="in_page">the Page to convert</param>
            <param name="json_zones">pre-recognized zoning information in JSON format</param>
            <returns>A Reflow object</returns>
        </member>
        <member name="M:pdftron.PDF.Convert.WordToPDFConversion(pdftron.PDF.PDFDoc,pdftron.Filters.Filter,pdftron.PDF.WordToPDFOptions)">
            <summary>
Create a DocumentConversion object suitable for converting a Word document (in .docx format) to pdf and appending to the specified PDF document. This conversion will be performed entirely within PDFNet, and does not rely on Word interop or any other external functionality.
<br />This method allows for more control over the conversion process than the single call WordToPDF() interface. This method does not perform any  conversion logic and can be expected to return quickly. To do the actual conversion, use the returned DocumentConversion object (see PDF.DocumentConversion)
<br /> Font requirements: on some systems you may need to specify extra font resources to aid in conversion. Please see http://www.pdftron.com/kb_fonts_and_builtin_office_conversion
</summary>
            <param name="doc"> the conversion result will be appended to this pdf</param>
            <param name="in_stream">the source data stream. The source must be in .docx format.</param>
            <param name="options">the conversion options</param>
            <returns>A DocumentConversion object which encapsulates this particular conversion</returns>
            <remarks>
see WordToPdfConversion() if you would like more control over the conversion process
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.WordToPDF(pdftron.PDF.PDFDoc,pdftron.Filters.Filter,pdftron.PDF.WordToPDFOptions)">
            <summary>
Convert the a Word document (in .docx format) to pdf and append to the specified PDF document. This conversion is performed entirely within PDFNet, and does not rely on Word interop or any other external functionality.
<br />Font requirements: on some systems you may need to specify extra font resources to aid in conversion. Please see http://www.pdftron.com/kb_fonts_and_builtin_office_conversion
</summary>
            <param name="doc"> the conversion result will be appended to this pdf</param>
            <param name="in_stream">the source data stream. The source must be in .docx format.</param>
            <param name="options">the conversion options</param>
            <remarks>
see WordToPdfConversion() if you would like more control over the conversion process
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.WordToPDFConversion(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.WordToPDFOptions)">
            <summary>
Create a DocumentConversion object suitable for converting a Word document (in .docx format) to pdf and appending to the specified PDF document. This conversion will be performed entirely within PDFNet, and does not rely on Word interop or any other external functionality.
<br />This method allows for more control over the conversion process than the single call WordToPDF() interface. This method does not perform any  conversion logic and can be expected to return quickly. To do the actual conversion, use the returned DocumentConversion object (see PDF.DocumentConversion)
<br /> Font requirements: on some systems you may need to specify extra font resources to aid in conversion. Please see http://www.pdftron.com/kb_fonts_and_builtin_office_conversion
</summary>
            <param name="doc"> the conversion result will be appended to this pdf</param>
            <param name="filePath">the path to the source document. The source must be in .docx format.</param>
            <param name="options">the conversion options</param>
            <returns>A DocumentConversion object which encapsulates this particular conversion</returns>
            <remarks>
see WordToPdfConversion() if you would like more control over the conversion process
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.WordToPDF(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.WordToPDFOptions)">
            <summary>
Convert the a Word document (in .docx format) to pdf and append to the specified PDF document. This conversion is performed entirely within PDFNet, and does not rely on Word interop or any other external functionality.
<br />Font requirements: on some systems you may need to specify extra font resources to aid in conversion. Please see http://www.pdftron.com/kb_fonts_and_builtin_office_conversion
</summary>
            <param name="doc"> the conversion result will be appended to this pdf</param>
            <param name="filePath">the path to the source document. The source must be in .docx format.</param>
            <param name="options">the conversion options</param>
            <remarks>
see WordToPdfConversion() if you would like more control over the conversion process
</remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.FromEmf(pdftron.PDF.PDFDoc,System.String)">
            <summary> Convert the specified EMF to PDF and append converted pages
to the specified PDF document.  EMF will be fitted to the page.

</summary>
            <param name="in_pdfdoc">the PDFDoc to append to
</param>
            <param name="in_filename">the path to the EMF document to convert
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This method is available only on Windows platforms. </remarks>
        </member>
        <member name="M:pdftron.PDF.Convert.FromXps(pdftron.PDF.PDFDoc,System.Byte[],System.Int32)">
            <summary> Convert the specified XPS document contained in memory to PDF and append converted 
pages to the specified PDF document.

</summary>
            <param name="in_pdfdoc">the PDFDoc to append to
</param>
            <param name="buf">the buffer containing the xps document
</param>
            <param name="buf_size">the size of the buffer
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Convert.FromXps(pdftron.PDF.PDFDoc,System.String)">
            <summary> Convert the specified XPS document to PDF and append converted pages
to the specified PDF document.

</summary>
            <param name="in_pdfdoc">the PDFDoc to append to
</param>
            <param name="in_filename">the path to the XPS document to convert
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.Convert.TiffOutputOptions">
            <summary>
A class containing options for ToTiff functions
</summary>
            <summary>
A class containing options for PDF to Tiff conversion
</summary>
        </member>
        <member name="T:pdftron.PDF.Convert.EPUBOutputOptions">
            <summary>
A class containing options for ToEPUB functions
</summary>
            <summary>
A class containing options for PDF to EPUB conversion
</summary>
        </member>
        <member name="T:pdftron.PDF.Convert.WordOutputOptions">
            <summary>
A class containing options common to ToWord functions
</summary>
            <summary>
A class containing options common to ToWord functions
</summary>
        </member>
        <member name="T:pdftron.PDF.Convert.HTMLOutputOptions">
            <summary>
A class containing options for ToHTML and ToEPUB functions
</summary>
            <summary>
A class containing options for PDF to HTML conversion
</summary>
        </member>
        <member name="T:pdftron.PDF.Convert.XODOutputOptions">
            <summary>
A class containing options for ToXod functions
</summary>
            <summary>
A class containing options for ToXod functions
</summary>
        </member>
        <member name="T:pdftron.PDF.Convert.XPSOutputOptions">
            <summary>
A class containing options for ToXps functions
</summary>
            <summary>
A class containing options for ToXps functions
</summary>
        </member>
        <member name="T:pdftron.PDF.Convert.XPSOutputCommonOptions">
            <summary>
A class containing options common to ToXps and ToXod functions
</summary>
            <summary>
A class containing options common to ToXps and ToXod functions
</summary>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetOverprint(pdftron.PDF.PDFRasterizer.OverprintPreviewMode)">
            <summary>
Enable or disable support for overprint and overprint simulation. 
Overprint is a device dependent feature and the results will vary depending on 
the output color space and supported colorants (i.e. CMYK, CMYK+spot, RGB, etc).
Default is e_op_pdfx_on.
</summary>
            <param name="mode"> op e_op_on: always enabled; e_op_off: always disabled; 
e_op_pdfx_on: enabled for PDF/X files only.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetAnnots(System.Boolean)">
            <summary>
Control generation of form fields and annotations in SVG.
</summary>
            <param name="annots"> if false, no form fields or annotations are converted. Default is true.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetDtd(System.Boolean)">
            <summary>
Set whether the DTD declaration is included in the SVG files.
</summary>
            <param name="dtd"> if false, no DTD is added to SVG files. Default is true.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetCreateXmlWrapper(System.Boolean)">
            <summary>
Create a XML document that contains metadata of the SVG document created.
</summary>
            <param name="xml"> if true, XML wrapper is created. Default is true.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetThumbnailSize(System.UInt32)">
            <summary>
The maximum dimension for thumbnails.
</summary>
            <param name="size"> the maximum dimension (width or height) that thumbnails will have. Default is 400.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetOutputThumbnails(System.Boolean)">
            <summary>
Sets whether per page thumbnails should be included in the file. Default is true.
</summary>
            <param name="include_thumbs"> if true thumbnails will be included</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetCompress(System.Boolean)">
            <summary>
Compress output SVG files using SVGZ.
</summary>
            <param name="svgz"> if true, SVG files are written in compressed format. Default is false.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetFlattenMaximumImagePixels(System.UInt32)">
            <summary>
Specifies the maximum image size in pixels. Default is 2000000.
</summary>
            <param name="max_pixels"> the maximum number of pixels an image can have.
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetFlattenDPI(System.UInt32)">
            <summary>
The output resolution, from 1 to 1000, in Dots Per Inch (DPI) at which to render elements which cannot be directly converted. 
Default is 140.
</summary>
            <param name="dpi">  the resolution in Dots Per Inch
</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetFlattenThreshold(pdftron.PDF.Convert.FlattenThresholdFlag)">
            <summary>
Used to control how precise or relaxed text flattening is. When some text is 
preserved (not flattened to image) the visual appearance of the document may be altered.
</summary>
            <param name="threshold"> the threshold setting to use.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetFlattenContent(pdftron.PDF.Convert.FlattenFlag)">
            <summary>
Flatten images and paths into a single background image overlaid with 
vector text. This option can be used to improve speed on devices with 
little processing power such as iPads. Default is e_fast.
</summary>
            <param name="flatten"> select which flattening mode to use.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetRemoveCharPlacement(System.Boolean)">
            <summary>
Sets whether to disable the output of character positions.  This will produce slightly smaller output files than the default setting, but many viewers do not support the output correctly
</summary>
            <param name="remove_char_placement">if true, the output of character positions is disabled</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetIndividualCharPlacement(System.Boolean)">
            <summary>
Some viewers do not support the default text positioning correctly. This option works around this issue to place text correctly, but produces verbose output. This option will override SetRemoveCharPlacement
</summary>
            <param name="individual_char_placement">if true, text will be positioned correctly</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetNoUnicode(System.Boolean)">
            <summary>
Sets whether to disable mapping of text to public Unicode region. Instead text will be converted using a custom encoding
</summary>
            <param name="no_unicode">if true, mapping of text to public Unicode region is disabled. Default is false.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetPreserveFontFamilyNames(System.Boolean)">
            <summary>
Sets whether to use the font/font-family naming scheme as obtained from the source file.
</summary>
            <param name="preserve">if true, font family names are preserved. Default is false.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetEmbedFonts(System.Boolean)">
            <summary>
Sets whether to embed fonts into each SVG page file, or to have them shared.
</summary>
            <param name="embed_fonts">if true, fonts are injected into each SVG page. 
Otherwise they are created as separate files that are shared between SVG pages. Default is false.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetSvgFonts(System.Boolean)">
            <summary>
Sets whether to convert all fonts to SVG or not.
</summary>
            <param name="svg_fonts">if true, fonts are converted to SVG. Otherwise they are converted to OpenType. Default is false.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetNoFonts(System.Boolean)">
            <summary>
Sets whether to disable conversion of font data to SVG
</summary>
            <param name="no_fonts">if true, font data conversion is disabled. Default is false.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.SetEmbedImages(System.Boolean)">
            <summary>
Sets whether to embed all images
</summary>
            <param name="embed_images">if true, images will be embeded. Default is false.</param>
        </member>
        <member name="M:pdftron.PDF.Convert.SVGOutputOptions.#ctor">
            <summary>
Creates an SVGOutputOptions object with default settings
</summary>
        </member>
        <member name="T:pdftron.PDF.Convert.SVGOutputOptions">
            <summary>
A class containing options for ToSvg functions
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.FlattenFlag.e_high_quality">
            <summary>
Preserve vector content where possible. In particular only feature reduce
PDF files containing overprint or very complex vector content. Currently this
option can only be used with XODOutputOptions.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.FlattenFlag.e_fast">
            <summary>
Feature reduce PDF while trying to preserve some 
complex PDF features (such as vector figures, transparency, shadings, 
blend modes, Type3 fonts etc.) for pages that are already fast to render. 
This option can also result in smaller &amp; faster files compared to e_simple,
but the pages may have more complex structure.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.FlattenFlag.e_simple">
            <summary>
Feature reduce PDF to a simple two layer representation consisting 
of a single background RGB image and a simple top text layer.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.FlattenFlag.e_off">
            <summary>
Disable flattening and convert all content as is.
</summary>
        </member>
        <member name="T:pdftron.PDF.Convert.FlattenFlag">
            <summary>FlattenFlag</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.FlattenThresholdFlag.e_keep_all">
            <summary>
Only render text that are completely occluded, or used as a clipping path.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.FlattenThresholdFlag.e_keep_most">
            <summary>
Only render text that are seriously clipped or occluded.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.FlattenThresholdFlag.e_default">
            <summary>
Render text that are somewhat clipped or occluded.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.FlattenThresholdFlag.e_strict">
            <summary>
Render text that are marginally clipped or occluded.
</summary>
        </member>
        <member name="F:pdftron.PDF.Convert.FlattenThresholdFlag.e_very_strict">
            <summary>
Render (flatten) any text that is clipped or occluded.
</summary>
        </member>
        <member name="T:pdftron.PDF.Convert.FlattenThresholdFlag">
            <summary>FlattenThresholdFlag</summary>
        </member>
        <member name="T:pdftron.PDF.Convert">
            <summary> Converter is a utility class used to convert documents and files to PDF.
Conversion of XPS, EMF and image files to PDF documents is performed internally.
Other document formats are converted via native application and printing.

<example><code>
using namespace pdftron;
using namespace PDF;
PDFDoc pdfdoc;

Convert.FromXps(pdfdoc, input_path + "simple-xps.xps" );
Convert.FromEmf(pdfdoc, input_path + "simple-emf.emf" );
Convert.ToPdf(pdfdoc, input_path + test docx file.docx );

// Save the PDF document
UString outputFile = output_path + "ConverterTest.pdf";
pdfdoc.Save(outputFile, 0);
pdfdoc.Close();
}
</code>

The PDFTron PDFNet printer needs to be installed to convert document formats.
On Windows installation of printer drivers requires administrator UAC.
The printer is a virtual XPS printer supported on Vista and Windows 7, and 
on Windows XP with the XPS Essentials Pack.

To install the printer the process must be running as administrator.  Execute:

<code>
ConvertPrinter.install();	
</code>

Installation can take a few seconds, so it is recommended that you install the printer 
once as part of your deployment process.  Duplicated installations will be quick since
the presence of the printer is checked before installation is attempted.

There is no need to uninstall the printer after conversions, it can be left installed 
for later access. To uninstall the printer the process must be running as administrator.
Execute:
<code>
ConvertPrinter.uninstall();	
</code></example></summary>
        </member>
        <member name="M:pdftron.PDF.PDFDCEX.End">
            <summary>Closes the GDI Device Context, translating the GDI instruction to PDF, and adds the PDF objects to the page in the location specified by PDFDCEX::Begin( page, box, ...).
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFDCEX.EndPage">
            <summary />
            <returns />
        </member>
        <member name="M:pdftron.PDF.PDFDCEX.StartPage">
            <summary />
            <returns>a GDI Handle to Display Context.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDCEX.Begin(pdftron.PDF.PDFDoc,pdftron.PDF.Point)">
            <summary>Begin the process of translating GDI drawing into a PDF, starting with the creation of a GDI Device Context.
</summary>
            <param name="in_pdfdoc">the document which the converted GDI pages will be appended to.</param>
            <param name="page_dimension">Width and Height, expressed in inches, defining
the boundaries of the physical medium on which the page is intended to be
displayed or printed. If page_dimension is
not specified the default dimensions of the page are 8.5 x 11 inches.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFDCEX.Begin(pdftron.PDF.PDFDoc)">
            <summary>Begin the process of translating GDI drawing into a PDF, starting with the creation of a GDI Device Context.
<p>The following is a listing of some standard U.S. page sizes: in inches</p><ul><li>Letter		= Rect(8.5, 11)</li><li>Legal		= Rect(8.5, 14)</li><li>Ledger		= Rect(17, 11)</li><li>Tabloid	= Rect(11, 17)</li><li>Executive	= Rect(7.25, 10.5)</li></ul><p>The following is a listing of ISO standard page sizes: in 1/72 inch scale</p><ul><li> 4A0 = Rect(4768, 6741)</li><li> 2A0 = Rect(3370, 4768)</li><li> A0 =  Rect(2384, 3370)</li><li> A1 =  Rect(1684, 2384)</li><li> A2 =  Rect(1191, 1684)</li><li> A3 =  Rect(842,  1191)</li><li> A4 =  Rect(595,  842)</li><li> A5 =  Rect(420,  595)</li><li> A6 =  Rect(298,  420)</li><li> A7 =  Rect(210,  298)</li><li> A8 =  Rect(147,  210)</li><li> A9 =  Rect(105,  147)</li><li> A10 = Rect(74,   105)</li><li> B0 =  Rect(2835, 4008)</li><li> B1 =  Rect(2004, 2835)</li><li> B2 =  Rect(1417, 2004)</li><li> B3 =  Rect(1001, 1417)</li><li> B4 =  Rect(709,  1001)</li><li> B5 =  Rect(499,  709)</li><li> B6 =  Rect(354,  499)</li><li> B7 =  Rect(249,  354)</li><li> B8 =  Rect(176,  249)</li><li> B9 =  Rect(125,  176)</li><li> B10 = Rect(88,   125)</li><li> C0 =  Rect(2599, 3677)</li><li> C1 =  Rect(1837, 2599)</li><li> C2 =  Rect(1298, 1837)</li><li> C3 =  Rect(918,  1298)</li><li> C4 =  Rect(649,  918)</li><li> C5 =  Rect(459,  649)</li><li> C6 =  Rect(323,  459)</li><li> C7 =  Rect(230,  323)</li><li> C8 =  Rect(162,  230)</li><li> C9 =  Rect(113,  162)</li><li>C10 =  Rect(79,   113)</li></ul></summary>
            <param name="in_pdfdoc">the document which the converted GDI pages will be appended to.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFDCEX.Dispose">
            <summary> Releases all resources used by the PDFDCEX </summary>
        </member>
        <member name="M:pdftron.PDF.PDFDCEX.#ctor">
            <summary>Default constructor.Creates an empty new GDI to PDF translator.
</summary>
        </member>
        <member name="T:pdftron.PDF.PDFDCEX">
            <summary> PDFDCEX is a utility class used to represent a PDF Device Context (DC).
Windows developers can use standard GDI or GDI+ API-s to write on PDFDCEX and to generate PDF documents based on their existing drawing functions. PDFDCEX can also be used to implement file conversion from any printable file format to PDF.
PDFDCEX class can be used in many ways to translate from GDI to PDF:
<list type="bullet"><item><description>To translate a single GDI drawing into a single page PDF document.</description></item><item><description>To translate a single GDI drawing into an object which can be reused many times throughout a PDF document (i.e. as a Form XObject).</description></item><item><description>To translate many GDI drawings into single page or multipage PDF document. ...</description></item></list>
Very few code changes are required to perform the translation from GDI to PDF as PDFDCEX provides a GDI Device Context handle which can be passed to all GDI function requiring an HDC. PDFDCEX does use a "Virtual Printer" approach so the translation should be of both high quality and speed.
For more advanced translations or creations of PDF documents, such as security handling, the use of other PDFNet classes will be required.
<example>
An example use of PDFDCEX can be found in PDFDCTest.cpp:
<code>
// Start with a PDFDoc to put the picture into, and a PDFDCEX to translate GDI to PDF
PDFDoc pdfdoc;
PDFDCEX pdfdcex;
// Begin the translation from GDI to PDF, provide the PDFDoc to append the translated
// GDI drawing to and get back a GDI Device Context
HDC hDC = pdfdcex.Begin(pdfdoc);
 ::StartPage(hDC);
// ... perform GDI drawing ...
//::EndPage(hDC);
 // Complete the translation
 pdfdcex.EndDoc();
 // Save the PDF document
pdfdoc.Save("PDFDCEX_is_cool.pdf", SDF.SDFDoc.SaveOptions.e_remove_unused, NULL);
</code></example></summary>
        </member>
        <member name="M:pdftron.PDF.PDFDC.SetDPI(System.Int32)">
            <summary>Sets the conversion scale for translating between GDI drawing and PDF objects.
DPI stands for Dots Per Inch. This parameter is used to specify the output image size and quality. 
A typical screen resolution for monitors these days is 92 DPI, but printers could use 200 DPI or more. 
In the case of GDI to PDF translation, this method fixes the scale or allows it to adjust to each GDI drawing between a Begin/End pair. 
Set the conversion DPI
</summary>
            <param name="in_dpi">	The resolution used to handle device dependent features in GDI (such as bitmap patterns, raster ops, etc). 
Please note that this parameter does not affect the size the PDF nor does it affect the resolution of embedded images.
</param>
            <remarks>The size of resulting image is a function of DPI and the dimensions of the source PDF page. 
For example, if DPI is 92 and page is 8 inches tall, then a GDI graphic object of 92 Device Units will be one inch tall on the PDF page.
If you would like to auto-scale the GDI drawing to fill the PDFDC bounding box, then use SetDPI(0).
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDC.End">
            <summary>Closes the GDI Device Context, translating the GDI instruction to PDF, and adds the 
PDF objects to the page in the location specified by PDFDC::Begin( page, box, ...).
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFDC.BeginHDC(pdftron.PDF.Page,pdftron.PDF.Rect)">
            <summary>Begin the process of translating GDI drawing into a PDF, starting with the creation of a GDI Device Context.
</summary>
            <param name="in_page">the page which will hold the converted GDI drawing.
</param>
            <param name="in_bbox">the location where the PDF objects will be placed on in_page
</param>
            <returns>a GDI Handle to Display Context.
</returns>
            <remarks>If you wish to create a reusable FormX Object from the transformed page, create the page with the aspect ratio of the GDI drawing.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDC.BeginHDC(pdftron.PDF.Page,pdftron.PDF.Rect,System.Boolean)">
            <summary>Begin the process of translating GDI drawing into a PDF, starting with the creation of a GDI Device Context.
</summary>
            <param name="in_page">the page which will hold the converted GDI drawing.
</param>
            <param name="in_bbox">the location where the PDF objects will be placed on in_page
</param>
            <param name="in_preserveAspectRatio">if true the aspect ratio of the GDI primitives will be preserved and the PDF objects will be centered within in_box.
</param>
            <returns>a GDI Handle to Display Context.
</returns>
            <remarks>If you wish to create a reusable FormX Object from the transformed page, create the page with the aspect ratio of the GDI drawing.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDC.Begin(pdftron.PDF.Page,pdftron.PDF.Rect)">
            <summary>Begin the process of translating GDI drawing into a PDF, starting with the creation of a GDI Device Context.
</summary>
            <param name="in_page">the page which will hold the converted GDI drawing.
</param>
            <param name="in_bbox">the location where the PDF objects will be placed on in_page
</param>
            <returns>a GDI Handle to Display Context.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDC.Begin(pdftron.PDF.Page,pdftron.PDF.Rect,System.Boolean)">
            <summary>Begin the process of translating GDI drawing into a PDF, starting with the creation of a GDI Device Context.
</summary>
            <param name="in_page">the page which will hold the converted GDI drawing.
</param>
            <param name="in_bbox">the location where the PDF objects will be placed on in_page
</param>
            <param name="in_preserveAspectRatio">if true the aspect ratio of the GDI primitives will be preserved and the PDF objects will be centered within in_box.
</param>
            <returns>a GDI Handle to Display Context.
</returns>
            <remarks>If you wish to create a reusable FormX Object from the transformed page, create the page with the aspect ratio of the GDI drawing.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDC.Dispose">
            <summary> Releases all resources used by the PDFDC </summary>
        </member>
        <member name="M:pdftron.PDF.PDFDC.#ctor">
            <summary>Default constructor. Creates an empty new GDI to PDF translator.
</summary>
        </member>
        <member name="T:pdftron.PDF.PDFDC">
            <summary>
                <para>
PDFDC is a utility class used to represent a PDF Device Context (DC).
Windows developers can use standard GDI or GDI+ API-s to write on PDFDC and to generate PDF documents based on their existing drawing functions. PDFDC can also be used to implement file conversion from any printable file format to PDF.
</para>
PDFDC class can be used in many ways to translate from GDI to PDF:
<list type="bullet"><item><description>To translate a single GDI drawing into a single page PDF document.</description></item><item><description>To translate a single GDI drawing into an object which can be reused many times throughout a PDF document (i.e. as a Form XObject).</description></item><item><description>To translate many GDI drawings into single page or multipage PDF document. ...</description></item></list>
Very few code changes are required to perform the translation from GDI to PDF as PDFDC provides a GDI Device Context handle which can be passed to all GDI function requiring an HDC. PDFDC does not use a "Virtual Printer" approach so the translation should be of both high quality and speed. Unfortunately this also means that StartDoc, EndDoc, StartPage and EndPage cannot be called with an HDC created with PDFDC::Begin.
For more advanced translations or creations of PDF documents, such as security handling, the use of other PDFNet classes will be required.
<example>
An example use of PDFDC can be found in PDFDCTest.cpp:
<code>
 // Start with a PDFDoc to put the picture into, and a PDFDC to translate GDI to PDF
 PDFDoc pdfdoc;
 PDFDC pdfDc;
 // Create a page to put the GDI content onto
 Page page = pdfdoc.PageCreate();
 // Begin the translation from GDI to PDF.
 // Provide the page to place the picture onto, and the bounding box for the content.
 // We're going to scale the GDI content to fill the page while preserving the aspect
 // ratio.
 // Get back a GDI Device Context
 HDC hDC = pdfDc.Begin( page, page.GetCropBox() );
// ... perform GDI drawing ...
 // Complete the translation
 pdfDc.End(); 
 // Add the page to the document
 pdfdoc.PagePushBack(page);
 // Save the PDF document
 pdfdoc.Save("PDFDC_is_cool.pdf", SDF.SDFDoc.SaveOptions.e_remove_unused, NULL);
</code></example></summary>
        </member>
        <member name="M:pdftron.PDF.PDFA.PDFACompliance.SaveAs(System.IO.Stream,System.Boolean)">
            <summary> Serializes the converted PDF/A document to a stream.</summary>
            <param name="stm">A stream where to serialize the document.</param>
            <param name="linearized"> An optional flag used to specify whether the the resulting
PDF/A document should be web-optimized (linearized).
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This method assumes that the first parameter passed in PDFACompliance
constructor (i.e. the convert parameter) is set to 'true'.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFA.PDFACompliance.SaveAs(System.Boolean)">
            <summary> Serializes the converted PDF/A document to a memory buffer.</summary>
            <returns>Byte array containing the serialized version of the document</returns>
            <param name="linearized"> An optional flag used to specify whether the the resulting
PDF/A document should be web-optimized (linearized).
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This method assumes that the first parameter passed in PDFACompliance
constructor (i.e. the convert parameter) is set to 'true'.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFA.PDFACompliance.SaveAs(System.String,System.Boolean)">
            <summary> Serializes the converted PDF/A document to a file on disk.

</summary>
            <param name="file_path">the file_path
</param>
            <param name="linearized">- An optional flag used to specify whether the the resulting
PDF/A document should be web-optimized (linearized).
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This method assumes that the first parameter passed in PDFACompliance
constructor (i.e. the convert parameter) is set to 'true'.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFA.PDFACompliance.GetDeclaredConformance(pdftron.PDF.PDFDoc)">
            <summary> Retrieves whether document's XMP metadata claims PDF/A conformance and to what part and level.

</summary>
            <param name="in_doc"> the document.
</param>
            <returns> Presumptive PDFA part number and conformance level, as an enumerated value.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFA.PDFACompliance.GetPDFAErrorMessage(pdftron.PDF.PDFA.PDFACompliance.ErrorCode)">
            <summary> Gets the pDFA error message.

</summary>
            <param name="id">error code identifier (obtained using GetError() method).
</param>
            <returns> A descriptive error message for the given error identifier.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFA.PDFACompliance.GetRefObj(pdftron.PDF.PDFA.PDFACompliance.ErrorCode,System.Int32)">
            <summary> Gets the ref obj.

</summary>
            <param name="id">error code identifier (obtained using GetError() method).
</param>
            <param name="obj_idx">the obj_idx
</param>
            <returns> A specific object reference associated with a given error type.
The return value is a PDF object identifier (i.e. object number for
'pdftron.SDF.Obj)) for the that is associated with the error.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFA.PDFACompliance.GetRefObjCount(pdftron.PDF.PDFA.PDFACompliance.ErrorCode)">
            <summary> Gets the error.

</summary>
            <param name="id">The index in the array of error code identifiers.
The array is indexed starting from zero.
</param>
            <returns> The error identifier.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFA.PDFACompliance.GetError(System.Int32)">
            <summary> Gets the error.

</summary>
            <param name="idx">The index in the array of error code identifiers.
The array is indexed starting from zero.
</param>
            <returns> The error identifier.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFA.PDFACompliance.GetErrorCount">
            <summary> Gets the error count.

</summary>
            <returns> The number of compliance violations.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFA.PDFACompliance.Dispose">
            <summary> Releases all resources used by the PDFACompliance </summary>
        </member>
        <member name="M:pdftron.PDF.PDFA.PDFACompliance.#ctor(System.Boolean,System.Byte[],System.String,pdftron.PDF.PDFA.PDFACompliance.Conformance,pdftron.PDF.PDFA.PDFACompliance.ErrorCode[],System.Int32,System.Boolean)">
            <summary> Perform PDF/A validation or PDF/A conversion on the input PDF document
which is stored in a memory buffer.

</summary>
            <param name="convert">A flag used to instruct PDF/A processor to perform PDF/A
conversion (if 'true') or PDF/A validation (if 'false'). After PDF/A conversion
you can save the resulting document using Save() method(s).
</param>
            <param name="buf">A memory buffer containing the serialized PDF document.
</param>
            <param name="password">An optional parameter that can be used to specify the
password for encrypted PDF documents (typically only useful in the conversion mode).
</param>
            <param name="conf">The PDF conformance level. The default value is e_Level1B.
</param>
            <param name="exceptions">the exceptions
</param>
            <param name="max_ref_objs">The maximum number of object references per error condition.
</param>
            <param name="first_stop">the first_stop
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFA.PDFACompliance.#ctor(System.Boolean,System.String,System.String,pdftron.PDF.PDFA.PDFACompliance.Conformance,pdftron.PDF.PDFA.PDFACompliance.ErrorCode[],System.Int32,System.Boolean)">
            <summary> Perform PDF/A validation or PDF/A conversion on the input PDF document.

</summary>
            <param name="convert">A flag used to instruct PDF/A processor to perform PDF/A
conversion (if 'true') or PDF/A validation (if 'false'). After PDF/A conversion
you can save the resulting document using Save() method(s).
</param>
            <param name="filepath">the file_path
</param>
            <param name="password">An optional parameter that can be used to specify the
password for encrypted PDF documents (typically only useful in the conversion mode).
</param>
            <param name="conf">The PDF conformance level. The default value is e_Level1B.
</param>
            <param name="exceptions">the exceptions
</param>
            <param name="max_ref_objs">The maximum number of object references per error condition.
</param>
            <param name="first_stop">the first_stop
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA_LAST">
            <summary />
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA_3E3">
            <summary>Doc catalog is missing AF entry</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA_3E2">
            <summary>Embedded file has no AFRelationship</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA_3E1_1">
            <summary>Embedded file Params has no ModDate entry</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA_3E1">
            <summary>Embedded file has no MIME type entry</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA8_1">
            <summary>FileSpec is missing F or UF key</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA6_9_3">
            <summary>Optional content Contains AS entry</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA6_9_1">
            <summary>Optional content Missing Name entry</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA6_2_11_8">
            <summary>Use of .notdef glyph</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA6_2_11_7">
            <summary>PUA characters are missing ActualText.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA6_2_11_6">
            <summary>Some text can't be mapped to Unicode.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA6_2_11_5">
            <summary>Some characters map to 0 or FFFE.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA6_10_1">
            <summary>AlternatePresentations not allowed.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA6_10_0">
            <summary>PresSteps is not allowed.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA11_0_0">
            <summary>Catalog contains Requirements key.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_10_21">
            <summary>Invalid blend mode.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_10_20">
            <summary>Page Group entry is missing in a document without OutputIntent.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_8_3_5">
            <summary>JPEG2000: All colour channels in the JPEG2000 data must have the same bit-depth.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_8_3_4">
            <summary>JPEG2000: The bit-depth JPEG2000 data must be in range 1-38. </summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_8_3_3">
            <summary>JPEG2000: Invalid color space.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_8_3_2">
            <summary>JPEG2000: Invalid number of colour channels.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_8_3_1">
            <summary>JPEG2000: Only the JPX baseline is supported.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_5_12">
            <summary>Uses HalftoneName key.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_5_11">
            <summary>Unsupported HalftoneType.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_5_10">
            <summary>HTP entry in ExtGState.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_4_2_13">
            <summary>alternateSpace is different in Separations with the same colorant name.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_4_2_12">
            <summary>tintTransform is different in Separations with the same colorant name.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_4_2_11">
            <summary>Incorrect colorant specification in DeviceN </summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_4_2_10">
            <summary>OPM is 1</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_3_10">
            <summary>Contains DestOutputProfileRef</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_13_5">
            <summary>Page dimensions are outside of the allowed range (3-14400).</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_12_10">
            <summary>Bad Permission Dictionary</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_10_3">
            <summary>Bad stream Filter.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_10_2">
            <summary>Invalid use of Crypt filter.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_2_3">
            <summary>Bad file header.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA8_3_4_1">
            <summary>A non-standard structure type does not map to a standard type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA8_3_3_2">
            <summary>Each structure element dictionary in the structure hierarchy must have a Type entry with the name value of StructElem.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA8_3_3_1">
            <summary>Bad StructTreeRoot </summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA8_2_2">
            <summary>The PDF is not marked as Tagged PDF.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_8_1">
            <summary>The font dictionary is missing 'ToUnicode' entry.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA9_4">
            <summary>Catalog contains NeedsRendering.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA9_3">
            <summary>AcroForms contains XFA.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA9_2">
            <summary>The NeedAppearances flag in the interactive form dictionary is set to true.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA9_1">
            <summary>An interactive form field contains an action.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_11_5">
            <summary>Invalid PDF/A amendment identifier.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_11_4">
            <summary>Invalid PDF/A part number.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_11_3">
            <summary>Invalid PDF/A conformance level.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_11_2">
            <summary>Invalid PDF/A identifier namespace</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_11_1">
            <summary>Missing PDF/A identifier</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_31">
            <summary>A property doesn't match its custom schema type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_30">
            <summary>Required description for 'pdfaField::valueType' is missing.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_29">
            <summary>'pdfaField:description' is using a wrong type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_28">
            <summary>'pdfaField:description' not found.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_27">
            <summary>'pdfaField:valueType' is using a wrong type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_26">
            <summary>'pdfaField:valueType' not found.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_25">
            <summary>'pdfaField:name' is using a wrong value type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_24">
            <summary>'pdfaField:name' not found.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_23">
            <summary>'pdfaType:field' is using a wrong value type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_22">
            <summary>'pdfaType:namespaceURI' not found.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_21">
            <summary>'pdfaType:description' not found.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_20">
            <summary>'pdfaType:type' is using a wrong value type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_19">
            <summary>'pdfaType:type' not found.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_18">
            <summary>Required property 'valueType' missing in PDF/A Schema Value Type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_17">
            <summary>'pdfaSchema:valueType' is using a wrong value type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_16">
            <summary>'pdfaSchema:valueType' not found.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_15">
            <summary>The required field namespace prefix is 'pdfaField'.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_14">
            <summary>The required field namespace prefix is 'pdfaType'.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_13">
            <summary>The required field namespace prefix is 'pdfaProperty'.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_12">
            <summary>The required field namespace prefix is 'pdfaSchema'.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_11">
            <summary>The required namespace prefix for extension schema is 'pdfaExtension'.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_10">
            <summary>'pdfaProperty:valueType' not found.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_9">
            <summary>A description for a property is missing in 'pdfaSchema:property' sequence.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_8">
            <summary>'pdfaProperty:name' is using a wrong value type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_7">
            <summary>'pdfaProperty:name' not found. </summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_6">
            <summary>'pdfaExtension:property' is using a wrong value type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_5">
            <summary> 'pdfaExtension:property' not found. </summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_4">
            <summary>'pdfaExtension:schemas' is using a wrong value type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_3">
            <summary>'pdfaExtension:schemas' not found. </summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_2">
            <summary> XMP Extension schema is not valid. Required property 'namespaceURI' might be missing in PDF/A Schema value Type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_8_1">
            <summary>XMP Extension schema doesn't have a description.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_5_1">
            <summary>'bytes' and 'encoding' attributes are allowed in the header of an XMP packet.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_3_9">
            <summary> Wrong value type for predefined XMP property.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_3_8">
            <summary>Document information entry 'ModDate' not synchronized with XMP.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_3_7">
            <summary>Document information entry 'CreationDate' not synchronized with XMP.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_3_6">
            <summary> Document information entry 'Producer' not synchronized with XMP.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_3_5">
            <summary> Document information entry 'Creator' not synchronized with XMP.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_3_4">
            <summary> Document information entry 'Keywords' not synchronized with XMP.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_3_3">
            <summary> Document information entry 'Subject' not synchronized with XMP.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_3_2">
            <summary>Document information entry 'Author' not synchronized with XMP.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_3_1">
            <summary>Document information entry 'Title' not synchronized with XMP.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_2_5">
            <summary> XMP not included in 'xpacket'.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_2_4">
            <summary>XMP property not predefined and no extension schema present.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_2_3">
            <summary>The XMP Metadata stream is not valid.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_2_2">
            <summary>The Metadata object stream contains Filter key.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA7_2_1">
            <summary>The document catalog does not contain Metadata stream.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA6_2_3">
            <summary>Invalid destination.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA6_2_2">
            <summary> Contains the JavaScript key.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA6_2_1">
            <summary>The document catalog dictionary contains AA entry.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA6_1_2">
            <summary> Contains a non-predefined Named action.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA6_1_1">
            <summary> Contains an action type that is not permitted.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_3_4_3">
            <summary>AP has an N entry whose value is not a stream</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_3_4_2">
            <summary>An annotation AP dictionary does not contain N entry</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_3_4_1">
            <summary>An annotation AP dictionary has entries other than the N entry.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_3_3_4">
            <summary>An annotation's IC entry present and OutputIntent has non-RGB destination profile</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_3_3_3">
            <summary>An annotation's IC entry present but no OutputIntent present</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_3_3_2">
            <summary> An annotation's C entry present but OutputIntent has non-RGB destination profile</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_3_3_1">
            <summary>An annotation's C entry present but no OutputIntent present</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_3_2_5">
            <summary>An annotation's 'NoView' flag is set.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_3_2_4">
            <summary>An annotation's 'Invisible' flag is set.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_3_2_3">
            <summary>An annotation's 'Hidden' flag is set.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_3_2_2">
            <summary>An annotation's 'Print' flag is not set.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_3_2_1">
            <summary>An annotation dictionary is missing F key.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_3_1">
            <summary>An annotation dictionary contains the CA key with a value other than 1.0.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_2_11">
            <summary>Screen annotation is not permitted.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_2_10">
            <summary>PolyLine annotation is not permitted.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_2_9">
            <summary>Polygon annotation is not permitted.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_2_8">
            <summary>Watermark annotation is not permitted.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_2_7">
            <summary> Caret annotation is not permitted.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_2_6">
            <summary> 3D annotation is not permitted.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_2_5">
            <summary> Redact annotation is not permitted.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_2_4">
            <summary>Movie annotation is not permitted.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_2_3">
            <summary> Sound annotation is not permitted.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_2_2">
            <summary> FileAttachment annotation is not permitted.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA5_2_1">
            <summary>Unknown annotation type.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA4_6">
            <summary>Transparency used ('ca' value is not 1.0).</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA4_5">
            <summary> Transparency used ('CA' value is not 1.0).</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA4_4">
            <summary> Transparency used (Blend mode is not 'Normal').</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA4_3">
            <summary> Transparency used (Form XObject with transparency group).</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA4_2">
            <summary>Transparency used (XObject with soft mask).</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA4_1">
            <summary>Transparency used (ExtGState with soft mask).</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_7_3">
            <summary>A symbolic TrueType font does not have exactly one entry in cmap table.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_7_2">
            <summary>A symbolic TrueType font must not specify encoding.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_7_1">
            <summary> A non-symbolic TrueType font must use WinAnsiEncoding or MacRomanEncoding.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_6_1">
            <summary>Widths in embedded font are inconsistent with /Widths entry in the font dictionary.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_5_5">
            <summary>The font descriptor dictionary does not include a	CharSet string for Type1 font subset.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_5_4">
            <summary>The font descriptor dictionary does not include a	CIDSet stream for CIDFont subset.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_5_3">
            <summary>Embedded TrueType font program does not define all font glyphs.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_5_2">
            <summary>Embedded Type1 font program does not define all font glyphs.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_5_1">
            <summary>Embedded composite (Type0) font program does not define all font glyphs.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_4_1">
            <summary>The font is not embedded.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_3_3_2">
            <summary>Inconsistent WMode in embedded CMap dictionary and stream.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_3_3_1">
            <summary>CMap not embedded</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_3_2">
            <summary>Type 2 CIDFont without CIDToGIDMap</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_3_1">
            <summary>Incompatible CIDSystemInfo entries</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA3_2_1">
            <summary>Embedded font is damaged.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_10_1">
            <summary>Illegal operator.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_9_1">
            <summary>Use of an invalid rendering intent.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_8_1">
            <summary>Contains an invalid Transfer Curve in the extended graphics state.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_7_1">
            <summary>Contains an XObject that is not supported (e.g. PostScript XObject).</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_6_1">
            <summary>Contains a reference XObject.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_5_2">
            <summary>PostScript XObject.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_5_1">
            <summary>XObject with OPI key.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_4_4">
            <summary>Image with Interpolate key set to true.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_4_3">
            <summary>Image with invalid rendering intent.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_4_2">
            <summary>Image with OPI key.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_4_1">
            <summary>Image with Alternates key.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_3_4_1">
            <summary>Device-specific color space used in an alternate color space.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_3_3_2">
            <summary>Device-specific color space, does not match OutputIntent.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_3_3_1">
            <summary> Device-specific color space used, but no GTS_PDFA1 OutputIntent.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_3_3">
            <summary> The N entry does not match the number of color components in the embedded ICC profile.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_3_2">
            <summary>Not a valid ICC color profile.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA2_2_1">
            <summary>DestOutputProfile-s in OutputIntents array do not match.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_13_1">
            <summary>Optional content (layers) not allowed.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_12_6">
            <summary>The number of nested q/Q operators is greater than 28.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_12_5">
            <summary>Exceeds the maximum number (8,388,607) of indirect objects in a PDF file.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_12_4">
            <summary>Contains an integer value outside of the allowed range [-2^31, 2^31-1],</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_12_3">
            <summary>Name with more than 127 bytes</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_12_2">
            <summary>Dictionary contains more than 4095 elements</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_12_1">
            <summary>Array contains more than 8191 elements</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_11_2">
            <summary>Contains the EmbeddedFiles key</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_11_1">
            <summary>A file specification dictionary contains the EF key.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_10_1">
            <summary>Using LZW compression.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_8_7">
            <summary>Invalid UTF8 string	</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_8_6">
            <summary>'endobj' not followed by EOL marker</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_8_5">
            <summary>'obj' not followed by EOL marker</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_8_4">
            <summary>'endobj' not preceded by EOL marker</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_8_3">
            <summary>Object number not preceded by EOL marker</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_8_2">
            <summary>Generation number and 'obj' are not separated by a single white-space.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_8_1">
            <summary>Object number and generation number are not separated by a single white-space.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_7_4">
            <summary>A stream object dictionary contains the F, FFilter, or FDecodeParms keys.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_7_3">
            <summary>The value of Length does not match the number of bytes.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_7_2">
            <summary>The 'endstream' token is not preceded by EOL.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_7_1">
            <summary>The 'stream' token is not followed by CR and LF or a single LF.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_6_1">
            <summary>Invalid hexadecimal strings used.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_4_2">
            <summary>'xref' and cross reference subsection header not separated by a single EOL marker.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_4_1">
            <summary>Subsection header: starting object number and range not separated by a single space.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_3_4">
            <summary>Linearized file: ID in 1st page and last trailer are different.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_3_3">
            <summary>Data after last EOF marker.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_3_2">
            <summary>Trailer dictionary contains Encrypt.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_3_1">
            <summary>The trailer dictionary does not contain ID.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_2_2">
            <summary>File header line not followed by % and 4 characters &gt; 127.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA1_2_1">
            <summary>Document does not start with % character.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA0_1_5">
            <summary>Contains cross-reference streams (PDF 1.4 compatibility).</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA0_1_4">
            <summary>Contains compressed object streams (PDF 1.4 compatibility).</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA0_1_3">
            <summary>Using JPEG2000 compression (PDF 1.4 compatibility).</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA0_1_2">
            <summary>Corrupt content stream.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFA.PDFACompliance.ErrorCode.e_PDFA0_1_1">
            <summary>Corrupt document.</summary>
        </member>
        <member name="T:pdftron.PDF.PDFA.PDFACompliance.ErrorCode">
            <summary>PDF/A Level A and B Validation Errors</summary>
        </member>
        <member name="T:pdftron.PDF.PDFA.PDFACompliance.Conformance">
            <summary> PDF/A Conformance Level (19005:1/2/3).

Level A conforming files must adhere to all of the requirements of ISO 19005. A file meeting this conformance level is said to be a 'conforming PDF/A -1a file.'
Level B conforming files shall adhere to all of the requirements of ISO 19005 except those of 6.3.8 and 6.8. A file meeting this conformance level is said to be 
a 'conforming PDF/A-1b file'. The Level B conformance requirements are intended to be those minimally necessary to ensure that the rendered visual appearance of 
a conforming file is preservable over the long term. </summary>
        </member>
        <member name="T:pdftron.PDF.PDFA.PDFACompliance">
            <summary> PDFACompliance class is used to validate PDF documents for PDF/A (ISO 19005:1/2/3)
compliance or to convert existing PDF files to PDF/A compliant documents.
<para>
The conversion option analyses the content of existing PDF files and performs 
a sequence of modifications in order to produce a PDF/A compliant document. 
Features that are not suitable for long-term archiving (such as encryption, 
obsolete compression schemes, missing fonts, or device-dependent color) are 
replaced with their PDF/A compliant equivalents. Because the conversion process 
applies only necessary changes to the source file, the information loss is 
minimal. Also, because the converter provides a detailed report for each change,
it is simple to inspect changes and to determine whether the conversion loss 
is acceptable. </para><para>
The validation option in PDF/A Manager can be used to quickly determine whether 
a PDF file fully complies with the PDF/A specification according to the 
international standard ISO 19005:1/2/3. For files that are not compliant, the 
validation option can be used to produce a detailed report of compliance 
violations as well as a list of relevant error objects.</para>

Key Functions:
<list type="bullet"><item><description>Checks if a PDF file is compliant with PDF/A (ISO 19005-1) specification.</description></item><item><description>Converts any PDF to a PDF/A compliant document.</description></item><item><description>Supports PDF/A-1a, PDF/A-1b, PDF/A-2b.</description></item><item><description>Produces a detailed report of compliance violations and associated PDF objects.</description></item><item><description>Keeps the required changes a minimum, preserving the consistency of the original.</description></item><item><description>Tracks all changes to allow for automatic assessment of data loss.</description></item><item><description>Allows user to customize compliance checks or omit specific changes.</description></item><item><description>Preserves tags, logical structure, and color information in existing PDF documents.</description></item><item><description>Offers automatic font substitution, embedding, and subsetting options.</description></item><item><description>Supports automation and batch operation. PDF/A Converter is designed to be used 
in unattended mode in high throughput server or batch environments</description></item></list></summary>
        </member>
        <member name="M:pdftron.PDF.OCG.OCMD.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> Pointer to the underlying SDF/Cos object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.OCMD.IsCurrentlyVisible(pdftron.PDF.OCG.Context)">
            <summary> Checks if is currently visible.

</summary>
            <param name="context">The context in which the visibility of content is tested.
</param>
            <returns> true if content tagged with this OCMD is visible in the given
context, false if it is hidden.

Based on the optional-content groups listed in the dictionary, the current
ON-OFF state of those groups within the specified context, and the
dictionary's visibility policy, test whether the content tagged with
this dictionary would be visible.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.OCMD.GetVisibilityExpression">
            <summary> Gets the visibility expression.

</summary>
            <returns> If the PDOCMD has a visibility expression entry, return the
SDF::Obj array object representing the expression, otherwise returns NULL.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.OCMD.SetVisibilityPolicy(pdftron.PDF.OCG.OCMD.VisibilityPolicyType)">
            <summary> Sets the optional-content membership dictionary's visibility policy, which
determines the visibility of content with respect to the ON-OFF state of
OCGs listed in the dictionary.

</summary>
            <param name="vis_policy">New visibility policy.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.OCMD.GetVisibilityPolicy">
            <summary> Gets the optional-content membership dictionary's visibility policy, which
determines the visibility of content with respect to the ON-OFF state of
OCGs listed in the dictionary.

</summary>
            <returns> The visibility policy.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.OCMD.GetOCGs">
            <summary> Gets the optional-content groups listed under 'OCGs' entry in the object
dictionary.

</summary>
            <returns> An SDF::Obj array or OCG::Group objects or NULL is the array
is not present.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.OCMD.IsValid">
            <summary> Checks if is valid.

</summary>
            <returns> True if this is a valid (non-null) OCG, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.OCMD.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a new optional-content group (OCG) object from an existing
SDF/Cos object.

</summary>
            <param name="ocmd">the ocmd
</param>
        </member>
        <member name="M:pdftron.PDF.OCG.OCMD.Create(pdftron.PDF.PDFDoc,pdftron.SDF.Obj,pdftron.PDF.OCG.OCMD.VisibilityPolicyType)">
            <summary> Creates a new optional-content membership dictionary (OCMD) object in the
given document for the given groups and visibility policy.

</summary>
            <param name="doc">The document in which the new OCMD will be created.
</param>
            <param name="ocgs">An array of optional-content groups (OCGs) to be members of the dictionary.
</param>
            <param name="vis_policy">the vis_policy
</param>
            <returns> The newly created OCG::OCMD object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.OCG.OCMD.VisibilityPolicyType.e_AllOff">
            <summary>visible only if all of the entries in OCGs are OFF.</summary>
        </member>
        <member name="F:pdftron.PDF.OCG.OCMD.VisibilityPolicyType.e_AnyOff">
            <summary>visible if any of the entries in OCGs are OFF.</summary>
        </member>
        <member name="F:pdftron.PDF.OCG.OCMD.VisibilityPolicyType.e_AnyOn">
            <summary>visible if any of the entries in OCGs are ON.</summary>
        </member>
        <member name="F:pdftron.PDF.OCG.OCMD.VisibilityPolicyType.e_AllOn">
            <summary>visible only if all of the entries in OCGs are ON.</summary>
        </member>
        <member name="T:pdftron.PDF.OCG.OCMD.VisibilityPolicyType">
            <summary> Visibility Policy Type.
A Visibility Policy is used to determine whether an PDF::Element is visible 
in a given OCG::Context, depending on whether all groups in OCGs array are 
"ON" or "OFF", or when any of the groups is "ON" or "OFF". 
</summary>
        </member>
        <member name="T:pdftron.PDF.OCG.OCMD">
            <summary>
                <p> The OCMD object represents an Optional Content Membership Dictionary (OCMD) 
that allows the visibility of optional content to depend on the states in a 
set of optional-content groups (OCG::Group). The object directly corresponds 
to the OCMD dictionary (Section 4.10.1 'Optional Content Groups' in PDF 
Reference).</p>
                <p>
An OCMD collects a set of OCGs. It sets a visibility policy, so that 
content in the member groups is visible only when all groups are ON 
or OFF, or when any of the groups is ON or OFF. This makes it possible 
to set up complex dependencies among groups. For example, an object can be 
visible only if some other conditions are met (such as if another layer is 
visible).
</p>
            </summary>
        </member>
        <member name="M:pdftron.PDF.OCG.Context.Dispose">
            <summary> Releases all resources used by the Context </summary>
        </member>
        <member name="M:pdftron.PDF.OCG.Context.GetOCMode">
            <summary>Gets OC drawing mode
</summary>
            <returns>OC drawing mode
</returns>
        </member>
        <member name="M:pdftron.PDF.OCG.Context.SetOCDrawMode(pdftron.PDF.OCG.Context.OCDrawMode)">
            <summary> Sets the drawing and enumeration type for this context. This type, together
with the visibility determined by the OCG and OCMD states, controls whether
content that is marked as optional content is drawn or enumerated.

</summary>
            <param name="oc_draw_mode">A flag specifying the visibility of optional content.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.OCG.Context.OCDrawMode.e_NoOC">
            <summary>Draw or enumerate no optional content, regardless of its visibility state. If the 
context's 'SetNonOCDrawing' is not enabled, nothing is drawn, resulting in a blank page.</summary>
        </member>
        <member name="F:pdftron.PDF.OCG.Context.OCDrawMode.e_AllOC">
            <summary>Draw or enumerate all optional content, regardless of its visibility state. If the 
context's 'SetNonOCDrawing' is enabled, all contents of document are shown. </summary>
        </member>
        <member name="F:pdftron.PDF.OCG.Context.OCDrawMode.e_VisibleOC">
            <summary>Draw or enumerate optional content that is visible, according to the current state of 
Optional Content Groups (OCGs) and Optional Content Membership Dictionaries (OCMDs). 
This is the default mode.</summary>
        </member>
        <member name="T:pdftron.PDF.OCG.Context.OCDrawMode">
            <summary>OCDrawMode controls drawing or enumerating the page with respect to optional content.
Together with the value of SetNonOCDrawing this mode controls drawing or enumerating 
content on a page with optional content: 
<ul><li>Content that is marked as optional content is drawn or not drawn according to the 
OCDrawMode and the visibility state as determined by the Optional Content Groups (OCGs) 
and OCMDs. 
</li><li>Content that is not marked as optional content is drawn when GetNonOCDrawing() is 
true, and not drawn when GetNonOCDrawing() is false.
</li></ul></summary>
        </member>
        <member name="M:pdftron.PDF.OCG.Context.GetNonOCDrawing">
            <summary> Gets the non oc drawing.

</summary>
            <returns> the non-OC status for this context. The flag indicates whether the
content that is not marked as optional should be treated as visible.
For more information, please see SetNonOCDrawing().
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Context.SetNonOCDrawing(System.Boolean)">
            <summary> Sets the non-OC status for this context. Content that is not marked 
as optional content is drawn (or element.IsOCVisible()) when 'draw_non_OC' 
is true, and not drawn/visible otherwise.
</summary>
            <param name="draw_non_OC">draw_non_OC A flag specifying whether the content that is not 
marked as optional should be treated as visible.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Context.ResetStates(System.Boolean)">
            <summary> Sets the sates of all OCGs in the context to ON or OFF.

</summary>
            <param name="all_on">A flag used to specify whether the OCG states should be set
to ON (if true), or OFF (if false).
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Context.SetState(pdftron.PDF.OCG.Group,System.Boolean)">
            <summary> Sets the ON-OFF states for the given optional-content group (OCG) in this
context.

</summary>
            <param name="group">The optional-content group (OCG) that is queried.
</param>
            <param name="state">true for 'ON' and false for 'OFF'.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Context.GetState(pdftron.PDF.OCG.Group)">
            <summary> Gets the state.

</summary>
            <param name="group">The optional-content group (OCG) that is queried.
</param>
            <returns> the ON-OFF states (true or false) for the given optional-content
group (OCG) in this OC context.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Context.#ctor(pdftron.PDF.OCG.Config)">
            <summary> Create a context object that represents an optional-content state of the
document from a given configuration.

</summary>
            <param name="config">A configuration from which to take initial OCG states.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Context.#ctor(pdftron.PDF.OCG.Context)">
            <summary> Copy constructor.

</summary>
            <param name="context">Another context from which to take initial OCG states.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.OCG.Context">
            <summary>
                <p>
The OCG::Context object represents an optional-content context in a document, within which 
document objects such as words or annotations are visible or hidden. The context keeps track 
of the ON-OFF states of all of the optional-content groups (OCGs) in a document. Content is 
or is not visible with respect to the OCG states stored in a specific context. Unlike other 
objects in OCG namespace, the OCG::Context does not correspond to any explicit PDF structure.
</p>
                <p>
Each PDFView has a default context (PDF::GetOCGContext()) that it uses for on-screen drawing 
and that determines the default state for any drawing. The context has flags that control 
whether to draw content that is marked as optional, and whether to draw content that is not 
marked as optional.
</p>
                <p>
When enumerating page content, OCG::Context can be passed as a parameter in ElementReader.Begin() 
method. When using PDFDraw, PDFRasterizer, or PDFViewCtrl class to render PDF pages use 
SetOCGContext() method to select an OC context.
</p>
                <p>
There can be more than one Context object, representing different combinations of OCG states. 
You can change the states of OCGs within any context. You can build contexts with your own 
combination of OCG states, and issue drawing or enumeration commands using that context.
For example, you can pass an optional-content context to ElementReader.Begin(). You can save 
the resulting state information as part of the configuration (e.g. using Config::SetInit methods), 
but the context itself has no corresponding PDF representation, and is not saved. 
</p>
            </summary>
            <summary>Gets the Optional Content Group (OCG) context associated with this PDFViewCtrl
</summary>
            <returns>the Optional Content Group (OCG) context associated with this PDFViewCtrl, or NULL (i.e. context.IsValid()==false) if there is no OCG context associated with the view. If an OCG context associated with the view, optional content, such as PDF layers will be selectively rendered based on the states of optional content groups in the given context.
</returns>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> Pointer to the underlying SDF/Cos object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.GetUsage(System.String)">
            <summary> Gets the usage.

</summary>
            <param name="key">The usage key in the usage dictionary entry. The possible key values are:
CreatorInfo, Language, Export, Zoom, Print, View, User, PageElement.
</param>
            <returns> The usage information associated with the given key in the Usage dictionary
for the group, or a NULL if the entry is not present. A Usage dictionary entry
provides more specific intended usage information than an intent entry.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.HasUsage">
            <summary> Checks for usage.

</summary>
            <returns> true if this group is associated with a Usage dictionary, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.SetLocked(pdftron.PDF.OCG.Config,System.Boolean)">
            <summary> Sets the locked state of an OCG in a given configuration. The on/off state of a
locked OCG cannot be toggled by the user through the user interface.

</summary>
            <param name="config">IN/OUT The optional-content configuration.
</param>
            <param name="locked">true if the OCG should be locked, false otherwise.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.IsLocked(pdftron.PDF.OCG.Config)">
            <summary> Checks if is locked.

</summary>
            <param name="config">The OC configuration.
</param>
            <returns> true if this OCG is locked in a given configuration, false otherwise.
The on/off state of a locked OCG cannot be toggled by the user through the user interface.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.SetIntent(pdftron.SDF.Obj)">
            <summary> Sets the Intent entry in an optional-content group's SDF/Cos dictionary.
For more information, see GetIntent().

</summary>
            <param name="intent">The new Intent entry value (a name object or an array of name objects).
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.GetIntent">
            <summary> Gets the intent.

</summary>
            <returns> OCG intent.
An intent is a name object (or an array of name objects) broadly describing the
intended use, which can be either "View" or "Design". A group's content is
considered to be optional (that is, the group's state is considered in its
visibility) if any intent in its list matches an intent of the context. The
intent list of the context is usually set from the intent list of the document
configuration.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.SetInitialState(pdftron.PDF.OCG.Config,System.Boolean)">
            <summary> Sets the initial state (ON or OFF) of the optional-content group (OCG)
object in a given configuration.

</summary>
            <param name="config">The configuration for which to set the group's initial state.
</param>
            <param name="state">The new initial state, true if the state is ON, false if it is OFF.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.GetInitialState(pdftron.PDF.OCG.Config)">
            <summary> Gets the initial state.

</summary>
            <param name="config">The configuration for which to get the group's initial state.
</param>
            <returns> The initial state (ON or OFF) of the optional-content group
(OCG) object in a given configuration.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If the configuration has a BaseState of Unchanged, and the OCG is 
not listed explicitly in its ON list or OFF list, then the initial state
is taken from the OCG's current state in the document's default context.</remarks>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.SetCurrentState(pdftron.PDF.OCG.Context,System.Boolean)">
            <summary> Sets the current ON-OFF state of the optional-content group (OCG) object in a given context.

</summary>
            <param name="context">The context for which to set the group's state.
</param>
            <param name="state">The new state.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.GetCurrentState(pdftron.PDF.OCG.Context)">
            <summary> Gets the current state.

</summary>
            <param name="context">The context for which to get the group's state.
</param>
            <returns> true if this OCG object is in the ON state in a given context,
false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.SetName(System.String)">
            <summary> Sets the name of this optional-content group (OCG).

</summary>
            <param name="name">The new name.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.GetName">
            <summary> Gets the name.

</summary>
            <returns> the name of this optional-content group (OCG).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.IsValid">
            <summary> Checks if is valid.

</summary>
            <returns> True if this is a valid (non-null) OCG, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a new optional-content group (OCG) object from an existing
SDF/Cos object.

</summary>
            <param name="ocg">the ocg
</param>
        </member>
        <member name="M:pdftron.PDF.OCG.Group.Create(pdftron.PDF.PDFDoc,System.String)">
            <summary> Creates a new optional-content group (OCG) object in the document.

</summary>
            <param name="doc">The document in which the new OCG will be created.
</param>
            <param name="name">The name of the optional-content group.
</param>
            <returns> The newly created OCG::Group object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.OCG.Group">
            <summary> The OCG::Group object represents an optional-content group. This corresponds
to a PDF OCG dictionary representing a collection of graphic objects that can 
be made visible or invisible (Section 4.10.1 'Optional Content Groups' in PDF 
Reference). Any graphic content of the PDF can be made optional, including page 
contents, XObjects, and annotations. The specific content objects in the group 
have an OC entry in the PDF as part of the surrounding marked content or in the 
XObject dictionary. The group itself is a named object that can be typically 
manipulated through a Layers panel in a PDF viewer.
<p>
In the simplest case, the group's ON-OFF state makes the associated content 
visible or hidden. The ON-OFF state of a group can be toggled for a particular 
context (OCG::Context), and a set of states is kept in a configuration (OCG::Config). 
The visibility can depend on more than one group in an optional-content membership 
dictionary (OCG::OCMD), and can also be affected by the context's draw mode
(OCGContext::OCDrawMode).
</p><p>
A group has an Intent entry, broadly describing the intended use. A group's 
content is considered to be optional (that is, the group's state is considered in 
its visibility) if any intent in its list matches an intent of the context. The 
intent list of the context is usually set from the intent list of the document 
configuration.
</p><p>
A Usage dictionary entry provides more specific intended usage information than 
an intent entry. Possible key values are: CreatorInfo, Language, Export, Zoom,
Print, View, User, PageElement. The usage value can act as a kind of metadata, 
describing the sort of things that belong to the group, such as text in French, 
fine detail on a map, or a watermark. The usage values can also be used by the 
AutoState mechanism to make decisions about what groups should be on and what 
groups should be off. The AutoState mechanism considers the usage information 
in the OCGs, the AS array of the configuration, and external factors; for example, 
the language the application is running in, the current zoom level on the page, 
or whether the page is being printed.</p></summary>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> Pointer to the underlying SDF/Cos object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.SetLockedOCGs(pdftron.SDF.Obj)">
            <summary> Sets the array of locked OCGs. The on/off state of a locked OCG cannot be
toggled by the user through the user interface.

</summary>
            <param name="locked_ocg_array">An SDF/Cos array of OCG objects to be locked in this
configuration, or an empty array if the configuration should not contain
locked OCGs. The default is the empty array.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.GetLockedOCGs">
            <summary> Gets the locked oc gs.

</summary>
            <returns> the list of locked OCGs or NULL if there are no locked OCGs.
The on/off state of a locked OCG cannot be toggled by the user through the
user interface.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.SetIntent(pdftron.SDF.Obj)">
            <summary> Sets the Intent entry in an optional-content configuration's SDF/Cos dictionary.
For more information, see GetIntent().

</summary>
            <param name="intent">The new Intent entry value (a name object or an array of name objects).
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.GetIntent">
            <summary> Gets the intent.

</summary>
            <returns> OCG configuration intent. An intent is a name object (or an array of name
objects) broadly describing the intended use, which can be either "View" or "Design".
A group's content is considered to be optional (that is, the group's state is considered
in its visibility) if any intent in its list matches an intent of the context. The
intent list of the context is usually set from the intent list of the document
configuration. If the configuration has no Intent entry, the default value of
"View" is used.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.SetInitOffStates(pdftron.SDF.Obj)">
            <summary> Sets the 'OFF' initialization array in the configuration dictionary.
For more info, please see SetInitOffStates() and section 4.10.3 in PDF Reference.

</summary>
            <param name="off_array">the new inits the off states
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.SetInitOnStates(pdftron.SDF.Obj)">
            <summary> Sets the 'ON' initialization array in the configuration dictionary.
For more info, please see SetInitOnStates() and  section 4.10.3 in PDF Reference.

</summary>
            <param name="on_array">the new inits the on states
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.SetInitBaseState(System.String)">
            <summary> Sets the base initialization state. For more info, please see GetInitBaseState().

</summary>
            <param name="state">new base state ("ON", "OFF", or "Unchanged").
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.GetInitOffStates">
            <summary> Gets the inits the off states.

</summary>
            <returns> the "OFF" initialization array from the configuration dictionary or
NULL if the array is not present. The returned object is an array of optional
content groups whose state should be set to OFF when this configuration is applied.
Note: If the BaseState entry is OFF, this entry is redundant.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.GetInitOnStates">
            <summary> Gets the inits the on states.

</summary>
            <returns> the "ON" initialization array from the configuration dictionary or
NULL if the array is not present. The returned object is an array of optional
content groups whose state should be set to ON when this configuration is applied.
Note: If the BaseState entry is ON, this entry is redundant.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.GetInitBaseState">
            <summary> Gets the inits the base state.

</summary>
            <returns> the base initialization state. This state is used to initialize the states
of all the OCGs in a document when this configuration is applied. The value of this entry
must be one of the following names:
<list type="bullet"><item>ON<description> The states of all groups are turned ON.</description></item><item>OFF<description> The states of all groups are turned OFF.</description></item><item>Unchanged<description> The states of all groups are left unchanged.</description></item></list><p> After base initialization, the contents of the ON and OFF arrays are processed, overriding
the state of the groups included in the arrays.</p></returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If BaseState is present in the document's default configuration dictionary, its value must 
be "ON".</remarks>
            <default>  ON. </default>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.SetCreator(System.String)">
            <summary> Sets the creator property of an optional-content configuration. Stores the
specified string as the Creator entry in the configuration's SDF/Cos dictionary.

</summary>
            <param name="name">The new creator string.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.GetCreator">
            <summary> Gets the creator.

</summary>
            <returns> the creator property of an optional-content configuration. The string
is used to represent the name of the application or feature that created this
configuration.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.SetName(System.String)">
            <summary> Sets the name of an optional-content configuration (suitable for presentation
in a user interface). The method stores the specified string as the Name entry
in the configuration's SDF/Cos dictionary.

</summary>
            <param name="name">The new name string.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.GetName">
            <summary> Gets the name.

</summary>
            <returns> the name of an optional-content configuration (suitable for
presentation in a user interface).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.SetOrder(pdftron.SDF.Obj)">
            <summary> Sets the user interface display order of optional-content groups (OCGs) in
this configuration. This is the order in which the group names are displayed
in the Layers panel of a PDF viewer.

</summary>
            <param name="ocgs_array">The SDF/Cos object containing the OCG order array.
For more information, please refer to section 4.10.3 in the PDF Reference.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.GetOrder">
            <summary> Gets the order.

</summary>
            <returns> the Obj array that specifies the order of optional content (OC) groups
in this configuration or NULL if the configuration does not contain any OCGs.
The order of OCGs in the array is used to represent the order in which the
group names are displayed in the Layers panel of a PDF viewer application.
For more information, please refer to Section 4.10.3 in the PDF Reference.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.#ctor(pdftron.SDF.Obj)">
            <summary>Creates a new optional-content configuration from an existing SDF Cos object.
</summary>
            <param name="ocg_config">existing OCG configuration
</param>
        </member>
        <member name="M:pdftron.PDF.OCG.Config.Create(pdftron.PDF.PDFDoc,System.Boolean)">
            <summary>Creates a new optional-content configuration from an existing SDF/Cos object.
</summary>
            <param name="doc">document to create OCG configuration in
</param>
            <param name="default_config">whether to use default configuration
</param>
            <returns>newly created configuration
</returns>
        </member>
        <member name="T:pdftron.PDF.OCG.Config">
            <summary> The OCG::Config object represents an optional-content (OC) configuration 
structure (see section 4.10.3 in PDF Reference), used to persist a set 
of visibility states and other optional-content information in a PDF file 
A document has a default configuration, saved in the D entry in the 
'OCProperties' dictionary (that can be obtained using pdfdoc.GetOCConfig()), 
and can have a list of other configurations, saved as an array in the 
'Configs' entry in the OCProperties dictionary.
<p>
Configurations are typically used to initialize the OCG ON-OFF states for 
an optional-content context (OCG::Context). The OCG order in the configuration 
is the order in which the groups appear in the Layers panel of a PDF viewer. 
The configuration can also define a set of mutually exclusive OCGs, called a 
radio button group.
</p></summary>
        </member>
        <member name="M:pdftron.PDF.Struct.STree.Dispose">
            <summary> Releases all resources used by the Stree </summary>
        </member>
        <member name="M:pdftron.PDF.Struct.STree.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> Pointer to the underlying SDF/Cos object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.STree.GetElement(System.Byte[])">
            <summary> Gets the element.

</summary>
            <param name="buf">the id_buf
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.STree.GetKid(System.Int32)">
            <summary> Gets the kid.

</summary>
            <param name="index">The index of the kid to obtain.
</param>
            <returns> The kid at an array index in the structure tree root.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.STree.GetNumKids">
            <summary> Gets the num kids.

</summary>
            <returns> The number of kids of the structure tree root.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.STree.IsValid">
            <summary> Checks if is valid.

</summary>
            <returns> true if this is a valid STree object, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.STree.Insert(pdftron.PDF.Struct.SElement,System.Int32)">
            <summary>Inserts the specified kid element after the given position as a kid of 
the specified structure tree root. 
</summary>
            <param name="kid">the kid element 
</param>
            <param name="insert_before">The position after which the kid is inserted. If 
element currently has no kids, insert_before is ignored.
</param>
        </member>
        <member name="M:pdftron.PDF.Struct.STree.#ctor(pdftron.PDF.PDFDoc)">
            <summary />
            <param name="doc" />
        </member>
        <member name="M:pdftron.PDF.Struct.STree.#ctor(pdftron.SDF.Obj)">
            <summary> Initialize a STree using an existing low-level Cos/SDF object.

</summary>
            <param name="struct_dict">a low-level (SDF/Cos) dictionary representing the . 

</param>
            <remarks>  This constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Struct.STree">
            <summary> STree is the root of the structure tree, which is a central repository 
for information related to a PDF document's logical structure. There is at most 
one structure tree in each document.
</summary>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.Dispose">
            <summary> Releases all resources used by the SElement </summary>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.GetSDFObj">
            <summary> Gets the sDF obj.

</summary>
            <returns> Pointer to the underlying SDF/Cos object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.GetAlt">
            <summary> Gets the alt.

</summary>
            <returns> The alternate text associated with this element.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Alt text can be defined as an empty string. To differentiate
between an Alt text string of zero length and no Alt text being defined,
use HasAlt().</remarks>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.HasAlt">
            <summary> Checks for alt.

</summary>
            <returns> if this structure element defines Alt text.

Alt text is an alternate description of the structure element and
its children in human-readable form, which is useful when extracting
the documentï¿½s contents in support of accessibility.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.GetActualText">
            <summary> Checks for actual text.

</summary>
            <returns> if this structure element defines ActualText.

ActualText is an exact replacement for the structure element and its children.
This replacement text is useful when extracting the document's contents in
support of accessibility to users with disabilities or for other purposes.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.HasActualText">
            <summary> Gets the actual text.

</summary>
            <returns> The ActualText associated with this element.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The ActualText can be defined as an empty string. To differentiate
between an ActualText string of zero length and no ActualText being defined,
use HasActualText().</remarks>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.GetID">
            <summary> Gets the ID.

</summary>
            <returns> the ID of an element, or NULL if the ID is not defined.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.GetTitle">
            <summary> Gets the title.

</summary>
            <returns> The title of this structure element.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.HasTitle">
            <summary> Checks for title.

</summary>
            <returns> if this SElement has title.

The title of the structure element, a text string representing it in
human-readable form.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.GetStructTreeRoot">
            <summary>Gets the struct tree root
</summary>
            <returns>structure tree root of the document that directly or indirectly contains this element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">PDFNetException the PDFNet exception</exception>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.GetParent">
            <summary> Gets the parent.

</summary>
            <returns> The immediate ancestor element of the specified element in
the structure tree.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If the element's parent is the structure tree root, the returned
SElement will be not valid (i.e. element.IsValid() -&gt; false) and the
underlying SDF/Cos object will be NULL.</remarks>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.GetAsStructElem(System.Int32)">
            <summary> Gets the as struct elem.

</summary>
            <param name="index">The index of the kid to obtain.
</param>
            <returns> The kid at a given array index assuming that the kid is a SElement.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  use IsContentItem(index) prior to calling this method to make sure that
the kid is not a ContentItem and is another SElement.</remarks>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.GetAsContentItem(System.Int32)">
            <summary> Gets the as content item.

</summary>
            <param name="index">The index of the kid to obtain.
</param>
            <returns> The kid at a given array index assuming that the kid is a ContentItem.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  use IsContentItem(index) prior to calling this method to make sure that
the kid is indeed a ContentItem.</remarks>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.IsContentItem(System.Int32)">
            <summary> Checks if is content item.

</summary>
            <param name="index">The index of the kid type to obtain.

To retrieve a content item at a given array index use GetAsContentItem(index),
otherwise use GetAsStructElem(index)
</param>
            <returns> true if the kid at a given array index is a content item,
false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.GetNumKids">
            <summary> Gets the num kids.

</summary>
            <returns> The number of direct kids.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.GetType">
            <summary> Gets the type.

</summary>
            <returns> The element's structural element type. The type corresponds to
the 'S' (i.e. subtype) key in the structure element dictionary.

The type identifies the nature of the structure element and its role
within the document (such as a chapter, paragraph, or footnote).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.IsValid">
            <summary> Checks if is valid.

</summary>
            <returns> true if this is a valid structure element object, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.CreateContentItem(pdftron.PDF.PDFDoc,pdftron.SDF.Obj,System.Int32)">
            <summary>Creates content item
</summary>
            <param name="doc" />
            <param name="page" />
            <param name="insert_before">The position after which the kid is inserted. If element currently has no kids, insert_before is ignored.
</param>
            <returns />
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.Insert(pdftron.PDF.Struct.SElement,System.Int32)">
            <summary>Insert a kid <c>SElement</c></summary>
            <param name="kid">kid <c>SElement</c></param>
            <param name="insert_before">The position after which the kid is inserted. If element currently has no kids, insert_before is ignored.
</param>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.#ctor(pdftron.PDF.PDFDoc,System.String)">
            <summary> Create <c>SElement</c> with specified type
</summary>
            <param name="doc">PDF document to create the <c>SElement</c> in
</param>
            <param name="struct_type">structure type
</param>
        </member>
        <member name="M:pdftron.PDF.Struct.SElement.#ctor(pdftron.SDF.Obj)">
            <summary> Initialize a SElement using an existing low-leval Cos/SDF object.

</summary>
            <param name="dict">the dict
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Struct.SElement">
            <summary> SElement represents PDF structural elements, which are nodes in a tree   
structure, defining a PDF document's logical structure.

Unlike the StructTree, SElement can have two different kinds 
of children: another SElement or a ContentItem (which can be marked 
content (MC), or a PDF object reference (OBJR)). 
</summary>
        </member>
        <member name="M:pdftron.PDF.Struct.ContentItem.Dispose">
            <summary> Releases all resources used by the ContentItem </summary>
        </member>
        <member name="M:pdftron.PDF.Struct.ContentItem.GetRefObj">
            <summary> Gets the ref obj.

</summary>
            <returns> The referenced object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method only applies to content items with type e_OBJR. </remarks>
        </member>
        <member name="M:pdftron.PDF.Struct.ContentItem.GetStmOwner">
            <summary> Gets the stm owner.

</summary>
            <returns> NULL or the PDF object owning the stream returned by
GetContainingStm() (e.g. the annotation to which an appearance stream
belongs).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method only applies to content items with type e_MCR. </remarks>
        </member>
        <member name="M:pdftron.PDF.Struct.ContentItem.GetContainingStm">
            <summary> Gets the containing stm.

</summary>
            <returns> The stream object that contains the marked-content sequence.
The function will return a non-NULL object only if the marked-content
sequence resides in a content stream other than the content stream for the
page (e.g. in a form XObject).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method only applies to content items with type e_MCR. </remarks>
        </member>
        <member name="M:pdftron.PDF.Struct.ContentItem.GetMCID">
            <summary> Gets the MCID.

</summary>
            <returns> mcid (marked-content identifier).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method only applies to content items with types e_MCR or e_MCID. </remarks>
        </member>
        <member name="M:pdftron.PDF.Struct.ContentItem.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> Pointer to the underlying SDF/Cos object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.ContentItem.GetPage">
            <summary> The page on which the marked content is drawn, whether directly as part of
page content or indirectly by being in a Form XObject or annotation drawn
on that page.

</summary>
            <returns> the page
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.ContentItem.GetParent">
            <summary>Find the parent structure element
</summary>
            <returns>parent structure element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Struct.ContentItem.GetType">
            <summary> Gets the type.

</summary>
            <returns> the content item type.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Struct.ContentItem.Type.e_Unknown">
            <summary>unknown content type.</summary>
        </member>
        <member name="F:pdftron.PDF.Struct.ContentItem.Type.e_OBJR">
            <summary>object reference dictionary.</summary>
        </member>
        <member name="F:pdftron.PDF.Struct.ContentItem.Type.e_MCID">
            <summary>marked-content identifier.</summary>
        </member>
        <member name="F:pdftron.PDF.Struct.ContentItem.Type.e_MCR">
            <summary>marked-content reference.</summary>
        </member>
        <member name="T:pdftron.PDF.Struct.ContentItem.Type">
            <summary>Content Item types</summary>
        </member>
        <member name="T:pdftron.PDF.Struct.ContentItem">
            <summary> Content items are graphical objects that exist in the document independently 
of the structure tree but are associated with structure elements.

Content items are leaf nodes of the structure tree.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Dispose">
            <summary> Releases all resources used by the PDFViewCtrl </summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnResize(System.EventArgs)">
            <summary>Raises the Resize event.
</summary>
            <param name="e">An EventArgs that contains the event data.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>Raises the Invalidated event.
</summary>
            <param name="e">An InvalidateEventArgs that contains the event data.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnUserPaint(System.Void*)">
            <summary />
            <param name="dc" />
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnContextMenu(System.Int32,System.Int32)">
            <summary />
            <param name="x" />
            <param name="y" />
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>Raises the KeyPress event.</summary>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyDown event.</summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyUp event.</summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnCursorChanged(System.EventArgs)">
            <summary>Raises the CursorChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseWheel event.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnMouseLeave(System.EventArgs)">
            <summary>Raises the MouseLeave event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnMouseEnter(System.EventArgs)">
            <summary>Raises the MouseEnter event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseDown event.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseUp event.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseMove event.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseDoubleClick event.</summary>
            <param name="e">An MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseClick event.</summary>
            <param name="e">An MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.AddWatermark">
            <summary>create AddWatermarkDialog where user can define a watermark and stamp it to a document
</summary>
            <remarks> Can acquire a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.CropPages">
            <summary>create CropPagesDialog where the user can specify a cropping for any of the boxes in a PDF Page. The user can apply the cropping to any set of pages
</summary>
            <remarks> Can acquire a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ExtractPages">
            <summary>create ExtractPagesDialog to prompt user to extract n pages from the PDF and save it to a new file
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.RotatePages">
            <summary>create RotatePagesDialog to prompt user to rotate n pages at a specified rotation
</summary>
            <remarks> Can acquire a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ReplacePages(System.String)">
            <summary>create ReplacePagesDialog to prompt user for page number from another PDF document to replace pages from current PDF document
</summary>
            <param name="path">path to the PDF document as replacement source
</param>
            <remarks> Can acquire a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ReplacePages">
            <summary>create ReplacePagesDialog to prompt user for page number from another PDF document to replace pages from current PDF document
</summary>
            <remarks> Can acquire a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.InsertPages(System.String)">
            <summary>create InsertPagesDialog to prompt user for page number from another PDF document to insert.
</summary>
            <param name="path">path to the PDF document as insertion source
</param>
            <remarks> Can acquire a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.InsertPages">
            <summary>create InsertPagesDialog to prompt user for page number from another PDF document to insert.
</summary>
            <remarks> Can acquire a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.InsertBlankPages">
            <summary>create InsertBlankPagesDialog to prompt user for size and number of blank pages to insert.
</summary>
            <remarks> Can acquire a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.DeletePages">
            <summary>create DeletePagesDialog to prompt user for pages in the current PDF document to delete.
</summary>
            <remarks> Can acquire a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.DocProperties">
            <summary>create Document Properties dialog
</summary>
            <remarks> Can acquire a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Resize(System.Int32,System.Int32)">
            <summary>resizes PDFViewCtrl to the specified width and height
</summary>
            <param name="w">new width
</param>
            <param name="h">new height
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetChildWindowPosition(pdftron.PDF.PDFViewCtrl.PDFViewCtrlWindowType)">
            <summary>Gets child window position of the specified type
</summary>
            <param name="tp">window type
</param>
            <returns>a rectangle describing child window position
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetChildWindowPosition">
            <summary>Gets child windows position
</summary>
            <returns>a rectangle describing child windows position
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ExecuteAction(pdftron.PDF.Action)">
            <summary>
Requests action object to be executed by PDFViewCtrl. Action must belong to the document 
currently displayed in PDFViewCtrl.
</summary>
            <param name="action"> object that is to be executed.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnAction(pdftron.PDF.Action)">
            <summary>
Called whenever any action is being triggered in the PDF doc.
</summary>
            <param name="action">The action about to be executed on the PDF doc.
</param>
            <returns>Return true to prevent PDFViewCtrl from executing the action, otherwise false.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Print(System.Int32,System.Int32,pdftron.PDF.Page.Rotate,System.Int32,System.String)">
            <summary>print a range of pages with specified rotation and number of copies to target printer
</summary>
            <param name="first_page">first page to print
</param>
            <param name="last_page">last page to print
</param>
            <param name="rotation">page rotation
</param>
            <param name="copies">number of copies to print
</param>
            <param name="printer_name">name of the target printer
</param>
            <remarks> Acquires a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Print">
            <summary>Displays a print dialog to receive information from the user and prints the document.
</summary>
            <remarks> Can acquire a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetViewerCache(pdftron.SDF.SDFDoc,System.UInt32,System.Boolean)">
            <summary> Sets the cache parameters of the page cache on disk (which caches content streams and
		  mipmapped images) for this specific document.  These parameters will override the default cache
		  parameters.  Note that if this function is called after the document has been rasterized, it has no
		  effect.
</summary>
            <param name="document">The document whose settings will be modified
</param>
            <param name="max_cache_size">The maximum size, in bytes, of the entire document's page cache. Set to zero to disable the viewer cache.
</param>
            <param name="on_disk">If set to 'true', cache will be stored on the local filesystem. If set to 'false', cache will be stored in heap memory.
</param>
            <remarks> Default Desktop: max_cache_size = 512 MB, on_disk = true | Default Mobile:  max_cache_size = 100 MB, on_disk = false 
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetSplitPosition">
            <summary>Gets the current horizontal size of the navigation panel.
</summary>
            <returns>the horizontal size of the navigation panel
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetSplitPosition(System.Int32)">
            <summary>Sets the horizontal size of the navigation panel.
</summary>
            <param name="pos">the new horizontal size
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetSelectedPanel">
            <summary>Gets the currently selected panel in the navigation panel.
</summary>
            <returns>the currently selected panel type
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetSelectedPanel(pdftron.PDF.PDFViewCtrl.PanelType)">
            <summary>Sets the currently selected panel in the navigation panel.
</summary>
            <param name="panel">the panel to select
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetEnabledPanels">
            <summary>Returns which panels are enabled in the navigation panel.
</summary>
            <returns>A bit field composed of an OR of PDFViewCtrl::PanelType values. which describes which panels are currently enabled in the navigation panel.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetEnabledPanels(System.Int32)">
            <summary>Sets which panels will be enabled in the navigation panel.
</summary>
            <param name="panels">A bit field composed of an OR of PDFViewCtrl::PanelType values.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetFindTextHandler(pdftron.PDF.PDFViewCtrl.PDFViewFindTextAsyncDelegate,System.Object)">
            <summary> Sets the delegate to be called when FindTextAsync() is completed
</summary>
            <param name="proc"> the delegate
</param>
            <param name="data"> arbitrary user data
</param>
        </member>
        <member name="T:pdftron.PDF.PDFViewCtrl.PDFViewFindTextAsyncDelegate">
            <summary> A delegate that is called once FindTextAsync is completed. </summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.FindTextAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Selects text by searching for a given string of text,
and invoking user delegate upon completion
</summary>
            <param name="str">string to search
</param>
            <param name="match_case">whether to match case
</param>
            <param name="match_whole_word">whether to match the whole word
</param>
            <param name="search_up">whether to search up
</param>
            <param name="reg_exp">whether to use regular expressions
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetRequestRenderInWorkerThreadProc(pdftron.PDF.PDFViewCtrl.PDFViewRenderWorkerDelegate,System.Object)">
            <summary>
Sets a callback for issuing a render request on the UI thread.
The callback will be called from a secondary thread.  The called
code is responsible for dispatching an event to the UI thread
using the relevant mechanism.
</summary>
            <param name="managed_proc">
The callback function.
</param>
            <param name="custom_data">
Custom data to be passed as a parameter to 'managed_proc'.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetThumbAsync(System.Int32,pdftron.PDF.PDFViewThumbAsyncDelegate,System.Object)">
            <summary>
Retrieves the specified thumbnail from the persistent thumbnail
cache on disk, then calls proc on the resulting thumbnail.
</summary>
            <param name="page_num">
The page number of the thumbnail.
</param>
            <param name="managed_proc">
A callback function that will be called after the thumbnail is retrieved, or if that retrieval 
fails.
</param>
            <param name="custom_data">
Custom data to be passed as a parameter to 'managed_proc'.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ClearThumbCache">
            <summary>
Remove all thumbnails from the persistent disk cache.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetupThumbnails(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.UInt32,System.Double)">
            <summary>
Enables or disables thumbnail view features.
Thumbnail view is used before a PDF page is fully rendered. If runtime
thumb view generation is enabled, PDFViewCtrl generates thumbnail views
at runtime. If a PDF file already contains the thumbnail views, runtime
thumb view generation can be turned off, which is more efficient.

It is recommended that this not be called after SetDoc in order to 
avoid clearing cached thumbnails. Calling this method with different parameters 
will also clear the persistent disk cache if it is in use.

If runtime thumb view generation is enabled, the thumbMaxSideLength
will be used as a reference to calculate the thumbnail resolution.
</summary>
            <param name="use_embedded_thumbs">
Enables or disables using thumbnails embedded in the PDF
document as a preview of the rendered page. This flag is
currently ignored, but functionality may be added to support
embedded thumbnails in the future.
</param>
            <param name="generate_thumbs_at_runtime">
Enables or disables generating thumbnails at runtime.
 Default is enabled.
</param>
            <param name="use_persistent_cache">
Enables or disables storing thumbnails in a cache file on disk.
default is enabled.
</param>
            <param name="thumb_max_side_length">
The maximum size, in pixels, of a dimension of generated
 thumbnails.
</param>
            <param name="max_abs_cache_size">
The maximum absolute size, in bytes, the thumbnail cache file may take up
on disk.
</param>
            <param name="max_perc_cache_size">
The maximum percentage of free disk space, in the range 0 - 1.0, the thumbnail
cache file may take up.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OpenURLAsync(System.String,System.String,System.String,pdftron.PDF.HTTPRequestOptions)">
            <summary> Open a PDF file at the given url. This works best with PDF's that
are linearized, as pages can be downloaded and viewed in random access order,
without the need to download the entire document. A viewing session can also be
persisted across multiple viewing/application sessions to remove redundant downloads 
and improve overall performance by using the optional cache_pdf parameter.
</summary>
            <param name="url"> the url to open
</param>
            <param name="cache_pdf"> This function will use downloaded data to construct 
a PDF in this location. If null or blank, the PDF will be stored in a temporary location.
If the path points to the result of a previous call to this function for this particular URL, 
then PDFViewCtrl will resume that download.
</param>
            <param name="password"> The PDF document password to use if the PDF itself
is password protected.
</param>
            <param name="options"> Optional HTTP request options to use with every HTTP request.</param>
            <remarks>Use SetDownloadReportHandler to track the download events.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OpenURLAsync(System.String,System.String,System.String)">
            <summary> Open a PDF file at the given url. This works best with PDF's that
are linearized, as pages can be downloaded and viewed in random access order,
without the need to download the entire document. A viewing session can also be
persisted across multiple viewing/application sessions to remove redundant downloads 
and improve overall performance by using the optional cache_pdf parameter.
</summary>
            <param name="url"> the url to open
</param>
            <param name="cache_pdf"> This function will use downloaded data to construct 
a PDF in this location. If null or blank, the PDF will be stored in a temporary location.
If the path points to the result of a previous call to this function for this particular URL, 
then PDFViewCtrl will resume that download.
Note that if disk caching is disabled this file will not be used.
</param>
            <param name="password"> The PDF document password to use if the PDF itself
is password protected.
</param>
            <remarks>Use SetDownloadReportHandler to track the download events.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OpenURLAsync(System.String)">
            <summary> Open a PDF file at the given url. This works best with PDF's that
are linearized, as pages can be downloaded and viewed in random access order,
without the need to download the entire document.
</summary>
            <param name="url"> the url to open
</param>
            <remarks>Use SetDownloadReportHandler to track the download events.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetDownloadReportHandler(pdftron.PDF.PDFViewDownloadDelegate,System.Object)">
            <summary>Sets the download report handling function to be called on download events,
such as when a new page or thumbnail is available, and any download related errors.
</summary>
            <param name="download_proc">Download report handling callback function (or delegate in .NET)
</param>
            <param name="data">Custom data to be passed as a parameter to 'download_proc'.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetAnnotationAt(System.Int32,System.Int32)">
            <summary> Gets the annotation at the (x, y) position expressed in screen coordinates.
</summary>
            <param name="x"> x coordinate of the screen point
</param>
            <param name="y"> y coordinate of the screen point
</param>
            <returns>The annotation closest to the point. If no annotation was found, it returns a null pointer. </returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetScreenRectForAnnot(pdftron.PDF.Annot,System.Int32)">
            <summary>Retrieve the bounding box of the annotation in screen points
</summary>
            <param name="annot">the annotation which the bounding box is calculated and returned
</param>
            <param name="page_num">The page num to which the annotation blongs to
</param>
            <returns>A bouding box of the annotation in screen points
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetDefaultAnnotation(System.String)">
            <summary>Retrieve the annotation which stores the default properties for a given type. User can change these default settings by operating on this annotation.
</summary>
            <param name="type">the key, or identifier, of the annotation type for which the default is required. Usually this is the same as the value of 'Subtype' entry in the annotation's dictionary, allowing to easily get default annotation for given type. PDFNet is also using the following non-standard names annotation types which have more than associated creation tool: 'Arrow' to store the properties of the Line annotation drawn as an arrow; 'FreeTextCallout' to store the properties of the FreeText annotation drawn as a callout box.
</param>
            <returns>the annotation which stores the default properties for a given type
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SaveCurrentConfiguration(System.String)">
            <summary>Save the current configuration of PDFViewCtrl to a file.
</summary>
            <param name="path">name of the file to which the settings are saved. If it is an empty string, default location is chosen by PDFViewCtrl.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.LoadCurrentConfiguration(System.String)">
            <summary>Load the current configuration of PDFViewCtrl from a file.
</summary>
            <param name="path">path of the file from which the settings are loaded. If it is an empty string, default location is chosen by PDFViewCtrl.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetFocus">
            <summary>Set the key focus to PDFViewCtrl. This is useful when a user needs to set the focus programatically.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ShowDialogs(System.Boolean)">
            <summary>Enables or disables popup dialogs such as password entry and find dialogs as well as popup menus.
</summary>
            <param name="show">	if true dialogs will be enabled
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.EnableInteractiveForms(System.Boolean)">
            <summary>Enables or disables interactive form editing.
</summary>
            <param name="on">if true interactive forms will be enabled
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.EnableLinkActivation(System.Boolean)">
            <summary>Enables or disables whether links are activated when the user clicks on them.
</summary>
            <param name="enable">if true enable link activation, otherwise disable it
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Copy">
            <summary>Copies the current selection in this control.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetPageSpacing(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the vertical and horizontal padding and column spacing between adjacent pages in the view.
</summary>
            <param name="horiz_space">horizontal column spacing (represented in pixels) between adjacent pages in the view. Default is 10.
</param>
            <param name="vert_space">vertical column spacing (represented in pixels) between adjacent pages in the view. Default is 10.
</param>
            <param name="horiz_pad">horizontal padding (represented in pixels) on the left and right side of the view. Default is 10.
</param>
            <param name="vert_pad">vertical padding (represented in pixels) on the top and bottom side of the view. Default is 10.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetVerticalAlign(System.Int32)">
            <summary>Sets the vertical alignment used for rendering pages within the view.
</summary>
            <param name="align">an integer specifying the vertical alignment. Depending of whether align is positive, negative, or zero pages will be bottom, top or center aligned
<list><term>align&lt;0</term><description>pages are top aligned</description><term>align=0</term><description>pages are centered</description><term>align&gt;0</term><description>pages are bottom aligned</description></list></param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetHorizontalAlign(System.Int32)">
            <summary>Sets the horizontal alignment used for rendering pages within the view.
</summary>
            <param name="align">an integer specifying the horizontal alignment. Depending of whether align is positive, negative, or zero - pages will be right, left or center aligned
<list><term>align&lt;0</term><description>pages are top aligned</description><term>align=0</term><description>pages are centered</description><term>align&gt;0</term><description>pages are bottom aligned</description></list></param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnForeColorChanged(System.EventArgs)">
            <summary>When overriding OnForeColorChanged in a derived class, be sure to call the base class's OnBackColorChanged method so that registered delegates receive the event. 
</summary>
            <param name="e">event arguments
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnBackColorChanged(System.EventArgs)">
            <summary>When overriding OnBackColorChanged in a derived class, be sure to call the base class's OnBackColorChanged method so that registered delegates receive the event. 
</summary>
            <param name="e">event arguments
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetBackgroundColor(System.Drawing.Color)">
            <summary>Sets the default background color used to paint the area surrounding each page.
</summary>
            <param name="c">RGB color specifying the default background color.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetDefaultPageColor(System.Drawing.Color)">
            <summary>Sets the default 'paper' color used to draw background of each page.
</summary>
            <param name="c">RGB color specifying the default page color.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetPageTransparencyGrid(System.Boolean)">
            <summary>Enables or disables the transparency grid (check board pattern) to reflect page transparency.
</summary>
            <param name="trans_grid_visible">if true, the grid is turned on.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetPageBorderVisibility(System.Boolean)">
            <summary>Enables or disables drawing of a thin border around each page.
</summary>
            <param name="border_visible">if true, the border will be visible.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetToolMode">
            <summary>Gets the current tool mode.
</summary>
            <returns>current tool mode.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetToolMode(pdftron.PDF.PDFViewCtrl.ToolMode)">
            <summary>Sets the new tool mode (such as pan, text select, etc).
</summary>
            <param name="mode">new tool mode.
</param>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_tool_mode_end">
            <summary />
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_link_create">
            <summary>create a link annotation</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_button_create">
            <summary>interactive button creation tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_combo_box_create">
            <summary>interactive combo box creation tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_list_box_create">
            <summary>interactive list box creation tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_radio_button_create">
            <summary>interactive radio button tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_check_box_create">
            <summary>interactive check box creation tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_text_field_create">
            <summary>interactive text field creation</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_redaction_create">
            <summary>redaction placement tool    </summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_caret_create">
            <summary>caret placement tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_movie_attachment">
            <summary>movie annotation creation</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_sound_attachment">
            <summary>sound annotation creation</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_file_attachment">
            <summary>file attachment creation</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_polyline_create">
            <summary>polyline creation tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_polygon_create">
            <summary>polygon creation tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_calloutbox_create">
            <summary>free text with a callout tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_text_box_create">
            <summary>free text creation tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_squiggly_create">
            <summary>squiggly underline tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_strikeout_create">
            <summary>cross out text tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_underline_create">
            <summary>underline text tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_highlight_create">
            <summary>highlight text tool </summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_stamp_create">
            <summary>Stamp Annotation creation tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_text_annot_create">
            <summary>Text annotation creation tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_ink_create">
            <summary>Freehand drawing tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_oval_create">
            <summary>Oval/Ellipse creation tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_rect_create">
            <summary>Rectangle creation tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_arrow_create">
            <summary>Arrow creation tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_line_create">
            <summary>Line creation tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_annot_edit">
            <summary>Annotation editing tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_zoom_out">
            <summary>Zoom out tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_zoom_in">
            <summary>Zoom in tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_text_struct_select">
            <summary>HTML Style text selection tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_text_rect_select">
            <summary>Rectangular text selection tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_pan">
            <summary>Pan tool</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.ToolMode.e_custom">
            <summary>Custom tool</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewCtrl.ToolMode">
            <summary>PDFViewCtrl class supports a number of 'built-in' tool modes. 
ToolMode enumerates tool modes supported by PDFViewCtrl.</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.HasSelectionOnPage(System.Int32)">
            <summary>checks if given page number has any text selection on it. Useful when there are selections on multiple pages at the same time.
</summary>
            <param name="page">given page number
</param>
            <returns>true if given page number has any text selection on it, false otherwise
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetSelectionEndPage">
            <summary>Gets the last page number that has text selection on it. Useful when there are selections on multiple pages at the same time.
</summary>
            <returns>the last page number that has text selection on it
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetSelectionBeginPage">
            <summary>Gets the first page number that has text selection on it. Useful when there are selections on multiple pages at the same time.
</summary>
            <returns>the first page number that has text selection on it
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetSelection(System.Int32)">
            <summary>Gets Current text selection for a given page. If there is only selection on one page, then page number does not need to be provided.
</summary>
            <param name="page">page number
</param>
            <returns>the first page number that has text selection on it. Useful when there are selections on multiple pages at the same time.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetSelection">
            <summary>Gets Current text selection for a given page. If there is only selection on one page, then page number does not need to be provided.
</summary>
            <returns>Current text selection for a given page. If there is only selection on one page, then page number does not need to be provided.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ClearSelection">
            <summary>Remove any text selection.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.HasSelection">
            <summary>checks if there is selection
</summary>
            <returns>return true if there is selection, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SelectAll">
            <summary>Selects all text on the page.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Select(pdftron.PDF.PDFViewCtrl.Selection!System.Runtime.CompilerServices.IsConst)">
            <summary>Selects texts identified by Selection.
</summary>
            <param name="select"> an instance of Selection class.
</param>
            <returns>true if some texts were selected, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Select(pdftron.PDF.Highlights!System.Runtime.CompilerServices.IsConst)">
            <summary>Selects texts identified by Highlights.
</summary>
            <param name="highlights"> an instance of Highlights class.
</param>
            <returns>true if some texts were selected, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Select(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>Selects text using structural mode given two points on two pages.
</summary>
            <param name="x1">x coordinate of the first point
</param>
            <param name="y1">y coordinate of the first point
</param>
            <param name="page1">page number of the first page
</param>
            <param name="x2">x coordinate of the second point
</param>
            <param name="y2">y coordinate of the second point
</param>
            <param name="page2">page number of the second page
</param>
            <returns>true if some text was selected, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Select(System.Double,System.Double,System.Double,System.Double)">
            <summary>Selects text within the given region using the current text selection mode.
</summary>
            <param name="x1">x coordinate of the a point
</param>
            <param name="y1">y coordinate of the a point
</param>
            <param name="x2">x coordinate of the opposite corner
</param>
            <param name="y2">y coordinate of the opposite corner
</param>
            <returns>true if some text was selected, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetTextSelectionMode(pdftron.PDF.PDFViewCtrl.TextSelectionMode)">
            <summary>Selects all words that intersect the given selection rectangle.
</summary>
            <param name="tm">the text selection mode.
</param>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.TextSelectionMode.e_rectangular">
            <summary>Selects all words that intersect the given selection rectangle.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.TextSelectionMode.e_structural">
            <summary>Selects text based on the logical structure of the page. This type of selection is similar to HTML like selection in web-browsers.</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewCtrl.TextSelectionMode">
            <summary>TextSelectionMode lists different text selection modes that can be used to highlight text. </summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Selection.Dispose">
            <summary> Releases all resources used by the Selection </summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Selection.GetAsHtml">
            <summary>Gets the current text selection in HTML format. HTML text will contain styling information such as text color, font size, style etc.
</summary>
            <returns>the current text selection in HTML format.
</returns>
            <remarks>this function can be used to implement clipboard copy and paste that preserves text formating.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Selection.GetAsUnicode">
            <summary>Gets the current text selection represented as an Unicode string.
</summary>
            <returns>the current text selection represented as an Unicode string.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Selection.GetQuads">
            <summary>Gets the list of tight bounding quads in the current text selection.
</summary>
            <returns>an array of vertices representing a list of bounding quads for the selected text. 
Each bounding quad is represented using 8 numbers in an array of doubles. Each two consecutive
values represent the x and y coordinates of a quad vertex and the four vertices are arranged counter-clockwisely.
Note that the first vertex is not guaranteed to be the lower-left vertex.</returns>
            <remarks>the 'quads' array is owned by the current selection and does not need to be explicitly released.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Selection.GetPageNum">
            <summary>Gets the page number containing the selected text.
</summary>
            <returns>the page number containing the selected text.
</returns>
        </member>
        <member name="T:pdftron.PDF.PDFViewCtrl.Selection">
            <summary>Selection is a utility class that allows access to PDFViewCtrl's current selection. </summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetRotation">
            <summary>Gets the current rotation of this PDFViewCtrl.
</summary>
            <returns>The current rotation of this PDFViewCtrl.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.OnScroll(System.Int32,System.Int32)">
            <summary>Scrolls the contents of the rendering buffer 'pix_dx' horizontally and 'pix_dy' vertically.
</summary>
            <param name="pix_dx">horizontal scroll offset, in pixels
</param>
            <param name="pix_dy">vertical scroll offset, in pixels
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.IsFinishedRendering(System.Boolean)">
            <summary>checks if the rendering thread has finished or the current visible region has been fully rendered.
</summary>
            <param name="visible_region_only">DFViewCtrl might pre-render invisible regions if the compatibility parameter is 
set to false when its constructor is called. In this case, the rendering thread might still
be ongoing even if the current visible region has been rendered. If visible_region_only
parameter is set to true, this function only checks if the visible region has been rendered,
regardless if the rendering thread is ongoing. If compatibility parameter is 
set to true when its constructor is called, this parameter takes no effect.
</param>
            <returns>true if the rendering thread has finished or the current visible region has been fully rendered, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.IsFinishedRendering">
            <summary>checks if the rendering thread has finished.
</summary>
            <returns>true if the rendering thread has finished, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.CancelRendering">
            <summary>Cancels rendering in progress. If PDFViewCtrl is not busy rendering the page, the function has no side effects.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.RequestRendering">
            <summary>Requests that PDFViewCtrl start rendering, if necessary.
</summary>
            <remarks>
Invalidate() simply causes the window to be repainted at the system level. It
does not make PDFViewCtrl to render anything new. RequestRendering() tells PDFViewCtrl
to check if there are regions (both visible and invisible) that have not been rendered; if so
a background rendering thread will be started. This function should be called if 
CancelRendering() was called to stop the ongoing rendering thread. Update() tells
PDFViewCtrl to discard the rendered content and start a rendering
thread. This function should be used if the content of the PDF is modified.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ShowAnnotation(pdftron.PDF.Annot)">
            <summary>Enable rendering of a particular annotation. Only has an effect if HideAnnotation() has previously been called on the same annot.
</summary>
            <param name="annot">The annotation object to resume rendering.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.HideAnnotation(pdftron.PDF.Annot)">
            <summary>Disable rendering of a particular annotation. This does not change the annotation itself, just how it is displayed in this viewer instance.
</summary>
            <param name="annot">The annotation object to cease drawing for.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.UpdatePageLayout">
            <summary>Updates the page layout withing the view. This function must be called after document page sequence is modified (such as when a page is being added to or removed from a document) or after changes to page dimensions (e.g. after a page is rotated or resized).
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Update(pdftron.PDF.Field)">
            <summary>Redraws all instances (Widgets) of the field.
</summary>
            <param name="field">he field for which to update all occurances.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Update(pdftron.PDF.Annot,System.Int32)">
            <summary>Redraws the area covered with a given annotation.
</summary>
            <param name="annot">The annotation to update.
</param>
            <param name="page_num">The page number on which the annotation is located.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Update(pdftron.PDF.Rect!System.Runtime.CompilerServices.IsConst)">
            <summary>Redraws the given area in the buffer.
</summary>
            <param name="update_rect">The rectangle to update expressed in screen coordinates.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Update(System.Boolean)">
            <summary>Redraws the contents.
</summary>
            <param name="all">If true, all the rendered contents are discarded and re-rendered; otherwise, 
only the visible region will be re-rendered.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Update">
            <summary>Redraws the contents in the visible region.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetDeviceTransform(System.Int32)">
            <summary>Gets device transformation matrix from current page
</summary>
            <param name="page_num">same as for PDFViewCtrl.Conv???() methods.
</param>
            <returns>the device transformation matrix. The device transformation matrix maps the page coordinate system to screen (or device) coordinate system.
</returns>
            <remarks>to obtain a transformation matrix that maps screen coordinates to page coordinates, you can invert the device matrix.
<example>
Common::Matrix2D scr2page(pdfviewctrl.GetDeviceTransform());
scr2page.Inverse();
</example></remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetDeviceTransform">
            <summary>Gets device transformation matrix from current page
</summary>
            <returns>the device transformation matrix. The device transformation matrix maps the page coordinate system to screen (or device) coordinate system.
</returns>
            <remarks>to obtain a transformation matrix that maps screen coordinates to page coordinates, you can invert the device matrix.
<example>
Common::Matrix2D scr2page(pdfviewctrl.GetDeviceTransform());
scr2page.Inverse();
</example></remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ConvPagePtToScreenPt(System.Double@,System.Double@,System.Int32)">
            <summary>Converts a point in a page space to a point in screen space.
</summary>
            <param name="x">x coordinate of the page point
</param>
            <param name="y">y coordinate of the page point
</param>
            <param name="page_num">the page number for the page used as the origin of the destination coordinate system. Negative values are used to represent the current page. Pages are indexed starting from one.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ConvScreenPtToPagePt(System.Double@,System.Double@,System.Int32)">
            <summary>Converts a point in screen space to a point in a page space.
</summary>
            <param name="x">x coordinate of the screen point
</param>
            <param name="y">y coordinate of the screen point
</param>
            <param name="page_num">the page number for the page used as the origin of the destination coordinate system. Negative values are used to represent the current page. Pages are indexed starting from one.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ConvPagePtToCanvasPt(System.Double@,System.Double@,System.Int32)">
            <summary>Converts a point expressed in a page space to a point in canvas space.
</summary>
            <param name="x">x coordinate of the page point
</param>
            <param name="y">y coordinate of the page point
</param>
            <param name="page_num">	the page number for the page used as the origin of the destination coordinate system. Negative values are used to represent the current page. Pages are indexed starting from one.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ConvCanvasPtToPagePt(System.Double@,System.Double@,System.Int32)">
            <summary>Converts a point expressed in canvas space to a point on a page space.
</summary>
            <param name="x">x coordinate of the canvas point
</param>
            <param name="y">x coordinate of the canvas point
</param>
            <param name="page_num">the page number for the page used as the origin of the destination coordinate system. Negative values are used to represent the current page. Pages are indexed starting from one.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ConvCanvasPtToScreenPt(System.Double@,System.Double@)">
            <summary>Converts a point expressed in canvas space to a point in sceen space.
</summary>
            <param name="x">x coordinate of canvas point. 
</param>
            <param name="y">x coordinate of canvas point. 
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ConvScreenPtToCanvasPt(System.Double@,System.Double@)">
            <summary>Converts a point expressed in screen space to a point in canvas space.
</summary>
            <param name="x">x coordinate of screen point. 
</param>
            <param name="y">y coordinate of screen point. 
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetPageNumberFromScreenPt(System.Double,System.Double)">
            <summary>Gets the number of the page given point in space. The positive number indicates a valid page, whereas number less than 1 means that no page was found.
</summary>
            <param name="x">x coordinate under the given screen coordinate
</param>
            <param name="y">y coordinate under the given screen coordinate
</param>
            <returns>the number of the page located under the given screen coordinate
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetLinkAt(System.Int32,System.Int32)">
            <summary>Gets the link info at a given point, specified in client space.
</summary>
            <param name="x">the x position in client space
</param>
            <param name="y">the y position in client space
</param>
            <returns>link information or null if no link is found in the queried location.
</returns>
            <remarks>To get valid links, Url extraction must be set to true before setting the document.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetUrlExtraction(System.Boolean)">
            <summary>Enables or disables URL extraction. Default is disabled.
</summary>
            <param name="enabled">true to enable URL extraction, false to disable.
</param>
            <remarks>If set to enabled when the document is already opened, it may not find links on pages that were already rendered. It is suggested to set this flag before opening the document.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.LinkInfo.Dispose">
            <summary> Releases all resources used by the LinkInfo </summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.LinkInfo.GetRect">
            <summary>Gets the bounding rectangle of the link.
</summary>
            <returns>Bounding rectangle of the link, which specifies the area containing the link.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.LinkInfo.GetUrl">
            <summary>Gets the url string of the link.
</summary>
            <returns>A string representing the URL of the link</returns>
        </member>
        <member name="T:pdftron.PDF.PDFViewCtrl.LinkInfo">
            <summary>LinkInfo is a utility class that retains link information when used with GetLinkAt().</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.RotateCounterClockwise">
            <summary>Rotates all pages in the document 90 degrees counter-clockwise.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.RotateClockwise">
            <summary>Rotates all pages in the document 90 degrees clockwise.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SmartZoom(System.Int32,System.Int32)">
            <summary>Sets the zoom factor to a new value using the given pixel coordinate (x,y) to find an intersecting paragraph.
The width of the paragraph helps to determine the zoom value, center of the paragraph is used as a zoom center.
Paragraph has to contain more than one line and be wider than 1/5th of a page width.
When called on a paragraph wider than current zoom level the new zoom level is set to fit the entire page(zoom out). 
</summary>
            <param name="x">the horizontal coordinate to look for a paragraph.
</param>
            <param name="y">the vertical coordinate to look for a paragraph.
</param>
            <returns>true if successful, false if no paragraph intersects the given point.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetZoom(System.Int32,System.Int32,System.Double)">
            <summary>Sets the zoom factor to a new value using the given pixel coordinate (x,y) as a zoom center, which will stay fixed on the screen. The zoom point (x,y) is represented in the screen coordinate system, which starts in the upper-left corner of the client window.
Should you want to move (x, y) to the center of the client window, you can use the OnScroll() subsequently:
<code>
int x, y;
double zoom;
...
view.SetZoom(x, y, zoom);
int width = view.GetBufferWidth();
int height = view.GetBufferHeight();
int dx = (int)(x - (double)width/2 + 0.5);
int dy = (int)(y - (double)height/2 + 0.5);
view.OnScroll(dx, dy);
</code></summary>
            <param name="x">the horizontal coordinate to zoom in.
</param>
            <param name="y">the vertical coordinate to zoom in.
</param>
            <param name="zoom">new scaling component used to display the page content.
</param>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetZoom(System.Double)">
            <summary>Sets the zoom factor to a new value. The function zooms to a point at the center of the rendering buffer.
</summary>
            <param name="zoom"> new scaling component used to display the page content.
</param>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetZoom">
            <summary>Gets current zoom (or scaling) component used to display the page content.
</summary>
            <returns>current zoom (or scaling) component used to display the page content.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetCaching(System.Boolean)">
            <summary>Enables of disables caching of images, fonts, and other resources. Disabling caching can lower memory requirements at the expense of rendering speed.
</summary>
            <param name="enabled">	if true caching is enabled, if false caching is disabled. by default caching is enabled
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetImageSmoothing(System.Boolean)">
            <summary>Enable or disable image smoothing. The rasterizer allows a trade-off between rendering quality and rendering speed. This function can be used to indicate the preference between rendering speed and quality.
</summary>
            <param name="smoothing_enabled">True to enable image smoothing, false otherwise. image smoothing is enabled.
</param>
            <remarks>image smoothing option has effect only if the source image has higher resolution that the output resolution of the image on the rasterized page. PDFNet automatically controls at what resolution/zoom factor, 'image smoothing' needs to take effect.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetHighlightFields(System.Boolean)">
            <summary>Enable or disable highlighting form fields. Default is disabled.
</summary>
            <param name="highlight_fields">true to highlight, false otherwise. 
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetDrawAnnotations(System.Boolean)">
            <summary>Enable or disable annotation and forms rendering. By default, all annotations and form fields are rendered.
</summary>
            <param name="render_annots">True to draw annotations, false otherwise.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetOCGContext">
            <summary>Gets the Optional Content Group (OCG) context associated with this PDFViewCtrl
</summary>
            <returns>the Optional Content Group (OCG) context associated with this PDFViewCtrl, or NULL (i.e. context.IsValid()==false) if there is no OCG context associated with the view. If an OCG context associated with the view, optional content, such as PDF layers will be selectively rendered based on the states of optional content groups in the given context.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetOCGContext(pdftron.PDF.OCG.Context)">
            <summary>Sets the Optional Content Group (OCG) context that should be used when viewing the document.
This function can be used to change the current OCG context. Optional content, such as PDF layers will be selectively rendered based on the states of optional content groups in the given context.
</summary>
            <param name="ctx">Optional Content Group (OCG) context, or NULL if the rasterizer should render all content on the page.
</param>
            <remarks>Unlike PDFDraw.SetOCGContext() this method copies the given context. As a result, in order to modify the state of OCG groups in the current context use GetOCGContext() to obtain the currently selected content and then modify states.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetOverprint(pdftron.PDF.PDFRasterizer.OverprintPreviewMode)">
            <summary>Enable or disable support for overprint. Overprint is a device dependent feature and the results will vary depending on the output color space and supported colorants (i.e. CMYK, CMYK+spot, RGB, etc). By default overprint is enabled for only PDF/X files.
</summary>
            <param name="op">e_op_on: always enabled; e_op_off: always disabled; e_op_pdfx_on: enabled for PDF/X files only.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetGamma(System.Double)">
            <summary>Sets the gamma factor used for anti-aliased rendering. Gamma correction can be used to improve the quality of anti-aliased image output and can (to some extent) decrease the appearance common anti-aliasing artifacts (such as pixel width lines between polygons).
</summary>
            <param name="exp">exponent value of gamma function. Typical values are in the range from 0.1 to 3.
</param>
            <remarks>Gamma correction is used only in the built-in rasterizer.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetThinLineAdjustment(System.Boolean,System.Boolean)">
            <summary>Set thin line adjustment parameters.
</summary>
            <param name="pixel_grid_fit">if true (horizontal/vertical) thin lines will be snapped to 
integer pixel positions. This helps make thin lines look sharper and clearer. This
option is turned off by default and it only works if path hinting is enabled.
</param>
            <param name="stroke_adjust">if true auto stroke adjustment is enabled. Currently, this would 
make lines with sub-pixel width to be one-pixel wide. This option is turned on by default.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetPathHinting(System.Boolean)">
            <summary>Enable or disable path hinting. Path hinting is used to slightly adjust paths in order to avoid or alleviate artifacts of hair line cracks between
certain graphical elements. This option is turned on by default.
</summary>
            <param name="enable_ph">whether to enable path hinting.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetAntiAliasing(System.Boolean)">
            <summary>Enable or disable anti-aliasing. 
Anti-Aliasing is a technique used to improve the visual quality of images when displaying them on low resolution devices (for example, low DPI computer monitors).			
</summary>
            <param name="enable_aa">whether to enable Anti-aliasing
</param>
            <remarks>Anti-aliasing is enabled by default.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetRasterizerType(pdftron.PDF.PDFRasterizer.Type)">
            <summary>Sets the core graphics library used for rasterization and rendering. Using this method it is possible to quickly switch between different implementations. By default, PDFNet uses a built-in, high-quality, and platform independent rasterizer.
</summary>
            <param name="type">Rasterizer type.
</param>
            <remarks>This method is deprecated, since the GDI+ rasterizer itself is deprecated and will be removed in a future version of PDFNet. 
It is strongly recommended to use the built-in rasterizer and to use the XPS print path where vector conversion is needed.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ShowRect(System.Int32,pdftron.PDF.Rect)">
            <summary>Changes the viewing area to fit a rectangle rect on page page_num. Rectangle must be specified in page coordinates. This will adjust current page and zoom appropriately.
</summary>
            <param name="page_num">given page number
</param>
            <param name="rect">rectangle specifies the region to show in view
</param>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetCurrentPage(System.Int32)">
            <summary>Sets the current page to the given page.
</summary>
            <param name="page_num">new page number
</param>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GotoPreviousPage">
            <summary>Sets the current page to the previous page in the document.
</summary>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GotoNextPage">
            <summary>Sets the current page to the next page in the document.
</summary>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GotoLastPage">
            <summary>Sets the current page to the last page in the document.
</summary>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GotoFirstPage">
            <summary>Sets the current page to the first page in the document.
</summary>
            <returns>true if successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetVisiblePages">
            <summary>Gets the pages that are currently visible on the screen
</summary>
            <returns>An array of pages visible on the screen
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetPageCount">
            <summary>Gets the total number of pages in the document.
</summary>
            <returns>the total number of pages in the document.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetCurrentPage">
            <summary>Gets the current page displayed in the view.
</summary>
            <returns>the current page displayed in the view.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetVScrollPos(System.Double)">
            <summary>Sets the vertical scroll position in scrollable space.
</summary>
            <code>
Should you want to center to a location (px, py) expressed in a page space, 
you can use the following code:

	//focus 
	view.SetCurrentPage(page_num);
	view.ConvPagePtToScreenPt(px, py, page_num);
	view.SetZoom((int)px, (int)py, view.GetZoom());

	//center
	int width = view.GetBufferWidth();
	int height = view.GetBufferHeight();
	int dx = (int)(px - (double)width/2 + 0.5);
	int dy = (int)(py - (double)height/2 + 0.5);
	view.OnScroll(dx, dy);
</code>
            <param name="pos">new vertical scroll position.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetHScrollPos(System.Double)">
            <summary>Sets the horizontal scroll position in scrollable space.
</summary>
            <param name="pos">new horizontal scroll position.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetVScrollPos">
            <summary>Gets the current vertical scroll position in scrollable space.
</summary>
            <returns>Gets the current vertical scroll position.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetHScrollPos">
            <summary>Gets the current horizontal scroll position in scrollable space. 
</summary>
            <returns>the current horizontal scroll position.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetViewHeight">
            <summary>Gets the width of the main view in pixels.
</summary>
            <returns>the width of the main view in pixels.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetViewWidth">
            <summary>Gets the width of the main view in pixels.
</summary>
            <returns>the width of the main view in pixels.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetCanvasHeight">
            <summary>Gets the height of the scrollable space.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetCanvasWidth">
            <summary>Gets the width of the scrollable space.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ShowMenuBar(System.Boolean)">
            <summary>Enables or disables the menu bar that gives access to the PDFViewCtrl user functions.
</summary>
            <param name="show">if true the menu bar will be enabled.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ShowNavToolbar(System.Boolean)">
            <summary>Enables or disables the toolbar controlling the navigation panel.
</summary>
            <param name="show">if true the navigation toolbar will be enabled.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ShowStatusBar(System.Boolean)">
            <summary>Enables or disables the status bar at the bottom of the viewing area.
</summary>
            <param name="show">	if true the status bar will be enabled.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ShowToolbar(System.Boolean)">
            <summary>Enables or disables the toolbar on top of the viewing area.
</summary>
            <param name="show">	if true the toolbar will be enabled.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.EnableScrollbar(System.Boolean)">
            <summary>Enables or disables the scrollbar in the viewing area.
</summary>
            <param name="show">	if true the scrollbar will be enabled.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.IsNavPanelVisible">
            <summary>Checks if navigation panel is visible
</summary>
            <returns>true if navigation panel is visible
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.ShowNavPanel(System.Boolean)">
            <summary>Enables or disables the navigation panel.
</summary>
            <param name="show">if true the navigation panel will be enabled
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetProgressiveRendering(System.Boolean)">
            <summary>Sets whether the control will render progressively or will just draw once the entire view has been rendered.
Progressive rendering is useful when a PDF page contain lots of elements 
(e.g. many vector paths, text, or many little images). When progressive rendering 
is enabled PDFNet will use painter algorithm to draw the page. This way user may 
be able to see partially rendered page. If a page contains only a single large 
image, there would be no visible benefit from progressive rendering. 
</summary>
            <param name="is_progressive">if true the view will be rendered progressively
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetColorPostProcessMode">
            <returns>the current color post processing mode.</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetColorPostProcessMode(pdftron.PDF.PDFRasterizer.ColorPostProcessMode)">
            <summary>
Draws the page into a given memory buffer.
Set the color post processing transformation.
This transform is applied to the rasterized bitmap as the final step
in the rasterization process, and is applied directly to the resulting
bitmap (disregarding any color space information). Color post
processing only supported for RGBA output.
</summary>
            <param name="mode">mode is the specific transform to be applied.</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetPagePresentationMode">
            <summary>Gets the current page presentation mode.
</summary>
            <returns>the current page presentation mode.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetPagePresentationMode(pdftron.PDF.PDFViewCtrl.PagePresentationMode)">
            <summary>Sets the current page presentation mode.
</summary>
            <param name="mode">the new page presentation mode. The default PagePresentationMode is e_single_continuous.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetCurrentPageHandler(pdftron.PDF.PDFViewCurrentPageDelegate,System.Object)">
            <summary>Sets the callback function (i.e. a delegate) that is called whenever current page number changes. This can be used to update the current page number within GUI applications etc.
</summary>
            <param name="curr_page_proc">Callback function (or a delegate in .NET).
</param>
            <param name="data">Custom data to be passed as a second parameter to 'curr_pagenum_proc'.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetAnnotationEditPermissionHandler(pdftron.PDF.PDFViewAnnotationEditPermissionDelegate,System.Object)">
            <summary>Sets the function to be called when a user attempts to edit an annotation.
</summary>
            <param name="edit_proc">Handling callback function (or delegate in .NET)
</param>
            <param name="data">Custom data to be passed as a second parameter to 'edit_proc'.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetErrorReportHandler(pdftron.PDF.PDFViewErrorDelegate,System.Object)">
            <summary>Sets the error handling function to be called in case an error is encountered during page rendering.
</summary>
            <param name="error_proc">Error handling callback function (or delegate in .NET)
</param>
            <param name="data">Custom data to be passed as a second parameter to 'error_proc'.
</param>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.PagePresentationMode.e_facing_continuous_cover">
            <summary>Display the pages in two columns, with odd-numbered pages on the right.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.PagePresentationMode.e_facing_cover">
            <summary>Display the pages two at a time, with odd-numbered pages on the right.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.PagePresentationMode.e_facing_continuous">
            <summary>Display the pages in two columns, with odd-numbered pages on the left.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.PagePresentationMode.e_facing">
            <summary>Display the pages two at a time, with odd-numbered pages on the left.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.PagePresentationMode.e_single_continuous">
            <summary>Display the pages in one column.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.PagePresentationMode.e_single_page">
            <summary>Display one page at a time.</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewCtrl.PagePresentationMode">
            <summary> PDFViewCtrlPagePresentationMode lists common modes of presenting PDF pages. </summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetPageViewMode">
            <summary>Gets the current page viewing mode
</summary>
            <returns>the current page viewing mode
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetPageViewMode(pdftron.PDF.PDFViewCtrl.PageViewMode)">
            <summary>the new page viewing mode. The default PageView mode is e_fit_width.
</summary>
            <param name="mode">Sets the page viewing mode.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.Find">
            <summary>Creates and displays a find dialog so the user can search through the text in the control.
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.PageViewMode.e_zoom">
            <summary>Page is zoomed. The zoom factor is specified using SetZoom() function. </summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.PageViewMode.e_fit_width">
            <summary>Page zoom is automatically adjusted so that page width fits into available space. </summary>
        </member>
        <member name="F:pdftron.PDF.PDFViewCtrl.PageViewMode.e_fit_page">
            <summary>Page zoom is automatically adjusted so that entire page fits into available space. </summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewCtrl.PageViewMode">
            <summary>PageViewMode lists common modes of viewing PDF pages. </summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.DocTryLockRead(System.Int32)">
            <summary> Try acquiring a read lock on the current document, waiting no longer than
			specified number of milliseconds.
</summary>
            <returns> true if the document is locked for multi-threaded access, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.DocUnlockRead">
            <summary> Releases the read lock on the currently open document. 
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.DocLockRead">
            <summary> Locks the currently open document to prevent competing write threads 
			(using Lock()) from accessing the document at the same time. 
			Other reader threads however, will be allowed to access the document.
			Threads attempting to obtain write access to the document will wait in 
			suspended state until the thread that owns the lock calls doc.UnlockRead().
			Note: To avoid deadlocks obtaining a write lock while holding
			a read lock is not permitted and will throw an exception. If this situation is encountered
			please either unlock the read lock before the write lock is obtained
			or acquire a write lock (rather than read lock) in the first place.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.DocTryLock(System.Int32)">
            <summary> Try acquiring a write lock on the currently open document,
 			waiting no longer than specified number of milliseconds.
</summary>
            <returns> true if the document is locked for multi-threaded access, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.DocUnlock">
            <summary> Releases the write lock on the currently open document.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.DocLock(System.Boolean)">
            <summary>Acquires a write lock on the currently open document,
			optionally canceling all threads accessing the document.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.CloseDoc">
            <summary>Closes the document currently opened in PDFViewCtrl.
</summary>
            <remarks> Acquires a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.GetDoc">
            <summary>Gets Currently associated document with this PDFViewCtrl.
</summary>
            <returns>Currently associated document with this PDFViewCtrl.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetDoc(pdftron.PDF.PDFDoc)">
            <summary>Associates this PDFViewCtrl with a given PDF document.
</summary>
            <param name="doc">A document to be displayed in the view.
</param>
            <returns>true if operation is successful, false otherwise.
</returns>
            <remarks> Acquires a write lock on the document
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.SetDoc(pdftron.PDF.PDFDoc,System.String)">
            <summary>Associates this PDFViewCtrl with a given PDF document.
</summary>
            <param name="doc">A document to be displayed in the view.
</param>
            <param name="password"> the password used to initialize the document
</param>
            <returns>true if operation is successful, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.#ctor(System.Boolean)">
            <summary>
                <c>PDFViewCtrl</c> constructor </summary>
            <param name="compatibility">Indicates if PDFViewCtrl is compatible with v.5.7.0 and older. 
PDFViewCtrl shipped with PDFNet v.5.8.0 has enhanced features for better viewing experience.
If compatibility is set to true, these new features are disabled.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFViewCtrl.#ctor">
            <summary> default <c>PDFViewCtrl</c> constructor
</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewCtrl">
            <summary>
PDFViewCtrl is a utility class that can be used for interactive rendering of PDF documents.
In .NET environment PDFViewCtrl is derived from System.Windows.Forms.Control and it can be
used like a regular form (see PDFViewForm.cs in PDFView sample for C# for a concrete example).
PDFViewCtrl is a control that implements a number of tool modes, dialog boxes like
find and password, has some built-in form filling capabilities and a navigation panel for bookmarks,
thumbview and layer views.

PDFView defines several coordinate spaces and it is important to understand their differences: 

- Page Space refers to the space in which a PDF page is defined. It is determined by
a page itself and the origin is at the lower-left corner of the page. Note that Page
Space is independent of how a page is viewed in PDFView and each page has its own Page
space.

- Canvas Space refers to the tightest axis-aligned bounding box of all the pages given
the current page presentation mode in PDFView. For example, if the page presentation
mode is e_single_continuous, all the pages are arranged vertically with one page in each
row, and therefore the Canvas Space is rectangle with possibly large height value. For 
this reason, Canvas Space is also, like Page Space, independent of the zoom factor. Also
note that since PDFView adds gaps between adjacent pages, the Canvas Space is larger than
the space occupied by all the pages. The origin of the Canvas Space is located at the 
upper-left corner. 

- Screen Space (or Client Space) is the space occupied by PDFView and its origin is at
the upper-left corner. Note that the virtual size of this space can extend beyond the 
visible region.

- Scrollable Space is the virtual space within which PDFView can scroll. It is determined
by the Canvas Space and the current zoom factor. Roughly speaking, the dimensions of the 
Scrollable Space is the dimensions of the Canvas Space timed by the zoom. Therefore, a large
zoom factor will result in a larger Scrollable region given the same Canvas region. For this
reason, Scrollable Space might also be referred to as Zoomed Canvas Space. Note that since
PDFView adds gaps between pages in Canvas Space and these gaps are not scaled when rendered, 
the scrollable range is not exactly what the zoom factor times the Canvas range. For 
functions such as SetHScrollPos(), SetVScrollPos(), GetCanvasHeight(), and 
GetCanvasWidth(), it is the Scrollable Space that is involved.

</summary>
        </member>
        <member name="M:pdftron.PDF.HTTPRequestOptions.AddHeader(System.String,System.String)">
            <summary>Set a custom header to use with all requests.</summary>
            <param name="header">A custom header.</param>
            <param name="val">The value of the custom header.</param>
        </member>
        <member name="M:pdftron.PDF.HTTPRequestOptions.#ctor">
            <summary>
Create a HTTPRequestOptions object.
</summary>
        </member>
        <member name="T:pdftron.PDF.HTTPRequestOptions">
            <summary>Class for customizing network requests.</summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewThumbAsyncDelegate">
            <summary> A delegate that will be called after GetThumbAsync retrieves a thumbnail from the on-disk thumbnail cache. </summary>
            <param name="page_num">The page number of the thumbnail.</param>
            <param name="was_thumb_found">A boolean value which is true if the thumbnail could be retrieved from the persistent cache, and false otherwise.</param>
            <param name="thumb_buf">A pointer to the thumbnail image.  This buffer's size, in bytes, is equal to thumb_width * thumb_height * 4.</param>
            <param name="thumb_width">The width, in pixels, of the thumbnail image.</param>
            <param name="thumb_height">The height, in pixels, of the thumbnail image.</param>
            <param name="custom_data">Custom data passed into GetThumbAsync.</param>
        </member>
        <member name="T:pdftron.PDF.PDFViewDownloadDelegate">
            <summary> Download event handling. A delegate that is called during download events triggered by calling OpenURLAsync. </summary>
        </member>
        <member name="T:pdftron.PDF.PDFViewCurrentPageDelegate">
            <summary> A prototype for a delegate that will be called whenever current page number changes. </summary>
            <param name="current_page"> the current page </param>
            <param name="num_pages"> total number of pages in the document </param>
            <param name="obj" />
        </member>
        <member name="T:pdftron.PDF.PDFViewErrorDelegate">
            <summary> Sets the error handling function to be called in case an error is encountered during page rendering. </summary>
            <param name="message" />
            <param name="obj" />
        </member>
        <member name="T:pdftron.PDF.DownloadedType">
            <summary>DownloadedType lists the events triggered by calling OpenURLAsync.</summary>
        </member>
        <member name="F:pdftron.PDF.DownloadedType.e_opened">
            <summary>The initial document information is available and it is now ok to query for document information.</summary>
        </member>
        <member name="F:pdftron.PDF.DownloadedType.e_failed">
            <summary>An error has occurred while downloading and downloading has stopped.</summary>
        </member>
        <member name="F:pdftron.PDF.DownloadedType.e_finished">
            <summary>The entire document has been downloaded.</summary>
        </member>
        <member name="F:pdftron.PDF.DownloadedType.e_outline">
            <summary>The document outline (bookmarks) has been downloaded.</summary>
        </member>
        <member name="F:pdftron.PDF.DownloadedType.e_named_dests">
            <summary>The named destinations have been downloaded. These may be necessary for link activation.</summary>
        </member>
        <member name="F:pdftron.PDF.DownloadedType.e_thumb">
            <summary>A thumbnail has been downloaded.</summary>
        </member>
        <member name="F:pdftron.PDF.DownloadedType.e_page">
            <summary>A new page has been downloaded.</summary>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.Dispose">
            <summary> Releases all resources used by the PDFDraw </summary>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.DrawInRect(pdftron.PDF.Page,System.Drawing.Graphics,pdftron.PDF.Rect)">
            <summary> Draws the contents of the page to a given Graphics object.

</summary>
            <param name="page">The source PDF page.
</param>
            <param name="gr">Device context
</param>
            <param name="rect">The rectangle in the device context inside of which the page will be drawn.
</param>
            <remarks>this method is only supported on Windows platforms. If your application is running on a Windows platform, you can select GDI+ rasterizer with SetRasterizerType() and e_GDIPlus type.
</remarks>
            <remarks>This method is deprecated, since the GDI+ rasterizer itself is deprecated and will be removed in a future version of PDFNet. It is recommended to use the built-in rasterizer
via GetBitmap or equivalent methods or utilize the XPS print path through Convert::ToXps or Print::StartPrintJob instead. Convert::ToXps or Print::StartPrintJob instead.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.DrawInRect(pdftron.PDF.Page,System.IntPtr,pdftron.PDF.Rect)">
            <summary> Draws the contents of the page to a given Graphics object.

</summary>
            <param name="page">The source PDF page.
</param>
            <param name="dc">Device context (i.e. HDC structure).
</param>
            <param name="rect">The rectangle in the device context inside of which the page will be drawn.
</param>
            <remarks>this method is only supported on Windows platforms. If your application is running on a Windows 
platform, you can select GDI+ rasterizer with SetRasterizerType() and e_GDIPlus type.
</remarks>
            <remarks>This method is deprecated, since the GDI+ rasterizer itself is deprecated and will be removed in a future version of PDFNet. It is recommended to use the built-in rasterizer
via GetBitmap or equivalent methods or utilize the XPS print path through Convert::ToXps or Print::StartPrintJob instead. Convert::ToXps or Print::StartPrintJob instead.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.GetBitmapSource(pdftron.PDF.Page)">
            <summary> Gets the bitmap. (WPF BitmapSource)

</summary>
            <param name="page">the page
</param>
            <returns> the bitmap (WPF BitmapSource)
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.GetSeparationBitmaps(pdftron.PDF.Page)">
            <summary> Gets the Separations from the page

</summary>
            <param name="page">the page
</param>
            <returns> Separations array
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.GetBitmap(pdftron.PDF.Page)">
            <summary> Gets the bitmap.

</summary>
            <param name="page">the page
</param>
            <returns> the bitmap
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.GetBitmap(System.Byte*,System.Int32,System.Int32,System.Int32,System.Double,System.Drawing.Imaging.PixelFormat)">
            <summary> Gets the bitmap.

</summary>
            <param name="buf">An unmanaged buffer of image data
</param>
            <param name="width">Width of buf
</param>
            <param name="height">Height of buf
</param>
            <param name="stride">Stride of buf
</param>
            <param name="dpi">Resolution of buf
</param>
            <param name="pixfmt">Pixel format of buf
</param>
            <returns> the bitmap
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.Export(pdftron.PDF.Page,System.String)">
            <summary> A utility method to export the given PDF page to an image file.

</summary>
            <param name="page">The source PDF page.
</param>
            <param name="filename">- The name of the output image file. The filename should include
the extension suffix (e.g. 'c:/output/myimage.png').
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>By default, the function exports to PNG.. The file format of the output image. Currently supported formats are:
<list type="bullet"><item>"RAW"<description> RAW format. There are four possibilities: 
						 e_rgba - if transparent and color page;
						 e_gray_alpha - if transparent and gray page;
			    		 e_rgb - if opaque and color page;
						 e_gray - if opaque and gray page.</description></item><item>"BMP"<description> Bitmap image format (BMP)</description></item><item>"JPEG"<description> Joint Photographic Experts Group (JPEG) image format</description></item><item>"PNG"<description> 24-bit W3C Portable Network Graphics (PNG) image format</description></item><item>"PNG8"<description> 8-bit, palettized PNG format. The exported file size should be
smaller than the one generated using "PNG", possibly at the
expense of some image quality.</description></item><item>"TIFF"<description> Tag Image File Format (TIFF) image format.</description></item><item>"TIFF8"<description> Tag Image File Format (TIFF) image format (with 8-bit pallete).</description></item></list></remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.Export(pdftron.PDF.Page,System.String,System.String)">
            <summary> Export.

</summary>
            <param name="page">the page
</param>
            <param name="filename">the filename
</param>
            <param name="format">the format
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.Export(pdftron.PDF.Page,System.String,System.String,pdftron.SDF.Obj)">
            <summary> Export.

</summary>
            <param name="page">the page
</param>
            <param name="filename">the filename
</param>
            <param name="format">the format
</param>
            <param name="encoder_hints">the encoder_params
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetColorPostProcessMode(pdftron.PDF.PDFRasterizer.ColorPostProcessMode)">
            <summary>
Draws the page into a given memory buffer.
Set the color post processing transformation.
This transform is applied to the rasterized bitmap as the final step
in the rasterization process, and is applied directly to the resulting
bitmap (disregarding any color space information). Color post
processing only supported for RGBA output.
</summary>
            <param name="mode">mode is the specific transform to be applied.</param>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetCaching(System.Boolean)">
            <summary> Sets the caching.

</summary>
            <param name="enabled">the new caching
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetImageSmoothing(System.Boolean,System.Boolean)">
            <summary> Enable or disable image smoothing.			
The rasterizer allows a tradeoff between rendering quality and rendering speed.
This function can be used to indicate the preference between rendering speed and quality. image smoothing is enabled by default.
</summary>
            <param name="smoothing_enabled">whether to enable image smoothing
</param>
            <param name="hq_image_resampling">whether to use a higher quality (but slower) smoothing algorithm
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  image smoothing option has effect only if the source image has higher resolution 
that the output resolution of the image on the rasterized page. PDFNet automatically
controls at what resolution/zoom factor, 'image smoothing' needs to take effect.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetThinLineAdjustment(System.Boolean,System.Boolean)">
            <summary>Set thin line adjustment parameters.
</summary>
            <param name="pixel_grid_fit">if true (horizontal/vertical) thin lines will be snapped to 
integer pixel positions. This helps make thin lines look sharper and clearer. This
option is turned off by default and it only works if path hinting is enabled.
</param>
            <param name="stroke_adjust">if true auto stroke adjustment is enabled. Currently, this would 
make lines with sub-pixel width to be one-pixel wide. This option is turned on by default.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetPathHinting(System.Boolean)">
            <summary>Enable or disable path hinting. Path hinting is used to slightly adjust paths in order to avoid or alleviate artifacts of hair line cracks between
certain graphical elements. This option is turned on by default.
</summary>
            <param name="enable_ph">whether to enable path hinting.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetAntiAliasing(System.Boolean)">
            <summary>Enable or disable anti-aliasing. Anti-Aliasing is a technique used to improve the visual quality of images 
when displaying them on low resolution devices (for example, low DPI computer monitors). 
Anti-aliasing is enabled by default.
</summary>
            <param name="enable_aa">whether to enable anti-aliasing
</param>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetOverprint(pdftron.PDF.PDFRasterizer.OverprintPreviewMode)">
            <summary>Enable or disable support for overprint. Overprint is a device dependent feature and the results will vary depending on the output color space and supported colorants (i.e. CMYK, CMYK+spot, RGB, etc). By default overprint is enabled for only PDF/X files.
</summary>
            <param name="op">e_op_on: always enabled; e_op_off: always disabled; e_op_pdfx_on: enabled for PDF/X files only.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetDefaultPageColor(System.Drawing.Color)">
            <summary>Sets the default color of the page backdrop.
</summary>
            <param name="c">The color (RGB) to set.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetPageTransparent(System.Boolean)">
            <summary>Sets the page color to transparent. By default, PDFDraw assumes that the page is imposed directly on an opaque white surface. Some applications may need to impose the page on a different backdrop. In this case any pixels that are not covered during rendering will be transparent.
</summary>
            <param name="is_transp">If true, page's backdrop color will be transparent. If false, the page's backdrop will be a opaque white.
</param>
            <remarks>If true, page's backdrop color will be transparent. If false, the page's backdrop will be a opaque white.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetPrintMode(System.Boolean)">
            <summary>Tells the rasterizer to render the page 'print' mode.
Certain page elements (such as annotations or OCG-s) are meant to be visible either on the screen or on the printed paper but not both. A common example, is the "Submit" button on electronic forms.
</summary>
            <param name="is_printing">set to true if the page should be rendered in print mode. By default, print mode flag is set to false.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetOCGContext(pdftron.PDF.OCG.Context)">
            <summary>Sets the Optional Content Group (OCG) context that should be used when rendering the page.
This function can be used to selectively render optional content (such as PDF layers) based on the states of optional content groups in the given context.
</summary>
            <param name="ctx">Optional Content Group (OCG) context, or NULL if the rasterizer should render all content on the page.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetGamma(System.Double)">
            <summary>Sets the gamma factor used for anti-aliased rendering.
</summary>
            <param name="exp">exponent value of gamma function. Typical values are in the range from 0.1 to 3.
</param>
            <remarks>Gamma correction can be used to improve the quality of anti-aliased image output and can (to some extent) decrease the appearance common anti-aliasing artifacts (such as pixel width lines between polygons).
Gamma correction is used only in the built-in rasterizer.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetHighlightFields(System.Boolean)">
            <summary>Enable or disable highlighting form fields. Default is disabled.
</summary>
            <param name="highlight_fields">true to highlight, false otherwise. 
</param>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetDrawAnnotations(System.Boolean)">
            <summary>Enable or disable annotation and forms rendering. By default, all annotations and form fields are rendered.
</summary>
            <param name="render_annots">True to draw annotations, false otherwise.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetRotate(pdftron.PDF.Page.Rotate)">
            <summary> Sets the rotation value for this page.

</summary>
            <param name="r">the new rotate
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This method is used only for drawing purposes and it does not modify
the document (unlike Page::SetRotate()).</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetFlipYAxis(System.Boolean)">
            <summary> Flips the vertical (i.e. Y) axis of the image.

</summary>
            <param name="flip_y">true to flip the Y axis, false otherwise. For compatibility with
most raster formats 'flip_y' is true by default.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetClipRect(pdftron.PDF.Rect)">
            <summary> Clip the render region to the provided rect (in page space)

</summary>
            <param name="clip_rect">Clipping rect. By default, PDFDraw will rasterize 
the entire page box.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetPageBox(pdftron.PDF.Page.Box)">
            <summary> Selects the page box/region to rasterize.

</summary>
            <param name="region">Page box to rasterize. By default, PDFDraw will rasterize
page crop box.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetImageSize(System.Int32,System.Int32)">
            <summary> SetImageSize can be used instead of SetDPI() to adjust page  scaling so that
image fits into a buffer of given dimensions.

If this function is used, DPI will be calculated dynamically for each
page so that every page fits into the buffer of given dimensions.

</summary>
            <param name="width">- The width of the image, in pixels/samples.
</param>
            <param name="height">- The height of the image, in pixels/samples.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetImageSize(System.Int32,System.Int32,System.Boolean)">
            <summary> Sets the image size.

</summary>
            <param name="width">the width
</param>
            <param name="height">the height
</param>
            <param name="preserve_aspect_ratio">the preserve_aspect_ratio
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetDPI(System.Double)">
            <summary> Sets the output image resolution.

DPI stands for Dots Per Inch. This parameter is used to specify the output
image size and quality. A typical screen resolution for monitors these days is
92 DPI, but printers could use 200 DPI or more.

</summary>
            <param name="dpi">the new dPI
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>
                <para>The size of resulting image is a function of DPI and the dimensions of 
the source PDF page. For example, is DPI is 92 and page is 8 inches wide, the
output bitmap will have 92*8 = 736 pixels per line. If you know the dimensions
of the destination bitmap, but don't care about DPI of the image you can use
pdfdraw.SetImageSize() instead.
</para>
                <para>
if you would like to rasterize extremely large bitmaps (e.g. with
resolutions of 2000 DPI or more) it is not practical to use PDFDraw directly
because of the memory required to store the entire image. In this case, you
can use PDFRasterizer directly to generate the rasterized image in stripes or
tiles.
</para>
            </remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.SetRasterizerType(pdftron.PDF.PDFRasterizer.Type)">
            <summary> Sets the core graphics library used for rasterization and
rendering. Using this method it is possible to quickly switch
between different implementations. By default, PDFDraw uses
the built-in, platform independent rasterizer.

</summary>
            <param name="type">Rasterizer type.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>This method is deprecated, since the GDI+ rasterizer itself is deprecated and will be removed in a future version of PDFNet. 
It is strongly recommended to use the default built-in rasterizer and to use the XPS print path where vector conversion is needed.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.#ctor(System.Double)">
            <summary> Instantiates a new pDF draw.

</summary>
            <param name="dpi">the dpi
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDraw.#ctor">
            <summary> PDFDraw constructor and destructor.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
copy data from trn::Separation to Separation
</member>
        <member name="T:pdftron.PDF.PDFDraw">
            <summary> PDFDraw contains methods for converting PDF pages to images and to Bitmap objects.
Utility methods are provided to export PDF pages to various raster formats as well 
as to convert pages to GDI+ bitmaps for further manipulation or drawing.

</summary>
            <remarks>  This class is available on all platforms supported by PDFNet.  </remarks>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.Dispose">
            <summary>
Releases all resources used by the PDFRasterizer.
</summary>
        </member>
        <member name="P:pdftron.PDF.PDFRasterizer.Cancel">
            <summary>Gets or sets whether rasterization should be cancelled.</summary>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.CancelRendering">
            <summary>Cancel the rendering in progress.</summary>
            <remarks>
In order to start rendering again, set the property Cancel to false
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.RasterizeSeparations(pdftron.PDF.Page,System.Int32,System.Int32,pdftron.Common.Matrix2D,pdftron.PDF.Rect,System.Boolean)">
            <summary>
Draws the page into a given memory buffer (Separation)
</summary>
            <param name="page">The page to rasterize.</param>
            <param name="width">The width of the target image in pixels.</param>
            <param name="height">The height of the target image in pixels (the number of rows).</param>
            <param name="device_mtx">Device transformation matrix that maps PDF page from PDF user space into device coordinate space (e.g. pixel space). PDF user space is represented in page units, where one unit corresponds to 1/72 of an inch.</param>
            <param name="clip"> Optional parameter defining the clip region for the page. If the parameter is null or is not specified, PDFRasterizer uses page's crop box as a default clip region.</param>
            <param name="cancel">An optional variable that can be used to stop the rendering thread.</param>
            <returns>The output memory buffer.</returns>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.Rasterize(pdftron.PDF.Page,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,pdftron.Common.Matrix2D)">
            <summary>
Draws the page into a given memory buffer.
</summary>
            <param name="page">The page to rasterize.</param>
            <param name="width">The width of the target image in pixels.</param>
            <param name="height">The height of the target image in pixels (the number of rows).</param>
            <param name="stride">Stride determines the physical width (in bytes) of one row in memory. If this value is negative the direction of the Y axis is inverted. The absolute value of stride is of importance, because it allows rendering in buffers where rows are padded in memory (e.g. in Windows bitmaps are padded on 4 byte boundaries). Besides allowing rendering on the whole buffer stride parameter can be used for rendering in a rectangular subset of a buffer.</param>
            <param name="num_comps">The number (4 or 5) representing the number of color components in the device color space. For BGR+Alpha set this parameter to 4, and for CMYK+Alpha use 5. If other values are set, exceptions will be thrown.</param>
            <param name="demult">Specifies if the alpha is de-multiplied from the resulting color components.</param>
            <param name="device_mtx">Device transformation matrix that maps PDF page from PDF user space into device coordinate space (e.g. pixel space). PDF user space is represented in page units, where one unit corresponds to 1/72 of an inch.</param>
            <returns>The output memory buffer.</returns>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.Rasterize(pdftron.PDF.Page,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,pdftron.Common.Matrix2D,pdftron.PDF.Rect)">
            <summary>
Draws the page into a given memory buffer.
</summary>
            <param name="page">The page to rasterize.</param>
            <param name="width">The width of the target image in pixels.</param>
            <param name="height">The height of the target image in pixels (the number of rows).</param>
            <param name="stride">Stride determines the physical width (in bytes) of one row in memory. If this value is negative the direction of the Y axis is inverted. The absolute value of stride is of importance, because it allows rendering in buffers where rows are padded in memory (e.g. in Windows bitmaps are padded on 4 byte boundaries). Besides allowing rendering on the whole buffer stride parameter can be used for rendering in a rectangular subset of a buffer.</param>
            <param name="num_comps">The number (4 or 5) representing the number of color components in the device color space. For BGR+Alpha set this parameter to 4, and for CMYK+Alpha use 5. If other values are set, exceptions will be thrown.</param>
            <param name="demult">Specifies if the alpha is de-multiplied from the resulting color components.</param>
            <param name="device_mtx">Device transformation matrix that maps PDF page from PDF user space into device coordinate space (e.g. pixel space). PDF user space is represented in page units, where one unit corresponds to 1/72 of an inch.</param>
            <param name="clip">Defines the clip region for the page. If the parameter is null or is not specified, PDFRasterizer uses page's crop box as a default clip region.</param>
            <returns>The output memory buffer.</returns>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.Rasterize(pdftron.PDF.Page,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,pdftron.Common.Matrix2D)">
            <summary>
Draws the page into a given memory buffer.
</summary>
            <param name="page">The page to rasterize.</param>
            <param name="out_image_buffer">The output memory buffer. The buffer must contain at least (stride * height) bytes.</param>
            <param name="width">The width of the target image in pixels.</param>
            <param name="height">The height of the target image in pixels (the number of rows).</param>
            <param name="stride">Stride determines the physical width (in bytes) of one row in memory. If this value is negative the direction of the Y axis is inverted. The absolute value of stride is of importance, because it allows rendering in buffers where rows are padded in memory (e.g. in Windows bitmaps are padded on 4 byte boundaries). Besides allowing rendering on the whole buffer stride parameter can be used for rendering in a rectangular subset of a buffer.</param>
            <param name="num_comps">The number (4 or 5) representing the number of color components in the device color space. For BGR+Alpha set this parameter to 4, and for CMYK+Alpha use 5. If other values are set, exceptions will be thrown.</param>
            <param name="demult">Specifies if the alpha is de-multiplied from the resulting color components.</param>
            <param name="device_mtx">Device transformation matrix that maps PDF page from PDF user space into device coordinate space (e.g. pixel space). PDF user space is represented in page units, where one unit corresponds to 1/72 of an inch.</param>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.Rasterize(pdftron.PDF.Page,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,pdftron.Common.Matrix2D,pdftron.PDF.Rect)">
            <summary>
Draws the page into a given memory buffer.
</summary>
            <param name="page">The page to rasterize.</param>
            <param name="out_image_buffer">The output memory buffer. The buffer must contain at least (stride * height) bytes.</param>
            <param name="width">The width of the target image in pixels.</param>
            <param name="height">The height of the target image in pixels (the number of rows).</param>
            <param name="stride">Stride determines the physical width (in bytes) of one row in memory. If this value is negative the direction of the Y axis is inverted. The absolute value of stride is of importance, because it allows rendering in buffers where rows are padded in memory (e.g. in Windows bitmaps are padded on 4 byte boundaries). Besides allowing rendering on the whole buffer stride parameter can be used for rendering in a rectangular subset of a buffer.</param>
            <param name="num_comps">The number (4 or 5) representing the number of color components in the device color space. For BGR+Alpha set this parameter to 4, and for CMYK+Alpha use 5. If other values are set, exceptions will be thrown.</param>
            <param name="demult">Specifies if the alpha is de-multiplied from the resulting color components.</param>
            <param name="device_mtx">Device transformation matrix that maps PDF page from PDF user space into device coordinate space (e.g. pixel space). PDF user space is represented in page units, where one unit corresponds to 1/72 of an inch.</param>
            <param name="clip">Defines the clip region for the page. If the parameter is null or is not specified, PDFRasterizer uses page's crop box as a default clip region.</param>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.GetColorPostProcessMode">
            <returns>the current color post processing mode.</returns>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.SetColorPostProcessMode(pdftron.PDF.PDFRasterizer.ColorPostProcessMode)">
            <summary>
Draws the page into a given memory buffer.
Set the color post processing transformation.
This transform is applied to the rasterized bitmap as the final step
in the rasterization process, and is applied directly to the resulting
bitmap (disregarding any color space information). Color post
processing only supported for RGBA output.
</summary>
            <param name="mode">mode is the specific transform to be applied.</param>
        </member>
        <member name="T:pdftron.PDF.PDFRasterizer.ColorPostProcessMode">
            <summary>ColorPostProcessMode is used to modify colors after rendering.</summary>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.SetCaching(System.Boolean)">
            <summary> Sets the caching.

</summary>
            <param name="enabled">the new caching
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.SetOverprint(pdftron.PDF.PDFRasterizer.OverprintPreviewMode)">
            <summary>Enable or disable support for overprint. Overprint is a device dependent feature and the results will vary depending on the output color space and supported colorants (i.e. CMYK, CMYK+spot, RGB, etc). By default overprint is enabled for only PDF/X files.
</summary>
            <param name="op">e_op_on: always enabled; e_op_off: always disabled; e_op_pdfx_on: enabled for PDF/X files only.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.SetImageSmoothing(System.Boolean,System.Boolean)">
            <summary> Enable or disable image smoothing.			
The rasterizer allows a tradeoff between rendering quality and rendering speed.
This function can be used to indicate the preference between rendering speed and quality.image smoothing is enabled by default.
</summary>
            <param name="smoothing_enabled">whether to enable image smoothing
</param>
            <param name="hq_image_resampling">whether to use a higher quality (but slower) smoothing algorithm
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  image smoothing option has effect only if the source image has higher resolution 
that the output resolution of the image on the rasterized page. PDFNet automatically
controls at what resolution/zoom factor, 'image smoothing' needs to take effect.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.SetThinLineAdjustment(System.Boolean,System.Boolean)">
            <summary>Set thin line adjustment parameters.
</summary>
            <param name="pixel_grid_fit">if true (horizontal/vertical) thin lines will be snapped to 
integer pixel positions. This helps make thin lines look sharper and clearer. This
option is turned off by default and it only works if path hinting is enabled.
</param>
            <param name="stroke_adjust">if true auto stroke adjustment is enabled. Currently, this would 
make lines with sub-pixel width to be one-pixel wide. This option is turned on by default.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.SetPathHinting(System.Boolean)">
            <summary>Enable or disable path hinting. Path hinting is used to slightly adjust paths in order to avoid or alleviate artifacts of hair line cracks between
certain graphical elements. This option is turned on by default.
</summary>
            <param name="enable_ph">whether to enable path hinting.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.SetAntiAliasing(System.Boolean)">
            <summary>Enable or disable anti-aliasing. Anti-Aliasing is a technique used to improve the visual quality of images 
when displaying them on low resolution devices (for example, low DPI computer monitors). Anti-aliasing is 
enabled by default.
</summary>
            <param name="enable_aa">true to enable anti-aliasing.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.SetPrintMode(System.Boolean)">
            <summary>Tells the rasterizer to render the page 'print' mode. 
Certain page elements (such as annotations or OCG-s) are meant to be visible either on the 
screen or on the printed paper but not both. A common example, is the "Submit" button on electronic forms.
</summary>
            <param name="is_printing">set to true is the page should be rendered in print mode. By default, print mode flag is set to false.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.SetOCGContext(pdftron.PDF.OCG.Context)">
            <summary>Sets the Optional Content Group (OCG) context that should be used when rendering the page. 
This function can be used to selectively render optional content (such as PDF layers) based on the 
states of optional content groups in the given context.
</summary>
            <param name="ctx">Optional Content Group (OCG) context, or NULL if the rasterizer should render all content on the page.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.SetGamma(System.Double)">
            <summary>Sets the gamma factor used for anti-aliased rendering.
</summary>
            <param name="exp">exponent value of gamma function. Typical values are in the range from 0.1 to 3.
</param>
            <remarks>Gamma correction can be used to improve the quality of anti-aliased image output and 
can (to some extent) decrease the appearance common anti-aliasing artifacts (such as pixel width lines between polygons).
Gamma correction is used only in the built-in rasterizer.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.SetHighlightFields(System.Boolean)">
            <summary>Enable or disable highlighting form fields. Default is disabled.
</summary>
            <param name="highlight_fields">true to highlight, false otherwise. 
</param>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.SetDrawAnnotations(System.Boolean)">
            <summary>Enable or disable annotation and forms rendering. By default, annotations and forms are rendered.
</summary>
            <param name="render_annots">True to draw annotations, false otherwise.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.GetRasterizerType">
            <summary>Gets the type of current rasterizer.
</summary>
            <returns>the type of current rasterizer.
</returns>
            <remarks>This method is deprecated, since the GDI+ rasterizer itself is deprecated and will be removed in a future version of PDFNet. 
It is strongly recommended to use the built-in rasterizer and to use the XPS print path where vector conversion is needed.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.SetRasterizerType(pdftron.PDF.PDFRasterizer.Type)">
            <summary>Sets rasterizer to the specified type
</summary>
            <param name="type">PDFRasterizer type
</param>
            <remarks>This method is deprecated, since the GDI+ rasterizer itself is deprecated and will be removed in a future version of PDFNet. 
It is strongly recommended to use the built-in rasterizer and to use the XPS print path where vector conversion is needed.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.#ctor(pdftron.PDF.PDFRasterizer.Type)">
            <summary>instantiates <c>PDFRasterizer</c> with specified type
</summary>
            <param name="type">PDFRasterizer type
</param>
        </member>
        <member name="M:pdftron.PDF.PDFRasterizer.#ctor">
            <summary>empty <c>PDFRasterizer</c> constructor
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFRasterizer.OverprintPreviewMode.e_op_pdfx_on">
            <summary>overprint is on only for PDF/X files.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFRasterizer.OverprintPreviewMode.e_op_on">
            <summary>overprint is always on.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFRasterizer.OverprintPreviewMode.e_op_off">
            <summary>overprint is always off.</summary>
        </member>
        <member name="T:pdftron.PDF.PDFRasterizer.OverprintPreviewMode">
            <summary>Determines if overprint is used.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFRasterizer.Type.e_GDIPlus">
            <summary>GDI+ based rasterizer.(Deprecated)</summary>
        </member>
        <member name="F:pdftron.PDF.PDFRasterizer.Type.e_BuiltIn">
            <summary>high-quality, platform independent rasterizer.</summary>
        </member>
        <member name="T:pdftron.PDF.PDFRasterizer.Type">
            <summary>PDFNet includes two separate rasterizer implementations utilizing different graphics libraries.
The default rasterizer is 'e_BuiltIn' which is a high-quality, anti-aliased and platform independent rasterizer. 
This rasterizer is available on all supported platforms.
On Windows platforms, PDFNet also includes GDI+ based rasterizer.
(deprecated and will be removed in a future version of PDFNet)
This rasterizer is included mainly to provide vector output for printing, for EMF/WMF export, etc. 
For plain image rasterization we recommend using the built-in rasterizer.
</summary>
        </member>
        <member name="T:pdftron.PDF.PDFRasterizer">
            <summary> PDFRasterizer is a low-level PDF rasterizer.
The main purpose of this class is to convert PDF pages to raster images (or bitmaps).
PDFRasterizer is a relatively low-level class. If you need to convert PDF page to an image format or a Bitmap, 
consider using PDF::PDFDraw. Similarly, if you are building an interactive PDF viewing application 
use PDF::PDFViewCtrl instead.
</summary>
        </member>
        <member name="M:pdftron.PDF.Separation.K">
            <summary>Gets Black component value in CMYK
</summary>
            <returns>Black's value
</returns>
        </member>
        <member name="M:pdftron.PDF.Separation.Y">
            <summary>Gets Yellow component value in CMYK
</summary>
            <returns>Yellow's value
</returns>
        </member>
        <member name="M:pdftron.PDF.Separation.M">
            <summary>Gets Magenta component value in CMYK
</summary>
            <returns>Magenta's value
</returns>
        </member>
        <member name="M:pdftron.PDF.Separation.C">
            <summary>Gets Cyan component value in CMYK
</summary>
            <returns>Cyan's value
</returns>
        </member>
        <member name="M:pdftron.PDF.Separation.GetData">
            <summary>Gets data buffer
</summary>
            <returns>Data buffer array
</returns>
        </member>
        <member name="M:pdftron.PDF.Separation.GetSeparationName">
            <summary>Gets separation's name
</summary>
            <returns> String containing separation's name
</returns>
        </member>
        <member name="M:pdftron.PDF.Separation.GetDataSize">
            <summary>Gets data size of the buffer
</summary>
            <returns>Data size
</returns>
        </member>
        <member name="M:pdftron.PDF.Separation.op_Assign(pdftron.PDF.Separation!System.Runtime.CompilerServices.IsConst)">
            <summary>operator=
</summary>
        </member>
        <member name="M:pdftron.PDF.Separation.#ctor(pdftron.PDF.Separation!System.Runtime.CompilerServices.IsConst)">
            <summary>copy constructor
</summary>
        </member>
        <member name="M:pdftron.PDF.Separation.Dispose">
            <summary>default destructor
</summary>
        </member>
        <member name="M:pdftron.PDF.Separation.#ctor">
            <summary> default constructor
</summary>
        </member>
        <member name="T:pdftron.PDF.Separation">
            <summary> Separation contains a memory buffer and CMYK components' information about rasterized separations used in PDFDraw::GetSeparationBitmaps and PDFRasterizer::RasterizeSeparations 
</summary>
            <remarks>  This class is available on all platforms supported by PDFNet.  </remarks>
        </member>
        <member name="M:pdftron.PDF.TextSearch.SetOCGContext(pdftron.PDF.OCG.Context)">
            <summary>Sets the Optional Content Group (OCG) context that should be used when rendering the page. 
This function can be used to selectively render optional content (such as PDF layers) based on the 
states of optional content groups in the given context.
</summary>
            <param name="ctx">Optional Content Group (OCG) context, or NULL if the TextSearch should render all content on the page.
</param>
        </member>
        <member name="M:pdftron.PDF.TextSearch.GetCurrentPage">
            <summary> Retrieve the number of the current page that is searched in.
If the returned value is -1, it indicates the search process has not been initialized
(e.g., begin() is not called yet); if the returned value is 0, it indicates the search
process has finished, and if the returned value is positive, it is a valid page number.

</summary>
            <returns> the current page number.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextSearch.SetRightToLeftLanguage(System.Boolean)">
            <summary>
Tells TextSearch that reads from right to left.
</summary>
            <param name="flag">
True if the language is right to left.
</param>
        </member>
        <member name="M:pdftron.PDF.TextSearch.SetMode(System.Int32)">
            <summary> Set the current search mode. For example, the following code turns on the regular
expression:

TextSearch ts = new TextSearch();
...
int mode = ts.getMode();
mode |= TextSearch.e_reg_expression;
ts.setMode(mode);
...

</summary>
            <param name="mode">the search mode to set.
</param>
        </member>
        <member name="M:pdftron.PDF.TextSearch.GetMode">
            <summary> Retrieve the current search mode.</summary>
            <returns> the current search mode.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextSearch.SetPattern(System.String)">
            <summary> Sets the current search pattern. Note that it is not necessary to call this method since
the search pattern is already set when calling the begin() method. This method is provided
for users to change the search pattern while searching through a document.

</summary>
            <param name="pattern">the search pattern to set.
</param>
            <returns> true if the setting has succeeded.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextSearch.Run(System.Int32@,System.String@,System.String@,pdftron.PDF.Highlights)">
            <summary> Search the document and returns upon the following circumstances:
<list type="bullet"><item><description>Reached the end of the document</description></item><item><description>Reached the end of a page (if set to return by specifying mode 'e_page_stop' )</description></item><item><description>Found an instance matching the search pattern</description></item></list><remarks>
Note that this method should be called in a loop in ordre to find all matching instances;
in other words, the search is conducted in an incremental fashion.
</remarks></summary>
            <param name="page_num">the number of the page the found instance is on.
</param>
            <param name="result_str">the found string that matches the search pattern.
</param>
            <param name="ambient_str">the ambient string of the found string (computed if 'e_ambient_string' is set).
</param>
            <param name="hlts">the Highlights info associated with the found string (computed if 'e_highlight' is set).
</param>
            <returns>the code indicating the reason of the return. Note that only when the returned code is 'e_found', the resulting information is meaningful.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextSearch.Begin(pdftron.PDF.PDFDoc,System.String,System.Int32,System.Int32,System.Int32)">
            <summary> Initialize for the search process. This should be called before starting the actual search.
with method run().

</summary>
            <param name="doc">the PDF document to search in.
</param>
            <param name="pattern">the pattern to search for. When regular expression is used, it contains
the expression, and in verbatim mode, it is the exact string to search for.
</param>
            <param name="mode">the mode of the search process.
</param>
            <param name="start_page">the start page of the page range to search in. -1 indicates the
range starts from the first page.
</param>
            <param name="end_page">the end page of the page range to search in. -1 indicates the range
ends at the last page.
</param>
            <returns> true if the initialization has succeeded.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextSearch.Dispose">
            <summary> Releases all resources used by the TextSearch </summary>
        </member>
        <member name="M:pdftron.PDF.TextSearch.#ctor">
            <summary> Constructor and destructor.</summary>
        </member>
        <member name="F:pdftron.PDF.TextSearch.ResultCode.e_found">
            <summary>found a matching instance.</summary>
        </member>
        <member name="F:pdftron.PDF.TextSearch.ResultCode.e_page">
            <summary>finished searching a page.</summary>
        </member>
        <member name="F:pdftron.PDF.TextSearch.ResultCode.e_done">
            <summary>Did not find any results</summary>
        </member>
        <member name="T:pdftron.PDF.TextSearch.ResultCode">
            <summary>The code indicating the reason when a search returns.</summary>
        </member>
        <member name="F:pdftron.PDF.TextSearch.SearchMode.e_ambient_string">
            <summary>tells the search process to compute the ambient string of the found pattern.
This is useful if a user wants to examine or display what surrounds the
found pattern.</summary>
        </member>
        <member name="F:pdftron.PDF.TextSearch.SearchMode.e_highlight">
            <summary>tells the search process to compute Highlight information.</summary>
        </member>
        <member name="F:pdftron.PDF.TextSearch.SearchMode.e_page_stop">
            <summary>tells the search process to return when each page is finished; this is
useful when a user needs Run() to return periodically so that certain
things (e.g., UI) can be updated from time to time.</summary>
        </member>
        <member name="F:pdftron.PDF.TextSearch.SearchMode.e_search_up">
            <summary>search upward (from the end of the file and from the bottom of a page)</summary>
        </member>
        <member name="F:pdftron.PDF.TextSearch.SearchMode.e_whole_word">
            <summary>match the entire word</summary>
        </member>
        <member name="F:pdftron.PDF.TextSearch.SearchMode.e_case_sensitive">
            <summary>match case-sensitively</summary>
        </member>
        <member name="F:pdftron.PDF.TextSearch.SearchMode.e_reg_expression">
            <summary>use regular expressions</summary>
        </member>
        <member name="T:pdftron.PDF.TextSearch.SearchMode">
            <summary> Search modes that control how searching is conducted.</summary>
        </member>
        <member name="T:pdftron.PDF.TextSearch">
            <summary> TextSearch searches through a PDF document for a user-given search pattern.
The current implementation supports both verbatim search and the search
using regular expressions, whose detailed syntax can be found at:

http://www.boost.org/doc/libs/release/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html

TextSearch also provides users with several useful search modes and extra 
information besides the found string that matches the pattern. TextSearch
can either keep running until a matched string is found or be set to return
periodically in order for the caller to perform any necessary updates 
(e.g., UI updates). It is also worth mentioning that the search modes can be
changed on the fly while searching through a document.

Possible use case scenarios for TextSearch include:
<list type="bullet"><item><description>Guide users of a PDF viewer (e.g. implemented by PDFViewCtrl) to places
where they are intersted in;</description></item><item><description>Find interested PDF documents which contain certain patterns;</description></item><item><description>Extract interested information (e.g., credit card numbers) from a set of files;</description></item><item><description>Extract Highlight information (refer to the Highlights class for details) from
files for external use.</description></item><item><description>Since hyphens ('-') are frequently used in PDF documents to concatenate the two
broken pieces of a word at the end of a line, for example
<c>
"TextSearch is powerful for finding patterns in PDF files; yes, it is really pow-
erful."
</c>
a search for "powerful" should return both instances. However, not all end-of-line
hyphens are hyphens added to connect a broken word; some of them could be "real"
hyphens. In addition, an input search pattern may also contain hyphens that complicate
the situation. To tackle this problem, the following conventions are adopted:
<list type="number"><item><description>When in the verbatim search mode and the pattern contains no hyphen, a matching
string is returned if it is exactly the same or it contains end-of-line
or start-of-line hyphens. For example, as mentioned above, a search for "powerful" 
would return both instances.</description></item><item><description>When in verbatim search mode and the pattern contains one or multiple hyphens, a 
matching string is returned only if the string matches the pattern exactly. For 
example, a search for "pow-erful" will only return the second instance, and a search
for "power-ful" will return nothing.</description></item><item><description>When searching using regular expressions, hyphens are not taken care implicitly.
Users should take care of it themselves. For example, in order to find both the
"powerful" instances, the input pattern can be "pow-{0,1}erful".</description></item></list></description></item></list><example>
For a full sample, please take a look at the TextSearch sample project.
<code>
//... Initialize PDFNet ...
PDFDoc doc = new PDFDoc(filein);
doc.initSecurityHandler();
int mode = TextSearch.e_whole_word | TextSearch.e_page_stop;
UString pattern( "joHn sMiTh" );
TextSearch txt_search = new TextSearch();

//PDFDoc doesn't allow simultaneous access from different threads. If this
//document could be used from other threads (e.g., the rendering thread inside
//PDFView/PDFViewCtrl, if used), it is good practice to lock it.
//Notice: don't forget to call doc.Unlock() to avoid deadlock.
doc.Lock(); 
txt_search.Begin( doc, pattern, mode, -1, -1 );
while ( true )
{
	TextSearch.ResultCode result = txt_search.Run();
	if ( result.GetCode() == TextSearchResult.e_found )
	{
		Console.WriteLine("found one instance: " + result.GetResultStr());
	}
	else
	{
		break;
	}
}

//unlock the document to avoid deadlock.
doc.UnLock();
</code></example></summary>
        </member>
        <member name="M:pdftron.PDF.Highlights.GetCurrentQuads">
            <summary> Get the corresponding quadrangles of the current highlight.

</summary>
            <returns> the output quadrangles. Each quadrangle has eight doubles
(x1, y1), (x2, y2), (x3, y3), (x4, y4) denoting the four vertices
in counter-clockwise order.
</returns>
            <remarks>  since a highlight may correspond to multiple quadrangles, e.g.,
when it crosses a line, the number of resulting quadrangles may be
larger than 1.</remarks>
        </member>
        <member name="M:pdftron.PDF.Highlights.GetCurrentPageNumber">
            <summary> Get the page number of the current highlight.

</summary>
            <returns> the current page number
</returns>
        </member>
        <member name="M:pdftron.PDF.Highlights.Next">
            <summary> Move the current highlight to the next highlight.</summary>
        </member>
        <member name="M:pdftron.PDF.Highlights.HasNext">
            <summary> Query if there is any subsequent highlight after the current highlight.

</summary>
            <returns> true, if successful
</returns>
        </member>
        <member name="M:pdftron.PDF.Highlights.Begin(pdftron.PDF.PDFDoc)">
            <summary> Rewind the internal pointer to the first highlight. 

</summary>
            <param name="doc">the PDF document to which the highlights correspond.

</param>
            <remarks>  the PDF document can be a dummy document unless getCurrentQuads()
is to be called.</remarks>
        </member>
        <member name="M:pdftron.PDF.Highlights.Clear">
            <summary> Clear the current Highlight information in the class.</summary>
        </member>
        <member name="M:pdftron.PDF.Highlights.Save(System.String)">
            <summary> Save the current Highlight information in the class to a file.

</summary>
            <param name="file_name">the name of the file to save to.
</param>
        </member>
        <member name="M:pdftron.PDF.Highlights.Load(System.String)">
            <summary> Load the Highlight information from a file. Note that the
pre-existing Highlight information is discarded.

</summary>
            <param name="file_name">the name of the file to load from.
</param>
        </member>
        <member name="M:pdftron.PDF.Highlights.Add(pdftron.PDF.Highlights!System.Runtime.CompilerServices.IsConst)">
            <summary> Add extra Highlight information into the class.

</summary>
            <param name="hlts">the Highlights of which the Highlight information is to be
added.
</param>
        </member>
        <member name="M:pdftron.PDF.Highlights.Dispose">
            <summary> Releases all resources used by the Highlights </summary>
        </member>
        <member name="M:pdftron.PDF.Highlights.#ctor(pdftron.PDF.Highlights!System.Runtime.CompilerServices.IsConst)">
            <summary>Creates a Hightlights from a given object</summary>
            <param name="hlts">a given <c>Hightlights</c> object</param>
        </member>
        <member name="M:pdftron.PDF.Highlights.#ctor">
            <summary>Creates a default <c>Highlights</c> object</summary>
        </member>
        <member name="T:pdftron.PDF.Highlights">
            <summary> Highlights is used to store the necessary information and perform certain 
tasks in accordance with Adobe's Highlight standard, whose details can be
found at:

http://partners.adobe.com/public/developer/en/pdf/HighlightFileFormat.pdf

In a nutshell, the Highlights class maintains a set of highlights.
Each highlight contains three pieces of information: 

page: the number of the page this Highlight is on;
position: the start position (text offset) of this Highlight;
length: the length of this Highlight.

Possible use case scenarios for Highlights include:
<list type="bullet"><item><description>
Load a Highlight file (in XML format) and highlight the corresponding 
texts in the viewer (e.g., if the viewer is implemented using PDFViewCtrl, 
it can be achieved simply by calling PDFViewCtrl::SelectByHighlights() 
method);
</description></item><item><description>
Save the Highlight information (e.g., constructed by the TextSearch 
class) to an XML file for external uses.
</description></item></list>
Note: 
<list type="bullet"><item><description>
The Highlights class does not maintain the corresponding PDF document for
its highlights. It is the user's responsibility to match them up.
</description></item><item><description>
The Highlights class ensures that each highlight it maintains is 
unique (no two highlights have the same page, position and length values).
</description></item><item><description>
The current implementation of Highlights only supports the 'characters'
encoding for 'units' as described in the format; the 'words' encoding is 
not supported at this point.
</description></item></list></summary>
            <remarks>For a sample code, please take a look at the TextSearchTest sample project.</remarks>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Dispose">
            <summary> Releases all resources used by the TextExtractor </summary>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.GetFirstLine">
            <summary>Gets the first line of text on the selected page
</summary>
            <returns>The first line of text on the selected page.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.GetNumLines">
            <summary>Gets the number of line 
</summary>
            <returns>number of lines
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.Dispose">
            <summary> Releases all resources used by the Line </summary>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.op_Assign(pdftron.PDF.TextExtractor.Line)">
            <summary>Assignment operator</summary>
            <param name="l">another <c>Line</c> object
</param>
            <returns>a <c>Line</c> object 
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.Set(pdftron.PDF.TextExtractor.Line)">
            <summary>Sets value to the specified <c>Line</c> object
</summary>
            <param name="r">another <c>Line</c> object
</param>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.op_Inequality(pdftron.PDF.TextExtractor.Line,pdftron.PDF.TextExtractor.Line)">
            <summary>Inequality operator checks whether two <c>Line</c> objects are different.</summary>
            <param name="l">
                <c>Line</c> object at the left of operator
</param>
            <param name="r">
                <c>Line</c> object at the right of the operator
</param>
            <returns>true if both objects are equal
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.op_Equality(pdftron.PDF.TextExtractor.Line,pdftron.PDF.TextExtractor.Line)">
            <summary>Equality operator checks whether two <c>Line</c> objects are the same.</summary>
            <param name="l">
                <c>Line</c> object at the left of operator
</param>
            <param name="r">
                <c>Line</c> object at the right of the operator
</param>
            <returns>true if both objects are equal
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.Equals(System.Object)">
            <summary>Determines if equals to the specified object
</summary>
            <param name="o">specified object
</param>
            <returns>true if both objects are equal. false, otherwise
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.EndsWithHyphen">
            <summary> Ends with hyphen.

</summary>
            <returns> true, if successful
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.GetFlowID">
            <summary> Gets the flow id.

</summary>
            <returns> The unique identifier for a paragraph or column
that this line belongs to. This information can be used to
identify which lines/paragraphs belong to which flows.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.GetParagraphID">
            <summary> Gets the paragraph id.

</summary>
            <returns> The unique identifier for a paragraph or column
that this line belongs to. This information can be used to
identify which lines belong to which paragraphs.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.GetStyle">
            <summary> Gets the style.

</summary>
            <returns> predominant style for this line.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.GetCurrentNum">
            <summary> Gets the current num.

</summary>
            <returns> the index of this line of the current page.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.GetNextLine">
            <summary> Gets the next line.

</summary>
            <returns> the next line on the page.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.GetWord(System.Int32)">
            <summary> Gets the first word.

</summary>
            <param name="word_idx">index of the word
</param>
            <returns> word with specified index
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.GetFirstWord">
            <summary> Gets the first word.

</summary>
            <returns> the first word in the line.
</returns>
            <remarks>  To traverse the list of all words on this line use word.GetNextWord(). </remarks>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.GetQuad">
            <summary> Gets the quad.

</summary>
            <returns> out_quad The quadrilateral representing a tight bounding box
for this line (in unrotated page coordinates).
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.GetBBox">
            <summary> Gets the b box.

</summary>
            <returns> The bounding box for this line (in unrotated page
coordinates).
</returns>
            <remarks>  To account for the effect of page '/Rotate' attribute,
transform all points using page.GetDefaultMatrix().</remarks>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.IsSimpleLine">
            <summary> Checks if is simple line.

</summary>
            <returns> true is this line is not rotated (i.e. if the
quadrilaterals returned by GetBBox() and GetQuad() coincide).
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.GetNumWords">
            <summary> Gets the num words.

</summary>
            <returns> The number of words in this line.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Line.IsValid">
            <summary>Checks if line is valid
</summary>
            <returns>true if line is valid, false otherwise.
</returns>
        </member>
        <member name="T:pdftron.PDF.TextExtractor.Line">
            <summary> TextExtractor::Line object represents a line of text on a PDF page. 
Each line consists of a sequence of words, and each words in one or 
more styles.
</summary>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.Dispose">
            <summary> Releases all resources used by the Word </summary>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.op_Assign(pdftron.PDF.TextExtractor.Word)">
            <summary>Assignment operator</summary>
            <param name="r">a given <c>Word</c> object
</param>
            <returns>
                <c>Word</c> object equals to the given <c>Word</c> object
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.Set(pdftron.PDF.TextExtractor.Word)">
            <summary>Sets value to given <c>Word</c> object
</summary>
            <param name="r">a given <c>Word</c> object
</param>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.op_Inequality(pdftron.PDF.TextExtractor.Word,pdftron.PDF.TextExtractor.Word)">
            <summary>Inequality operator check whether two <c>Word</c> objects are different.</summary>
            <param name="l">
                <c>Word</c> object at the left of the operator
</param>
            <param name="r">
                <c>Word</c> object at the right of the operator
</param>
            <returns>true if both <c>Word</c> object are not equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.op_Equality(pdftron.PDF.TextExtractor.Word,pdftron.PDF.TextExtractor.Word)">
            <summary>Equality operator check whether two <c>Word</c> objects are the same.</summary>
            <param name="l">
                <c>Word</c> object at the left of the operator
</param>
            <param name="r">
                <c>Word</c> object at the right of the operator
</param>
            <returns>true if both <c>Word</c> objects are equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.Equals(System.Object)">
            <summary>Checks whether this <c>Word</c> object is the same as the opject specified.</summary>
            <param name="o">specified object
</param>
            <returns>true if equals to the specified object
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.GetCurrentNum">
            <summary>Gets the index of this word of the current line. A word that starts the line will return 0, whereas the last word in the line will return (line.GetNumWords()-1).
</summary>
            <returns>the index of this word of the current line
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.GetNextWord">
            <summary>Gets the next object
</summary>
            <returns>the next object
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.GetString">
            <summary>Gets Unicode string
</summary>
            <returns>the content of this word represented as a Unicode string.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.GetStringLen">
            <summary> Gets the number of chars in the string.
</summary>
            <returns> the number of characters in this word.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.GetStyle">
            <summary> Gets predominant style for this word.				
</summary>
            <returns> the style
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.GetCharStyle(System.Int32)">
            <summary> Gets the char style.

</summary>
            <param name="char_idx">The index of a character in this word.
</param>
            <returns> The style associated with a given character.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.GetGlyphQuad(System.Int32)">
            <summary>Gets the glyph from index
</summary>
            <param name="glyph_idx">The index of a glyph in this word.
</param>
            <returns>The quadrilateral representing a tight bounding box for a given glyph in the word (in unrotated page coordinates).
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.GetQuad">
            <summary> return The quadrilateral representing a tight bounding box
for this word (in unrotated page coordinates).

</summary>
            <returns> the quad
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.GetBBox">
            <summary> Gets the b box.

</summary>
            <returns> The bounding box for this word (in unrotated page
coordinates).
</returns>
            <remarks>  To account for the effect of page '/Rotate' attribute,
transform all points using page.GetDefaultMatrix().</remarks>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.GetNumGlyphs">
            <summary> Gets the num glyphs.

</summary>
            <returns> The number of glyphs in this word.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Word.IsValid">
            <summary>Checks if valid word
</summary>
            <returns>true if this is a valid word, false otherwise.
</returns>
        </member>
        <member name="T:pdftron.PDF.TextExtractor.Word">
            <summary> TextExtractor.Word object represents a word on a PDF page. 
Each word contains a sequence of characters in one or more styles 
(see TextExtractor.Style).
</summary>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Style.Dispose">
            <summary> Releases all resources used by the Style </summary>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Style.op_Assign(pdftron.PDF.TextExtractor.Style)">
            <summary>Assignment operator</summary>
            <param name="r">specified <c>Style</c> object
</param>
            <returns>a <c>Style</c> object equals to the specified object
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Style.Set(pdftron.PDF.TextExtractor.Style)">
            <summary>Sets value to the specified <c>Style</c></summary>
            <param name="r">specified <c>Style</c> object
</param>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Style.op_Inequality(pdftron.PDF.TextExtractor.Style,pdftron.PDF.TextExtractor.Style)">
            <summary>Inequality operator check whether two <c>Style</c> objects are different.</summary>
            <param name="l">object at the left of the operator
</param>
            <param name="r">object at the right of the operator
</param>
            <returns>true if both objects are not equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Style.op_Equality(pdftron.PDF.TextExtractor.Style,pdftron.PDF.TextExtractor.Style)">
            <summary>Equality operator check whether two <c>Style</c> objects are the same.</summary>
            <param name="l">object at the left of the operator
</param>
            <param name="r">object at the right of the operator
</param>
            <returns>true if both objects are equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Style.Equals(System.Object)">
            <summary>Checks whether this <c>Style</c> object is the same as the opject specified.</summary>
            <param name="o">another object
</param>
            <returns>true if equals specified object
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Style.GetColor">
            <summary> Gets the color.

</summary>
            <returns> text color in RGB color space.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Style.IsSerif">
            <summary> Checks if is serif.

</summary>
            <returns> true if glyphs have serifs, which are short strokes drawn at an angle on the top
and bottom of glyph stems.
</returns>
            <remarks>  the return value corresponds to the state of 'serif' flag in the 'Font Descriptor'. </remarks>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Style.IsItalic">
            <summary> Checks if is italic.

</summary>
            <returns> true if glyphs have dominant vertical strokes that are slanted.
</returns>
            <remarks>  the return value corresponds to the state of 'italic' flag in the 'Font Descriptor'. </remarks>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Style.GetWeight">
            <summary> Gets the weight.

</summary>
            <returns> The weight (thickness) component of the fully-qualified font name
or font specifier. The possible values are 100, 200, 300, 400, 500, 600, 700,
800, or 900, where each number indicates a weight that is at least as dark as
its predecessor. A value of 400 indicates a normal weight; 700 indicates bold.
Note: The specific interpretation of these values varies from font to font.
For example, 300 in one font may appear most similar to 500 in another.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Style.GetFontSize">
            <summary> Gets the font size.

</summary>
            <returns> The font size used to draw the selected text as it
appears on the output page.
</returns>
            <remarks>  Unlike the 'font size' in the graphics state (pdftron.PDF.GState) 
the returned font size accounts for the effects CTM, text matrix,
and other graphics state attributes that can affect the appearance of
text.</remarks>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Style.GetFontName">
            <summary> Gets the font name.

</summary>
            <returns> the font name used to draw the selected text.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Style.GetFont">
            <summary> Gets the font.

</summary>
            <returns> low-level PDF font object. A high level font object can
be instantiated as follows:
pdftron.PDF.Font f = new pdftron.PDF.Font(style.getFont());
</returns>
        </member>
        <member name="T:pdftron.PDF.TextExtractor.Style">
            <summary> A class representing predominant text style associated with a 
given Line, a Word, or a Glyph. The class includes information about 
the font, font size, font styles, text color, etc.
</summary>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.SetOCGContext(pdftron.PDF.OCG.Context)">
            <summary>Sets the Optional Content Group (OCG) context that should be used when rendering the page. 
This function can be used to selectively render optional content (such as PDF layers) based on the 
states of optional content groups in the given context.
</summary>
            <param name="ctx">Optional Content Group (OCG) context, or NULL if the TextExtractor should render all content on the page.
</param>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.GetAsXML(pdftron.PDF.TextExtractor.XMLOutputFlags)">
            <summary> Get text content in a form of an XML string.

</summary>
            <param name="flags">flags controlling XML output. For more
information, please see <c>TextExtract::XMLOutputFlags</c>.
</param>
            <returns> The string containing XML output.
</returns>
            <remarks>
XML output will be encoded in UTF-8 and will have the following
structure:
<c>
&lt;Page num="1 crop_box="0, 0, 612, 792" media_box="0, 0, 612, 792" rotate="0"&gt;
&lt;Flow id="1"&gt;
&lt;Para id="1"&gt;
&lt;Line box="72, 708.075, 467.895, 10.02" style="font-family:Calibri; font-size:10.02; color: #000000;"&gt;
&lt;Word box="72, 708.075, 30.7614, 10.02"&gt;PDFNet&lt;/Word&gt;
&lt;Word box="106.188, 708.075, 15.9318, 10.02"&lt;SDK&lt;/Word&gt;
&lt;Word box="125.617, 708.075, 6.22242, 10.02"&lt;is&lt;/Word&gt;
...
&lt;/Line&gt;
&lt;/Para&gt;
&lt;/Flow&gt;
&lt;/Page&gt;
</c>
The above XML output was generated by passing the following union of
flags in the call to GetAsXML():
<c>(TextExtractor::e_words_as_elements | TextExtractor::e_output_bbox | TextExtractor::e_output_style_info)</c>

In case 'xml_output_flags' was not specified, the default XML output
would look as follows:
<code>
&lt;Page num="1 crop_box="0, 0, 612, 792" media_box="0, 0, 612, 792" rotate="0"&gt;
&lt;Flow id="1"&gt;
&lt;Para id="1"&gt;
&lt;Line&lt;PDFNet SDK is an amazingly comprehensive, high-quality PDF developer toolkit...&lt;/Line&gt;
&lt;Line&lt;levels. Using the PDFNet PDF library, ...&lt;/Line&gt;
...
&lt;/Para&gt;
&lt;/Flow&gt;
&lt;/Page&gt;
</code></remarks>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.GetAsXML">
            <summary> Get text content in a form of an XML string.

</summary>
            <returns> The string containing XML output.		
</returns>
            <remarks>
XML output will be encoded in UTF-8 and will have the following
structure:
<code>
&lt;Page num="1 crop_box="0, 0, 612, 792" media_box="0, 0, 612, 792" rotate="0"&gt;
&lt;Flow id="1"&gt;
&lt;Para id="1"&gt;
&lt;Line box="72, 708.075, 467.895, 10.02" style="font-family:Calibri; font-size:10.02; color: #000000;"&gt;
&lt;Word box="72, 708.075, 30.7614, 10.02"&gt;PDFNet&lt;/Word&gt;
&lt;Word box="106.188, 708.075, 15.9318, 10.02"&gt;SDK&lt;/Word&gt;
&lt;Word box="125.617, 708.075, 6.22242, 10.02"&gt;is&lt;/Word&gt;
...
&lt;/Line&gt;
&lt;/Para&gt;  
&lt;/Flow&gt;
&lt;/Page&gt;
</code>
The above XML output was generated by passing the following union of 
flags in the call to GetAsXML(): 
<c>(TextExtractor::e_words_as_elements | TextExtractor::e_output_bbox | TextExtractor::e_output_style_info)</c>

In case 'xml_output_flags' was not specified, the default XML output 
would look as follows:
<code>
&lt;Page num="1 crop_box="0, 0, 612, 792" media_box="0, 0, 612, 792" rotate="0"&gt;
&lt;Flow id="1"&gt;
&lt;Para id="1"&gt;
&lt;Line&gt;PDFNet SDK is an amazingly comprehensive, high-quality PDF developer toolkit...&lt;/Line&gt;
&lt;Line&gt;levels. Using the PDFNet PDF library, ...&lt;/Line&gt;
...
&lt;/Para&gt;
&lt;/Flow&gt;
&lt;/Page&gt;
&lt;/code&gt;
&lt;/example&gt;
</code></remarks>
        </member>
        <member name="F:pdftron.PDF.TextExtractor.XMLOutputFlags.e_output_style_info">
            <summary>Include font and styling information.</summary>
        </member>
        <member name="F:pdftron.PDF.TextExtractor.XMLOutputFlags.e_output_bbox">
            <summary>Include bounding box information for each XML element. 
The bounding box information will be stored as 'bbox' attribute.</summary>
        </member>
        <member name="F:pdftron.PDF.TextExtractor.XMLOutputFlags.e_words_as_elements">
            <summary>Output words as XML elements instead of inline text.</summary>
        </member>
        <member name="F:pdftron.PDF.TextExtractor.XMLOutputFlags.e_none">
            <summary />
        </member>
        <member name="T:pdftron.PDF.TextExtractor.XMLOutputFlags">
            <summary>Flags controlling the structure of XML output in a call to GetAsXML().</summary>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.GetTextUnderAnnot(pdftron.PDF.Annot)">
            <summary> Get all the characters that intersect an annotation.

</summary>
            <param name="annot">The annotation to intersect with.
</param>
            <returns> The string under annot
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.GetAsText(System.Boolean)">
            <summary> Get all words in the current selection as a single string.

</summary>
            <param name="dehyphen">If true, finds and removes hyphens that split words
across two lines. Hyphens are often used a the end of lines as an
indicator that a word spans two lines. Hyphen detection enables removal
of hyphen character and merging of text runs to form a single word.
This option has no effect on Tagged PDF files.
</param>
            <returns> The string containing all words in the current
selection. Words will be separated with space (i.e. ' ') or
new line (i.e. '\n') characters.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.GetAsText">
            <summary> Get all words in the current selection as a single string.

</summary>
            <returns> The string containing all words in the current 
selection. Words will be separated with space (i.e. ' ') or 
new line (i.e. '\n') characters.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.EnableActualText(System.Boolean)">
            <summary> Consider all actual text as a single word if true.

</summary>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.GetRightToLeftLanguage">
            <summary> Gets the directionality of text extractor.

</summary>
            <returns> the directionality of text extractor.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.SetRightToLeftLanguage(System.Boolean)">
            <summary> Sets the directionality of text extractor. Must be called before the processing of a page started.
<param name="rtl"> If true reverses the directionality of TextExtractor algorithm.
</param></summary>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.GetWordCount">
            <summary> Gets the word count.

</summary>
            <returns> the number of words on the page.
</returns>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Begin(pdftron.PDF.Page,pdftron.PDF.Rect!System.Runtime.CompilerServices.IsConst,pdftron.PDF.TextExtractor.ProcessingFlags)">
            <summary> Start reading the page. 

</summary>
            <param name="page">Page to read.
</param>
            <param name="clip_ptr">A pointer to the optional clipping rectangle. This 
parameter can be used to selectively read text from a given rectangle.
</param>
            <param name="flags">A list of ProcessingFlags used to control text extraction 
algorithm.
</param>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Begin(pdftron.PDF.Page,pdftron.PDF.Rect!System.Runtime.CompilerServices.IsConst)">
            <summary> Start reading the page. 

</summary>
            <param name="page">Page to read.
</param>
            <param name="clip_ptr">A pointer to the optional clipping rectangle. This 
parameter can be used to selectively read text from a given rectangle.
</param>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.Begin(pdftron.PDF.Page)">
            <summary> Start reading the page. </summary>
            <param name="page">Page to read.
</param>
        </member>
        <member name="F:pdftron.PDF.TextExtractor.ProcessingFlags.e_no_watermarks">
            <summary>Enables removal of text that is marked as part of a Watermark layer
</summary>
        </member>
        <member name="F:pdftron.PDF.TextExtractor.ProcessingFlags.e_no_invisible_text">
            <summary>Enables removing text that uses rendering mode 3 (i.e. invisible text).
Invisible text is usually used in 'PDF Searchable Images' (i.e. scanned 
pages with a corresponding OCR text). As a result, invisible text 
will be extracted by default.</summary>
        </member>
        <member name="F:pdftron.PDF.TextExtractor.ProcessingFlags.e_remove_hidden_text">
            <summary>Enables removal of text that is obscured by images or 
rectangles. Since this option has small performance penalty 
on performance of text extraction, by default it is not 
enabled.</summary>
        </member>
        <member name="F:pdftron.PDF.TextExtractor.ProcessingFlags.e_punct_break">
            <summary>Treat punctuation (e.g. full stop, comma, semicolon, etc.) as 
word break characters. </summary>
        </member>
        <member name="F:pdftron.PDF.TextExtractor.ProcessingFlags.e_no_dup_remove">
            <summary>Disables removing duplicated text that is frequently used to 
achieve visual effects of drop shadow and fake bold. </summary>
        </member>
        <member name="F:pdftron.PDF.TextExtractor.ProcessingFlags.e_no_ligature_exp">
            <summary>Disables expanding of ligatures using a predefined mapping. 
Default ligatures are: fi, ff, fl, ffi, ffl, ch, cl, ct, ll, 
ss, fs, st, oe, OE. </summary>
        </member>
        <member name="F:pdftron.PDF.TextExtractor.ProcessingFlags.e_none">
            <summary />
        </member>
        <member name="T:pdftron.PDF.TextExtractor.ProcessingFlags">
            <summary>Processing options that can be passed in Begin() method to direct the flow of content recognition algorithms. </summary>
        </member>
        <member name="M:pdftron.PDF.TextExtractor.#ctor">
            <summary> Constructor and destructor.</summary>
        </member>
        <member name="T:pdftron.PDF.TextExtractor">
            <summary>
                <para>
TextExtractor is used to analyze a PDF page and extract words and logical 
structures that are visible within a given region. The resulting list of 
lines and words can be traversed element by element or accessed as a 
string buffer. The class also includes utility methods to extract PDF 
text as HTML or XML.
</para>
Possible use case scenarios for TextExtractor include:
<list type="bullet"><item><description>Converting PDF pages to text or XML for content repurposing.</description></item><item><description>Searching PDF pages for specific words or keywords.</description></item><item><description>Indexing large PDF repositories for indexing or content.</description></item></list>
retrieval purposes (i.e. implementing a PDF search engine).
<list type="bullet"><item><description>Classifying or summarizing PDF documents based on their text content.</description></item><item><description>Finding specific words for content editing purposes (such as splitting pages.</description></item> 
based on keywords etc).
</list>
The main task of TextExtractor is to interpret PDF pages and offer a 
simple to use API to: 
<list type="bullet"><item><description>Normalize all text content to Unicode.</description></item><item><description>Extract inferred logical structure (word by word, line by line, 
or paragraph by paragraph).</description></item><item><description>Extract positioning information for every line, word, or a glyph.</description></item><item><description>Extract style information (such as information about the font, font size,
font styles, etc) for every line, word, or a glyph.</description></item><item><description>Control the content analysis process. A number of options (such as 
removal of text obscured by images) is available to let the user 
direct the flow of content recognition algorithms that will meet their
requirements.</description></item><item><description>Offer utility methods to convert PDF page content to text, XML, or HTML.</description></item></list><remarks><para>TextExtractor is analyzing only textual content of the page.
This means that the rasterized (e.g. in scanned pages) or vectorized
text (where glyphs are converted to path outlines) will not be recognized 
as text. Please note that it is still possible to extract this content 
using pdftron.PDF.ElementReader interface.
</para><para>
In some cases TextExtractor may extract text that does not appear to 
be on the visible page (e.g. when text is obscured by an image or a 
rectangle). In these situations it is possible to use processing flags
such as 'e_remove_hidden_text' and 'e_no_invisible_text' to remove 
hidden text. 
</para></remarks><example>
For full sample code, please take a look at TextExtract sample project.    
<code>  
//... Initialize PDFNet ...
PDFDoc doc = new PDFDoc(filein);
doc.initSecurityHandler();
Page page = doc.pageBegin().current();
TextExtractor txt = new TextExtractor();
txt.begin(page, 0, TextExtractor.ProcessingFlags.e_remove_hidden_text);
string text = txt.getAsText();
// or traverse words one by one...
TextExtractor.Word word;
for (TextExtractor.Line line = txt.GetFirstLine(); line.IsValid(); line=line.GetNextLine()) {
for (word=line.GetFirstWord(); word.IsValid(); word=word.GetNextWord()) {
string w = word.GetString();
}
}
</code></example></summary>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonGroup.Dispose">
            <summary> Releases all resources used by this RadioButtonGroup </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonGroup.AddGroupButtonsToPage(pdftron.PDF.Page)">
            <summary> Add all group buttons to the page
</summary>
            <param name="page"> The page in which to add the buttons.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonGroup.GetField">
            <summary> Gets the field associated with this RadioButtonGroup
</summary>
            <returns> The Field associated with this RadioButtonGroup
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonGroup.GetButton(System.UInt32)">
            <summary> Retrieves the button at a given index.
</summary>
            <param name="index"> The index to use.
</param>
            <returns> The RadioButtonWidget at the given index
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonGroup.GetNumButtons">
            <summary> Gets the number of buttons in this RadioButtonGroup 
</summary>
            <returns> The number of buttons in this RadioButtonGroup
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonGroup.Add(pdftron.PDF.Rect)">
            <summary> Adds a RadioButtonWidget with a default onstate to the RadioButtonGroup
</summary>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.</param>
            <returns> A newly created default RadioButtonWidget.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonGroup.Add(pdftron.PDF.Rect,System.String)">
            <summary> Adds a new RadioButtonWidget to the RadioButtonGroup 
</summary>
            <param name="pos"> A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="onstate"> The onstate for this button. This will rarely need to be explicitly set. 
However, it can be used to allow multiple radiobuttons in a group to be on at once if they have the same onstate.
</param>
            <returns> A newly created default RadioButtonWidget.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonGroup.Create(pdftron.PDF.PDFDoc)">
            <summary> Creates a new RadioButtonGroup, in the specified document with a default field name.

</summary>
            <param name="doc"> The document in which the RadioButtonGroup is created.
</param>
            <returns> A newly created blank Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonGroup.Create(pdftron.PDF.PDFDoc,System.String)">
            <summary> Creates a new RadioButtonGroup in the specified document.

</summary>
            <param name="doc"> The document in which the RadioButtonGroup is created.
</param>
            <param name="field_name">The name of the field to create and use in this RadioButtonGroup.
</param>
            <returns> A newly created RadioButtonGroup.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonGroup.#ctor(pdftron.PDF.Field)">
            <summary> Creates a RadioButtonGroup and initialize it using given Field object.
</summary>
            <param name="field"> The field with which to initialize the RadioButtonGroup
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
end RadioButtonWidget
RadioButtonGroup
</member>
        <member name="T:pdftron.PDF.Annots.RadioButtonGroup">
            <summary> 
An object representing a Group of Radio Buttons that can be used to create new Radio Buttons. 
If a group contains multiple buttons they will be connected.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonWidget.Dispose">
            <summary> Releases all resources used by the Radio Button Widget </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonWidget.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Radio Button Widget annotation and initialize it using given annotation object.

</summary>
            <param name="ann"> The annotation to use.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonWidget.IsEnabled">
            <summary> Determines whether this button is enabled.
</summary>
            <returns> A boolean value indicating whether the Radio Button is enabled.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonWidget.EnableButton">
            <summary> Enable the current radio button. Note that this may disable other Radio Buttons in the same group.
</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonWidget.GetGroup">
            <summary> Gets the group to which the current button is connected.
</summary>
            <returns> The group containing this Radio Button.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.RadioButtonWidget.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Radio Button Widget annotation and initialize it using given Cos/SDF object.
</summary>
            <param name="d">the object to use to initialize the Radio Button Widget
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
end ListBoxWidget
RadioButtonWidget
</member>
        <member name="T:pdftron.PDF.Annots.RadioButtonWidget">
            <summary> 
An object representing a Radio Button used in a PDF Form.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.ListBoxWidget.Dispose">
            <summary> Releases all resources used by the List Box Widget </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.ListBoxWidget.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a List Box Widget annotation and initialize it using given annotation object.
</summary>
            <param name="ann"> The annotation to use.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.ListBoxWidget.RemoveOption(System.String)">
            <summary> Remove the option from the List Box widget.
</summary>
            <param name="value"> The option to remove
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ListBoxWidget.ReplaceOptions(System.String[])">
            <summary> Replaces the current List Box widget options with a new set.
</summary>
            <param name="new_opts"> The new set of options to use.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ListBoxWidget.GetOptions">
            <summary> Gets all options of the List Box widget.
</summary>
            <returns> The options of the List Box widget
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ListBoxWidget.GetSelectedOptions">
            <summary> Gets all selected options in the List Box widget.
</summary>
            <returns> The selected options of the List Box widget
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ListBoxWidget.SetSelectedOptions(System.String[])">
            <summary> Sets the options for the List Box Widget.
</summary>
            <param name="options"> The options to select.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ListBoxWidget.AddOptions(System.String[])">
            <summary> Adds multiple options to List Box Widget.
</summary>
            <param name="options"> The options to add.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ListBoxWidget.AddOption(System.String)">
            <summary> Adds option to List Box Widget.
</summary>
            <param name="value"> The option to add
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ListBoxWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect,pdftron.PDF.Field)">
            <summary> Creates a new List Box Widget annotation, in the specified document.
</summary>
            <param name="doc">The document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="field">the field for which to create a List Box Widget
</param>
            <returns> A newly created blank List Box Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ListBoxWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new List Box Widget annotation, in the specified document with a default field name.
</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.</param>
            <returns> A newly created blank List Box Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ListBoxWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect,System.String)">
            <summary> Creates a new List Box Widget annotation, in the specified document.
</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="field_name">The name of the field for which to create a List Box Widget
</param>
            <returns> A newly created blank List Box Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ListBoxWidget.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a List Box Widget annotation and initialize it using given Cos/SDF object.
</summary>
            <param name="d">the object to use to initialize the List Box Widget
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
end ComboBoxWidget
ListBoxWidget
</member>
        <member name="T:pdftron.PDF.Annots.ListBoxWidget">
            <summary> 
An object representing a List Box used in a PDF Form.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.ComboBoxWidget.Dispose">
            <summary> Releases all resources used by the Widget </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.ComboBoxWidget.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Widget annotation and initialize it using given annotation object.
</summary>
            <param name="ann"> The annotation object to use.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.ComboBoxWidget.RemoveOption(System.String)">
            <summary> Remove the option from the Combo Box widget.
</summary>
            <param name="value"> The option to remove
</param>
            <exception cref="T:pdftron.Common.PDFNetException"> PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ComboBoxWidget.ReplaceOptions(System.String[])">
            <summary> Replaces the current Combo Box widget options with a new set.
</summary>
            <param name="new_opts"> The new set of options to use.
</param>
            <exception cref="T:pdftron.Common.PDFNetException"> PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ComboBoxWidget.GetOptions">
            <summary> Gets all options of the Combo Box widget.
</summary>
            <returns> The options of the Combo Box widget
</returns>
            <exception cref="T:pdftron.Common.PDFNetException"> PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ComboBoxWidget.GetSelectedOption">
            <summary> Retrieves the option selected in the ComboBox widget
</summary>
            <returns> The option selected in the Combo Box widget
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ComboBoxWidget.SetSelectedOption(System.String)">
            <summary> Selects the given option in the Combo Box widget
</summary>
            <param name="value"> The option to select
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ComboBoxWidget.AddOptions(System.String[])">
            <summary> Adds multiple options to Combo Box widget.
</summary>
            <param name="opts"> The options to add
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ComboBoxWidget.AddOption(System.String)">
            <summary> Adds an option to Combo Box widget.
</summary>
            <param name="value"> The option to add
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ComboBoxWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect,pdftron.PDF.Field)">
            <summary> Creates a new Combo Box Widget annotation, in the specified document.
</summary>
            <param name="doc">The document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="field"> The field for which to create a Combo Box widget
</param>
            <returns> A newly created blank Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ComboBoxWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Combo Box Widget annotation, in the specified document with a default Field name.
</summary>
            <param name="doc">The document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.</param>
            <returns> A newly created blank Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ComboBoxWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect,System.String)">
            <summary> Creates a new Combo Box Widget annotation, in the specified document.
</summary>
            <param name="doc">The document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="field_name">The name of the field for which to create a ComboBox widget
</param>
            <returns> A newly created blank Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.ComboBoxWidget.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Combo Box Widget annotation and initialize it using given Cos/SDF object.
</summary>
            <param name="d">the object to use to initialize the ComboBoxWidget
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
end TextWidget
ComboBoxWidget
</member>
        <member name="T:pdftron.PDF.Annots.ComboBoxWidget">
            <summary> 
An object representing a combo box used in a PDF Form.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.TextWidget.Dispose">
            <summary> Releases all resources used by the Text Widget </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.TextWidget.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Text Widget annotation and initialize it using given annotation object.

</summary>
            <param name="ann">The annotation object to use.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.TextWidget.GetText">
            <summary> Retrieves the text content of the Text Widget.

</summary>
            <returns> The Text Widget contents
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.TextWidget.SetText(System.String)">
            <summary> Sets the text content of the Text Widget.

</summary>
            <param name="text">The text to be displayed in the Text Widget.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.TextWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect,pdftron.PDF.Field)">
            <summary> Creates a new Text Widget annotation, in the specified document.

</summary>
            <param name="doc">The document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="field">the field for which to create a Text Widget.
</param>
            <returns> A newly created blank Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.TextWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Text Widget annotation, in the specified document.

</summary>
            <param name="doc">The document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.</param>
            <returns> A newly created blank Text Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.TextWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect,System.String)">
            <summary> Creates a new Text Widget annotation, in the specified document.

</summary>
            <param name="doc">The document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="field_name">The name of the field for which to create a Text widget.
</param>
            <returns> A newly created blank Text Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.TextWidget.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Text Widget annotation and initialize it using given Cos/SDF object.
</summary>
            <param name="d"> The object to use to initialize the Text Widget
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
end PushButtonWidget
TextWidget
</member>
        <member name="T:pdftron.PDF.Annots.TextWidget">
            <summary> 
An object representing a Text Box used in a PDF Form.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.PushButtonWidget.Dispose">
            <summary> Releases all resources used by the Widget </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.PushButtonWidget.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Push Button Widget annotation and initialize it using given annotation object.

</summary>
            <param name="ann"> the annotation from which to create a Push Button Widget
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.PushButtonWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect,pdftron.PDF.Field)">
            <summary> Creates a new Push Button Widget annotation, in the specified document.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="field">the field for which to create a Push Button Widget
</param>
            <returns> A newly created default Push Button Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.PushButtonWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new PushButton widget annotation, in the specified document.

</summary>
            <param name="doc">The document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.</param>
            <returns> A newly created default Push Button Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.PushButtonWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect,System.String)">
            <summary> Creates a new Push Button Widget annotation, in the specified document.

</summary>
            <param name="doc">The document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="field_name">The name of the field for which to create a PushButton widget
</param>
            <returns> A newly created default Push Button Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.PushButtonWidget.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Push Button Widget annotation and initialize it using given Cos/SDF object.
</summary>
            <param name="d">The object to use to initialize the PushButtonWidget
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
end CheckBoxWidget
PushButtonWidget
</member>
        <member name="T:pdftron.PDF.Annots.PushButtonWidget">
            <summary> 
An object representing a push button used in a PDF Form.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.CheckBoxWidget.Dispose">
            <summary> Releases all resources used by the Widget </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.CheckBoxWidget.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Check Box Widget annotation and initialize it using given annotation object.

</summary>
            <param name="ann"> The annotation to use.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.CheckBoxWidget.SetChecked(System.Boolean)">
            <summary> Check or uncheck the Check Box Widget

</summary>
            <param name="value">If true, the annotation should be checked. Otherwise it should be unchecked.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.CheckBoxWidget.IsChecked">
            <summary> Returns whether the checkbox is checked.

</summary>
            <returns> A boolean value indicating whether the checkbox is checked.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.CheckBoxWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect,pdftron.PDF.Field)">
            <summary> Creates a new Widget annotation, in the specified document.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="field">the field for which to create a CheckBox widget
</param>
            <returns> A newly created blank Check Box Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.CheckBoxWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Check Box Widget annotation, in the specified document with a default field name.

</summary>
            <param name="doc">The document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.</param>
            <returns> A newly created blank Check Box Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.CheckBoxWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect,System.String)">
            <summary> Creates a new Check Box Widget annotation, in the specified document.

</summary>
            <param name="doc">The document to which the annotation is to be added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="field_name">The name of the field for which to create a CheckBox widget
</param>
            <returns> A newly created blank Check Box Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.CheckBoxWidget.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Check Box Widget annotation and initialize it using given Cos/SDF object.
</summary>
            <param name="d">the object to use to initialize the Check Box Widget
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
CheckBoxWidget
</member>
        <member name="T:pdftron.PDF.Annots.CheckBoxWidget">
            <summary> 
An object representing a check box used in a PDF Form.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.SignatureWidget.Dispose">
            <summary> Releases all resources used by the SignatureWidget </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.SignatureWidget.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a SignatureWidget annotation and initialize it using given annotation object.

</summary>
            <param name="ann">The input annotation
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.SignatureWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect)">
            <summary>Creates a new SignatureWidget annotation in the specified document, and adds an associated signature form field to the document with a default Field name.</summary>
            <param name="doc">The document to which the widget is to be added.</param>
            <param name="pos">A rectangle specifying the widget's bounds in default user space units.</param>
            <returns>A newly-created blank SignatureWidget annotation.</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.SignatureWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect,System.String)">
            <summary>Creates a new SignatureWidget annotation in the specified document, and adds a signature form field to the document.</summary>
            <param name="doc">The document to which the widget is to be added.</param>
            <param name="pos">A rectangle specifying the widget's bounds in default user space units.</param>
            <param name="field_name">The name of the digital signature field to create.</param>
            <returns>A newly-created blank SignatureWidget annotation.</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.SignatureWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect,pdftron.PDF.DigitalSignatureField)">
            <summary>Creates a new SignatureWidget annotation associated with a particular DigitalSignatureField object (representing a signature-type form field) in the specified document.</summary>
            <param name="doc">The document to which the widget is to be added.</param>
            <param name="pos">A rectangle specifying the widget's bounds in default user space units.</param>
            <param name="field">The digital signature field for which to create a signature widget.</param>
            <returns>A newly-created blank SignatureWidget annotation.</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.SignatureWidget.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Rect,pdftron.PDF.Field)">
            <summary>Creates a new SignatureWidget annotation associated with a particular form field in the specified document.</summary>
            <param name="doc">The document to which the widget is to be added.</param>
            <param name="pos">A rectangle specifying the widget's bounds in default user space units.</param>
            <param name="field">The digital signature field for which to create a signature widget.</param>
            <returns>A newly-created blank SignatureWidget annotation.</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.SignatureWidget.CreateSignatureAppearance(pdftron.PDF.Image)">
            <summary>A function that will create and add an appearance to this widget by centering an image within it.</summary>
            <param name="img">An Image object representing the image to use.</param>
        </member>
        <member name="M:pdftron.PDF.Annots.SignatureWidget.GetDigitalSignatureField">
            <summary>Retrieves the DigitalSignatureField associated with this SignatureWidget.</summary>
            <returns>A DigitalSignatureField object representing the digital signature form field associated with this signature widget annotation.</returns>
        </member>
        <member name="M:pdftron.PDF.Annots.SignatureWidget.#ctor(pdftron.SDF.Obj)">
            <summary>Creates a SignatureWidget annotation and initializes it using given Cos/SDF object.</summary>
            <param name="d">the object to use to initialize the SignatureWidget</param>
            <remarks>The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.SignatureWidget">
            <summary>An object representing a Signature used in a PDF Form. These Widgets can be signed directly, or signed using a DigitalSignatureField.</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.Dispose">
            <summary> Releases all resources used by the Widget </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Widget annotation and initialize it using given annotation object.

</summary>
            <param name="ann"> The input annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetFont(pdftron.PDF.Font)">
            <summary> Specifies a font to be used for text in this Widget
</summary>
            <param name="font">the font to use</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetFont">
            <summary> Retrieves the font used for displaying text in this Widget.

</summary>
            <returns> The font used by this Widget
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetFontSize(System.Double)">
            <summary> Sets the font size of the Widget Annotation.

</summary>
            <param name="font_size">the new font size
</param>
            <exception cref="T:pdftron.Common.PDFNetException"> PDFNetException the PDFNet exception </exception>
            <remarks> A font size of 0 specifies that the text should be autosized to fit in the Widget.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetFontSize">
            <summary> Returns the font size used in this Widget Annotation.

</summary>
            <returns> the font size
</returns>
            <exception cref="T:pdftron.Common.PDFNetException"> PDFNetException the PDFNet exception </exception>
            <remarks> A font size of 0 specifies that the text should be autosized to fit in the Widget.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetTextColor(pdftron.PDF.ColorPt,System.Int32)">
            <summary> Sets the text color of the Widget Annotation.

</summary>
            <param name="color">ColorPt object representing the color.
</param>
            <param name="col_comp">An integer indicating a color space value from the ColorSpace::Type enum. That is,
1 corresponding to "e_device_gray",
3 corresponding to "e_device_rgb", and 4 corresponding to "e_device_cmyk".
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetTextColorCompNum">
            <summary> Returns the number of color components in the text color of the Widget Annotation.

</summary>
            <returns>An integer indicating a color space value from the ColorSpace::Type enum. That is,
1 corresponding to "e_device_gray",
3 corresponding to "e_device_rgb", and 4 corresponding to "e_device_cmyk" if color space is applicable.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetTextColor">
            <summary> Returns the text color of the Widget Annotation.

</summary>
            <returns> The text color. 
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  that the color can be in different color spaces: Gray, RGB, or CMYK. Call "GetTextColorCompNum"
to access the color space information corresponding to the border color.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetFitFull(System.Boolean)">
            <summary> Sets the fit full option being used.
(Optional)

</summary>
            <param name="ff">A boolean value indicating the fit full option being used.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>the FitFull value, if true, indicates that the button
appearance shall be scaled to fit fully within the bounds of
the annotation without taking into consideration the line
width of the border. Default value: false.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetFitFull">
            <summary> Gets the fit full option being used.

</summary>
            <returns> A boolean value indicating the fit full option being used.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the FitFull value, if true, indicates that the button
appearance shall be scaled to fit fully within the bounds of
the annotation without taking into consideration the line
width of the border. Default value: false.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetVIconLeftOver(System.Double)">
            <summary> Sets the vertical leftover of the icon within the annotatin.
(Optional)

</summary>
            <param name="vl">A number indicating the vertical
leftover of the icon within the annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>the vertical leftover is a number that
shall be between 0.0 and 1.0 indicating the fraction of leftover
space to allocate at the bottom of the icon.
A value of 0.0 shall position the icon at the bottom
of the annotation rectangle.
A value of 0.5 shall center it in the vertical direction within
the rectangle.
This entry shall be used only if the icon is scaled proportionally.
Default value: 0.5.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetVIconLeftOver">
            <summary> Gets the vertical leftover of the icon within the annotatin.

</summary>
            <returns> a number indicating the vertical
leftover of the icon within the annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the vertical leftover is a number that
shall be between 0.0 and 1.0 indicating the fraction of leftover
space to allocate at the bottom of the icon.
A value of 0.0 shall position the icon at the bottom
of the annotation rectangle.
A value of 0.5 shall center it in the vertical direction within
the rectangle.
This entry shall be used only if the icon is scaled proportionally.
Default value: 0.5.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetHIconLeftOver(System.Double)">
            <summary> Sets the horizontal leftover of the icon within the annotatin.
(Optional)

</summary>
            <param name="hl">A number indicating the horizontal
leftover of the icon within the annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the horizontal leftover is a number that shall be between
0.0 and 1.0 indicating the fraction of leftover space to allocate at the left.
A value of 0.0 shall position the icon at the left of the annotation rectangle.
A value of 0.5 shall center it in the horizontal direction within the rectangle.
This entry shall be used only if the icon is scaled proportionally.
Default value: 0.5.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetHIconLeftOver">
            <summary> Gets the horizontal leftover of the icon within the annotatin.

</summary>
            <returns> A number indicating the horizontal
leftover of the icon within the annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the horizontal leftover is a number that shall be between
0.0 and 1.0 indicating the fraction of leftover space to allocate at the left.
A value of 0.0 shall position the icon at the left of the annotation rectangle.
A value of 0.5 shall center it in the horizontal direction within the rectangle.
This entry shall be used only if the icon is scaled proportionally.
Default value: 0.5.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetScaleCondition(pdftron.PDF.Annots.Widget.ScaleCondition)">
            <summary> Sets the condition under which the icon should be scaled.
(Optional)

</summary>
            <param name="sd">An entry of the "ScaleCondition" enum which the icon should
be scaled.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>This property is part of the Icon Fit dictionary, where the Icon Fit 
dictionary specifys how to display the buttonï¿½s icon within the annotation
rectangle of its widget annotation(Optional; pushbutton fields only)
If present, the icon fit dictionary shall apply to all of the annotationï¿½s icons
(normal, rollover, and alternate).</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetScaleCondition">
            <summary> Gets the condition under which the icon should be scaled.

</summary>
            <returns> an entry of the "ScaleCondition" enum which the icon should
be scaled.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>
This property is part of the Icon Fit dictionary, where the Icon Fit
dictionary specifys how to display the buttonï¿½s icon within the annotation
rectangle of its widget annotation(Optional; pushbutton fields only)
If present, the icon fit dictionary shall apply to all of the annotationï¿½s icons
(normal, rollover, and alternate).</remarks>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.ScaleCondition.e_Never">
            <summary>Never scale.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.ScaleCondition.e_WhenSmaller">
            <summary>Scale only when the icon is smaller than the annotation rectangle.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.ScaleCondition.e_WhenBigger">
            <summary>Scale only when the icon is bigger than the annotation rectangle.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.ScaleCondition.e_Always">
            <summary>Always scale</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Widget.ScaleCondition">
            <summary>spedifies the circumstances under which the
icon shall be scaled inside the annotation rectangle</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetIconCaptionRelation(pdftron.PDF.Annots.Widget.IconCaptionRelation)">
            <summary> Sets the Icon and caption relationship of the Widget annotation.
(Optional; pushbutton fields only)

</summary>
            <param name="icr">An entry of the "IconCaptionRelation" enum which
represents the relationship between the icon and the caption of the
Widget annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetIconCaptionRelation">
            <summary> Gets the Icon and caption relationship of the Widget annotation.

</summary>
            <returns> An entry of the "IconCaptionRelation" enum which
represents the relationship between the icon and the caption of the
Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.IconCaptionRelation.e_COverlayI">
            <summary>Caption overlaid directly on the icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.IconCaptionRelation.e_CLeftIRight">
            <summary>Caption to the left of the icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.IconCaptionRelation.e_CRightILeft">
            <summary>Caption to the right of the icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.IconCaptionRelation.e_CAboveI">
            <summary>Caption above the icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.IconCaptionRelation.e_CBelowI">
            <summary>Caption below the icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.IconCaptionRelation.e_NoCaption">
            <summary>No caption; icon only</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.IconCaptionRelation.e_NoIcon">
            <summary>No icon; caption only</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Widget.IconCaptionRelation">
            <summary>Icon and Caption Relation of the Widget annotation</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetScaleType(pdftron.PDF.Annots.Widget.ScaleType)">
            <summary> Sets the Scale Type of the Widget annotation.
(Optional)

</summary>
            <param name="st">- an entry of the "ScaleType" enum which represents the
Scale Type of the Widget annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>This property is part of the Icon Fit dictionary, where the Icon Fit.
dictionary specifys how to display the buttonï¿½s icon within the annotation
rectangle of its widget annotation(Optional; pushbutton fields only)
If present, the icon fit dictionary shall apply to all of the annotationï¿½s icons
(normal, rollover, and alternate).</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetScaleType">
            <summary> Gets the Scale Type of the Widget annotation.

</summary>
            <returns> An entry of the "ScaleType" enum which represents the
Scale Type of the Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>This property is part of the Icon Fit dictionary, where the Icon Fit
dictionary specifys how to display the buttonï¿½s icon within the annotation
rectangle of its widget annotation(Optional; pushbutton fields only)
If present, the icon fit dictionary shall apply to all of the annotationï¿½s icons
(normal, rollover, and alternate).
</remarks>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.ScaleType.e_Proportional">
            <summary>Scale the icon to fit the width or height 
of the annotation rectangle while maintaining 
the iconï¿½s original aspect ratio. If the 
required horizontal and vertical scaling 
factors are different, use the smaller of the two, 
centering the icon within the annotation rectangle 
in the other dimension.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.ScaleType.e_Anamorphic">
            <summary>Scale the icon to fill the annotation rectangle 
exactly, without regard to its original aspect 
ratio (ratio of width to height).</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Widget.ScaleType">
            <summary>scale types</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetMouseDownIcon(pdftron.SDF.Obj)">
            <summary> Sets the Mouse Down icon associated with the Widget annotation.
(Optional; button fields only)
Sets the Mouse Down icon associated with the Widget annotation.

</summary>
            <param name="ic">An SDF object that represents the Mouse Down icon
associated with the Widget annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>The Mouse Down icon object is a form XObject defining the
widget annotationï¿½s alternate (down) icon, which shall be displayed
when the mouse button is pressed within its active area.

This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetMouseDownIcon">
            <summary> Gets the Mouse Down icon associated with the Widget annotation.

</summary>
            <returns> An SDF object that represents the Mouse Down icon
associated with the Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Mouse Down icon object is a form XObject defining the
widget annotationï¿½s alternate (down) icon, which shall be displayed
when the mouse button is pressed within its active area.		
This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetRolloverIcon(pdftron.SDF.Obj)">
            <summary> Sets the rollover icon associated with the Widget annotation.
(Optional; button fields only)

</summary>
            <param name="ic">An SDF object that represents the rollover icon
associated with the Widget annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The rollover icon object is a form XObject defining the
widget annotationï¿½s rollover icon, which shall be displayed
when the user rolls the cursor into its active area without
pressing the mouse button.

This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetRolloverIcon">
            <summary> Gets the rollover icon associated with the Widget annotation.

</summary>
            <returns> An SDF object that represents the rollover icon
associated with the Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>The rollover icon object is a form XObject defining the 
widget annotationï¿½s rollover icon, which shall be displayed
when the user rolls the cursor into its active area without
pressing the mouse button.

This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetStaticIcon(pdftron.SDF.Obj)">
            <summary> Sets the static icon associated with the Widget annotation.
(Optional; button fields only)

</summary>
            <param name="ic">An SDF object that represents the static icon
associated with the Widget annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The static icon object is a form XObject defining the
widget annotationï¿½s normal icon, which shall be
displayed when it is not interacting with the user.

This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetStaticIcon">
            <summary> Gets the static icon associated with the Widget annotation.

</summary>
            <returns> An SDF object that represents the static icon
associated with the Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>The static icon object is a form XObject defining the
 widget annotationï¿½s normal icon, which shall be
displayed when it is not interacting with the user.

This property is part of the Widget appearance characteristics dictionary, this dictionary 
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetMouseDownCaptionText(System.String)">
            <summary> Sets the button down caption text of the Widget annotation.
(Optional; button fields only)

</summary>
            <param name="ct">A string containing the button down text of the Widget annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The button down caption shall be displayed when the mouse button is
pressed within its active area.

This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetMouseDownCaptionText">
            <summary> Gets the button down caption text of the Widget annotation.

</summary>
            <returns> A string containing the button down text of the Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The button down caption shall be displayed when the mouse button is
pressed within its active area.

This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetRolloverCaptionText(System.String)">
            <summary> Sets the roll over caption text of the Widget annotation.
(Optional; button fields only)

</summary>
            <param name="ct">A string containing the roll over caption text of the Widget annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The rollover caption shall be displayed when the user rolls the cursor
into its active area without pressing the mouse button.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetRolloverCaptionText">
            <summary> Gets the roll over caption text of the Widget annotation.

</summary>
            <returns> A string containing the static caption text of the Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>The rollover caption shall be displayed when the user rolls the cursor
into its active area without pressing the mouse button.

This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetStaticCaptionText(System.String)">
            <summary> Sets static caption text of the Widget annotation.
(Optional; button fields only)

</summary>
            <param name="ct">A string containing the static caption text of the Widget annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The static caption is the widget annotationï¿½s normal caption, which
shall be displayed when it is not interacting with the user.
Unlike entries "RC, AC, I, RI, IX, IF, TP", which apply only to widget
annotations associated with pushbutton fields, the Static Caption(CA) entry may be used
with any type of button field, including check boxes.

This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetStaticCaptionText">
            <summary> Gets static caption text of the Widget annotation.

</summary>
            <returns> A string containing the static caption text of the Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The static caption is the widget annotationï¿½s normal caption, which
shall be displayed when it is not interacting with the user.
Unlike the remaining entries with the captions, which apply only to widget
annotations associated with pushbutton fields, the Static Caption(CA) entry may be used
with any type of button field, including check boxes.

This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetBackgroundColor(pdftron.PDF.ColorPt,System.Int32)">
            <summary> Sets the background color of the Widget.
(Optional)

</summary>
            <param name="c">A ColorPt object that denotes the color of the wdget background.
</param>
            <param name="CompNum">An int whose value implies the color space used for the parameter c.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  it is necessary to make sure the consistancy between the ColorPt type
and the ColorSpace::Type value. e_device_gray corresponds to an array of two numbers;
e_device_rgb corresponds to an array of 3 numbers, e_device_cmyk corresponds to an array of
4 numnbers, while e_null correspons to an arry of 0 number. Entries out of the specified
color space array length will be desgarded. However, missing entries for a specified color space
will throw exception either when setting the color or when later retrieving color(colorspace)
information.

This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetBackgroundColor">
            <summary> Gets the background color of the Widget annotation.

</summary>
            <returns> A ColorPt object that denotes the color of the Widget background.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  that the color can be in different color spaces: Gray, RGB, or CMYK. Call "GetBackgroundColorCompNum"
to access the color space information corresponding to the border color.

This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetBackgroundColorCompNum">
            <summary> Gets the number indicating background color space of the Widget annotation.

</summary>
            <returns> An integer indicating a color space value from the ColorSpace::Type enum. That is,
1 corresponding to "e_device_gray",
3 corresponding to "e_device_rgb", and 4 corresponding to "e_device_cmyk" if color space is applicable,
orelse 0 corresponding to "e_null" if the color is transparent.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetBorderColor(pdftron.PDF.ColorPt,System.Int32)">
            <summary> Sets the border color of the Widget.
(Optional)

</summary>
            <param name="c">A ColorPt object that denotes the color of the wdget border.
</param>
            <param name="CompNum">An int whose value implies the color space used for the parameter c.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  it is necessary to make sure the consistancy between the ColorPt type
and the ColorSpace::Type value. e_device_gray corresponds to an array of two numbers;
e_device_rgb corresponds to an array of 3 numbers, e_device_cmyk corresponds to an array of
4 numnbers, while e_null correspons to an arry of 0 number. Entries out of the specified
color space array length will be desgarded. However, missing entries for a specified color space
will throw exception either when setting the color or when later retrieving color(colorspace)
information.

This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetBorderColor">
            <summary> Gets the border color of the Widget annotation.

</summary>
            <returns> A ColorPt object that denotes the color of the Widget border.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  that the color can be in different color spaces: Gray, RGB, or CMYK. Call "GetBorderColorCompNum"
to access the color space information corresponding to the border color.

This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetBorderColorCompNum">
            <summary> Gets the number indicating border color space of the Widget annotation.

</summary>
            <returns> An integer indicating a color space value from the ColorSpace::Type enum. That is, 1 corresponding to "e_device_gray",
3 corresponding to "e_device_rgb", and 4 corresponding to "e_device_cmyk" if color space is applicable,
orelse 0 corresponding to "e_null" if the color is transparent.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This property is part of the Widget appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetAction(pdftron.PDF.Action)">
            <summary> Sets the action of the Widget annotation
(Optional; PDFï¿½1.2 )

</summary>
            <param name="action">An action object representing the action of the Widget annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The action is an action that shall be performed when the annotation is activated </remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetAction">
            <summary> Gets the action of the Widget annotation.

</summary>
            <returns> An action object representing the action of the Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The action is an action that shall be performed when the annotation is activated </remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.SetHighlightingMode(pdftron.PDF.Annots.Widget.HighlightingMode)">
            <summary> Sets the HighlightingMode of the Widget Annotation.
(Optional)

</summary>
            <param name="mode">- an entry of the enum "HighlightingMode", specifying the highlighting
mode of the widget annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetHighlightingMode">
            <summary> Gets the HighlightingMode of the Widget Annotation.

</summary>
            <returns> an entry of the enum "HighlightingMode", specifying the highlighting
mode of the widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.HighlightingMode.e_toggle">
            <summary>Same as e_push (which is preferred).</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.HighlightingMode.e_push">
            <summary>Display the annotationï¿½s down appearance, if any
If no down appearance is defined, the contents
of the annotation rectangle shall be offset to appear as if it
were being pushed below the surface of the page.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.HighlightingMode.e_outline">
            <summary>Invert the annotationï¿½s border</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.HighlightingMode.e_invert">
            <summary>Invert the contents of the annotation rectangle.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Widget.HighlightingMode.e_none">
            <summary>No highlighting</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Widget.HighlightingMode">
            <summary> This enum specifies the Highlighting mode of the widget annotation. </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.GetField">
            <summary> Gets the field corresponding to the Widget annotation.

</summary>
            <returns> A Field object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect,pdftron.PDF.Field)">
            <summary> Creates a new Widget annotation, in the specified document.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="field">the field
</param>
            <returns> A newly created blank Widget annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Widget.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Widget annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Widget">
            <summary> Interactive forms use widget annotations (PDF 1.2) to represent the appearance 
of fields and to manage user interactions. As a convenience, when a field has 
only a single associated widget annotation, the contents of the field dictionary 
and the annotation dictionary may be merged into a single dictionary containing 
entries that pertain to both a field and an annotation.
NOTE This presents no ambiguity, since the contents of the two kinds of 
dictionaries do not conflict.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Watermark.Dispose">
            <summary> Releases all resources used by the Watermark </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Watermark.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Watermark annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Watermark.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Watermark annotation, in the specified document.

</summary>
            <param name="doc">A document to which the Popup annotation is added.
</param>
            <param name="pos">A rectangle specifying the Popup annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Watermark annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Watermark.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Watermark annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Watermark">
            <summary> A watermark annotation (PDF 1.6) shall be used to represent graphics 
that shall be printed at a fixed size and position on a page, 
regardless of the dimensions of the printed page. The FixedPrint entry 
of a watermark annotation dictionary shall be a dictionary that 
contains values for specifying the size and position of the annotation.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Underline.Dispose">
            <summary> Releases all resources used by the Underline </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Underline.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Underline annotation, in the specified document.

</summary>
            <param name="doc">A document to which the Popup annotation is added.
</param>
            <param name="pos">A rectangle specifying the Popup annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Underline annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Underline.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Underline annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Underline.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Underline annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Underline">
            <summary> Text markup annotations shall appear as highlights, underlines, 
strikeouts (all PDF 1.3), or jagged (ï¿½squigglyï¿½) underlines (PDF 1.4) 
in the text of a document. When opened, they shall display a pop-up 
window containing the text of the associated note.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.Dispose">
            <summary> Releases all resources used by the Text </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Text annotation and initialize it using given annotation object.

</summary>
            <param name="mku">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.SetStateModel(System.String)">
            <summary> Sets the string indicating the state model of the Text annotation.
(Required if State is present, otherwise optional; PDF 1.5 )

</summary>
            <param name="statemodule">- A string that represents the state model of the Text annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The State model is the state model corresponding to the State entry; </remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.GetStateModel">
            <summary> Gets the string indicating the state model of the Text annotation.

</summary>
            <returns> A string that represents the state model of the Text annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The State model is the state model corresponding to the State entry;</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.SetState(System.String)">
            <summary> Sets the string indicating the state of the Text annotation.
(Optional; PDF 1.5 )

</summary>
            <param name="state">A string that represents the state of the Text annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The state is a state to which the original annotation shall
be set.
Default: ï¿½Unmarkedï¿½ if StateModel is ï¿½Markedï¿½; ï¿½Noneï¿½ if StateModel
is ï¿½Reviewï¿½.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.GetState">
            <summary> Gets the string indicating the state of the Text annotation.

</summary>
            <returns> A string that represents the state of the Text annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The state is a state to which the original annotation shall
be set.
Default: ï¿½Unmarkedï¿½ if StateModel is ï¿½Markedï¿½; ï¿½Noneï¿½ if StateModel
is ï¿½Reviewï¿½.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.SetIcon(System.String)">
            <summary> Sets the string indicating the type of icon corresponding to
(Optional).

</summary>
            <param name="icon">A string that represents the type of icon
that is corresponding with this Text annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the icon type represnets the name of an icon that shall be
used in displaying the annotation. Conforming readers shall
provide predefined icon appearances for at least the following standard icon types:
e_Comment, e_Key, e_Note, e_Help, e_NewParagraph, e_Paragraph, e_Insert
Additional names may be supported as well. Default value: Note.
The annotation dictionaryï¿½s Appearance(AP) entry,
if present, shall take precedence over this Name entry.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.SetIcon(pdftron.PDF.Annots.Text.Icon)">
            <summary> Sets the Icon type as an entry of the enum "Icon".
(Optional)

</summary>
            <param name="icon">An entry of "Icon" that represents the type of icon
that is corresponding with this Text annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the icon type represnets the name of an icon that shall be
used in displaying the annotation. Conforming readers shall
provide predefined icon appearances for at least
the following standard icon names:
Comment, Key, Note, Help, NewParagraph, Paragraph, Insert
Additional names may be supported as well. Default value: e_Note.
The annotation dictionaryï¿½s Appearance(AP) entry,
if present, shall take precedence over this Name entry.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.GetIconName">
            <summary> Gets the string indicating the type of icon corresponding to
the Text annotation.

</summary>
            <returns> A string that represents the type of icon
that is corresponding with this Text annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the icon type represnets the name of an icon that shall be
used in displaying the annotation. Conforming readers shall
provide predefined icon appearances for at least the following standard icon types:
e_Comment, e_Key, e_Note, e_Help, e_NewParagraph, e_Paragraph, e_Insert
Additional names may be supported as well. Default value: Note.
The annotation dictionaryï¿½s Appearance(AP) entry,
if present, shall take precedence over this Name entry.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.GetIcon">
            <summary> Gets the Icon type as an entry of the enum "Icon".

</summary>
            <returns> An entry of "Icon" that represents the type of icon
that is corresponding with this Text annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The icon type represnets the name of an icon that shall be
used in displaying the annotation. Conforming readers shall
provide predefined icon appearances for at least the following standard icon types:
e_Comment, e_Key, e_Note, e_Help, e_NewParagraph, e_Paragraph, e_Insert
Additional names may be supported as well. Default value: e_Note.
The annotation dictionaryï¿½s Appearance(AP) entry,
if present, shall take precedence over this Name entry.
</remarks>
        </member>
        <member name="F:pdftron.PDF.Annots.Text.Icon.e_Unknown">
            <summary>Unknown, no icon associated or non-standard icon.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Text.Icon.e_Note">
            <summary>Note icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Text.Icon.e_Insert">
            <summary>Insert icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Text.Icon.e_Paragraph">
            <summary>Paragraph icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Text.Icon.e_NewParagraph">
            <summary>New Paragraph icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Text.Icon.e_Help">
            <summary>Help icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Text.Icon.e_Key">
            <summary>key icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Text.Icon.e_Comment">
            <summary>comment icon</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Text.Icon">
            <summary>type of icon 
corresponding with the Text annotation.</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.SetOpen(System.Boolean)">
            <summary> Sets the initial openning condition of the Text annotation.
(Optional)

</summary>
            <param name="isopen">A bool indicating whether the Text annotation is initially open.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this Open option is a flag specifying whether the annotation shall
initially be displayed open.
Default value: false.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.IsOpen">
            <summary> Gets the initial openning condition of the Text annotation.

</summary>
            <returns> A bool indicating whether the Text annotation is initially open.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this Open option is a flag specifying whether the annotation shall
 initially be displayed open.
Default value: false.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect,System.String)">
            <summary> Creates a new Text annotation, in the specified document.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="contents">The text contents of the Text annotation.
</param>
            <returns> A newly created Text annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Text annotation, in the specified document.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Text annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Text.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Text annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Text">
            <summary> A text annotation represents a ï¿½sticky noteï¿½ attached to a point in 
the PDF document. When closed, the annotation shall appear as an icon; 
when open, it shall display a pop-up window containing the text of 
the note in a font and size chosen by the conforming reader. 
Text annotations shall not scale and rotate with the page; 
they shall behave as if the NoZoom and NoRotate annotation flags.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.StrikeOut.Dispose">
            <summary> Releases all resources used by the StrikeOut </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.StrikeOut.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new StrikeOut annotation, in the specified document.

</summary>
            <param name="doc">A document to which the Popup annotation is added.
</param>
            <param name="pos">A rectangle specifying the Popup annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank StrikeOut annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.StrikeOut.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a StrikeOut annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.StrikeOut.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a StrikeOut annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.StrikeOut">
            <summary> TextMarkup annotations shall appear as highlights, underlines, 
strikeouts (all PDF 1.3), or jagged (ï¿½squigglyï¿½) underlines (PDF 1.4) 
in the text of a document. When opened, they shall display a pop-up 
window containing the text of the associated note.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Squiggly.Dispose">
            <summary> Releases all resources used by the Squiggly </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Squiggly.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Squiggly annotation, in the specified document.

</summary>
            <param name="doc">A document to which the Popup annotation is added.
</param>
            <param name="pos">A rectangle specifying the Popup annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Squiggly annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Squiggly.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Squiggly annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Squiggly.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Squiggly annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Squiggly">
            <summary> TextMarkup annotations shall appear as highlights, underlines, 
strikeouts (all PDF 1.3), or jagged (ï¿½squigglyï¿½) underlines (PDF 1.4) 
in the text of a document. When opened, they shall display a pop-up 
window containing the text of the associated note.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Square.Dispose">
            <summary> Releases all resources used by the Square </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Square.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Square annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Square.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Square annotation, in the specified document.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Square annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Square.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Square annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Square">
            <summary> Square and circle annotations (PDF 1.3) shall display, 
respectively, a rectangle or an ellipse on the page. When opened, 
they shall display a pop-up window containing the text of the 
associated note. The rectangle or ellipse shall be inscribed within 
the annotation rectangle defined by the annotation dictionaryï¿½s Rect 
entry
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Sound.Dispose">
            <summary> Releases all resources used by the Sound </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Sound.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Sound annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Sound.SetIcon(System.String)">
            <summary> Sets the sub type of the Sound annotation.
(Optional)

</summary>
            <param name="type">- A string indicating the subtype of the Sound annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Icon indicates a name of an icon that shall be
used in displaying the annotation. Conforming readers shall
provide predefined icon appearances for at least the standard
types Speaker and Mic.
Additional types may be supported as well.
Default value: Speaker.
The annotation dictionaryï¿½s AP entry, if present, shall take
precedence over the Name entry; see Tableï¿½168 and 12.5.5,
ï¿½Appearance Streams.ï¿½
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Sound.GetIconName">
            <summary> Gets the sub type of the Sound annotation.

</summary>
            <returns> A string indicating the subtype of the Sound annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Icon indicates a name of an icon that shall be
used in displaying the annotation. Conforming readers shall
provide predefined icon appearances for at least the standard
types Speaker and Mic.
Additional types may be supported as well.
Default value: Speaker.
The annotation dictionaryï¿½s AP entry, if present, shall take
precedence over the Name entry; see Tableï¿½168 and 12.5.5,
ï¿½Appearance Streams.ï¿½</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Sound.SetIcon(pdftron.PDF.Annots.Sound.Icon)">
            <summary> Sets the sub type of the Sound annotation.
(Optional)

</summary>
            <param name="type">An entry in the "GetIcon" enum
indicating the subtype of the Sound annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Icon indicates name of an icon that shall be
used in displaying the annotation. Conforming readers shall
provide predefined icon appearances for at least the standard
types e_Speaker and e_Mic.
Additional types may be supported as well. However, user defined
sub types has to be represented by string. In the enum"Icon",
it will just show as "e_Unknow".
Default value: e_Speaker.
The annotation dictionaryï¿½s AP entry, if present, shall take
precedence over the Name entry; see Tableï¿½168 and 12.5.5,
ï¿½Appearance Streams.ï¿½
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Sound.GetIcon">
            <summary> Gets the sub type of the Sound annotation.

</summary>
            <returns> An entry in the "GetIcon" enum
indicating the subtype of the Sound annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Icon indicates name of an icon that shall be
used in displaying the annotation. Conforming readers shall
provide predefined icon appearances for at least the standard
types e_Speaker and e_Mic.
Additional types may be supported as well. However, user defined
sub types has to be represented by string, in the enum"Icon",
it will just show as "e_Unknow".
Default value: e_Speaker.
The annotation dictionaryï¿½s AP entry, if present, shall take
precedence over the Name entry; see Tableï¿½168 and 12.5.5,
ï¿½Appearance Streams.ï¿½
</remarks>
        </member>
        <member name="F:pdftron.PDF.Annots.Sound.Icon.e_Unknown">
            <summary>User defined or Invalid.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Sound.Icon.e_Mic">
            <summary>Mic Sound.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Sound.Icon.e_Speaker">
            <summary>Speaker Sound.</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Sound.Icon">
            <summary>The Icon of the Sound annotation. </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Sound.SetSoundStream(pdftron.SDF.Obj)">
            <summary> Sets the initial sound object of the Sound annotation.

</summary>
            <param name="sound_stream">- An SDF object representing a sound stream.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The sound stream is a sound object defining the sound
that shall be played when the annotation is activated.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Sound.GetSoundStream">
            <summary> Gets the initial sound object of the Sound annotation.

</summary>
            <returns> An SDF object representing a sound stream.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The sound stream is a sound object defining the sound
that shall be played when the annotation is activated.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Sound.CreateWithData(pdftron.SDF.SDFDoc,pdftron.PDF.Rect,pdftron.Filters.Filter,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a new Sound annotation in the specified document. Accepts raw
audio data, along with a few parameters describing the format of that data</summary>
            <param name="doc">A document to which the annotation is added.</param>
            <param name="pos">A rectangle specifying the annotation's bounds in default user space units.</param>
            <param name="source_data">The raw sound data for the newly created annot</param>
            <param name="bits_per_sample">The number of bits per sample in source data</param>
            <param name="sample_freq">The number of samples per second present in source data</param>
            <param name="num_channels">The number of audio channels in source_data</param>
            <returns> A newly created blank Sound annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Sound.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Sound annotation, in the specified document.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Sound annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Sound.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Sound annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Sound">
            <summary> A sound annotation (PDF 1.2) shall analogous to a text annotation 
except that instead of a text note, it contains sound recorded from 
the computerï¿½s microphone or imported from a file. When the annotation 
is activated, the sound shall be played. The annotation shall behave 
like a text annotation in most ways, with a different icon (by default, 
a speaker) to indicate that it represents a sound. 
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetFitFull(System.Boolean)">
            <summary> Sets the fit full option being used.
(Optional)

</summary>
            <param name="ff">A boolean value indicating the fit full option being used.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the FitFull value, if true, indicates that the button
appearance shall be scaled to fit fully within the bounds of
the annotation without taking into consideration the line
width of the border. Default value: false.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetFitFull">
            <summary> Gets the fit full option being used.

</summary>
            <returns> A boolean value indicating the fit full option being used.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the FitFull value, if true, indicates that the button
appearance shall be scaled to fit fully within the bounds of
the annotation without taking into consideration the line
width of the border. Default value: false.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetVIconLeftOver(System.Double)">
            <summary> Sets the vertical leftover of the icon within the annotatin.
(Optional)

</summary>
            <param name="vl">A number indicating the vertical
leftover of the icon within the annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the vertical leftover is a number that
shall be between 0.0 and 1.0 indicating the fraction of leftover
space to allocate at the bottom of the icon.
A value of 0.0 shall position the icon at the bottom
of the annotation rectangle.
A value of 0.5 shall center it in the vertical direction within
the rectangle.
This entry shall be used only if the icon is scaled proportionally.
Default value: 0.5.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetVIconLeftOver">
            <summary> Gets the vertical leftover of the icon within the annotatin.

</summary>
            <returns> a number indicating the vertical
leftover of the icon within the annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the vertical leftover is a number that
shall be between 0.0 and 1.0 indicating the fraction of leftover
space to allocate at the bottom of the icon.
A value of 0.0 shall position the icon at the bottom
of the annotation rectangle.
A value of 0.5 shall center it in the vertical direction within
the rectangle.
This entry shall be used only if the icon is scaled proportionally.
Default value: 0.5.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetHIconLeftOver(System.Double)">
            <summary> Sets the horizontal leftover of the icon within the annotatin.
(Optional)

</summary>
            <param name="hl">A number indicating the horizontal
leftover of the icon within the annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the horizontal leftover is a number that shall be between
0.0 and 1.0 indicating the fraction of leftover space to allocate at the left.
A value of 0.0 shall position the icon at the left of the annotation rectangle.
A value of 0.5 shall center it in the horizontal direction within the rectangle.
This entry shall be used only if the icon is scaled proportionally.
Default value: 0.5.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetHIconLeftOver">
            <summary> Gets the horizontal leftover of the icon within the annotatin.

</summary>
            <returns> A number indicating the horizontal
leftover of the icon within the annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>the horizontal leftover is a number that shall be between
0.0 and 1.0 indicating the fraction of leftover space to allocate at the left.
A value of 0.0 shall position the icon at the left of the annotation rectangle.
A value of 0.5 shall center it in the horizontal direction within the rectangle.
This entry shall be used only if the icon is scaled proportionally.
Default value: 0.5.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetScaleCondition(pdftron.PDF.Annots.Screen.ScaleCondition)">
            <summary>Sets the condition under which the icon should be scaled.
</summary>
            <param name="sd">an entry of the "ScaleCondition" enumerator which the icon should
be scaled.
</param>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetScaleCondition">
            <summary> Gets the condition under which the icon should be scaled.

</summary>
            <returns> an entry of the "ScaleCondition" enum which the icon should
be scaled.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This property is part of the Icon Fit dictionary, where the Icon Fit
dictionary specifys how to display the buttonï¿½s icon within the annotation
rectangle of its widget annotation(Optional; pushbutton fields only)
If present, the icon fit dictionary shall apply to all of the annotationï¿½s icons
(normal, rollover, and alternate).
</remarks>
        </member>
        <member name="F:pdftron.PDF.Annots.Screen.ScaleCondition.e_Never">
            <summary>Never scale.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Screen.ScaleCondition.e_WhenSmaller">
            <summary>Scale only when the icon is smaller than the annotation rectangle.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Screen.ScaleCondition.e_WhenBigger">
            <summary>Scale only when the icon is bigger than the annotation rectangle.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Screen.ScaleCondition.e_Always">
            <summary>Always scale.</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Screen.ScaleCondition">
            <summary>spedifies the circumstances under which the icon shall be scaled inside the annotation rectangle.</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetIconCaptionRelation(pdftron.PDF.Annots.Screen.IconCaptionRelation)">
            <summary> Sets the Icon and caption relationship of the Screen annotation.
(Optional; pushbutton fields only)

</summary>
            <param name="icr">An entry of the "IconCaptionRelation" enum which
represents the relationship between the icon and the caption of the
Screen annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetIconCaptionRelation">
            <summary> Gets the Icon and caption relationship of the Screen annotation.

</summary>
            <returns> An entry of the "IconCaptionRelation" enum which
represents the relationship between the icon and the caption of the
Screen annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Annots.Screen.IconCaptionRelation.e_COverlayI">
            <summary>Caption overlaid directly on the icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Screen.IconCaptionRelation.e_CLeftIRight">
            <summary>Caption to the left of the icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Screen.IconCaptionRelation.e_CRightILeft">
            <summary>Caption to the right of the icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Screen.IconCaptionRelation.e_CAboveI">
            <summary>Caption above the icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Screen.IconCaptionRelation.e_CBelowI">
            <summary>Caption below the icon</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Screen.IconCaptionRelation.e_NoCaption">
            <summary>No caption; icon only</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Screen.IconCaptionRelation.e_NoIcon">
            <summary>No icon; caption only</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Screen.IconCaptionRelation">
            <summary>indicates where to position the text of the widget annotationï¿½s caption relative to its icon</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetScaleType(pdftron.PDF.Annots.Screen.ScaleType)">
            <summary> Sets the Scale Type of the Screen annotation.
(Optional)

</summary>
            <param name="st">- an entry of the "ScaleType" enum which represents the
Scale Type of the Screen annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>This property is part of the Icon Fit dictionary, where the Icon Fit
dictionary specifys how to display the buttonï¿½s icon within the annotation
rectangle of its widget annotation(Optional; pushbutton fields only)
If present, the icon fit dictionary shall apply to all of the annotationï¿½s icons
(normal, rollover, and alternate).
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetScaleType">
            <summary> Gets the Scale Type of the Screen annotation.

</summary>
            <returns> An entry of the <c>ScaleType</c> enum which represents the
Scale Type of the Screen annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This property is part of the Icon Fit dictionary, where the Icon Fit
dictionary specifys how to display the buttonï¿½s icon within the annotation
rectangle of its widget annotation(Optional; pushbutton fields only)
If present, the icon fit dictionary shall apply to all of the annotationï¿½s icons
(normal, rollover, and alternate).
</remarks>
        </member>
        <member name="F:pdftron.PDF.Annots.Screen.ScaleType.e_Proportional">
            <summary>Proportional scaling: Scale the icon to fit
the width or height of the annotation rectangle while maintaining
the iconï¿½s original aspect ratio. If the required horizontal and
vertical scaling factors are different, use the smaller of the two,
centering the icon within the annotation rectangle in the other
dimension.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Screen.ScaleType.e_Anamorphic">
            <summary>Scale the icon to fill the
annotation rectangle exactly, without regard to its original
aspect ratio (ratio of width to height).</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Screen.ScaleType">
            <summary>Icon scale types</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetMouseDownIcon(pdftron.SDF.Obj)">
            <summary> Sets the Mouse Down icon associated with the Screen annotation.
(Optional; button fields only)
Sets the Mouse Down icon associated with the Screen annotation.

</summary>
            <param name="ic">An SDF object that represents the Mouse Down icon
associated with the Screen annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Mouse Down icon object is a form XObject defining the
widget annotationï¿½s alternate (down) icon, which shall be displayed
when the mouse button is pressed within its active area.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetMouseDownIcon">
            <summary> Gets the Mouse Down icon associated with the Screen annotation.

</summary>
            <returns> An SDF object that represents the Mouse Down icon
associated with the Screen annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Mouse Down icon object is a form XObject defining the 
widget annotationï¿½s alternate (down) icon, which shall be displayed
when the mouse button is pressed within its active area.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetRolloverIcon(pdftron.SDF.Obj)">
            <summary> Sets the rollover icon associated with the Screen annotation.
(Optional; button fields only)

</summary>
            <param name="ic">An SDF object that represents the rollover icon
associated with the Screen annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The rollover icon object is a form XObject defining the 
widget annotationï¿½s rollover icon, which shall be displayed
when the user rolls the cursor into its active area without
pressing the mouse button.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetRolloverIcon">
            <summary> Gets the rollover icon associated with the Screen annotation.

</summary>
            <returns> An SDF object that represents the rollover icon
associated with the Screen annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The rollover icon object is a form XObject defining the 
widget annotationï¿½s rollover icon, which shall be displayed
when the user rolls the cursor into its active area without
pressing the mouse button.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetStaticIcon(pdftron.SDF.Obj)">
            <summary> Sets the static icon associated with the Screen annotation.
(Optional; button fields only)

</summary>
            <param name="ic">An SDF object that represents the static icon
associated with the Screen annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The static icon object is a form XObject defining the
widget annotationï¿½s normal icon, which shall be
displayed when it is not interacting with the user.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetStaticIcon">
            <summary> Gets the static icon associated with the Screen annotation.

</summary>
            <returns> An SDF object that represents the static icon
associated with the Screen annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The static icon object is a form XObject defining the
widget annotationï¿½s normal icon, which shall be
displayed when it is not interacting with the user.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetMouseDownCaptionText(System.String)">
            <summary> Sets the button down caption text of the Screen annotation.
(Optional; button fields only)

</summary>
            <param name="ct">A string containing the button down text of the Screen annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The button down caption shall be displayed when the mouse button is
pressed within its active area.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetMouseDownCaptionText">
            <summary> Gets the button down caption text of the Screen annotation.

</summary>
            <returns> A string containing the button down text of the Screen annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The button down caption shall be displayed when the mouse button is
pressed within its active area.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetRolloverCaptionText(System.String)">
            <summary> Sets the roll over caption text of the Screen annotation.
(Optional; button fields only)

</summary>
            <param name="ct">A string containing the roll over caption text of the Screen annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The rollover caption shall be displayed when the user rolls the cursor
into its active area without pressing the mouse button.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetRolloverCaptionText">
            <summary> Gets the roll over caption text of the Screen annotation.

</summary>
            <returns> A string containing the static caption text of the Screen annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The rollover caption shall be displayed when the user rolls the cursor
into its active area without pressing the mouse button.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetStaticCaptionText(System.String)">
            <summary> Sets static caption text of the Screen annotation.
(Optional; button fields only)

</summary>
            <param name="ct">A string containing the static caption text of the Screen annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The static caption is the widget annotationï¿½s normal caption, which 
shall be displayed when it is not interacting with the user.
Unlike entries "RC, AC, I, RI, IX, IF, TP", which apply only to widget
annotations associated with pushbutton fields, the Static Caption(CA) entry may be used
with any type of button field, including check boxes.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetStaticCaptionText">
            <summary> Gets static caption text of the Screen annotation.

</summary>
            <returns> A string containing the static caption text of the Screen annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The static caption is the widget annotationï¿½s normal caption, which
shall be displayed when it is not interacting with the user.
Unlike the remaining entries with the captions, which apply only to widget
annotations associated with pushbutton fields, the Static Caption(CA) entry may be used
with any type of button field, including check boxes.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetBackgroundColor(pdftron.PDF.ColorPt,System.Int32)">
            <summary> Sets the background color of the Screen.
(Optional)

</summary>
            <param name="c">A ColorPt object that denotes the color of the wdget background.
</param>
            <param name="CompNum">An int whose value implies the color space used for the parameter c.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  it is necessary to make sure the consistancy between the ColorPt type 
and the ColorSpace::Type value. e_device_gray corresponds to an array of two numbers;
e_device_rgb corresponds to an array of 3 numbers, e_device_cmyk corresponds to an array of
4 numnbers, while e_null correspons to an arry of 0 number. Entries out of the specified
color space array length will be desgarded. However, missing entries for a specified color space
will throw exception either when setting the color or when later retrieving color(colorspace)
information.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetBackgroundColor">
            <summary> Gets the background color of the Screen annotation.

</summary>
            <returns> A ColorPt object that denotes the color of the Screen background.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  that the color can be in different color spaces: Gray, RGB, or CMYK. Call "GetBackgroundColorCompNum"
to access the color space information corresponding to the border color.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetBackgroundColorCompNum">
            <summary> Gets the number indicating background color space of the Screen annotation.

</summary>
            <returns> An integer indicating a color space value from the ColorSpace::Type enum. That is,
1 corresponding to "e_device_gray",
3 corresponding to "e_device_rgb", and 4 corresponding to "e_device_cmyk" if color space is applicable,
orelse 0 corresponding to "e_null" if the color is transparent.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetBorderColor(pdftron.PDF.ColorPt,System.Int32)">
            <summary> Sets the border color of the Screen.
(Optional)

</summary>
            <param name="c">A ColorPt object that denotes the color of the wdget border.
</param>
            <param name="CompNum">An int whose value implies the color space used for the parameter c.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  it is necessary to make sure the consistancy between the ColorPt type
and the ColorSpace::Type value. e_device_gray corresponds to an array of two numbers;
e_device_rgb corresponds to an array of 3 numbers, e_device_cmyk corresponds to an array of
4 numnbers, while e_null correspons to an arry of 0 number. Entries out of the specified
color space array length will be desgarded. However, missing entries for a specified color space
will throw exception either when setting the color or when later retrieving color(colorspace)
information.

This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetBorderColor">
            <summary> Gets the border color of the Screen annotation.

</summary>
            <returns> A ColorPt object that denotes the color of the Screen border.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  that the color can be in different color spaces: Gray, RGB, or CMYK. Call "GetBorderColorCompNum" 
to access the color space information corresponding to the border color.		
This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetBorderColorCompNum">
            <summary> Gets the number indicating border color space of the Screen annotation.

</summary>
            <returns> An integer indicating a color space value from the ColorSpace::Type enum. That is, 1 corresponding to "e_device_gray",
3 corresponding to "e_device_rgb", and 4 corresponding to "e_device_cmyk" if color space is applicable,
orelse 0 corresponding to "e_null" if the color is transparent.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This property is part of the Screen appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetAction(pdftron.PDF.Action)">
            <summary> Sets the action of the Screen annotation
(Optional; PDFï¿½1.1 )

</summary>
            <param name="action">An action object representing the action of the Screen annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The action is an action that shall be performed when the annotation is activated </remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetAction">
            <summary> Sets the action of the Screen annotation
(Optional; PDFï¿½1.1 )

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The action is an action that shall be performed when the annotation is activated </remarks>
            <returns>action of the screen annotation</returns>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.SetTitle(System.String)">
            <summary> Sets the title of the Screen Annotation.
(Optional)

</summary>
            <param name="title">A string representing the title of the Screen Annotation
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.GetTitle">
            <summary> Gets the title of the Screen Annotation.

</summary>
            <returns> A string representing the title of the Screen Annotation
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Screen annotation, in the specified document.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Screen annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.Dispose">
            <summary> Releases all resources used by the Screen </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Screen annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Screen.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Screen annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Screen">
            <summary> A screen annotation (PDF 1.5) specifies a region of a page upon which 
media clips may be played. It also serves as an object from which 
actions can be triggered. 12.6.4.13, ï¿½Rendition Actionsï¿½ discusses 
the relationship between screen annotations and rendition actions.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.RubberStamp.Dispose">
            <summary> Releases all resources used by the RubberStamp </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.RubberStamp.SetIcon(System.String)">
            <summary> Sets the Icon type as a string.

</summary>
            <param name="icon">A string representing icon type of the RubberStamp annotation
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>
The annotation dictionaryï¿½s Appearance(AP) entry,
if present, shall take precedence over this Name entry.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.RubberStamp.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a RubberStamp annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical 
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.RubberStamp.GetIconName">
            <summary> Gets the Icon type as a string.

</summary>
            <returns> A string representing icon type of the RubberStamp annotation
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the icon type represnets an icon that shall be used in displaying the annotation.
There are predefined icon appearances for at the following standard names:
Approved, Experimental, NotApproved, AsIs, Expired , NotForPublicRelease, Confidential,
Final, Sold, Departmental, ForComment, TopSecret, Draft, ForPublicRelease. Additional
names may be supported as well.
Default value: Draft.
The annotation dictionaryï¿½s Appearance(AP) entry,
if present, shall take precedence over this Name entry.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.RubberStamp.SetIcon">
            <summary>Sets the type of the icon associated with the RubberStamp annotation to e_Draft.</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.RubberStamp.SetIcon(pdftron.PDF.Annots.RubberStamp.Icon)">
            <summary> Sets the Icon type as an entry of the enum "Icon". 	 *

</summary>
            <param name="type">An entry of "Icon" that represents the type of icon
that is corresponding with this RubberStamp annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>
The annotation dictionaryï¿½s Appearance(AP) entry,
if present, shall take precedence over this Name entry.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.RubberStamp.GetIcon">
            <summary> Gets the Icon type as an entry of the enum "Icon".

</summary>
            <returns> An entry of "Icon" that represents the type of icon
that is corresponding with this RubberStamp annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.RubberStamp.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new RubberStamp annotation, in the specified document.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank RubberStamp annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.RubberStamp.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect,pdftron.PDF.Annots.RubberStamp.Icon)">
            <summary> Creates a new RubberStamp annotation, in the specified document.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="icon">icon for the rubber stamp
</param>
            <returns> A newly created blank RubberStamp annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_Unknown">
            <summary>User defined or invalid.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_Draft">
            <summary>a stamp with the text "Draft"</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_ForPublicRelease">
            <summary>a stamp with the text "ForPublicRelease"</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_TopSecret">
            <summary>a stamp with the text "TopScret"</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_ForComment">
            <summary>a stamp with the text "ForComment" </summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_Departmental">
            <summary>a stamp with the text "Departmental" </summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_Sold">
            <summary>a stamp with the text "Sold"</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_Final">
            <summary>a stamp with the text "Final" </summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_Confidential">
            <summary>a stamp with the text "Confidential"</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_NotForPublicRelease">
            <summary>a stamp with the text "NotForPublicRelease"</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_Expired">
            <summary>a stamp with the text "Expired"</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_AsIs">
            <summary>a stamp with the text "AsIs"</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_NotApproved">
            <summary>a stamp with the text "NotApproved"</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_Experimental">
            <summary>a stamp with the text "Experimental"</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.RubberStamp.Icon.e_Approved">
            <summary>a stamp with the text "Approved" </summary>
        </member>
        <member name="T:pdftron.PDF.Annots.RubberStamp.Icon">
            <summary>Icon type of the RubberStamp annotation</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.RubberStamp.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a RubberStamp annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.RubberStamp">
            <summary> A rubber stamp annotation (PDF 1.3) displays text or graphics intended 
to look as if they were stamped on the page with a rubber stamp. 
When opened, it shall display a pop-up window containing the text of 
the associated note. Tableï¿½181 shows the annotation dictionary entries 
specific to this type of annotation.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.Dispose">
            <summary> Releases all resources used by the Redaction </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.SetQuadForm">
            <summary>Sets Overlay text quadding(justification) format of the Redaction annotation to e_LeftJustified
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.SetQuadForm(pdftron.PDF.Annots.Redaction.QuadForm)">
            <summary> Sets Overlay text quadding(justification) format of the Redaction annotation.

</summary>
            <param name="form">An entry of the "QuadForm" enum, indicating the
overlay text quadding(justification) format of the Redaction annotation .
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Quadding format specifies the form of quadding (justification) to be 
used in laying out the overlay</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.#ctor(pdftron.PDF.Annot)">
            <summary> Creates an Redaction annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical 
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.GetQuadForm">
            <summary> Gets Overlay text quadding(justification) format of the Redaction annotation.

</summary>
            <returns> An entry of the "QuadForm" enum, indicating the
overlay text quadding(justification) format of the Redaction annotation .
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  quadding format specifies the form of quadding (justification) to be
used in laying out the overlay</remarks>
        </member>
        <member name="F:pdftron.PDF.Annots.Redaction.QuadForm.e_None">
            <summary>No justification to the overlay text</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Redaction.QuadForm.e_RightJustified">
            <summary>Overlay text is right justified</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Redaction.QuadForm.e_Centered">
            <summary>Overlay text is centered</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Redaction.QuadForm.e_LeftJustified">
            <summary>Overlay text is left justified</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Redaction.QuadForm">
            <summary> This integer list represents the Quad Format of the Redaction annotation</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.SetOverlayTextAppearance(System.String)">
            <summary> Sets Overlay text appearance of the Redaction annotation.

</summary>
            <param name="app">A string containing the overlay text appearance of the annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The overlay text appearance is the appearance string to be used in formatting the overlay text
when it is drawn after the affected content has been removed. This entry is ignored
if the Overlay appearance strint(RO) entry is present.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.GetOverlayTextAppearance">
            <summary> Gets Overlay text appearance of the Redaction annotation.

</summary>
            <returns> A string containing the overlay text appearance of the annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The overlay text appearance is the appearance string to be used in formatting the overlay text
when it is drawn after the affected content has been removed. This entry is ignored
if the Overlay appearance strint(RO) entry is present.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.SetUseRepeat">
            <summary>Sets the option of whether to use repeat for the Redaction annotation to false.</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.SetUseRepeat(System.Boolean)">
            <summary> Sets the option of whether to use repeat for the Redaction annotation.

</summary>
            <param name="repeat">the new use repeat
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If UseRepeat value is true, then the text specified by OverlayText
should be repeated to fill the redacted region after the affected content
has been removed. This entry is ignored if the RO entry is present.
Default value: false.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.GetUseRepeat">
            <summary> Gets the option of whether to use repeat for the Redaction annotation.

</summary>
            <returns> A bool indicating whether to repeat for the Redaction annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If UseRepeat value is true, then the text specified by OverlayText
should be repeated to fill the redacted region after the affected content
has been removed. This entry is ignored if the RO entry is present.
Default value: false.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.SetOverlayText(System.String)">
            <summary> Sets Overlay text of the Redaction annotation.

</summary>
            <param name="title">A string containing the overlay text of the annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The OverlayText string is a text string specifying the
overlay text that should be drawn over the redacted region
after the affected content has been removed.
This entry is ignored if the Overlay appearance(RO) entry is present.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.GetOverlayText">
            <summary> Gets Overlay text of the Redaction annotation.

</summary>
            <returns> A string containing the overlay text of the annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The OverlayText string is a text string specifying the
overlay text that should be drawn over the redacted region
after the affected content has been removed.
This entry is ignored if the Overlay appearance(RO) entry is present.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.SetAppFormXO(pdftron.SDF.Obj)">
            <summary> Sets Overlay appearance of the Redaction annotation.
(Optional)

</summary>
            <param name="formxo">An SDF object that represents the overlay appearance of the Redaction annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This overlay appearance object is a form XObject specifying the overlay appearance for this
redaction annotation. After this redaction is applied and the affected content has been removed,
the overlay appearance should be drawn such that its origin lines up with the lower-left corner
of the annotation rectangle. This form XObject is not necessarily related to other annotation
appearances, and may or may not be present in the Appearance dictionary. This entry takes precedence over the Interior Color(IC),
OverlayText, OverlayTextAppearance(DA), and QuadPoint(Q) entries.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.GetAppFormXO">
            <summary> Gets Overlay appearance of the Redaction annotation.

</summary>
            <returns> An SDF object that represents the overlay overlay appearance of the Redaction annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This overlay overlay appearance object is a form XObject specifying the overlay appearance for this
redaction annotation. After this redaction is applied and the affected content has been removed,
the overlay appearance should be drawn such that its origin lines up with the lower-left corner
of the annotation rectangle. This form XObject is not necessarily related to other annotation
appearances, and may or may not be present in the Appearance dictionary. This entry takes precedence over the Interior Color(IC),
OverlayText, OverlayTextAppearance(DA), and QuadPoint(Q) entries.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.SetQuadPoint(System.Int32,pdftron.PDF.QuadPoint)">
            <summary> Set the QuadPoint to be located at a certain index of the QuadPoint array of the Redaction
annotation.
(Optional; PDFï¿½1.6 )

</summary>
            <param name="idx">The index position where the QuadPoint of interest is to be inserted.
</param>
            <param name="pt"> The QuadPoint to be inserted at that position.
</param>
            <returns> The QuadPoint to be located at a certain index of the QuadPoint array of the Redaction annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  An array of n QuadPoints specifying the coordinates of n quadrilaterals
in default user space that comprise the region in which the link should be activated.
The coordinates specifying the four vertices of the quadrilateral in counterclockwise order.
For orientation purposes, such as when applying an underline border style, the bottom of a
quadrilateral is the line formed by p1 and p2 of the QuadPoint.
QuadPoints shall be ignored if any coordinate in the array lies outside the region specified by Rect.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.GetQuadPoint(System.Int32)">
            <summary> Gets the QuadPoint located at a certain index of the QuadPoint array of the Redaction
annotation.

</summary>
            <param name="idx">The index of where the QuadPoint of interest is located.
</param>
            <returns> The QuadPoint located at a certain index of the QuadPoint array of the Redaction annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  An array of n QuadPoints specifying If present, these quadrilaterals denote
the content region that is intended to be removed. If this entry is not present,
the Rect entry denotes the content region that is intended to be removed</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.GetQuadPointCount">
            <summary> Gets the number of QuadPoints in the QuadPoints array of the Redaction annotation.

</summary>
            <returns> The number of QuadPoints.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  An array of n QuadPoints specifying If present, these quadrilaterals denote 
the content region that is intended to be removed. If this entry is not present,
the Rect entry denotes the content region that is intended to be removed</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Redaction annotation, in the specified document.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Circle annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Redaction.#ctor(pdftron.SDF.Obj)">
            <summary> Creates an Redaction annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Redaction">
            <summary> A redaction annotation (PDF 1.7) identifies content that is intended to 
be removed from the document. The intent of redaction annotations is to 
enable the following process:
<list type="numbered"><item><description>
a)Content identification. A user applies redact annotations that specify 
the pieces or regions of content that should be removed. Up until the 
next step is performed, the user can see, move and redefine these 
annotations.
</description></item><item><description>
b)Content removal. The user instructs the viewer application to apply 
the redact annotations, after which the content in the area specified 
by the redact annotations is removed. In the removed contentï¿½s place, 
some marking appears to indicate the area has been redacted. Also, the 
redact annotations are removed from the PDF document.
</description></item></list><para>
Redaction annotations provide a mechanism for the first step in the 
redaction process (content identification). This allows content to be 
marked for redaction in a non-destructive way, thus enabling a review 
process for evaluating potential redactions prior to removing the 
specified content.    
</para><para>
Redaction annotations shall provide enough information to be used 
in the second phase of the redaction process (content removal). 
This phase is application-specific and requires the conforming reader 
to remove all content identified by the redaction annotation, as well 
as the annotation itself.
</para><para>
Conforming readers that support redaction annotations shall provide 
a mechanism for applying content removal, and they shall remove all 
traces of the specified content. If a portion of an image is contained 
in a redaction region, that portion of the image data shall be destroyed; 
clipping or image masks shall not be used to hide that data. 
Such conforming readers shall also be diligent in their consideration 
of all content that can exist in a PDF document, including XML Forms 
Architecture (XFA) content and Extensible Metadata Platform (XMP) 
content.
</para></summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Polygon.Dispose">
            <summary> Releases all resources used by the Polygon </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Polygon.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Polygon annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Polygon.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Polygon annotation, in the specified document.

</summary>
            <param name="doc">A document to which the Polygon annotation is added.
</param>
            <param name="pos">A rectangle specifying the PolyLine annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank PolyLine annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Polygon.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Polygon annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical 
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Polygon">
            <summary>Polygon annotation</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.PolyLine.Dispose">
            <summary> Releases all resources used by the PolyLine </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.PolyLine.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a PolyLine annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.PolyLine.SetIntentName(pdftron.PDF.Annots.PolyLine.IntentType)">
            <summary> Sets the Intent name as an entry from the enum "IntentName"
of the annnotation type.
(Optional; PDFï¿½1.6 )

</summary>
            <param name="mode">The intent name of the annotation using
an entry from the enum "IntentName".
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.PolyLine.GetIntentName">
            <summary> Gets the Intent name as an entry from the enum "IntentName"
of the annnotation type.

</summary>
            <returns> the intent name
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <returns>s The intent name of the annotation as
an entry from the enum "IntentName".
</returns>
        </member>
        <member name="F:pdftron.PDF.Annots.PolyLine.IntentType.e_Unknown">
            <summary>Non-standard intent type</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.PolyLine.IntentType.e_PolygonDimension">
            <summary>The polygon annotation is intended to function as a dimension. (PDF 1.7)</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.PolyLine.IntentType.e_PolyLineDimension">
            <summary>The polyline annotation is intended to function as a dimension. (PDF 1.7)</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.PolyLine.IntentType.e_PolygonCloud">
            <summary>The annotation is intended to function as a cloud object.</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.PolyLine.IntentType">
            <summary>intent of the polygon or polyline annotation.</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.PolyLine.SetVertex(System.Int32,pdftron.PDF.Point)">
            <summary> Sets the vertex(in Point object form) corresponding to the index
within the VErtices array.

</summary>
            <param name="idx">The index position where the vertex is to be located.
</param>
            <param name="pt">A Point object corresponding to the vertex to be added to the array.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Vertices array is An array of numbers specifying the width
and dash pattern that shall represent each vertex in default user space
in Point form,</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.PolyLine.GetVertex(System.Int32)">
            <summary> Gets the vertex(in Point object form) corresponding to the index
within the VErtices array.

</summary>
            <param name="idx">The index position where the vertex is located.
</param>
            <returns> A Point object corresponding to the vertex in the specified index position.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Vertices array is An array of numbers specifying the width 
and dash pattern that shall represent each vertex in default user space
in Point form,</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.PolyLine.GetVertexCount">
            <summary> Gets the number of vertices in the Vertices array.

</summary>
            <returns> An int indicating the number of vertices.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Vertices array is An array of numbers specifying the width
and dash pattern that shall represent each vertex in default user space
in Point form,</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.PolyLine.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new PolyLine annotation, in the specified document.

</summary>
            <param name="doc">A document to which the PolyLine annotation is added.
</param>
            <param name="pos">A rectangle specifying the PolyLine annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank PolyLine annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.PolyLine.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a PolyLine annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical 
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.PolyLine">
            <summary> Polyline annotations (PDF 1.5) display (open or closed) shapes of multiple edges on the page. 
Such polylines may have any number of vertices connected by straight lines. 
For open polylines, which is the default type of polylines, the first and last vertex are not 
implicitly connected.
Closed polylines are polygons, whose first and last vertex are connected.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Movie.Dispose">
            <summary> Releases all resources used by the Movie </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Movie.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Movie annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Movie.SetToBePlayed(System.Boolean)">
            <summary> Sets the option of whether the Movie is to be played.
(Optional)

</summary>
            <param name="isplay">A boolean value telling if the movie is to be played.
Default value: true.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  IsToBePlayed is a flag specifying whether to play the movie when the annotation is activated.
The movie shall be played using default activation parameters. If the value is false,
the movie shall not be played.
Default value: true.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Movie.IsToBePlayed">
            <summary> Gets the option of whether the Movie is to be played.

</summary>
            <returns> a boolean value indicating if the movie is to be played
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  IsToBePlayed is a flag specifying whether to play the movie when the annotation is activated.
The movie shall be played using default activation parameters. If the value is false,
the movie shall not be played.
Default value: true.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Movie.SetTitle(System.String)">
            <summary> Sets the title of the Movie Annotation.
(Optional)

</summary>
            <param name="title">A string representing the title of the Movie Annotation
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Movie actions may use this title to reference the movie annotation. </remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Movie.GetTitle">
            <summary> Gets the title of the Movie Annotation.

</summary>
            <returns> A string representing the title of the Movie Annotation
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Movie actions may use this title to reference the movie annotation. </remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Movie.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Movie annotation, in the specified document.

</summary>
            <param name="doc">A document to which the Movie annotation is added.
</param>
            <param name="pos">A rectangle specifying the Movie annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Movie annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Movie.#ctor(pdftron.SDF.Obj)">
            <summary> A movie annotation (PDF 1.2) contains animated graphics and sound to be
presented on the computer screen and through the speakers. When the
annotation is activated, the movie shall be played.

</summary>
            <param name="d">the d
</param>
        </member>
        <member name="T:pdftron.PDF.Annots.Movie">
            <summary> The Class Movie.</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Link.Dispose">
            <summary> Releases all resources used by the Link </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Link.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Link annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Link.SetQuadPoint(System.Int32,pdftron.PDF.QuadPoint)">
            <summary> Set the QuadPoint to be located at a certain index of the QuadPoint array of the Link
annotation.
(Optional; PDFï¿½1.6 )

</summary>
            <param name="idx">the idx
</param>
            <param name="qp">the qp
</param>
            <returns> The QuadPoint to be located at a certain index of the QuadPoint array of the Link annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  An array of n QuadPoints specifying the coordinates of n quadrilaterals
in default user space that comprise the region in which the link should be activated.
The coordinates specifying the four vertices of the quadrilateral in counterclockwise order.
For orientation purposes, such as when applying an underline border style, the bottom of a
quadrilateral is the line formed by p1 and p2 of the QuadPoint.
QuadPoints shall be ignored if any coordinate in the array lies outside the region specified by Rect.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Link.GetQuadPoint(System.Int32)">
            <summary> Gets the QuadPoint located at a certain index of the QuadPoint array of the Link
annotation.

</summary>
            <param name="idx">the idx
</param>
            <returns> The QuadPoint located at a certain index of the QuadPoint array of the Link annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  An array of n QuadPoints specifying the coordinates of n quadrilaterals
in default user space that comprise the region in which the link should be activated.
The coordinates specifying the four vertices of the quadrilateral in counterclockwise order.
For orientation purposes, such as when applying an underline border style, the bottom of a
quadrilateral is the line formed by p1 and p2 of the QuadPoint.
QuadPoints shall be ignored if any coordinate in the array lies outside the region specified by Rect.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Link.GetQuadPointCount">
            <summary> Gets the number of QuadPoints in the QuadPoints array of the Link annotation.

</summary>
            <returns> The number of QuadPoints.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  An array of n QuadPoints specifying the coordinates of n quadrilaterals
in default user space that comprise the region in which the link should be activated.
The coordinates specifying the four vertices of the quadrilateral in counterclockwise order.
For orientation purposes, such as when applying an underline border style, the bottom of a
quadrilateral is the line formed by p1 and p2 of the QuadPoint.
QuadPoints shall be ignored if any coordinate in the array lies outside the region specified by Rect.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Link.SetHighlightingMode(pdftron.PDF.Annots.Link.HighlightingMode)">
            <summary> Sets the HighlightingMode Linked Annotation.
(Optional; PDFï¿½1.2 )

</summary>
            <param name="mode">The HighLighting mode represented as an entry of the enum "HighlightingMode".
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Link.GetHighlightingMode">
            <summary> Gets the HighlightingMode Linked Annotation.

</summary>
            <returns> The HighLighting mode represented as an entry of the enum "HighlightingMode".
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Annots.Link.HighlightingMode.e_push">
            <summary>Display the annotation as if it were being pushed below the surface of the page.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Link.HighlightingMode.e_outline">
            <summary>Invert the annotation's border</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Link.HighlightingMode.e_invert">
            <summary>Invert the contents of the annotation rectangle.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Link.HighlightingMode.e_none">
            <summary>No highlighting</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Link.HighlightingMode">
            <summary> highlighting mode is the visual effect that shall be used when
the mouse button is pressed or held down inside its active area</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Link.SetAction(pdftron.PDF.Action)">
            <summary> Sets the Action of the Linked Annotation.
(Optional; PDFï¿½1.1 )

</summary>
            <param name="action">An Action object that denotes the action of the linked annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The parameter is an action that shall be performed when the 
link annotation is activated</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Link.GetAction">
            <summary> Gets the Action of the Linked Annotation.

</summary>
            <returns> An Action object that denotes the action of the linked annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The return value is an action that shall be performed when the 
link annotation is activated</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Link.RemoveAction">
            <summary> Removes a link annotation's action.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Link.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect,pdftron.PDF.Action)">
            <summary> Creates a new Link annotation.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <param name="action">Action for the link annotation.
</param>
            <returns> A new Link annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Link.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Link annotation.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A new Link annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Link.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Link annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Link">
            <summary> A link annotation represents either a hypertext link to a destination elsewhere in the document 
or an action to be performed. 
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.Dispose">
            <summary> Releases all resources used by the Ink </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.#ctor(pdftron.PDF.Annot)">
            <summary> Creates an Ink annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical 
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.SetHighlightIntent(System.Boolean)">
            <summary> Enables or disables the Ink drawing like a highlighter.

</summary>
            <param name="highlight">true if the Ink will draw like a highlighter. (multiply blend mode)
If false it will draw in normal mode. (normal blend mode)
</param>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.GetHighlightIntent">
            <summary> Retrieves whether the Ink will draw like a highlighter.
</summary>
            <returns> true if the Ink will draw like a highlighter. (multiply blend mode)
If false it will draw in normal mode. (normal blend mode)
</returns>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.Erase(pdftron.PDF.Point,pdftron.PDF.Point,System.Double)">
            <summary> 
Erase a rectangle area formed by drawing a line from pt1 to pt2 with width
</summary>
            <param name="pt1">A point object that is one end of the eraser segment</param>
            <param name="pt2">A point object that is the other end of the eraser segment</param>
            <param name="eraserRadius">The radius of the eraser</param>
            <returns>Whether an ink stroke was erased
</returns>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.SetBlendMode(pdftron.PDF.GState.BlendMode)">
            <summary> Sets the blend mode use for drawing the ink.

</summary>
            <param name="blend_mode">The blend mode (default is e_bl_normal)
</param>
            <remarks>This method is deprecated and will be removed in a future version of PDFNet. 
It is strongly recommended to use SetHighlightIntent(bool) instead.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.GetBlendMode">
            <summary> Gets the blend mode used for drawing the ink.

</summary>
            <remarks>This method is deprecated and will be removed in a future version of PDFNet. 
It is strongly recommended to use GetHighlightIntent() instead.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.SetSmoothing(System.Boolean)">
            <summary> Sets whether smoothing should be used then refreshing the inks appearance

</summary>
            <param name="useSmoothing">A bool indicating whether smoothing should be used (true by default).
</param>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.GetSmoothing">
            <summary> Gets whether smoothing should be used then refreshing the inks appearance
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.SetPoint(System.Int32,System.Int32,pdftron.PDF.Point)">
            <summary> Sets the specific point in the Ink List.

</summary>
            <param name="pathindex">An unsigned integer indicating the index of the stroked
path
</param>
            <param name="pointindex">An unsigned integer indicating the index of the point
within the stroked path indicated by the parameter "pathindex".
</param>
            <param name="pt">A Point object that is to be located by "pathindex" and "pointindex".
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Ink list is An array of n arrays, 
each representing a stroked path. Each array shall be a series of
Point objects specifying points along the path.
When drawn, the points shall be connected by straight lines or curves
in an implementation-dependent way.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.GetPoint(System.Int32,System.Int32)">
            <summary> Gets the specific point in the Ink List.

</summary>
            <param name="pathindex">An unsigned integer indicating the index of the stroked
path
</param>
            <param name="pointindex">An unsigned integer indicating the index of the point
within the stroked path indicated by the parameter "pathindex".
</param>
            <returns> A Point object that is located by "pathindex" and "pointindex".
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Ink list is An array of n arrays,
each representing a stroked path. Each array shall be a series of
Point objects specifying points along the path.
When drawn, the points shall be connected by straight lines or curves
in an implementation-dependent way.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.GetPointCount(System.Int32)">
            <summary> Gets number of points in a certain stroked path in the InkList.

</summary>
            <param name="pathindex">An unsigned integer indicating the index of the stroked
path, the number of points within whom is of our interest.
</param>
            <returns> An integer representing the number of points in the stroked path
of the Ink list.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Ink list is An array of n arrays, 
each representing a stroked path. Each array shall be a series of
Point objects specifying points along the path.
When drawn, the points shall be connected by straight lines or curves
in an implementation-dependent way.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.GetPathCount">
            <summary> Gets number of stroked pathes in the InkList.

</summary>
            <returns> An integer representing the number of pathes in the Ink list.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Ink list is An array of n arrays,
each representing a stroked path. Each array shall be a series of
Point objects specifying points along the path.
When drawn, the points shall be connected by straight lines or curves
in an implementation-dependent way.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Ink annotation, in the specified document.

</summary>
            <param name="doc">A document to which the Ink annotation is added.
</param>
            <param name="pos">A rectangle specifying the Ink annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Ink annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Ink.#ctor(pdftron.SDF.Obj)">
            <summary> Creates an Ink annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Ink">
            <summary> An ink annotation (PDF 1.3) represents a freehand ï¿½scribbleï¿½ composed 
of one or more disjoint paths. When opened, it shall display a pop-up 
window containing the text of the associated note. 
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Highlight.Dispose">
            <summary> Releases all resources used by the Highlight </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Highlight.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Highlight annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical 
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Highlight.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Highlight annotation, in the specified document.

</summary>
            <param name="doc">A document to which the Popup annotation is added.
</param>
            <param name="pos">A rectangle specifying the Popup annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Highlight annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Highlight.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Highlight annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Highlight">
            <summary> Text markup annotations shall appear as highlights, underlines, 
strikeouts (all PDF 1.3), or jagged (ï¿½squigglyï¿½) underlines (PDF 1.4) 
in the text of a document. When opened, they shall display a pop-up 
window containing the text of the associated note.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.Dispose">
            <summary> Releases all resources used by the FreeText </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.#ctor(pdftron.PDF.Annot)">
            <summary> Creates an FreeText annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.GetFontSize">
            <summary> Returns the font size of the FreeText Annotation.

</summary>
            <returns> the font size
</returns>
            <exception cref="T:pdftron.Common.PDFNetException"> PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.SetFontSize(System.Double)">
            <summary> Sets the font size of the FreeText Annotation.

</summary>
            <param name="font_size">the font size
</param>
            <exception cref="T:pdftron.Common.PDFNetException"> PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.GetLineColorCompNum">
            <summary> Returns the number of color components in the line and border color
of the FreeText Annotation.

</summary>
            <returns> the line color comp num
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.GetLineColor">
            <summary> Returns the line and border color of the FreeText Annotation.

</summary>
            <returns> the line color
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Current implementation of this method uses a non-standard
entry in the annotation dictionary and will not return meaningful
results when called on annotations not created with PDFTron software.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.SetLineColor(pdftron.PDF.ColorPt,System.Int32)">
            <summary> Sets the line and border color of the FreeText Annotation.

</summary>
            <param name="color">ColorPt object representing the color.
</param>
            <param name="col_comp">number of colorant components in ColorPt object.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Current implementation of this method creates a non-standard
entry in the annotation dictionary and uses it to generate the appearance
stream. Make sure you call RefreshAppearance() after changing text or
line color, and remember that editing the annotation in other PDF
application will produce different appearance.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.GetTextColorCompNum">
            <summary> Returns the number of color components in the line and border color
of the FreeText Annotation.

</summary>
            <returns> the text color comp num
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.GetTextColor">
            <summary> Returns the text color of the FreeText Annotation.

</summary>
            <returns> the text color
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Current implementation of this method uses a non-standard 
entry in the annotation dictionary and will not return meaningful
results when called on annotations not created with PDFTron software.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.SetTextColor(pdftron.PDF.ColorPt,System.Int32)">
            <summary> Sets the text color of the FreeText Annotation.

</summary>
            <param name="color">ColorPt object representing the color.
</param>
            <param name="col_comp">number of colorant components in ColorPt object.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Current implementation of this method creates a non-standard 
entry in the annotation dictionary and uses it to generate the appearance
stream. Make sure you call RefreshAppearance() after changing text or
line color, and remember that editing the annotation in other PDF
application will produce different appearance.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.SetEndingStyle(System.String)">
            <summary> Sets the ending style of the callout line of the FreeText Annotation.
(Optional; meaningful only if CL is present; PDF 1.6)

</summary>
            <param name="est">The ending style represented using a string.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The ending style specifies the line ending style that 
shall be used in drawing the callout line specified in CallOut Line Points
(CL). The enum entry shall specify the line ending style for the endpoint
defined by the starting point(p1) of the CallOut Line Points.
Default value: "None".</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.SetEndingStyle(pdftron.PDF.Annots.Line.EndingStyle)">
            <summary> Sets the ending style of the callout line of the FreeText Annotation.
(Optional; meaningful only if CL is present; PDF 1.6)

</summary>
            <param name="est">The ending style represented using one of the
entries of the enum "EndingStyle"
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The ending style specifies the line ending style that
shall be used in drawing the callout line specified in CallOut Line Points
(CL). The enum entry shall specify the line ending style for the endpoint
defined by the starting point(p1) of the CallOut Line Points.
Default value: e_None.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.GetEndingStyle">
            <summary> Gets the ending style of the callout line of the FreeText Annotation.

</summary>
            <returns> The ending style represented as one of the entries of the enum "EndingStyle"
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The ending style specifies the line ending style that
shall be used in drawing the callout line specified in CallOut Line Points
(CL). The enum entry shall specify the line ending style for the endpoint
defined by the starting point(p1) of the CallOut Line Points.
Default value: e_None.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.SetIntentName">
            <summary> Sets the Intent name to e_FreeText.</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.SetIntentName(pdftron.PDF.Annots.FreeText.IntentName)">
            <summary> Sets the Intent name as an entry from the enum "IntentName"
of the annnotation type.
(Optional; PDFï¿½1.4)

</summary>
            <param name="mode">The intent name of the annotation as
an entry from the enum "IntentJName".
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The intent name describes the intent of the free text annotation. 
The following values shall be valid:
e_FreeText - The annotation is intended to function as a plain free-text annotation.
A plain free - text annotation is also known as a text box comment.
e_FreeTextCallout - The annotation is intended to function as a callout.
The callout is associated with an area on the page through the callout line specified in CL.
e_FreeTextTypeWriter - The annotation is intended to function as a click-to-type or typewriter
object and no callout line is drawn.
Default value: e_FreeText</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.GetIntentName">
            <summary> Gets the Intent name as an entry from the enum "IntentName"
of the annnotation type.

</summary>
            <returns> the intent name
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <returns>s The intent name of the annotation as
an entry from the enum "IntentName".
</returns>
            <remarks>  The intent name describes the intent of the free text annotation.
The following values shall be valid:
e_FreeText - The annotation is intended to function as a plain free-text annotation.
A plain free-text annotation is also known as a text box comment.
e_FreeTextCallout - The annotation is intended to function as a callout.
The callout is associated with an area on the page through the callout line specified in CL.
e_FreeTextTypeWriter - The annotation is intended to function as a click-to-type or typewriter
object and no callout line is drawn.
Default value: e_FreeText
</remarks>
        </member>
        <member name="F:pdftron.PDF.Annots.FreeText.IntentName.e_Unknown">
            <summary>Undefined (Userdefined) intent type. </summary>
        </member>
        <member name="F:pdftron.PDF.Annots.FreeText.IntentName.e_FreeTextTypeWriter">
            <summary>click-to-type 
or typewriter object and no callout line is drawn.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.FreeText.IntentName.e_FreeTextCallout">
            <summary>callout. 
The callout is associated with an area on the page 
through the callout line specified in CL.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.FreeText.IntentName.e_FreeText">
            <summary>plain free-text annotation is also known as a text box comment. </summary>
        </member>
        <member name="T:pdftron.PDF.Annots.FreeText.IntentName">
            <summary>intentions of the FreeText annotation</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.SetCalloutLinePoints(pdftron.PDF.Point,pdftron.PDF.Point)">
            <summary> Sets the callout line points of the FreeText annotation.
(Optional; meaningful only if IT is FreeTextCallout; PDF 1.6)

</summary>
            <param name="p1">The staring point.
</param>
            <param name="p2">The ending point.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The two Point objects specifies a callout line attached
to the free text annotation. Tbe two Point objects represent
the starting and ending coordinates of the line.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.SetCalloutLinePoints(pdftron.PDF.Point,pdftron.PDF.Point,pdftron.PDF.Point)">
            <summary> Sets the callout line points of the FreeText annotation.
(Optional; meaningful only if IT is FreeTextCallout; PDF 1.6)

</summary>
            <param name="p1">The staring point.
</param>
            <param name="p2">The ending point.
</param>
            <param name="p3">The kee point.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The three Point objects specify a callout line attached
to the free text annotation. The three Point objects represent
the starting, knee point, and ending coordinates of the line in default
user space.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.GetCalloutLinePoints(pdftron.PDF.Point,pdftron.PDF.Point,pdftron.PDF.Point)">
            <summary> Gets p1 of the callout line points of the FreeText annotation.

</summary>
            <returns> Three point objects if the line is bent or two point objects if
the line is straight.
</returns>
            <param name="out_p1">The starting point.</param>
            <param name="out_p2">The ending point.</param>
            <param name="out_p3">The knee point.</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The returning values are two or three Point objects specifying a callout line attached 
to the free text annotation. Three Point objects represent
the starting, knee point, and ending coordinates of the line in default
user space, two Point objects represent the starting and ending coordinates of the line.

If the line is straight, i.e. only has two points,
two valid points will be returned in p1 and p2, the p3 will be
a point with negative x and y coordinate values.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.SetQuaddingFormat(System.Int32)">
            <summary> Sets the quading format of the FreeText annotation.
(Optional; PDFï¿½1.4)

</summary>
            <param name="app_qform">the new quadding format
</param>
            <returns> A int code indicating the quading format of the FreeText annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The int code specifies the form of quadding (justification) 
that shall be used in displaying the annotationï¿½s text:
0Left-justified
1Centered
2Right-justified
Default value: 0 (left-justified).</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.GetQuaddingFormat">
            <summary> Gets the quading format of the FreeText annotation.

</summary>
            <returns> A int code indicating the quading format of the FreeText annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The int code specifies the form of quadding (justification) 
that shall be used in displaying the annotationï¿½s text:
0Left-justified
1Centered
2Right-justified
Default value: 0 (left-justified).</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.SetDefaultAppearance(System.String)">
            <summary> Sets the default appearance of the FreeText annotation.

</summary>
            <param name="app_str">A string representing the default appearance of the FreeText annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The default appearance string shall be used in formatting the text.The 
annotation dictionaryï¿½s Appearance (AP) entry, if present, shall take precedence over
this entry.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.GetDefaultAppearance">
            <summary> Gets the default appearance of the FreeText annotation.

</summary>
            <returns> A string representing the default appearance of the FreeText annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The default appearance string shall be used in formatting the text.The
annotation dictionaryï¿½s Appearance (AP) entry, if present, shall take precedence over
this entry.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new FreeText annotation, in the specified document.

</summary>
            <param name="doc">A document to which the FreeText annotation is added.
</param>
            <param name="pos">A rectangle specifying the FreeText annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank FreeText annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.FreeText.#ctor(pdftron.SDF.Obj)">
            <summary> Creates an FreeText annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.FreeText">
            <summary> A free text annotation (PDF 1.3) displays text directly on the page. 
Unlike an ordinary text annotation, a free text annotation has no 
open or closed state; instead of being displayed in a pop-up window, 
the text shall be always visible. 
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.Dispose">
            <summary> Releases all resources used by the FileAttachment </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.#ctor(pdftron.PDF.Annot)">
            <summary> Creates an FileAttachment annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.SetIconName(System.String)">
            <summary> Sets the icon type using a string.
(Optional)

</summary>
            <param name="icon">The string specifying the icon type associated with this
FileAttachment annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the string spedifies the name of an icon that shall be used in displaying 
the annotation.
Conforming readers shall provide predefined icon appearances for at least
the following standard names:
GraphPushPin
PaperclipTag
Additional names may be supported as well. Default value: PushPin.
The annotation dictionaryï¿½s Appearance(AP) entry, if present,
shall take precedence over the this entry
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.GetIconName">
            <summary> Gets the icon type as a string.

</summary>
            <returns> The string specifying the icon type associated with this
FileAttachment annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the string spedifies the name of an icon that shall be used in displaying the annotation.
Conforming readers shall provide predefined icon appearances for at least
the following standard names: GraphPushPin, PaperclipTag
Additional names may be supported as well. Default value: PushPin.
The annotation dictionaryï¿½s Appearance(AP) entry, if present,
shall take precedence over the this entry</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.SetIcon">
            <summary> Sets the icon type to e_PushPin.</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.SetIcon(pdftron.PDF.Annots.FileAttachment.Icon)">
            <summary> Sets the icon type using an entry of the enum "Icon".
(Optional)

</summary>
            <param name="type">The enum "Icon" entry associated with this FileAttachment annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The entry specifies the name of an icon that shall be used in displaying the annotation.
Conforming readers shall provide predefined icon appearances for at least
the following standard names: GraphPushPin, PaperclipTag
Additional names may be supported as well. Default value: PushPin.
The annotation dictionaryï¿½s Appearance(AP) entry, if present,
shall take precedence over the this entry
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.GetIcon">
            <summary> Gets the icon type as an entry of the enum "Icon".

</summary>
            <returns> The enum "Icon" entry associated with this FileAttachment annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The entry specifies the name of an icon that shall be used in displaying
the annotation.
Conforming readers shall provide predefined icon appearances for at least
the following standard names: GraphPushPin, PaperclipTag
Additional names may be supported as well. Default value: PushPin.
The annotation dictionaryï¿½s Appearance(AP) entry, if present,
shall take precedence over the this entry
</remarks>
        </member>
        <member name="F:pdftron.PDF.Annots.FileAttachment.Icon.e_Unknown">
            <summary>unrecognized appearance type</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.FileAttachment.Icon.e_Tag">
            <summary>tag appearance</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.FileAttachment.Icon.e_Paperclip">
            <summary>paper clip appearance</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.FileAttachment.Icon.e_PushPin">
            <summary>push pin appearance.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.FileAttachment.Icon.e_Graph">
            <summary>graph appearance</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.FileAttachment.Icon">
            <summary>FileAttchment annotation icons</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.SetFileSpec(pdftron.PDF.FileSpec)">
            <summary> Sets the file specification.

</summary>
            <param name="file">The file associated with this annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.GetFileSpec">
            <summary> Gets the file specification.

</summary>
            <returns> The file associated with this annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect,System.String)">
            <summary> Creates a file attachment annotation.

A file attachment annotation contains a reference to a file, which typically
is embedded in the PDF file.
</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, in user space coordinates.
</param>
            <param name="path">The path to the file which should be attached
</param>
            <returns>A new file attachment annotation.
</returns>
            <remarks>
Note that FileAttachment icons can differ in their appearance dimensions, so you may want
to match these Rectangle dimensions or the aspect ratio to avoid a squished or stretched appearance :
e_Graph : 40 x 40
e_PushPin : 28 x 40
e_Paperclip : 14 x 34
e_Tag : 40 x 32

PDF Viewer applications should provide predefined icon appearances for at least
the following standard names : Graph PushPin Paperclip Tag.Additional names may
be supported as well.Default value : PushPin.
</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect,System.String,System.String)">
            <summary> Creates a file attachment annotation.

A file attachment annotation contains a reference to a file, which typically
is embedded in the PDF file.
</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, in user space coordinates.
</param>
            <param name="path">The path to the file which should be attached
</param>
            <param name="icon_name">An icon to be used in displaying the annotation, default is PushPin.
</param>
            <returns>A new file attachment annotation.
</returns>
            <remarks>
Note that FileAttachment icons can differ in their appearance dimensions, so you may want
to match these Rectangle dimensions or the aspect ratio to avoid a squished or stretched appearance :
e_Graph : 40 x 40
e_PushPin : 28 x 40
e_Paperclip : 14 x 34
e_Tag : 40 x 32

PDF Viewer applications should provide predefined icon appearances for at least
the following standard names : Graph PushPin Paperclip Tag.Additional names may
be supported as well.Default value : PushPin.
</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.Export">
            <summary> The function saves the data referenced by this File Attachment to an
external file.

If the file is embedded, the function saves the embedded file.
If the file is not embedded, the function will copy the external file.
If the file is not embedded and the external file can't be found, the function
returns false.

</summary>
            <returns> true is the file was saved successfully, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.Export(System.String)">
            <summary> The function saves the data referenced by this File Attachment to an
external file.

If the file is embedded, the function saves the embedded file.
If the file is not embedded, the function will copy the external file.
If the file is not embedded and the external file can't be found, the function
returns false.

</summary>
            <param name="save_as">An optional parameter indicating the filepath and filename
where the data should be saved. If this parameter is not specified the function
will attempt to save the file using FileSpec.GetFilePath().
</param>
            <returns> true is the file was saved successfully, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.FileAttachment.#ctor(pdftron.SDF.Obj)">
            <summary> Creates an FileAttachment annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.FileAttachment">
            <summary> A file attachment annotation (PDF 1.3) contains a reference 
to a file, which typically shall be embedded in the PDF file.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Circle.Dispose">
            <summary> Releases all resources used by the Circle </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Circle.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Circle annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical 
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Circle.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Circle annotation, in the specified document.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Circle annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Circle.#ctor(pdftron.SDF.Obj)">
            <summary> Creates an Circle annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical 
 equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Circle">
            <summary> 
Square and circle annotations (PDF 1.3) shall display, 
respectively, a rectangle or an ellipse on the page. When opened, 
they shall display a pop-up window containing the text of the 
associated note. The rectangle or ellipse shall be inscribed within 
the annotation rectangle defined by the annotation dictionaryï¿½s Rect 
entry
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Caret.Dispose">
            <summary> Releases all resources used by the Caret </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Caret.#ctor(pdftron.PDF.Annot)">
            <summary> Creates an Caret annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical 
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Caret.SetSymbol(System.String)">
            <summary> Sets the paragraph symbol displayed along with the Caret.
(Optional)

</summary>
            <param name="contt">A pointer to an array of charactors that specifies the Caret content.
specifies the Caret content.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the content of the Caret Annotation is a name specifying a symbol
that shall be associated with the Caret: P - A new paragraph symbol (ï¿½)
should be associated with the Caret.
None - No symbol should be associated with the Caret.
Default value: None.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Caret.GetSymbol">
            <summary> Gets the paragraph symbol displayed along with the Caret.

</summary>
            <returns> A pointer to an array of charactors that specifies the Caret content.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the content of the Caret Annotation is a name specifying a symbol 
 that shall be associated with the Caret: P - A new paragraph symbol (ï¿½)
should be associated with the Caret.
None - No symbol should be associated with the Caret.
Default value: None.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Caret.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates an Caret annotation and initialize it using given annotation object.
</summary>
            <param name="doc">SDFDoc to create Caret in
</param>
            <param name="pos">position of the caret
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <returns>newly created Caret
</returns>
        </member>
        <member name="M:pdftron.PDF.Annots.Caret.#ctor(pdftron.SDF.Obj)">
            <summary> Creates an Caret annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical 
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Caret">
            <summary> 
A Caret annotation (PDF 1.5) is a visual symbol that indicates 
the presence of text edits.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.Dispose">
            <summary> Releases all resources used by the Line </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.#ctor(pdftron.PDF.Annot)">
            <summary> Creates an Line annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="ann">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.SetTextVOffset(System.Double)">
            <summary> Sets the vertical offset of the caption.
(For PDF 1.7 )

</summary>
            <param name="offset">A number denoting the vertical offset of caption in px.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The vertical offset specifies the offset of the caption text from its normal position.
Specifially the vertical offset perpendicular to the annotation line, with a positive value
indicating a shift up and a negative value indicating a shift down.
Default value: 0(no offset from normal vertical positioning).</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.GetTextVOffset">
            <summary> Gets the vertical offset of the caption.

</summary>
            <returns> A number denoting the vertical offset of caption in px.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The vertical offset specifies the offset of the caption text from its normal position.
Specifially the vertical offset perpendicular to the annotation line, with a positive value
indicating a shift up and a negative value indicating a shift down.
Default value: 0(no offset from normal vertical positioning).
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.SetTextHOffset(System.Double)">
            <summary> Sets the horizontal offset of the caption.
(For PDF 1.7 )

</summary>
            <param name="offset">A umber denoting the horizontal offset of caption in px.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The horizontal offset specifies the offset of the caption text from its normal position.
Specifially the horizontal offset along the annotation line from its midpoint, with a positive
value indicating offset to the right and a negative value indicating offset to the left.
Default value: 0 (no offset from normal horizontal positioning)</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.GetTextHOffset">
            <summary> Gets the horizontal offset of the caption.

</summary>
            <returns> A number denoting the horizontal offset of caption in px.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The horizontal offset specifies the offset of the caption text from its normal position.
Specifially the horizontal offset along the annotation line from its midpoint, with a positive
value indicating offset to the right and a negative value indicating offset to the left.
Default value: 0 (no offset from normal horizontal positioning)</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.SetCaptionPosition(pdftron.PDF.Annots.Line.CapPos)">
            <summary> Sets the caption position of a line.
(PDF 1.7)

</summary>
            <param name="style">A cap position value from the "CapPos" enum.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Caption position describs the annotationï¿½s caption positioning.
Valid values are e_Inline, meaning the caption shall be centered inside the line,
and e_Top, meaning the caption shall be on top of the line.
Default value: Inline.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.GetCaptionPosition">
            <summary> Gets the caption position of a line.

</summary>
            <returns> A cap position value from the "CapPos" enum.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Caption position describs the annotationï¿½s caption positioning.
Valid values are e_Inline, meaning the caption shall be centered inside the line,
and e_Top, meaning the caption shall be on top of the line.
Default value: Inline</remarks>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.CapPos.e_Top">
            <summary>the caption shall be on top of the line</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.CapPos.e_Inline">
            <summary>the caption shall be centered inside the line</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Line.CapPos">
            <summary> Enumeration type describing the annotationï¿½s caption positioning.
Valid values are e_Inline, meaning the caption shall be centered inside the line, and e_Top, meaning the caption shall be on top of the line.</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.SetLeaderLineOffset(System.Double)">
            <summary> Sets the leader line offset length of a line.
(PDF 1.7)

</summary>
            <param name="ll">A number denoting the length of the leader line offset in px.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Usually if this entry is specified, the line is intended to be a dimension line(see "IT" entry). 
Leader line offset number is a non-negative number that shall represent the length of the leader
line offset, which is the amount of empty space between the endpoints of the
annotation and the beginning of the leader lines.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.GetLeaderLineOffset">
            <summary> Gets the leader line offset length of a line.

</summary>
            <returns> A number denoting the length of the leader line offset in px.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  usually if this entry is specified, the line is intended to be a dimension line(see "IT" entry).
Leader line offset number is a non-negative number that shall represent the length of the leader
line offset, which is the amount of empty space between the endpoints of the
annotation and the beginning of the leader lines.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.SetIntentType(pdftron.PDF.Annots.Line.IntentType)">
            <summary> Sets the intent type of the line.
(For PDF 1.6)

</summary>
            <param name="style">An intent type value from the "IntentType" enum.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Intent type describes the intent of the line annotation. Valid values shall be "e_LineArrow", which means
that the annotation is intended to function as an arrow, and "e_LineDimension", which means that the annotation
is intended to function as a dimension line.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.GetIntentType">
            <summary> Gets the intent type of the line.

</summary>
            <returns> An intent type value from the "IntentType" enum.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Intent type describes the intent of the line annotation. Valid values shall be "e_LineArrow", which means
that the annotation is intended to function as an arrow, and "e_LineDimension", which means that the annotation
is intended to function as a dimension line.</remarks>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.IntentType.e_null">
            <summary>Non-standard intent type</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.IntentType.e_LineDimension">
            <summary>This line is intented to function as a 
dimension line. </summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.IntentType.e_LineArrow">
            <summary>The line is an arrow</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Line.IntentType">
            <summary>the caption position of the Line annotation.</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.SetShowCaption(System.Boolean)">
            <summary> Sets the option of whether to show caption.

</summary>
            <param name="showCaption">A boolean value indicating whether the caption will be shown.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If true, the text specified by the Contents or RCentries shall be replicated as a
caption in the appearance of the line. The text shall be rendered in a manner
appropriate to the content, taking into account factors such as writing direction.
Default value: false.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.GetShowCaption">
            <summary> Gets the option of whether to show caption.

</summary>
            <returns> A boolean value indicating whether the caption will be shown.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If true, the text specified by the Contents or RCentries shall be replicated as a
caption in the appearance of the line. The text shall be rendered in a manner
appropriate to the content, taking into account factors such as writing direction.
Default value: false.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.SetLeaderLineExtensionLength(System.Double)">
            <summary> Sets the leader line extension length of a line.
(PDF 1.6)

</summary>
            <param name="ll">the new leader line extension length
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Usually if this entry is specified, the line is intended to be a dimension line(see "IT" entry).
The leader line extension length is a non-negative number that shall represents
the length of leader line extensions that extend from the line proper 180 degrees from
the leader lines.
Default value: 0 (no leader line extensions)</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.GetLeaderLineExtensionLength">
            <summary> Gets the leader line extension length of a line.

</summary>
            <returns> A number denoting the length of the leader line extension in px.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Usually if this entry is specified, the line is intended to be a dimension line(see "IT" entry). 
<remarks>  The leader line extension length is a non-negative number that shall represents </remarks>
the length of leader line extensions that extend from the line proper 180 degrees from
the leader lines.
Default value: 0 (no leader line extensions)</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.SetLeaderLineLength(System.Double)">
            <summary> Sets the leader line length of a line.
(PDF 1.6)

</summary>
            <param name="ll">the new leader line length
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Usually if this entry is specified, the line is intended to be a dimension line(see "IT" entry).
Leader length is length of leader lines in default user space that extend from each endpoint 
of the line perpendicular to the line itself. A positive value shall mean that the leader lines
appear in the direction that is clockwise when traversing the line from its starting point to
its ending point (as specified by L); a negative value shall indicate the opposite direction.
Default value: 0 (no leader lines)</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.GetLeaderLineLength">
            <summary> Gets the leader line length of a line. 					 *

</summary>
            <returns> A number denoting the length of the leader line in px.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  usually if this entry is specified, the line is intended to be a dimension line(see "IT" entry).
Leader length is length of leader lines in default user space that extend from each endpoint 
of the line perpendicular to the line itself. A positive value shall mean that the leader lines
appear in the direction that is clockwise when traversing the line from its starting point to
its ending point (as specified by L); a negative value shall indicate the opposite direction.
Default value: 0 (no leader lines)
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.SetEndStyle(pdftron.PDF.Annots.Line.EndingStyle)">
            <summary> Sets the ending syle of the end of a line
(Optional; PDFï¿½1.4)

</summary>
            <param name="est">A enum value from the "EndingStyle" enum, whose value corrsponding to the ending style
of the start point.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Default value: e_None. </remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.GetEndStyle">
            <summary> Gets the ending syle of the end of a line.

</summary>
            <returns> A enum value from the "EndingStyle" enum, whose value corrsponding to the ending style
of the start point.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Default value: e_None. </remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.SetStartStyle(pdftron.PDF.Annots.Line.EndingStyle)">
            <summary> Sets the ending syle of the start of a line
(Optional; PDFï¿½1.4.)

</summary>
            <param name="sst">A enum value from the "EndingStyle" enum, whose value corrsponding to the ending style
of the start point.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Default value: e_None. </remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.GetStartStyle">
            <summary> Gets the ending syle of the start of a line.

</summary>
            <returns> A enum value from the "EndingStyle" enum, whose value corrsponding to the ending style
of the start point.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Default value: e_None. </remarks>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.EndingStyle.e_Unknown">
            <summary>Non-standard or invalid ending.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.EndingStyle.e_None">
            <summary>No special line ending.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.EndingStyle.e_Slash">
            <summary>A short line at the endpoint approximately 30 degrees clockwise from perpendicular to the line itself.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.EndingStyle.e_RClosedArrow">
            <summary>A triangular closed arrowhead in the reverse direction from ClosedArrow.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.EndingStyle.e_ROpenArrow">
            <summary>Two short lines in the reverse direction from OpenArrow.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.EndingStyle.e_Butt">
            <summary>A short line at the endpoint perpendicular to the line itself.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.EndingStyle.e_ClosedArrow">
            <summary>Two short lines meeting in an acute angle as in the OpenArrow style and connected by a third line to form a triangular closed arrowhead filled with the annotationï¿½s interior color, if any.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.EndingStyle.e_OpenArrow">
            <summary>Two short lines meeting in an acute angle to form an open arrowhead.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.EndingStyle.e_Diamond">
            <summary>A diamond shape filled with the annotationï¿½s interior color, if any.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.EndingStyle.e_Circle">
            <summary>A circle filled with the annotationï¿½s interior color, if any.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Line.EndingStyle.e_Square">
            <summary>A square filled with the annotationï¿½s interior color, if any.</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Line.EndingStyle">
            <summary> For each line, one can choose a separate style for the start and the end of the line.
The styles are defined by the "EndingStyle" enumeration.</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.SetEndPoint(pdftron.PDF.Point)">
            <summary> Sets the coordinates of the end of a line.

</summary>
            <param name="ep">- A Point struct whose x entry is going to be set as the
x coordinate of the end point of the line, whose y entry is going to be set as the
y coordinate of the end point of the line.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.GetEndPoint">
            <summary> Gets the coordinates of the end of a line.

</summary>
            <returns> A Point struct, whose x entry specifies the x coordinate of the end of the line
and the  y entry specifies the y coordinate of the end of the line.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.SetStartPoint(pdftron.PDF.Point)">
            <summary> Sets the coordinates of the start of a line.

</summary>
            <param name="sp">A Point struct whose x entry is going to be set as the
x coordinate of the start point of the line, whose y entry is going to be set as the
y coordinate of the start point of the line.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.GetStartPoint">
            <summary> Gets the coordinates of the start of a line.

</summary>
            <returns> A Point struct, whose x entry specifies the x coordinate of the start of the line
and the  y entry specifies the y coordinate of the start of the line.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Line annotation, in the specified document.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Line annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Line.#ctor(pdftron.SDF.Obj)">
            <summary> Creates an Line annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Line">
            <summary> The purpose of a line annotation (PDF 1.3) is to display a single straight 
line on the page. When opened, it shall display a pop-up window containing 
the text of the associated note. 
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.TextMarkup.Dispose">
            <summary> Releases all resources used by the TextMarkup </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.TextMarkup.SetQuadPoint(System.Int32,pdftron.PDF.QuadPoint)">
            <summary> Sets the QuadPoint to be located at a certain index of the QuadPoint array of the TextMarkup
annotation.
(Optional; PDFï¿½1.6 )

</summary>
            <param name="idx">The index where the QuadPoint is to be located (the index is counted from 0, and continue on assendingly).
</param>
            <param name="qp">The QuadPoint to be located at a certain index of the QuadPoint array of the TextMarkup annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> To make this QuadPoint compatible with Adobe Acrobat|Reader, you can use either clockwise or counterclockwise order,
but the points p3 and p4 must be swapped. This is because those readers do not follow the PDF specification for TextMarkup QuadPoints.</remarks>
            <remarks>  An array of n QuadPoints specifying the coordinates of nquadrilaterals in default user space. Each quadrilateral shall
encompasses a word or group of contiguous words in the text underlying the annotation. The coordinates for each quadrilateral
shall be given in the order p1, p2, p3, p4 specifying the quadrilateralï¿½s four vertices in counterclockwise order.
The text shall be oriented with respect to the edge connecting points (p1) and (p2).
The annotation dictionaryï¿½s Appearance(AP) entry, if present, shall take precedence over QuadPoints.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.TextMarkup.GetQuadPoint(System.Int32)">
            <summary> Gets the QuadPoint located at a certain index of the QuadPoint array of the TextMarkup
annotation.

</summary>
            <param name="idx">The index where the QuadPoint is to be located (the index is counted from 0, and continue on assendingly).
</param>
            <returns> The QuadPoint located at a certain index of the QuadPoint array of the TextMarkup annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  An array of n QuadPoints specifying the coordinates of nquadrilaterals in default user space. Each quadrilateral shall 
encompasses a word or group of contiguous words in the text underlying the annotation. The coordinates for each quadrilateral
shall be given in the order p1, p2, p3, p4 specifying the quadrilateralï¿½s four vertices in counterclockwise order.
The text shall be oriented with respect to the edge connecting points (p1) and (p2).
The annotation dictionaryï¿½s Appearance(AP) entry, if present, shall take precedence over QuadPoints.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.TextMarkup.GetQuadPointCount">
            <summary> Gets the number of QuadPoints in the QuadPoints array of the TextMarkup annotation.

</summary>
            <returns> The number of QuadPoints.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  An array of n QuadPoints specifying the coordinates of nquadrilaterals in default user space. Each quadrilateral shall
encompasses a word or group of contiguous words in the text underlying the annotation. The coordinates for each quadrilateral
shall be given in the order p1, p2, p3, p4 specifying the quadrilateralï¿½s four vertices in counterclockwise order.
The text shall be oriented with respect to the edge connecting points (p1) and (p2).
The annotation dictionaryï¿½s Appearance(AP) entry, if present, shall take precedence over QuadPoints.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.TextMarkup.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a TextMarkup annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.TextMarkup">
            <summary> Text markup annotations shall appear as highlights, underlines, 
strikeouts (all PDF 1.3), or jagged (ï¿½squigglyï¿½) underlines (PDF 1.4) 
in the text of a document. When opened, they shall display a pop-up 
window containing the text of the associated note.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.Dispose">
            <summary> Releases all resources used by the Markup </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Markup annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.RotateAppearance(System.Double)">
            <summary> Rotates the appearance of the Markup Annotation.

</summary>
            <param name="angle">the new rotation
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> Apply a rotation to an existing appearance.
This rotation will be reflected in the bounding rect of the annot (which 
will be updated), but not in any other part of the annotation dictionary.
This will effectively create a custom appearance for the annotation, 
and any subsequent calls to `RefreshAppearance` will clear this transformation.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.SetPadding(pdftron.PDF.Rect)">
            <summary> Sets the rectangle difference of the Square.
(Optional; PDF 1.5)

</summary>
            <param name="rd">A set of four numbers(represented as a Rect object) specifying the difference on the four different directions.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  rectangle difference is A set of four numbers that shall describe the numerical differences 
between two rectangles: the Rect entry of the annotation and the actual boundaries of the underlying
square or Square. Such a difference may occur in situations where a border effect (described by BE)
causes the size of the Rect to increase beyond that of the square or Square.
The four numbers shall correspond to the differences in default user space between the left, top, right,
and bottom coordinates of Rect and those of the square or Square, respectively. Each value shall be greater
than or equal to 0. The sum of the top and bottom differences shall be less than the height of Rect, and the
sum of the left and right differences shall be less than the width of Rect.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.GetPadding">
            <summary> Gets the rectangle difference of the Square.
(Optional; PDF 1.5)

</summary>
            <returns> A set of four numbers(represented as a Rect object) specifying the difference on the four different directions.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  rectangle difference is A set of four numbers that shall describe the numerical differences
between two rectangles: the Rect entry of the annotation and the actual boundaries of the underlying
square or Square. Such a difference may occur in situations where a border effect (described by BE)
causes the size of the Rect to increase beyond that of the square or Square.
The four numbers shall correspond to the differences in default user space between the left, top, right,
and bottom coordinates of Rect and those of the square or Square, respectively. Each value shall be greater
than or equal to 0. The sum of the top and bottom differences shall be less than the height of Rect, and the
sum of the left and right differences shall be less than the width of Rect.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.SetContentRect(pdftron.PDF.Rect)">
            <summary> Sets the inner bounding rectangle of the Square.
(Optional; PDF 1.5)

</summary>
            <param name="cr">the new content rect
</param>
            <returns> cr A difference between the inner bounding rectangle and a positon rectangle
may occur in situations where a border effect (described by BE)
causes the size of the Rect to increase beyond that of the square or Square
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.GetContentRect">
            <summary> Gets the inner bounding rectangle of the Square.
(Optional; PDF 1.5)

</summary>
            <returns> A difference between the inner bounding rectangle and a positon rectangle
may occur in situations where a border effect (described by BE)
causes the size of the Rect to increase beyond that of the square or Square
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.SetInteriorColor(pdftron.PDF.ColorPt,System.Int32)">
            <summary> Sets the interior color of the Square.				
</summary>
            <param name="c">A ColorPt object that denotes the color of the Markup annotation.
</param>
            <param name="CompNum">An integer indicating the number of channels forming the color space used. It also defines the length of the array to be allocated for storing the entries of c.
</param>
            <returns> A ColorPt object that denotes the color of the Square.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  that the color can be in different color spaces: Gray, RGB, or CMYK. Call "GetInteriorColorCompNum"
to access the color space information corresponding to the interioir color.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.GetInteriorColorCompNum">
            <summary> Gets the number indicating interior color space of the Square.

</summary>
            <returns> An integer indicating a color space value from the ColorSpace::Type enum. That is, 1 corresponding to "e_device_gray",
3 corresponding to "e_device_rgb", and 4 corresponding to "e_device_cmyk" if color space is applicable,
orelse 0 corresponding to "e_null" if the color is transparent.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.GetInteriorColor">
            <summary> Gets the interior color of the Square.
(Optional; PDFï¿½1.4 )

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  it is necessary to make sure the consistancy between the ColorPt type
and the ColorSpace::Type value. e_device_gray corresponds to an array of two numbers;
e_device_rgb corresponds to an array of 3 numbers, e_device_cmyk corresponds to an array of
4 numnbers, while e_null correspons to an arry of 0 number. Entries out of the specified
color space array length will be desgarded. However, missing entries for a specified color space
will throw exception either when setting the color or when later retrieving color(colorspace)
information.
</remarks>
            <returns>interior color
</returns>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.SetBorderEffectIntensity(System.Double)">
            <summary> Sets the Border Effect Intensity of the Markup Annotation.
(Optional; valid only if Border effect is Cloudy)

</summary>
            <param name="intensity">A number representing the border effect.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The BorderEffectIntensity value is a number describing 
the intensity of the effect, in the range 0 to 2. Default value: 0.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.GetBorderEffectIntensity">
            <summary> Gets the Border Effect Intensity of the Markup Annotation.

</summary>
            <returns> A number representing the border effect.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The BorderEffectIntensity value is a number describing
the intensity of the effect, in the range 0 to 2. Default value: 0.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.SetBorderEffect(pdftron.PDF.Annots.Markup.BorderEffect)">
            <summary> Sets the Border Effect of the Markup Annotation.
(Optional; PDF 1.5 )

</summary>
            <param name="effect">An entry from the enum "BorderEffect" that
represents the border effect.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.GetBorderEffect">
            <summary> Gets the Border Effect of the Markup Annotation.

</summary>
            <returns> An entry from the enum "BorderEffect" that
represents the border effect.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Annots.Markup.BorderEffect.e_Cloudy">
            <summary>The border should appear ï¿½cloudyï¿½. The width and
dash array specified by BS shall be honored.</summary>
        </member>
        <member name="F:pdftron.PDF.Annots.Markup.BorderEffect.e_None">
            <summary>No effect: the border shall be as described by the annotation
dictionaryï¿½s BorderStyle(BS) entry.</summary>
        </member>
        <member name="T:pdftron.PDF.Annots.Markup.BorderEffect">
            <summary>Markup border effects</summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.SetCreationDates(pdftron.PDF.Date)">
            <summary> Sets the creation date of the Markup Annotation.
(Optional; PDF 1.5 )

</summary>
            <param name="dt">the new creation dates
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Date object not only includes date, it actually includes both date and
time when the annotation was created.
This corresponds to the 'CreationDate' field of the markup annotation's dictionary. </remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.GetCreationDates">
            <summary> Gets the creation date of the Markup Annotation

</summary>
            <returns>A Date object indicating the date the Markup Annotation is created
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>The Date object not only includes date, it actually includes both date and  time when the annotation was created.
This corresponds to the 'CreationDate' field of the markup annotation's dictionary.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.SetSubject(System.String)">
            <summary> Sets subject of the Markup Annotation.
(Optional; PDF 1.5 )

</summary>
            <param name="subj">the new subject
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The subject is The Text representing a short description of
the subject being addressed by the annotation.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.GetSubject">
            <summary> Gets subject of the Markup Annotation.

</summary>
            <returns> A string representing the subject of the Markup Annotation
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The subject is The Text representing a short description of
the subject being addressed by the annotation.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.SetOpacity(System.Double)">
            <summary> Sets the contant opacity value corresponding to the annotation.
(Optional; PDFï¿½1.4 )

</summary>
            <param name="op">the new opacity
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constant opacity value shall be used in painting the annotation.
This value shall apply to all visible elements of the annotation in its closed state
(including its background and border) but not to the pop-up window that appears when the annotation is opened.
The specified value shall not used if the annotation has an appearance stream
in that case, the appearance stream shall specify any transparency. (However, if the compliant viewer regenerates
the annotationï¿½s appearance stream, it may incorporate the CA value into the streamï¿½s content.)
The implicit blend mode is Normal.
Default value: 1.0.
If no explicit appearance stream is defined for the annotation,
it may bepainted by implementation-dependent means that do not
necessarily conform to the PDF imaging model; in this case, the effect
of this entry is implementation-dependent as well.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.GetOpacity">
            <summary> Gets the contant opacity value corresponding to the annotation.

</summary>
            <returns> A number indicating the opacity value corresponding to the annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constant opacity value shall be used in painting the annotation.
This value shall apply to all visible elements of the annotation in its closed state
(including its background and border) but not to the pop-up window that appears when the annotation is opened.
The specified value shall not used if the annotation has an appearance stream
in that case, the appearance stream shall specify any transparency. (However, if the compliant viewer regenerates
the annotationï¿½s appearance stream, it may incorporate the CA value into the streamï¿½s content.)
The implicit blend mode is Normal.
Default value: 1.0.
If no explicit appearance stream is defined for the annotation,
it may bepainted by implementation-dependent means that do not
necessarily conform to the PDF imaging model; in this case, the effect
of this entry is implementation-dependent as well.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.SetPopup(pdftron.PDF.Annots.Popup)">
            <summary> Sets the Popup object associated with this Markup annotation.
(Optional; PDFï¿½1.3 )

</summary>
            <param name="bs">the new popup
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the Popup is An indirect reference to a pop-up annotation for
entering or editing the text associated with this annotation.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.GetPopup">
            <summary> Gets the Popup object associated with this Markup annotation.

</summary>
            <returns> A Popup object that is associated with this Markup annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The Popup is An indirect reference to a pop-up annotation for
 entering or editing the text associated with this annotation.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.SetTitle(System.String)">
            <summary> Sets the title of the Markup Annotation.
(Optional; PDFï¿½1.1)

</summary>
            <param name="title">A string representing the title of the Markup Annotation
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The title is The text label that shall be displayed in the
title bar of the annotationï¿½s pop-up window when open and active.
This entry shall identify the user who added the annotation.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.GetTitle">
            <summary> Gets the title of the Markup Annotation.

</summary>
            <returns> A string representing the title of the Markup Annotation
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The title is The text label that shall be displayed in the
title bar of the annotationï¿½s pop-up window when open and active.
This entry shall identify the user who added the annotation.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Markup.#ctor(pdftron.SDF.Obj)">
            <summary>Creates a Markup annotation and initialize it using given <c>SDF::Obj</c> object. 
</summary>
            <param name="d">existing Markup object
</param>
            <remarks>The constructor does not copy any data, but is instead the logical equivalent of a type cast.
</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Markup">
            <summary> The meaning of an annotationï¿½s Contents entry varies by annotation type. 
Typically, it is the text that shall be displayed for the annotation or, 
if the annotation does not display text, an alternate description of the 
annotationï¿½s contents in human-readable form. In either case, the Contents 
entry is useful when extracting the documentï¿½s contents in support of 
accessibility to users with disabilities or for other purposes.
Many annotation types are defined as markup annotations because they are 
used primarily to mark up PDF documents. These annotations have text that 
appears as part of the annotation and may be displayed in other ways by a 
conforming reader, such as in a Comments pane.
Markup annotations may be divided into the following groups:
<list type="bullet"><item><description>
Free text annotations display text directly on the page. 
The annotationï¿½s Contents entry specifies the displayed text.
</description></item><item><description>
Most other markup annotations have an associated pop-up window 
that may contain text. The annotationï¿½s Contents entry specifies 
the text that shall be displayed when the pop-up window is opened. 
These include text, line, square, circle, polygon, polyline, 
highlight,underline, squiggly-underline, strikeout, rubber stamp, 
caret, ink, and file attachment annotations.
</description></item><item><description>
Sound annotations do not have a pop-up window but may also have 
associated text specified by the Contents entry.
When separating text into paragraphs, a CARRIAGE RETURN (0Dh) shall 
be used and not, for example, a LINE FEED character (0Ah).
<remarks>A subset of markup annotations is called text markup 
annotations.</remarks></description></item></list>
The remaining annotation types are not considered markup annotations:
<list type="bullet"><item><description>
The pop-up annotation type shall not appear by itself; it shall be 
associated with a markup annotation that uses it to display text.
<remarks>If an annotation has no parent, the Contents entry shall 
represent the text of the annotation, otherwise it shall be 
ignored by a conforming reader.</remarks></description></item><item><description>
For all other annotation types (Link, Movie, Widget, PrinterMark, 
and TrapNet), the Contents entry shall provide an alternate 
representation of the annotationï¿½s contents in human-readable form, 
which is useful when extracting the documentï¿½s contents in support of 
accessibility to users with disabilities or for other purposes.
</description></item></list></summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Popup.Dispose">
            <summary> Releases all resources used by the Popup </summary>
        </member>
        <member name="M:pdftron.PDF.Annots.Popup.#ctor(pdftron.PDF.Annot)">
            <summary> Creates a Popup annotation and initialize it using given annotation object.

</summary>
            <param name="ann">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Popup.SetOpen(System.Boolean)">
            <summary> Sets the initial openning condition of Popup.
(Optional)

</summary>
            <param name="is_open">A bool indicating whether the Popup is initially open.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This Open option is a flag specifying whether the pop-up 
annotation shall initially be displayed open.
Default value: false (closed).
If this entry is present, the parent annotationï¿½s Contents, M, C, and Tentries
shall override those of the pop-up annotation itself.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Popup.IsOpen">
            <summary> Gets the initial openning condition of Popup.

</summary>
            <returns> A bool indicating whether the Popup is initially open.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> This Open option is a flag specifying whether the pop-up 
annotation shall initially be displayed open.
Default value: false (closed).
If this entry is present, the parent annotationï¿½s Contents, M, C, and Tentries
shall override those of the pop-up annotation itself.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Popup.SetParent(pdftron.PDF.Annot)">
            <summary> Sets the Parent annotation of the Popup annotation.
(Optional)

</summary>
            <param name="parent">An annot object which is the parent annotation of the Popup annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This annotation object represents the parent annotation with which this
pop-up annotation shall be associated.
If this entry is present, the parent annotationï¿½s Contents, M, C, and Tentries
shall override those of the pop-up annotation itself.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Popup.GetParent">
            <summary> Gets the Parent annotation of the Popup annotation.

</summary>
            <returns> An annot object which is the parent annotation of the Popup annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This annotation object represents the parent annotation with which this
pop-up annotation shall be associated.
If this entry is present, the parent annotationï¿½s Contents, M, C, and Tentries
shall override those of the pop-up annotation itself.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annots.Popup.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Rect)">
            <summary> Creates a new Popup annotation, in the specified document.

</summary>
            <param name="doc">A document to which the Popup annotation is added.
</param>
            <param name="pos">A rectangle specifying the Popup annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank Popup annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annots.Popup.#ctor(pdftron.SDF.Obj)">
            <summary> Creates a Popup annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="d">the d
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Annots.Popup">
            <summary> A pop-up annotation (PDF 1.3) displays text in a pop-up window for entry and 
editing. It shall not appear alone but is associated with a markup annotation, 
its parent annotation, and shall be used for editing the parentï¿½s text. 
It shall have no appearance stream or associated actions of its own and 
shall be identified by the Popup entry in the parentï¿½s annotation dictionary.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annot.Dispose">
            <summary> Releases all resources used by the Annot </summary>
        </member>
        <member name="M:pdftron.PDF.Annot.#ctor(pdftron.PDF.Annot)">
            <summary>create and initialize <c>Annot</c> object from a given one
</summary>
            <param name="b">another <c>Annot</c> object
</param>
        </member>
        <member name="M:pdftron.PDF.Annot.DeleteCustomData(System.String)">
            <summary> Deletes custom data associated with the given key.
</summary>
            <param name="key">The key for which to delete the associated data.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.SetCustomData(System.String,System.String)">
            <summary> Sets the custom data associated with the specified key.
</summary>
            <param name="key">The key under which to store this custom data.
</param>
            <param name="value">The custom data string to store.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetCustomData(System.String)">
            <summary> Returns custom data associated with the given key.
</summary>
            <param name="key"> The key for which to retrieve the associated data.
</param>
            <returns> the custom data string. If no data is available an empty string is returned.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.RefreshAppearance(pdftron.PDF.RefreshOptions)">
            <summary> A version of RefreshAppearance allowing custom options to make slight tweaks in behaviour.
</summary>
            <param name="options">The RefreshOptions.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.RefreshAppearance">
            <summary> Regenerates the appearance stream for the annotation. 	
This method can be used to auto-generate the annotation appearance after creating 
or modifying the annotation without providing an explicit appearance or 
setting the "NeedAppearances" flag in the AcroForm dictionary.
</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If this annotation contains text, and has been added to a rotated page, the text in 
the annotation may be rotated. If RefreshAppearance is called *after* the annotation is added 
to a rotated page, then any text will be rotated in the opposite direction of the page 
rotation. If this method is called *before* the annotation is added to any rotated page, then 
no counter rotation will be applied. If you wish to call RefreshAppearance on an annotation 
already added to a rotated page, but you don't want the text to be rotated, you can do one 
of the following; temporarily un-rotate the page, or, temporarily remove the "Rotate" object 
from the annotation. To support users adding text annotations while using a PDF viewer,
you can also add any viewer rotation to the annotations Rotate object, to have text always
rotated correctly, from the users perspective.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annot.SetRotation(System.Int32)">
            <summary> Sets the rotation value of the Annotation. the Rotation specifies the number of degrees 
by which the annotation shall be rotated counterclockwise relative to the page.
The value shall be a multiple of 90.
(Optional)

</summary>
            <param name="rot">An integer representing the rotation value of the annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>
This property is part of the appearance characteristics dictionary, this dictionary
that shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Annot.GetRotation">
            <summary> Gets the rotation value of the Annotation. The Rotation specifies the number of degrees 
by which the annotation shall be rotated counterclockwise relative to the page.
The value shall be a multiple of 90.

</summary>
            <returns> An integer representing the rotation value of the annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>
This property is part of the appearance characteristics dictionary, this dictionary 
shall be used in constructing a dynamic appearance stream specifying the annotationï¿½s visual
presentation on the page.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annot.Resize(pdftron.PDF.Rect!System.Runtime.CompilerServices.IsConst)">
            <summary> Resize.

</summary>
            <param name="newrect">the pos
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.SetOptionalContent(pdftron.SDF.Obj)">
            <summary> Sets optional content of an annotation.
(Optional, PDF1.5). 

</summary>
            <param name="oc">An SDF object corresponding to the optional content,
a PDF::OCG::Group or membership dictionary specifying the PDF::OCG::Group properties for 
the annotation. Before the annotation is drawn, its visibility 
shall be determined based on this entry as well as the annotation 
flags specified in the Flag entry . If it is determined to be invisible, 
the annotation shall be skipped, as if it were not in the document.
</param>
        </member>
        <member name="M:pdftron.PDF.Annot.GetOptionalContent">
            <summary> Gets optional content of an annotation.

</summary>
            <returns> An SDF object corresponding to the grup of optional properties.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>The return value is an (optional content) group or (optional content) membership 
dictionary (PDF::OCG::OCMD)specifying the optional content properties for
the annotation. Before the annotation is drawn, its visibility
shall be determined based on this entry as well as the annotation
flags specified in the Flag entry . If it is determined to be invisible,
the annotation shall be skipped, as if it were not in the document.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annot.SetStructParent(System.Int32)">
            <summary> Sets the struct parent of an annotation.
(Required if the annotation is a structural content item; PDFï¿½1.3)

</summary>
            <param name="keyval">An integer which is the integer key of the
annotationï¿½s entry in the structural parent tree.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The StructParent is the integer key of the annotationï¿½s entry
in the structural parent tree.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annot.GetStructParent">
            <summary> Gets the struct parent of an annotation.
(Required if the annotation is a structural content item; PDFï¿½1.3)

</summary>
            <returns> An integer which is the integer key of the annotationï¿½s entry
in the structural parent tree.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <summary>  The StructParent is the integer key of the annotationï¿½s entry
in the structural parent tree.</summary>
        </member>
        <member name="M:pdftron.PDF.Annot.SetColor(pdftron.PDF.ColorPt)">
            <summary> Sets an annotation's color.
(Optional; PDFï¿½1.1)

</summary>
            <param name="cpt">the color point
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.SetColor(pdftron.PDF.ColorPt,System.Int32)">
            <summary> Sets an annotation's color.
(Optional; PDFï¿½1.1)

</summary>
            <param name="cpt">the color point
</param>
            <param name="comp_num">The color component number that indirectly implies the color space the color is from.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetColorCompNum">
            <summary> Gets the color space the annotation's color is represented in.

</summary>
            <returns> An integer that is either 1(for DeviceGray), 3(DeviceRGB), or 4(DeviceCMYK).
If the annotation has no color, i.e. is transparent, 0 will be returned.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetColorAsGray">
            <summary> Gets an annotation's color.

</summary>
            <returns> A ColorPt object containing a number in the range 0.0 to 1.0,
representing a Gray Scale colour used for the following purposes:
The background of the annotationï¿½s icon when closed
The title bar of the annotationï¿½s pop-up window
The border of a link annotation
If the annotation does not specify an explicit color, a default color is returned.
Text annotations return 'default yellow;' all others return black.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetColorAsCMYK">
            <summary> Gets an annotation's color.

</summary>
            <returns> A ColorPt object containing an array of four numbers in the range 0.0 to 1.0,
representing a CMYK colour used for the following purposes:
The background of the annotationï¿½s icon when closed
The title bar of the annotationï¿½s pop-up window
The border of a link annotation
If the annotation does not specify an explicit color, a default color is returned.
Text annotations return 'default yellow;' all others return black.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetColorAsRGB">
            <summary> Gets an annotation's color.

</summary>
            <returns> A ColorPt object containing an array of three numbers in the range 0.0 to 1.0,
representing an RGB colour used for the following purposes:
The background of the annotationï¿½s icon when closed
The title bar of the annotationï¿½s pop-up window
The border of a link annotation
If the annotation does not specify an explicit color, a default color is returned.
Text annotations return 'default yellow;' all others return black.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.SetActiveAppearanceState(System.String)">
            <summary> Sets the annotationï¿½s active appearance state.
(Required if the appearance dictionary AP contains one or more subdictionaries; PDFï¿½1.2)

</summary>
            <param name="astate">astate Charactor string representing the name of the active appearance state.
The string used to select the annotationï¿½s appearance state, which
selects the applicable appearance stream from an appearance subdictionary.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetActiveAppearanceState">
            <summary> Gets the annotationï¿½s active appearance state.

</summary>
            <returns> the name of the active state.
The annotationï¿½s appearance state, which
selects the applicable appearance stream from an appearance subdictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.Flatten(pdftron.PDF.Page)">
            <summary> Flatten/Merge the existing annotation appearances with the page content and
delete this annotation from a given page.

Annotation 'flattening' refers to the operation that changes active annotations
(such as markup, widgets, 3D models, etc.) into a static area that is part of the
PDF document, just like the other text and images in the document.

</summary>
            <param name="page">the page
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  an alternative approach to set the annotation as read only is using </remarks>
            <remarks> Annot.SetFlag(Annot::e_read_only, true) method. Unlike Annot.SetFlag(...),
the result of Flatten() operation can not be programatically reversed.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annot.RemoveAppearance(pdftron.PDF.Annot.AnnotationState,System.String)">
            <summary> Removes the annotation's appearance for the given combination of annotation
and appearance states.

</summary>
            <param name="annot_state">the annotation's appearance state, which selects the applicable
appearance stream from the appearance sub-dictionary. An annotation can define as many
as three separate appearances: The normal, rollover, and down appearance.
</param>
            <param name="app_state">is an optional parameter specifying the appearance state
(e.g. "Off", "On", etc) under which the new appearance should be stored. If
appearance_state is NULL, the annotation will have only one annotaion state.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.RemoveAppearance(pdftron.PDF.Annot.AnnotationState)">
            <summary> Removes the annotation's appearance for the given combination of annotation
and appearance states.

</summary>
            <param name="annot_state">the annotation's appearance state, which selects the applicable
appearance stream from the appearance sub-dictionary. An annotation can define as many
as three separate appearances: The normal, rollover, and down appearance.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the pDF net exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.RemoveAppearance">
            <summary> Removes the annotation's appearance 			
</summary>
        </member>
        <member name="M:pdftron.PDF.Annot.SetAppearance(pdftron.SDF.Obj,pdftron.PDF.Annot.AnnotationState,System.String)">
            <summary> Sets the annotationï¿½s appearance for the given combination of annotation
and appearance states.
(Optional; PDFï¿½1.2)

</summary>
            <param name="app_stream">a content stream defining the new appearance.
</param>
            <param name="annot_state">the annotationï¿½s appearance state, which selects the applicable
appearance stream from the appearance sub-dictionary. An annotation can define as many
as three separate appearances: The normal, rollover, and down appearance.
</param>
            <param name="app_state">is an optional parameter specifying the appearance state
(e.g. "Off", "On", etc) under which the new appearance should be stored. If
appearance_state is NULL, the annotation will have only one annotaion state.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.SetAppearance(pdftron.SDF.Obj,pdftron.PDF.Annot.AnnotationState)">
            <summary> Removes the annotation's appearance for the given combination of annotation
and appearance states.

</summary>
            <param name="app_stream">a content stream defining the new appearance.
</param>
            <param name="annot_state">is an optional parameter specifying the appearance state
(e.g. "Off", "On", etc) under which the new appearance should be stored. If
appearance_state is NULL, the annotation will have only one annotaion state.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.SetAppearance(pdftron.SDF.Obj)">
            <summary> Sets the annotationï¿½s appearance for the given combination of annotation
and appearance states.
(Optional; PDFï¿½1.2)

</summary>
            <param name="app_stream">a content stream defining the new appearance.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetAppearance(pdftron.PDF.Annot.AnnotationState,System.String)">
            <summary> Gets the annotationï¿½s appearance for the given combination of annotation
and appearance states.

</summary>
            <param name="annot_state">The annotationï¿½s appearance state, which selects the applicable
appearance stream from the appearance sub-dictionary. An annotation can define as many
as three separate appearances: The normal, rollover, and down appearance.
</param>
            <param name="app_state">Is an optional parameter specifying the appearance state
to look for (e.g. "Off", "On", etc). If appearance_state is NULL, the choice
between different appearance states is determined by the AS (Appearance State)
entry in the annotation dictionary.
</param>
            <returns> The appearance stream for this annotation, or NULL if the annotation
does not have an appearance for the given combination of annotation and
appearance states.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetAppearance(pdftron.PDF.Annot.AnnotationState)">
            <summary> Gets the annotationï¿½s appearance for the given combination of annotation
and appearance states.

</summary>
            <param name="annot_state">The annotationï¿½s appearance state, which selects the applicable
appearance stream from the appearance sub-dictionary. An annotation can define as many
as three separate appearances: The normal, rollover, and down appearance.
</param>
            <returns> the appearance
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetAppearance">
            <summary> Gets the annotationï¿½s appearance for the given combination of annotation
and appearance states.

</summary>
            <returns> The appearance stream for this annotation, or NULL if the annotation
does not have an appearance for the given combination of annotation and
appearance states.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Annot.AnnotationState.e_down">
            <summary>The down appearance is used when the mouse button is pressed or held down
within the annotationï¿½s active area.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.AnnotationState.e_rollover">
            <summary>The rollover appearance is used when the user moves the cursor into the 
annotationï¿½s active area without pressing the mouse button.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.AnnotationState.e_normal">
            <summary>The normal appearance is used when the annotation is not interacting 
with the user. This appearance is also used for printing the annotation.</summary>
        </member>
        <member name="T:pdftron.PDF.Annot.AnnotationState">
            <summary>annotation appearances types</summary>
        </member>
        <member name="M:pdftron.PDF.Annot.SetBorderStyle(pdftron.PDF.Annot.BorderStyle)">
            <summary> Sets the border style for the annotation. Typically used for Link annotations.

</summary>
            <param name="bs">New border style for this annotation.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the pDF net exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetBorderStyle">
            <summary> Gets the border style for the annotation. Typically used for Link annotations.

</summary>
            <returns> Annotation's border style.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.BorderStyle.set_dash(System.Double[])">
            <summary> Sets the border dash pattern.

</summary>
            <param name="dash_array">the new dash
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.BorderStyle.get_dash">
            <summary> Gets the dash.

</summary>
            <returns> the border dash pattern.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Annot.BorderStyle.dash">
            <summary> the border dash pattern </summary>
        </member>
        <member name="M:pdftron.PDF.Annot.BorderStyle.set_width(System.Double)">
            <summary> Sets the border width.

</summary>
            <param name="val">the new width
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.BorderStyle.get_width">
            <summary> Gets the width.

</summary>
            <returns> the border width.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Annot.BorderStyle.width">
            <summary> the border width </summary>
        </member>
        <member name="M:pdftron.PDF.Annot.BorderStyle.set_vr(System.Double)">
            <summary> Sets vertical corner radius.

</summary>
            <param name="val">the new vR
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.BorderStyle.get_vr">
            <summary> Gets the vR.

</summary>
            <returns> vertical corner radius.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Annot.BorderStyle.vr">
            <summary> vertical corner radius </summary>
        </member>
        <member name="M:pdftron.PDF.Annot.BorderStyle.set_hr(System.Double)">
            <summary> Sets horizontal corner radius.

</summary>
            <param name="val">the new hR
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.BorderStyle.get_hr">
            <summary> Gets the hR.

</summary>
            <returns> horizontal corner radius.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Annot.BorderStyle.hr">
            <summary>horizontal corner radius</summary>
        </member>
        <member name="M:pdftron.PDF.Annot.BorderStyle.set_border_style(pdftron.PDF.Annot.BorderStyle.Style)">
            <summary> Sets the border style.

</summary>
            <param name="val">the new style
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.BorderStyle.get_border_style">
            <summary> Gets the style.

</summary>
            <returns> the border style.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Annot.BorderStyle.border_style">
            <summary>the border style</summary>
        </member>
        <member name="M:pdftron.PDF.Annot.BorderStyle.#ctor(pdftron.PDF.Annot.BorderStyle.Style,System.Double,System.Double,System.Double,System.Double[])">
            <summary> Creates a new border style with given parameters.

</summary>
            <param name="s">The border style.
</param>
            <param name="b_width">The border width expressed in the default user space.
</param>
            <param name="b_hr">The horizontal corner radius expressed in the default user space.
</param>
            <param name="b_vr">The vertical corner radius expressed in the default user space.
</param>
            <param name="dash_array">An array of numbers defining a pattern of dashes and gaps to be used
in drawing the border. The dash array is specified in the same format as in the line
dash pattern parameter of the graphics state except that the phase is assumed to be 0.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If the corner radii are 0, the border has square (not rounded) corners; if 
the border width is 0, no border is drawn.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annot.BorderStyle.#ctor(pdftron.PDF.Annot.BorderStyle.Style,System.Double,System.Double,System.Double)">
            <summary> Creates a new border style with given parameters.

</summary>
            <param name="s">The border style.
</param>
            <param name="b_width">The border width expressed in the default user space.
</param>
            <param name="b_hr">The horizontal corner radius expressed in the default user space.
</param>
            <param name="b_vr">The vertical corner radius expressed in the default user space.
in drawing the border. The dash array is specified in the same format as in the line
dash pattern parameter of the graphics state except that the phase is assumed to be 0.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> If the corner radii are 0, the border has square (not rounded) corners; if
the border width is 0, no border is drawn.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annot.BorderStyle.#ctor(pdftron.PDF.Annot.BorderStyle.Style,System.Double)">
            <summary> Creates a new border style with given parameters.

</summary>
            <param name="s">The border style.
</param>
            <param name="b_width">The border width expressed in the default user space.
</param>
        </member>
        <member name="F:pdftron.PDF.Annot.BorderStyle.Style.e_underline">
            <summary>A single line along the bottom of the annotation rectangle.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.BorderStyle.Style.e_inset">
            <summary>A simulated engraved rectangle that appears to be recessed below the surface of the page.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.BorderStyle.Style.e_beveled">
            <summary>A simulated embossed rectangle that appears to be raised above the surface of the page.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.BorderStyle.Style.e_dashed">
            <summary>A dashed rectangle surrounding the annotation.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.BorderStyle.Style.e_solid">
            <summary>A solid rectangle surrounding the annotation.</summary>
        </member>
        <member name="T:pdftron.PDF.Annot.BorderStyle.Style">
            <summary> The border style </summary>
        </member>
        <member name="T:pdftron.PDF.Annot.BorderStyle">
            <summary> BorderStyle structure specifies the characteristics of the annotationï¿½s border.
The border is specified as a rounded rectangle.
</summary>
        </member>
        <member name="M:pdftron.PDF.Annot.SetFlag(pdftron.PDF.Annot.Flag,System.Boolean)">
            <summary> Sets the value of given Flag.

</summary>
            <param name="flag">The Flag property to modify.
</param>
            <param name="value">The new value for the property.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetFlag(pdftron.PDF.Annot.Flag)">
            <summary> Gets the flag.

</summary>
            <param name="flag">The Flag property to query.
</param>
            <returns> The value of given Flag
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Annot.Flag.e_locked_contents">
            <summary>If e_locked_contents is set, do not allow the contents of the annotation to be modified 
by the user. This flag does not restrict deletion of the annotation or changes to other 
annotation properties, such as position and size.	</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Flag.e_toggle_no_view">
            <summary>If e_toggle_no_view is set, invert the interpretation of the NoView flag for certain 
events. A typical use is to have an annotation that appears only when a mouse cursor is
held over it.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Flag.e_locked">
            <summary>If e_locked is set, do not allow the annotation to be deleted or its properties 
(including position and size) to be modified by the user. However, this flag does not 
restrict changes to the annotationï¿½s contents, such as the value of a form field.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Flag.e_read_only">
            <summary>If e_read_only is set, do not allow the annotation to interact with the user. The
annotation may be displayed or printed (depending on the settings of the NoView and Print 
flags) but should not respond to mouse clicks or change its appearance in response to 
mouse motions.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Flag.e_no_view">
            <summary>If e_no_view is set, do not display the annotation on the screen or allow it to
interact with the user. The annotation may be printed (depending on the setting of the 
Print flag) but should be considered hidden for purposes of on-screen display and user 
interaction.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Flag.e_no_rotate">
            <summary>If e_no_rotate is set, do not rotate the annotationï¿½s appearance to match the rotation 
of the page.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Flag.e_no_zoom">
            <summary>If e_no_zoom is set, do not scale the annotationï¿½s appearance to match the 
magnification of the page.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Flag.e_print">
            <summary>If e_print is set, print the annotation when the page is printed. If clear, never
print the annotation, regardless of whether it is displayed on the screen. This can be 
useful, for example, for annotations representing interactive pushbuttons, which would 
serve no meaningful purpose on the printed page.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Flag.e_hidden">
            <summary>If e_hidden is set, do not display or print the annotation or allow it to interact
with the user, regardless of its annotation type or whether an annotation handler 
is available.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Flag.e_invisible">
            <summary>If e_invisible is set, do not display the annotation if it does not belong to 
one of the standard annotation types and no annotation handler is available. If clear, 
display such an unknown annotation using an appearance stream specified by its appearance 
dictionary, if any. </summary>
        </member>
        <member name="T:pdftron.PDF.Annot.Flag">
            <summary>Flags specifying various characteristics of the annotation.</summary>
        </member>
        <member name="M:pdftron.PDF.Annot.SetDate(pdftron.PDF.Date)">
            <summary> Sets an annotation's last modified date.

</summary>
            <param name="date"> The annotation's last modified time and date. Corresponds to the 
"M" entry of the annotation dictionary.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetDate">
            <summary> Gets an annotation's last modified date.

</summary>
            <returns> The annotation's time and date. If the annotation has no associated date
structure, the returned date is not valid (date.IsValid() returns false). Corresponds 
to the "M" entry of the annotation dictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.SetUniqueID(System.String)">
            <summary> Sets the unique identifier for this annotation.

</summary>
            <param name="data">the new unique id
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  It is necessary to ensure that the unique ID generated is actually unique. </remarks>
        </member>
        <member name="M:pdftron.PDF.Annot.GetUniqueID">
            <summary> Gets the unique ID.

</summary>
            <returns> The unique identifier for this annotation, or NULL if the identifier is not
available. The returned value is a String object and is the value of the "NM"
field, which was added as an optional attribute in PDF 1.4.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.SetPage(pdftron.PDF.Page)">
            <summary> Sets the reference to a page the annotation is associated with.
(Optional PDFï¿½1.3; not used in FDF files)

</summary>
            <param name="page">the new page
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The parameter should be an indirect reference to the page object with 
which this annotation is associated. This entry shall be present in screen
annotations associated with rendition actions</remarks>
        </member>
        <member name="M:pdftron.PDF.Annot.GetPage">
            <summary> Gets the page the annotation is associated with.

</summary>
            <returns> A Page object or NULL if the page reference is not available.
The page object returned is an indirect reference to the page object with which
this annotation is associated.
This entry shall be present in screen annotations associated with rendition actions.

Optional. PDF 1.3 PDF 1.4 PDF 1.5 not used in FDF files.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.SetContents(System.String)">
            <summary> Sets the contents.

</summary>
            <param name="contents">the new contents
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetContents">
            <summary> Gets the contents.

</summary>
            <returns> the contents
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.SetRect(pdftron.PDF.Rect)">
            <summary> Sets the size and location of an annotation on its page.

</summary>
            <param name="pos">the new rect
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetVisibleContentBox">
            <summary> It is possible during viewing that GetRect does not return the most accurate bounding box
of what is actually rendered. This method calculates the bounding box, rather than relying
on what is specified in the PDF document. The bounding box is defined as the smallest
rectangle that includes all the visible content on the annotation.

</summary>
            <returns> the bounding box for this annotation. The dimensions are specified in user space
coordinates.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetRect">
            <summary> Gets the rect.

</summary>
            <returns> Annotationï¿½s bounding rectangle, specified in user space coordinates.

The meaning of the rectangle depends on the annotation type. For Link and RubberStamp
annotations, the rectangle specifies the area containing the hyperlink area or stamp.
For Note annotations, the rectangle is describing the popup window when it's opened.
When it's closed, the icon is positioned at lower left corner.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.IsMarkup">
            <summary> Checks if is markup.

</summary>
            <returns> true, if is markup
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetType">
            <summary> Gets the type.

</summary>
            <returns> The type of this annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> The underlying SDF/Cos object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.IsValid">
            <summary> Checks if is valid.

</summary>
            <returns> True if this is a valid (non-null) annotation, false otherwise.
If the function returns false the underlying SDF/Cos object is null or is
not valid and the annotation object should be treated as a null object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.Equals(System.Object)">
            <param name="o">a given <c>Object</c></param>
            <returns>true, if equals to the given object
</returns>
        </member>
        <member name="M:pdftron.PDF.Annot.op_Inequality(pdftron.PDF.Annot,pdftron.PDF.Annot)">
            <summary>Inequality operator checks whether two Annot objects are different</summary>
            <param name="l">the <c>Annot</c> object on the left of operator
</param>
            <param name="r">the <c>Annot</c> object on the right of operator
</param>
            <returns>true if both objects are not equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.PDF.Annot.op_Equality(pdftron.PDF.Annot,pdftron.PDF.Annot)">
            <summary>Equality operator checks whether two Annot objects are the same</summary>
            <param name="l">the <c>Annot</c> object on the left of operator
</param>
            <param name="r">the <c>Annot</c> object on the right of operator
</param>
            <returns>true if both objects are equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.PDF.Annot.op_Assign(pdftron.PDF.Annot)">
            <summary>Assignment operator</summary>
            <param name="r">a <c>Annot</c> object
</param>
            <returns>a <c>Annot</c>object equals to the given one
</returns>
        </member>
        <member name="M:pdftron.PDF.Annot.#ctor(pdftron.SDF.Obj)">
            <summary> Create an annotation and initialize it using given Cos/SDF object.

</summary>
            <param name="b">a <c>SDF::Obj</c> object
</param>
            <remarks>  The constructor does not copy any data, but is instead the logical
equivalent of a type cast.</remarks>
        </member>
        <member name="M:pdftron.PDF.Annot.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Annot.Type,pdftron.PDF.Rect)">
            <summary> Creates a new annotation of a given type, in the specified document.
Because the newly created annotation does not contain any properties specific
to a given annotation type, it is faster to create an annotation using type specific
Annot.Create method.

</summary>
            <param name="doc">A document to which the annotation is added.
</param>
            <param name="type">Subtype of annotation to create.
</param>
            <param name="pos">A rectangle specifying the annotation's bounds, specified in
user space coordinates.
</param>
            <returns> A newly created blank annotation for the given annotation type.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Annot.GetTriggerAction(pdftron.PDF.Annot.EventType)">
            <summary> Get the Action associated with the selected Annot Trigger event
</summary>
            <param name="trigger">the type of trigger event to get
</param>
            <returns> The action Obj if present, otherwise NULL
</returns>
        </member>
        <member name="F:pdftron.PDF.Annot.EventType.e_action_trigger_annot_page_invisible">
            <summary>Triggered when the page containing the annotation is no longer visible in the interactive PDF processorï¿½s user interface.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.EventType.e_action_trigger_annot_page_visible">
            <summary>Triggered when the page containing the annotation becomes visible.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.EventType.e_action_trigger_annot_page_close">
            <summary>Triggered when the page containing the annotation is closed.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.EventType.e_action_trigger_annot_page_open">
            <summary>Triggered when the page containing the annotation is opened.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.EventType.e_action_trigger_annot_blur">
            <summary>Triggered when the annotation loses the input focus.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.EventType.e_action_trigger_annot_focus">
            <summary>Triggered when the annotation receives the input focus.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.EventType.e_action_trigger_annot_up">
            <summary>Triggered when the mouse button is released inside the annotationï¿½s active area.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.EventType.e_action_trigger_annot_down">
            <summary>Triggered when the mouse button is pressed inside the annotationï¿½s active area.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.EventType.e_action_trigger_annot_exit">
            <summary>Triggered when the cursor exits the annotation's active area.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.EventType.e_action_trigger_annot_enter">
            <summary>Triggered when the cursor enters the annotation's active area.</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.EventType.e_action_trigger_activate">
            <summary>Triggered when the annotation is activated. if present, takes precedence over U entry (e_action_trigger_annot_up).</summary>
        </member>
        <member name="T:pdftron.PDF.Annot.EventType">
            <summary>
Event types for Annot
</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Unknown">
            <summary>Unknown annotation type</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_RichMedia">
            <summary>Rich Media annotation, Adobe supplement to ISO 32000 </summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Projection">
            <summary>Projection annotation, Adobe supplement to ISO 32000 </summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Redact">
            <summary>Redact annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_3D">
            <summary>3D annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Watermark">
            <summary>Watermark annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_TrapNet">
            <summary>Trap network annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_PrinterMark">
            <summary>Printerï¿½s mark annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Screen">
            <summary>Screen annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Widget">
            <summary>Widget annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Movie">
            <summary>Movie annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Sound">
            <summary>Sound annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_FileAttachment">
            <summary>File attachment annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Popup">
            <summary>Pop-up annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Ink">
            <summary>Ink annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Caret">
            <summary>Caret annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Stamp">
            <summary>Rubber stamp annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_StrikeOut">
            <summary>Strikeout annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Squiggly">
            <summary>Squiggly-underline annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Underline">
            <summary>Underline annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Highlight">
            <summary>Highlight annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Polyline">
            <summary>Polyline annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Polygon">
            <summary>Polygon annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Circle">
            <summary>Circle annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Square">
            <summary>Square annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Line">
            <summary>Line annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_FreeText">
            <summary>Free text annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Link">
            <summary>Link annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Annot.Type.e_Text">
            <summary>Text annotation</summary>
        </member>
        <member name="T:pdftron.PDF.Annot.Type">
            <summary>Annotation types</summary>
        </member>
        <member name="T:pdftron.PDF.Annot">
            <summary> Annot is a base class for different types of annotations. For annotation 
specific properties, please refer to derived classes. 

An annotation is an interactive object placed on a page, such as a text note, a link, 
or an embedded file. PDF includes a wide variety of standard annotation types. 
An annotation associates an object such as a widget, note, or movie with a location
on a page of a PDF document, or provides a means of interacting with the user
via the mouse and keyboard. For more details on PDF annotations please refer to 
section 12.5 in the PDF Reference Manual and the 
</summary>
        </member>
        <member name="M:pdftron.PDF.Bookmark.Dispose">
            <summary> Releases all resources used by the Bookmark </summary>
        </member>
        <member name="M:pdftron.PDF.Bookmark.GetSDFObj">
            <summary> Returns the underlying SDF/Cos object.

</summary>
            <returns> The underlying SDF/Cos object.

</returns>
            <remarks>  A null (non-valid) bookmark returns a null object. </remarks>
        </member>
        <member name="M:pdftron.PDF.Bookmark.SetColor(System.Double,System.Double,System.Double)">
            <summary> Sets the color.

</summary>
            <param name="r">red component in the DeviceRGB color space
</param>
            <param name="g">green component in the DeviceRGB color space
</param>
            <param name="b">blue component in the DeviceRGB color space
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.GetColor(System.Double@,System.Double@,System.Double@)">
            <summary> Gets the Bookmark's RGB color value.

</summary>
            <param name="out_r">red component in the DeviceRGB color space</param>
            <param name="out_b">blue component in the DeviceRGB color space</param>
            <param name="out_g">green component in the DeviceRGB color space</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <example>The three numbers  out_r, out_g, and out_b are in the range 0.0 to 1.0, 
representing the components in the DeviceRGB color space of the color
to be used for the Bookmarkï¿½s text.
<code>
double red, green, blue;
bookmark.GetColor(red, green, blue);
</code></example>
        </member>
        <member name="M:pdftron.PDF.Bookmark.SetFlags(System.Int32)">
            <summary> Sets the Bookmark's flags.

</summary>
            <param name="flags">The new bookmark flags.
Bit 1 (the least-significant bit) indicates italic font whereas
bit 2 indicates bold font.
Therefore, 0 indicates normal, 1 is italic, 2 is bold, and 3 is bold-italic.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.GetFlags">
            <summary> Gets the Bookmark's flags.

</summary>
            <returns> The flags of the Bookmark object.
Bit 1 (least-significant bit) indicates italic font whereas
bit 2 indicates bold font.
Therefore, 0 indicates normal, 1 is italic, 2 is bold, and 3 is bold-italic.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.RemoveAction">
            <summary> Removes the Bookmarkï¿½s action.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.SetAction(pdftron.PDF.Action)">
            <summary> Sets the Bookmarkï¿½s action.

</summary>
            <param name="action">The new Action for the Bookmark.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.GetAction">
            <summary> Gets the Bookmark's action.

</summary>
            <returns> The bookmarkï¿½s action.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.SetTitle(System.String)">
            <summary> Sets the Bookmarkï¿½s title string.

</summary>
            <param name="title">The new title string for the bookmark.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.GetTitleObj">
            <summary> Gets the Bookmark's title string object.

</summary>
            <returns> The Bookmark's title string object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.GetTitle">
            <summary> Gets the Bookmark's title string.

</summary>
            <returns> The Bookmarkï¿½s title string).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.GetOpenCount">
            <summary> Gets the number of opened bookmarks in this subtree.

</summary>
            <returns> The number of opened bookmarks in this subtree (not including
this Bookmark). If the item is closed, a negative integer whose
absolute value specifies how many descendants would appear if the
item were reopened.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.SetOpen(System.Boolean)">
            <summary> Opens or closes the Bookmark.
</summary>
            <param name="is_open">If true, the Bookmark is opened. Otherwise the Bookmark is closed.
</param>
            <exception cref="T:pdftron.Common.PDFNetException"> PDFNetException the PDFNet exception </exception>
            <remarks>An opened Bookmark shows its children, while a closed Bookmark does not. </remarks>
        </member>
        <member name="M:pdftron.PDF.Bookmark.IsOpen">
            <summary> Indicates whether the Bookmark is open.

</summary>
            <returns> True if this Bookmark is open; otherwise false.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  An open Bookmark shows all its children. </remarks>
        </member>
        <member name="M:pdftron.PDF.Bookmark.GetIndent">
            <summary> Gets the indentation level of the Bookmark in its containing tree.

</summary>
            <returns> The indentation level of the Bookmark in its containing tree.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The root level has an indentation level of zero. </remarks>
        </member>
        <member name="M:pdftron.PDF.Bookmark.Unlink">
            <summary> Unlinks this Bookmark from the bookmark tree that contains it, and
adjusts the tree appropriately.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  After the bookmark is unlinked is can be moved to another place
in the bookmark tree located in the same document.</remarks>
        </member>
        <member name="M:pdftron.PDF.Bookmark.Delete">
            <summary> Removes the Bookmark's subtree from the bookmark tree containing it.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.AddPrev(pdftron.PDF.Bookmark)">
            <summary> Adds the specified Bookmark as the new left sibling to this Bookmark,
adjusting the tree containing this Bookmark appropriately.

</summary>
            <param name="bookmark">The Bookmark object to be added to this Bookmark.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Parameter in_bookmark must not be linked to a bookmark tree. </remarks>
        </member>
        <member name="M:pdftron.PDF.Bookmark.AddPrev(System.String)">
            <summary> Adds a new Bookmark to the tree containing this Bookmark, as the
new left sibling.

</summary>
            <param name="text">The title string value of the new Bookmark.
</param>
            <returns> The newly created sibling Bookmark.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.AddNext(pdftron.PDF.Bookmark)">
            <summary> Adds the specified Bookmark as the new right sibling to this Bookmark,
adjusting the tree containing this Bookmark appropriately.

</summary>
            <param name="bookmark">The Bookmark object to be added to this Bookmark.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Parameter in_bookmark must not be linked to a bookmark tree. </remarks>
        </member>
        <member name="M:pdftron.PDF.Bookmark.AddNext(System.String)">
            <summary> Adds a new Bookmark to the tree containing this Bookmark, as the
new right sibling.

</summary>
            <param name="text">The title string value of the new Bookmark.
</param>
            <returns> The newly created sibling Bookmark.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.AddChild(pdftron.PDF.Bookmark)">
            <summary> Adds the specified Bookmark as the new last child of this Bookmark.

</summary>
            <param name="bookmark">The Bookmark object to be added as a last child of this Bookmark.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Parameter in_bookmark must not be linked to a bookmark tree.
If this Bookmark previously had no children, it will be open after the child is added.</remarks>
        </member>
        <member name="M:pdftron.PDF.Bookmark.AddChild(System.String)">
            <summary> Adds a new Bookmark as the new last child of this Bookmark.

</summary>
            <param name="text">The title string value of the new Bookmark.
</param>
            <returns> The newly created child Bookmark.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If this Bookmark previously had no children, it will be open
after the child is added.</remarks>
        </member>
        <member name="M:pdftron.PDF.Bookmark.Find(System.String)">
            <summary> Gets the Bookmark specified by the given title string.

</summary>
            <param name="title">The title string value of the Bookmark to find.
</param>
            <returns> A Bookmark matching the title string value specified.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.GetParent">
            <summary> Returns the Bookmark's parent Bookmark.

</summary>
            <returns> The Bookmarkï¿½s parent Bookmark.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.GetLastChild">
            <summary> Returns the Bookmark's last child.

</summary>
            <returns> The Bookmarkï¿½s last child.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.GetFirstChild">
            <summary> Returns the Bookmark's first child.

</summary>
            <returns> The Bookmarkï¿½s first child.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.GetPrev">
            <summary> Returns the Bookmark's previous (left) sibling.

</summary>
            <returns> The Bookmarkï¿½s previous (left) sibling.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.GetNext">
            <summary> Returns the Bookmark's next (right) sibling.

</summary>
            <returns> The Bookmarkï¿½s next (right) sibling.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.HasChildren">
            <summary> Indicates whether the Bookmark has children.

</summary>
            <returns> True if the Bookmark has children; otherwise false.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Bookmark.IsValid">
            <summary> Indicates whether the Bookmark is valid (non-null).

</summary>
            <returns> True if this is a valid (non-null) Bookmark; otherwise false.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If this method returns false the underlying SDF/Cos object is null and
the Bookmark object should be treated as null as well.</remarks>
        </member>
        <member name="M:pdftron.PDF.Bookmark.Equals(System.Object)">
            <summary> Check whether the given object is the equal to this Bookmark object </summary>
            <param name="o">a given <c>Object</c></param>
            <returns>true, if equals to the given object
</returns>
        </member>
        <member name="M:pdftron.PDF.Bookmark.op_Inequality(pdftron.PDF.Bookmark,pdftron.PDF.Bookmark)">
            <summary> Ineuqality operator checks whether two Bookmark objects are different </summary>
            <param name="l">
                <c>Bookmark</c> object at the left of the operator
</param>
            <param name="r">
                <c>Bookmark</c> object at the right of the operator
</param>
            <returns>true, if both <c>Bookmark</c> objects are not equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.PDF.Bookmark.op_Equality(pdftron.PDF.Bookmark,pdftron.PDF.Bookmark)">
            <summary> Euqality operator checks whether two Bookmark objects are equal </summary>
            <param name="l">
                <c>Bookmark</c> object at the left of the operator
</param>
            <param name="r">
                <c>Bookmark</c> object at the right of the operator
</param>
            <returns>true, if both <c>Bookmark</c> objects are equal, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.Bookmark.op_Assign(pdftron.PDF.Bookmark)">
            <summary> Assignment Operator </summary>
            <param name="r">a <c>Bookmark</c> object
</param>
            <returns>A <c>Bookmark</c> object equals to the specified <c>Bookmark</c> object
</returns>
        </member>
        <member name="M:pdftron.PDF.Bookmark.Set(pdftron.PDF.Bookmark)">
            <summary>Sets value to the specified <c>Bookmark</c></summary>
            <param name="p">given <c>Bookmark</c> object
</param>
        </member>
        <member name="M:pdftron.PDF.Bookmark.Create(pdftron.PDF.PDFDoc,System.String)">
            <summary> Creates a new valid Bookmark with given title in the
specified document.

</summary>
            <param name="doc">The document in which a Bookmark is to be created.
</param>
            <param name="text">The title string value of the new Bookmark.
</param>
            <returns> The new Bookmark.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The new Bookmark is not linked to the outline tree. 
Use AddChild()/AddNext()/AddPrev() methods in order to link the Bookmark
to the outline tree</remarks>
        </member>
        <member name="M:pdftron.PDF.Bookmark.#ctor(pdftron.SDF.Obj)">
            <summary> A constructor. Creates a bookmark from specified <c>SDF::Obj</c></summary>
            <param name="b">
                <c>SDF::Obj</c> object
</param>
        </member>
        <member name="T:pdftron.PDF.Bookmark">
            <summary> A %PDF document may optionally display a document outline on the screen, allowing
the user to navigate interactively from one part of the document to another.
The outline consists of a tree-structured hierarchy of Bookmarks (sometimes
called outline items), which serve as a 'visual table of contents' to display the 
documentï¿½s structure to the user. 

Each Bookmark has a title that appears on screen, and an Action that specifies 
what happens when a user clicks on the Bookmark. The typical action for a 
user-created Bookmark is to move to another location in the current document, 
although any action (see PDF::Action) can be specified.

Bookmark is a utility class used to simplify work with %PDF bookmarks (or 
outlines; see section 8.2.2 'Document Outline' in %PDF Reference Manual for 
more details).
</summary>
        </member>
        <member name="M:pdftron.PDF.Action.Dispose">
            <summary> Releases all resources used by the Action </summary>
        </member>
        <member name="M:pdftron.PDF.Action.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> Pointer to the underlying SDF/Cos object.
</returns>
        </member>
        <member name="M:pdftron.PDF.Action.GetNext">
            <summary> Gets the next actions </summary>
            <returns> The next action dictionary, an array of action dictionaries, 
or NULL if there are no additional actions.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> Sequences of actions can be chained together.
For example, the effect of clicking a link annotation with the mouse might be to
play a sound, jump to a new page, and start up a movie. Note that the Next entry 
is not restricted to a single action but may contain an array of actions, each of
which in turn may have a Next entry of its own. The actions may thus form a tree 
instead of a simple linked list. Actions within each Next array are executed in 
order, each followed in turn by any actions specified in its Next entry, and so 
on recursively.</remarks>
        </member>
        <member name="M:pdftron.PDF.Action.GetDest">
            <summary> Gets the dest.

</summary>
            <returns> The Action's Destination view.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This only works for Actions whose subtype is "GoTo".
All named destinations are automatically resolved to the
explicit destination so you can access destination members directly.</remarks>
        </member>
        <member name="M:pdftron.PDF.Action.SetFormActionFlag(pdftron.PDF.Action.FormActionFlag,System.Boolean)">
            <summary> Set the value of a given field flag.

Action flags are currently only used by submit and reset form actions.

</summary>
            <param name="flag">the flag
</param>
            <param name="value">the value
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Action.GetFormActionFlag(pdftron.PDF.Action.FormActionFlag)">
            <summary> Gets the form action flag.

</summary>
            <param name="flag">the flag
</param>
            <returns> value of the given action flag.

Action flags are currently only used by submit and reset form actions.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.Action.FormActionFlag">
            <summary>Flags used by submit form actions. Exclude flag is also used by reset form action.
No other action types use flags in the current version of PDF standard (ISO 2300).</summary>
        </member>
        <member name="M:pdftron.PDF.Action.ExecuteKeyStrokeAction(pdftron.PDF.KeyStrokeEventData)">
            <summary> Execute KeyStrokeAction, this shall be performed when the user modifies a character in a text
field or combo box or modifies the selection in a scrollable list box. This action checks the added text
for validity and reject or modify it.
</summary>
            <param name="data">the data that contains previous text, added text, and added position information
</param>
            <returns> the result of KeyStrokeAction.
</returns>
        </member>
        <member name="M:pdftron.PDF.Action.NeedsWriteLock">
            <summary> Test whether this action needs WriteLock
</summary>
            <returns>true if it may modify the document, otherwise false.
</returns>
        </member>
        <member name="M:pdftron.PDF.Action.Execute">
            <summary> Executes current action; this will only work for some action types that can be executed
only using the information contained in the action object or the associated PDF doc.
See also PDFViewCtrl::ExecuteAction()

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Action.GetType">
            <summary> Gets the type.

</summary>
            <returns> The type of this Action.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_Unknown">
            <summary>Unknown Action type</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_RichMediaExecute">
            <summary>Adobe supplement to ISO 32000; specifies a command to be sent to rich media annotation's handler</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_GoTo3DView">
            <summary>(PDF 1.6) Set the current view of a 3D annotation</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_Trans">
            <summary>Updates the display of a document, using a transition dictionary.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_Rendition">
            <summary>(PDF 1.5) Controls the playing of multimedia content.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_SetOCGState">
            <summary>(PDF 1.5) Set the states of optional content groups.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_JavaScript">
            <summary>Execute a JavaScript script.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_ImportData">
            <summary>Import field values from a file.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_ResetForm">
            <summary>Set fields to their default values.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_SubmitForm">
            <summary>Send data to a uniform resource locator.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_Named">
            <summary>Execute an action predefined by the viewer application.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_Hide">
            <summary>Set an annotation's Hidden flag.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_Movie">
            <summary>Play a movie.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_Sound">
            <summary>Play a sound.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_URI">
            <summary>Resolve a uniform resource identifier.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_Thread">
            <summary>Begin reading an article thread.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_Launch">
            <summary>Launch an application, usually to open a file. </summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_GoToE">
            <summary>('Go-to embedded'; PDF 1.6) Go to a destination in an embedded file.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_GoToR">
            <summary>('Go-to remote') Go to a destination in another document.</summary>
        </member>
        <member name="F:pdftron.PDF.Action.Type.e_GoTo">
            <summary>Go to a destination in the current document.</summary>
        </member>
        <member name="T:pdftron.PDF.Action.Type">
            <summary>Action types</summary>
        </member>
        <member name="M:pdftron.PDF.Action.IsValid">
            <summary> Indicates whether the Action is valid (non-null).

</summary>
            <returns> True if this is a valid (non-null) Action; otherwise false.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If this method returns false the underlying SDF/Cos object is null and 
the Action object should be treated as null as well.</remarks>
        </member>
        <member name="M:pdftron.PDF.Action.Equals(System.Object)">
            <param name="o">a given <c>Object</c></param>
            <returns>true, if equals to the given object
</returns>
        </member>
        <member name="M:pdftron.PDF.Action.op_Inequality(pdftron.PDF.Action,pdftron.PDF.Action)">
            <summary>Ineuqality operator checks whether two Action objects are different</summary>
            <param name="l">
                <c>Action</c> object on the left of the operator</param>
            <param name="r">
                <c>Action</c> object on the right of the operator</param>
            <returns>true if two objects are not equal, false otherwise</returns>
        </member>
        <member name="M:pdftron.PDF.Action.op_Equality(pdftron.PDF.Action,pdftron.PDF.Action)">
            <summary>Equality operator checks whether two Action objects are the same</summary>
            <param name="l">
                <c>Action</c> object on the left of the operator</param>
            <param name="r">
                <c>Action</c> object on the right of the operator</param>
            <returns>true if two objects are equal, false otherwise</returns>
        </member>
        <member name="M:pdftron.PDF.Action.op_Assign(pdftron.PDF.Action)">
            <summary>Assignment operator</summary>
            <param name="r">another <c>Action</c> object
</param>
            <returns>a <c>Action</c> object equals to the give object</returns>
        </member>
        <member name="M:pdftron.PDF.Action.Set(pdftron.PDF.Action)">
            <summary>Sets value to given <c>Action</c> object
</summary>
            <param name="p">another <c>Action</c> object
</param>
        </member>
        <member name="M:pdftron.PDF.Action.CreateJavaScript(pdftron.SDF.SDFDoc,System.String)">
            <summary> Creates a new 'JavaScript' action. A javascript action executes a JavaScript
script when it's invoked. 
</summary>
            <param name="doc">the document in which to create the action
</param>
            <param name="script">the JavaScript script to be executed
</param>
            <returns> the action
</returns>
        </member>
        <member name="M:pdftron.PDF.Action.CreateResetForm(pdftron.SDF.SDFDoc)">
            <summary> Creates a new 'Reset Form' action. A reset form action reset choosen
form fields to their default value.
</summary>
            <param name="doc">the document in which to create the action
</param>
            <returns> the action
</returns>
        </member>
        <member name="M:pdftron.PDF.Action.CreateImportData(pdftron.SDF.SDFDoc,System.String)">
            <summary> Creates a new 'Import Data' action. An import data action imports
form data from a FDF file into a PDF document.
</summary>
            <param name="doc">the document in which to create the action
</param>
            <param name="path">the full path of the FDF file
</param>
            <returns> the action
</returns>
        </member>
        <member name="M:pdftron.PDF.Action.CreateHideField(pdftron.SDF.SDFDoc,System.Collections.Generic.List`1{System.String})">
            <summary> Creates a new Show/Hide Field action. A show/hide field action 
shows or hide certain fields when it's invoked.
</summary>
            <param name="doc">the document in which to create the action
</param>
            <param name="field_list">list of fields to hide
</param>
            <returns>the action
</returns>
        </member>
        <member name="M:pdftron.PDF.Action.CreateLaunch(pdftron.SDF.SDFDoc,System.String)">
            <summary> Creates a new 'Launch' action. A launch action opens up a file using the
most appropriate program.

</summary>
            <param name="doc">the document in which to create the action
</param>
            <param name="path">full path of the file to be opened
</param>
            <returns> the action
</returns>
        </member>
        <member name="M:pdftron.PDF.Action.CreateSubmitForm(pdftron.PDF.FileSpec)">
            <summary> Creates a new 'SubmitForm'action. A submit-form action transmits the names
and values of selected interactive form fields to a specified uniform
resource locator (URL), presumably the address of a Web server that will
process them and send back a response.

</summary>
            <param name="url">A URL file specification giving the uniform resource locator (URL)
of the script at the Web server that will process the submission.
</param>
            <returns> the action
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Action.CreateURI(pdftron.SDF.SDFDoc,System.String)">
            <summary> Create a new URI action. The URL action is typically resolved by opening a URL in
the default web browser.

</summary>
            <param name="doc">The document in which to create the action.
</param>
            <param name="uri">The uniform resource identifier to resolve, encoded in 7-bit ASCII.
A uniform resource identifier (URI) is a string that identifies (resolves to) a resource
on the Internetï¿½typically a file that is the destination of a hypertext link, although
it can also resolve to a query or other entity. (URIs are described in Internet RFC 2396,
Uniform Resource Identifiers (URI).
</param>
            <returns> the action
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Action.CreateGotoRemote(pdftron.PDF.FileSpec,System.Int32,System.Boolean)">
            <summary> Creates a new 'GoToR'action. See the above method for details.

</summary>
            <param name="file">The file referred to by the action.
</param>
            <param name="page_num">A page number within the remote document. The first page is
numbered 0.
</param>
            <param name="new_window">the new_window
</param>
            <returns> the action
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  A flag specifying whether to open the destination document
in a new window. If new_window is false, the destination document replaces
the current document in the same window, otherwise the viewer application
should behave in accordance with the current user preference.</remarks>
        </member>
        <member name="M:pdftron.PDF.Action.CreateGotoRemote(pdftron.PDF.FileSpec,System.Int32)">
            <summary> Creates a new 'GoToR'action. A remote go-to action is similar to an
ordinary go-to action but jumps to a destination in another PDF file
instead of the current file.

</summary>
            <param name="file">The file referred to by the action.
</param>
            <param name="page_num">A page number within the remote document. The first page is
numbered 0.
</param>
            <returns> the action
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  A flag specifying whether to open the destination document
in a new window. If new_window is false, the destination document replaces
the current document in the same window, otherwise the viewer application
should behave in accordance with the current user preference.</remarks>
        </member>
        <member name="M:pdftron.PDF.Action.CreateGoto(System.Byte[],System.Int32,pdftron.PDF.Destination)">
            <summary> Creates a new 'GoTo' action using a 'Named Destination'. GoTo action
takes the user to the specified 'Named Destination' view located in the
same document.

</summary>
            <param name="key">a string buffer representing the destination name. The named
destination will be stored in document's '/Dest' SDF::NameTree.
</param>
            <param name="key_sz">size of the key buffer
</param>
            <param name="dest">The explicit destination used to create the named destination.
</param>
            <returns> the action
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Action.CreateGoto(System.String,pdftron.PDF.Destination)">
            <summary> Creates a new 'GoTo' action using a 'Named Destination'. GoTo action
takes the user to the specified 'Named Destination' view located in the
same document.

</summary>
            <param name="key">- a string buffer representing the destination name. The named
destination will be stored in document's '/Dest' SDF::NameTree.
</param>
            <param name="dest">The explicit destination used to create the named destination.
</param>
            <returns> the action
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Action.CreateGoto(pdftron.PDF.Destination)">
            <summary> Creates a new 'GoTo'action. GoTo action takes the user to the
specified Destination view located in the same document.

</summary>
            <param name="dest">A Destination for the new Action.
</param>
            <returns> the action
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This method can only be used for destinations in the same
document as the source document. For cross-document links use
<c>Action::CreateGotoRemote().</c></remarks>
        </member>
        <member name="M:pdftron.PDF.Action.#ctor(pdftron.SDF.Obj)">
            <summary> A constructor. Creates an Action and initializes it using given Cos/SDF object.

</summary>
            <param name="a">Pointer to the Cos/SDF object.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The constructor does not copy any data, but is instead the logical 
equivalent of a type cast.</remarks>
        </member>
        <member name="T:pdftron.PDF.Action">
            <summary> Actions are typically what happens when a user clicks on a link or bookmark.

Instead of simply jumping to a destination in the document, an annotation or
outline item can specify an action for the viewer application to perform, such 
as launching an application, playing a sound, or changing an annotationï¿½s 
appearance state.

</summary>
            <remarks>  Although the Action class provides utility functions for most commonly used
action types, it is possible to read, write, and edit any action type using SDF API 
and dictionary entries described in Section 8.5 in the PDF Reference Manual.</remarks>
        </member>
        <member name="M:pdftron.PDF.Destination.Dispose">
            <summary> Releases all resources used by the Destination </summary>
        </member>
        <member name="M:pdftron.PDF.Destination.GetExplicitDestObj">
            <summary> Gets the explicit dest obj.

</summary>
            <returns> the explicit destination SDF/Cos object. This is always an Array
as shown in Table 8.2 in PDF Reference Manual.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Destination.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> the object to the underlying SDF/Cos object.
The returned SDF/Cos object is an explicit destination (i.e. the Obj is either
an array defining the destination, using the syntax shown in Table 8.2 in PDF
Reference Manual), or a dictionary with a 'D' entry whose value is such an
array. The latter form allows additional attributes to be associated with
the destination
</returns>
        </member>
        <member name="M:pdftron.PDF.Destination.SetPage(pdftron.PDF.Page)">
            <summary> Modify the destination so that it refers to the new 'page' as the destination page.

</summary>
            <param name="page">The new page associated with this Destination.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Destination.GetPage">
            <summary> Gets the page.

</summary>
            <returns> the Page that this destination refers to.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Destination.GetFitType">
            <summary> Gets the fit type.

</summary>
            <returns> destination's FitType.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Destination.IsValid">
            <summary> Checks if is valid.

</summary>
            <returns> True if this is a valid Destination and can be resolved, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If this method returns false the underlying SDF/Cos object is null and
the Action object should be treated as null as well.</remarks>
        </member>
        <member name="M:pdftron.PDF.Destination.op_Assign(pdftron.PDF.Destination)">
            <summary>Assignment operator</summary>
            <param name="r">
                <c>Destination</c> object at the right of the operator
</param>
            <returns>
                <c>Destination</c> object equals to the specified object
</returns>
        </member>
        <member name="M:pdftron.PDF.Destination.Set(pdftron.PDF.Destination)">
            <summary>Sets value to given <c>Destination</c> object
</summary>
            <param name="p">given <c>Destination</c> object
</param>
        </member>
        <member name="M:pdftron.PDF.Destination.CreateFitBV(pdftron.PDF.Page,System.Double)">
            <summary> Create a new 'FitBV' Destination.

The new Destination displays Display the page designated by 'page',
with the horizontal coordinate 'left' positioned at the left edge of
the window and the contents of the page magnified just enough to fit
the entire height of its bounding box within the window.

</summary>
            <param name="page">the page
</param>
            <param name="left">the left
</param>
            <returns> the destination
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Destination.CreateFitBH(pdftron.PDF.Page,System.Double)">
            <summary> Create a new 'FitBH' Destination.

The new Destination displays the page designated by 'page', with
the vertical coordinate 'top' positioned at the top edge of the window
and the contents of the page magnified just enough to fit the entire
width of its bounding box within the window.

</summary>
            <param name="page">the page
</param>
            <param name="top">the top
</param>
            <returns> the destination
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Destination.CreateFitB(pdftron.PDF.Page)">
            <summary> Create a new 'FitB' Destination.

The new Destination displays the page designated by 'page', with its
contents magnified just enough to fit its bounding box entirely within
the window both horizontally and vertically. If the required
horizontal and vertical magnification factors are different, use the
smaller of the two, centering the bounding box within the window in
the other dimension.

</summary>
            <param name="page">the page
</param>
            <returns> the destination
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Destination.CreateFitR(pdftron.PDF.Page,System.Double,System.Double,System.Double,System.Double)">
            <summary> Create a new 'FitR' Destination.

The new Destination displays the page designated by 'page', with its
contents magnified just enough to fit the rectangle specified by the
coordinates 'left', 'bottom', 'right', and 'top' entirely within the
window both horizontally and vertically. If the required horizontal
and vertical magnification factors are different, use the smaller of
the two, centering the rectangle within the window in the other
dimension.

</summary>
            <param name="page">the page
</param>
            <param name="left">the left
</param>
            <param name="bottom">the bottom
</param>
            <param name="right">the right
</param>
            <param name="top">the top
</param>
            <returns> the destination
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Destination.CreateFitV(pdftron.PDF.Page,System.Double)">
            <summary> Create a new 'FitV' Destination.

The new Destination displays the page designated by 'page', with the
horizontal coordinate 'left' positioned at the left edge of the window
and the contents of the page magnified just enough to fit the entire
height of the page within the window.

</summary>
            <param name="page">the page
</param>
            <param name="left">the left
</param>
            <returns> the destination
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Destination.CreateFitH(pdftron.PDF.Page,System.Double)">
            <summary> Create a new 'FitH' Destination.

The new Destination displays the page designated by 'page', with the
vertical coordinate 'top' positioned at the top edge of the window and
the contents of the page magnified just enough to fit the entire width
of the page within the window.

</summary>
            <param name="page">the page
</param>
            <param name="top">the top
</param>
            <returns> the destination
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Destination.CreateFit(pdftron.PDF.Page)">
            <summary> Create a new 'Fit' Destination.

The new Destination displays the page designated by 'page', with its contents
magnified just enough to fit the entire page within the window both
horizontally and vertically. If the required horizontal and vertical
magnification factors are different, use the smaller of the two, centering
the page within the window in the other dimension.

</summary>
            <param name="page">the page
</param>
            <returns> the destination
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Destination.CreateXYZ(pdftron.PDF.Page,System.Double,System.Double,System.Double)">
            <summary> Create a new 'XYZ' Destination.

The new Destination displays the page designated by 'page', with the
coordinates ('left', 'top') positioned at the top-left corner of the
window and the contents of the page magnified by the factor 'zoom'.
A null value for any of the parameters 'left', 'top', or 'zoom' specifies
that the current value of that parameter is to be retained unchanged.
A 'zoom' value of 0 has the same meaning as a null value.

</summary>
            <param name="page">the page
</param>
            <param name="left">the left
</param>
            <param name="top">the top
</param>
            <param name="zoom">the zoom
</param>
            <returns> the destination
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Destination.FitType.e_FitBV">
            <summary>Fits the height of the bounding box into the window.</summary>
        </member>
        <member name="F:pdftron.PDF.Destination.FitType.e_FitBH">
            <summary>Fits the width of the bounding box into the window.</summary>
        </member>
        <member name="F:pdftron.PDF.Destination.FitType.e_FitB">
            <summary>Fits the rectangle containing all visible elements on the page into the window.</summary>
        </member>
        <member name="F:pdftron.PDF.Destination.FitType.e_FitR">
            <summary>Fits the rectangle specified by its upper-left and lower-right corner points into the window.</summary>
        </member>
        <member name="F:pdftron.PDF.Destination.FitType.e_FitV">
            <summary>Fits the height of the page into a window.</summary>
        </member>
        <member name="F:pdftron.PDF.Destination.FitType.e_FitH">
            <summary>Fits the widths of the page into the window</summary>
        </member>
        <member name="F:pdftron.PDF.Destination.FitType.e_Fit">
            <summary>Fits the page into the window</summary>
        </member>
        <member name="F:pdftron.PDF.Destination.FitType.e_XYZ">
            <summary>Destination specified as upper-left corner point and a zoom factor.</summary>
        </member>
        <member name="T:pdftron.PDF.Destination.FitType">
            <summary> View Destination Fit Types</summary>
        </member>
        <member name="M:pdftron.PDF.Destination.#ctor(pdftron.SDF.Obj)">
            <summary>Instantiates <c>Destination</c> from given <c>SDF::Obj</c> object
</summary>
            <param name="dest">
                <c>SDF::Obj</c> destination object
</param>
        </member>
        <member name="T:pdftron.PDF.Destination">
            <summary> A destination defines a particular view of a document, consisting of the 
following:
<list type="bullet"><item><description>
The page of the document to be displayed
</description></item><item><description>
The location of the document window on that page
</description></item><item><description>
The magnification (zoom) factor to use when displaying the page
</description></item></list>
Destinations may be associated with Bookmarks, Annotations, and Remote Go-To Actions.

Destination is a utility class used to simplify work with PDF Destinations; 
Please refer to section 8.2.1 'Destinations' in PDF Reference Manual for details.
</summary>
        </member>
        <member name="M:pdftron.PDF.FileSpec.Dispose">
            <summary> Releases all resources used by the FileSpec </summary>
        </member>
        <member name="M:pdftron.PDF.FileSpec.SetDesc(System.String)">
            <summary>The functions sets the descriptive text associated with the file specification.
This text is typically used in the EmbeddedFiles name tree.</summary>
            <param name="desc">descriptive text</param>
        </member>
        <member name="M:pdftron.PDF.FileSpec.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> The underlying SDF/Cos object.
</returns>
        </member>
        <member name="M:pdftron.PDF.FileSpec.GetFilePath">
            <summary> Gets the file path.

</summary>
            <returns> The file path for this file specification.

If the FileSpec is a dictionary, a corresponding platform specific path
is returned (DOS, Mac, or Unix). Otherwise the function returns the path represented
in the form described in Section 3.10.1, 'File Specification Strings,' or , if the
file system is URL, as a uniform resource locator (URL). If the FileSpec is not
valid, an empty string is returned.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.FileSpec.GetFileData">
            <summary> The function returns data referenced by this FileSpec.

</summary>
            <returns> A stream (filter) containing file data.
If the file is embedded, the function returns a stream to the embedded file.
If the file is not embedded, the function will return a stream to the external file.
If the file is not embedded and the external file can't be found, the function
returns NULL.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.FileSpec.Export">
            <summary> The function saves the data referenced by this FileSpec to an external file.

</summary>
            <returns> true is the file was saved successfully, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.FileSpec.Export(System.String)">
            <summary> Export.

</summary>
            <param name="save_as">the save_as
</param>
            <returns> true, if successful
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.FileSpec.IsValid">
            <summary> Checks if is valid.

</summary>
            <returns> whether this is a valid (non-null) FileSpec. If the
function returns false the underlying SDF/Cos object is null or is not valid
and the FileSpec object should be treated as null as well.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.FileSpec.Equals(System.Object)">
            <param name="o">a given <c>Object</c></param>
            <returns>true, if equals to the given object
</returns>
        </member>
        <member name="M:pdftron.PDF.FileSpec.op_Inequality(pdftron.PDF.FileSpec,pdftron.PDF.FileSpec)">
            <summary>Inequality operator checks whether two FileSpec objects are different</summary>
            <param name="l">the<c>FileSpec</c> object on the left of the operator</param>
            <param name="r">the<c>FileSpec</c> object on the right of the operator</param>
            <returns>true, if both objects are not equal</returns>
        </member>
        <member name="M:pdftron.PDF.FileSpec.op_Equality(pdftron.PDF.FileSpec,pdftron.PDF.FileSpec)">
            <summary>Equality operator checks whether two FileSpec objects are the same</summary>
            <param name="l">the<c>FileSpec</c> object on the left of the operator</param>
            <param name="r">the<c>FileSpec</c> object on the right of the operator</param>
            <returns>true, if both objects are equal</returns>
        </member>
        <member name="M:pdftron.PDF.FileSpec.op_Assign(pdftron.PDF.FileSpec)">
            <summary>Assignment operator</summary>
            <param name="r">a given <c>FileSpec</c> object</param>
            <returns>a <c>FileSpec</c> object equals to the given object</returns>
        </member>
        <member name="M:pdftron.PDF.FileSpec.Set(pdftron.PDF.FileSpec)">
            <summary>Sets value to the give <c>FileSpec</c> object</summary>
            <param name="p">a <c>FileSpec</c> object</param>
        </member>
        <member name="M:pdftron.PDF.FileSpec.CreateURL(pdftron.SDF.SDFDoc,System.String)">
            <summary> Creates a URL file specification.

</summary>
            <param name="doc">- A document to which the FileSpec should be added. To obtain
SDF::Doc from PDFDoc use PDFDoc::GetSDFDoc() or Obj::GetDoc().
</param>
            <param name="url">- A uniform resource locator (URL) of the form defined in
Internet RFC 1738, Uniform Resource Locators Specification.
</param>
            <returns> newly created FileSpec object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.FileSpec.Create(pdftron.SDF.SDFDoc,System.String)">
            <summary> Creates a file specification for the given file. By default, the specified
file is embedded in PDF.

</summary>
            <param name="doc">- A document to which the FileSpec should be added. To obtain
SDFDoc from PDFDoc use PDFDoc::GetSDFDoc() or Obj::GetDoc().
</param>
            <param name="path">- The path to convert into a file specification.
</param>
            <returns> newly created FileSpec object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.FileSpec.Create(pdftron.SDF.SDFDoc,System.String,System.Boolean)">
            <summary> Creates the.

</summary>
            <param name="doc">the doc
</param>
            <param name="path">the path
</param>
            <param name="embed">the embed
</param>
            <returns> the file spec
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.FileSpec.#ctor(pdftron.SDF.Obj)">
            <summary> Create a FileSpec and initialize it using given Cos/SDF object. 

</summary>
            <param name="a"> given Cos/SDF object. 
</param>
            <returns> the file spec
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.FileSpec">
            <summary> FileSpec corresponds to the PDF file specification object. 

A PDF file can refer to the contents of another file by using a file specification, 
which can take either of the following forms:
<list type="bullet"><item><description>
A simple file specification gives just the name of the target file in 
a standard format, independent of the naming conventions of any particular file system. 
</description></item><item><description>
A full file specification includes information related to one or more specific file
systems.
</description></item><item><description>
A URL reference.
</description></item></list>
Although the file designated by a file specification is normally external to the
PDF file referring to it, it is also possible to embed the file allowing its contents 
to be stored or transmitted along with the PDF file. However, embedding a file does not 
change the presumption that it is external to (or separate from) the PDF file.

For more details on file specifications, please refer to Section 3.10, 'File Specifications'
in the PDF Reference Manual.
</summary>
        </member>
        <member name="M:pdftron.PDF.Date.get_UT_minutes">
            <summary> Gets the uT minutes.

</summary>
            <returns> the uT minutes
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Date.UT_minutes">
            <summary>The absolute value of the offset from UT in minutes (00-59) </summary>
        </member>
        <member name="M:pdftron.PDF.Date.set_UT_hour(System.Byte)">
            <summary> Sets the uT hour.

</summary>
            <param name="val">the new uT hour
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Date.get_UT_hour">
            <summary> Gets the uT hour.

</summary>
            <returns> the uT hour
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Date.UT_hour">
            <summary>The absolute value of the offset from UT in hours (00-23) </summary>
        </member>
        <member name="M:pdftron.PDF.Date.set_UT(System.Byte)">
            <summary> Sets the uT.

</summary>
            <param name="val">the new uT
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Date.get_UT">
            <summary> Gets the uT.

</summary>
            <returns> the uT
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Date.UT">
            <summary>The relationship of local time to Universal Time (UT), 
denoted by one of the characters +, -, or Z  </summary>
        </member>
        <member name="M:pdftron.PDF.Date.set_second(System.Byte)">
            <summary> Sets the second.

</summary>
            <param name="val">the new second
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Date.get_second">
            <summary> Gets the second.

</summary>
            <returns> the second
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Date.second">
            <summary> The second (00-59). </summary>
        </member>
        <member name="M:pdftron.PDF.Date.set_minute(System.Byte)">
            <summary> Sets the minute.

</summary>
            <param name="val">the new minute
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Date.get_minute">
            <summary> Gets the minute.

</summary>
            <returns> the minute
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Date.minute">
            <summary>The minute (00-59). </summary>
        </member>
        <member name="M:pdftron.PDF.Date.set_hour(System.Byte)">
            <summary> Sets the hour.

</summary>
            <param name="val">the new hour
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Date.get_hour">
            <summary> Gets the hour.

</summary>
            <returns> the hour
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Date.hour">
            <summary>The hour (00-23). </summary>
        </member>
        <member name="M:pdftron.PDF.Date.set_day(System.Byte)">
            <summary> Sets the day.

</summary>
            <param name="val">the new day
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Date.get_day">
            <summary> Gets the day.

</summary>
            <returns> the day
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Date.day">
            <summary>The day (01-31). </summary>
        </member>
        <member name="M:pdftron.PDF.Date.set_month(System.Byte)">
            <summary> Sets the month.

</summary>
            <param name="val">the new month
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Date.get_month">
            <summary> Gets the month.

</summary>
            <returns> the month
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Date.month">
            <summary>The month. </summary>
        </member>
        <member name="M:pdftron.PDF.Date.set_year(System.Int16)">
            <summary> Sets the year.

</summary>
            <param name="val">the new year
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Date.get_year">
            <summary> Gets the year.

</summary>
            <returns> the year
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.Date.year">
            <summary>The year. </summary>
        </member>
        <member name="M:pdftron.PDF.Date.IsValid">
            <summary>Indicates whether the Date is valid (non-null).</summary>
            <returns>True if this is a valid (non-null) Date; otherwise false.</returns>
            <remarks>If this method returns false the underlying SDF/Cos object is null and 
the Date object should be treated as null as well.</remarks>
        </member>
        <member name="M:pdftron.PDF.Date.SetCurrentTime">
            <summary> Sets the current time.</summary>
        </member>
        <member name="M:pdftron.PDF.Date.Update(pdftron.SDF.Obj)">
            <summary> Update.

</summary>
            <param name="d">the d
</param>
            <returns> true, if successful
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Date.Update">
            <summary> Saves changes made to the Date object in the attached (or specified) SDF/Cos string.

</summary>
            <returns> true if the attached Cos/SDF string was successfully updated, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Date.Attach(pdftron.SDF.Obj)">
            <summary> Attach the Cos/SDF object to the Date.

</summary>
            <param name="d">- underlying Cos/SDF object. Must be an SDF::Str containing
a PDF date object.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Date.op_Assign(pdftron.PDF.Date)">
            <summary>Assignment operator</summary>
            <param name="r">object at the right of the operator
</param>
            <returns>object equals to the given object
</returns>
        </member>
        <member name="M:pdftron.PDF.Date.Set(pdftron.PDF.Date)">
            <summary>Sets value to given <c>Date</c> object
</summary>
            <param name="p">given <c>Date</c> object
</param>
        </member>
        <member name="M:pdftron.PDF.Date.Dispose">
            <summary> Releases all resources used by the Date </summary>
        </member>
        <member name="M:pdftron.PDF.Date.#ctor(pdftron.PDF.Date!System.Runtime.CompilerServices.IsConst)">
            <summary>Creates a <c>Date</c> object from specified <c>Date</c> object
</summary>
            <param name="d">
                <c>Date</c> object
</param>
        </member>
        <member name="M:pdftron.PDF.Date.#ctor(System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary> Create a Date and initialize it using specified parameters.
The Date is not attached to any Cos/SDF object.

</summary>
            <param name="year">the year
</param>
            <param name="month">the month
</param>
            <param name="day">the day
</param>
            <param name="hour">the hour
</param>
            <param name="minute">the minute
</param>
            <param name="second">the second
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Date.#ctor(pdftron.SDF.Obj)">
            <summary> Create a Date and initialize it using given Cos/SDF string date object.
String date object is attached to this Date.

</summary>
            <param name="d">the <c>SDF::Obj</c> date object
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Date.#ctor">
            <summary> Date default constructor.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.Date">
            <summary> The Date class is a utility class used to simplify work with PDF date objects.

PDF defines a standard date format, which closely follows international
standard ASN.1 (Abstract Syntax Notation One), A date is a string of the form
(D:YYYYMMDDHHmmSSOHH'mm'); See PDF Reference Manual for details. 

Date can be associated with a SDF/Cos date string using Date(Obj*) constructor 
or later using Date::Attach(Obj*) or Date::Update(Obj*) methods. 

Date keeps a local date/time cache so it is necessary to call Date::Update() 
method if the changes to the Date should be saved in the attached Cos/SDF string.
</summary>
        </member>
        <member name="M:pdftron.PDF.Image2RGB.Dispose">
            <summary> Releases all resources used by the Image2RGB </summary>
        </member>
        <member name="M:pdftron.PDF.Image2RGB.#ctor(pdftron.PDF.Image)">
            <summary> Instantiates a new image2 rgb.

</summary>
            <param name="image">the image
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image2RGB.#ctor(pdftron.SDF.Obj)">
            <summary> Instantiates a new image2 rgb.

</summary>
            <param name="image_xobject">the image_xobject
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image2RGB.#ctor(pdftron.PDF.Element)">
            <summary> Instantiates a new image2 rgb.

</summary>
            <param name="image_element">the image_element
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.Image2RGB">
            <summary> Image2RGB is a filter that can decompress and normalize any PDF image stream 
(e.g. monochrome, CMYK, etc) into a raw RGB pixel stream.
</summary>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.Dispose">
            <summary> Releases all resources used by the ElementBuilder </summary>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateMarkedContentPoint(System.String,pdftron.SDF.Obj)">
            <summary>
Create e_marked_content_point element with an associated property dictionary (i.e. MP or DP operator in PDF content stream).
</summary>
            <param name="tag">the marked content tag</param>
            <param name="property_dict">the property dictionary</param>
            <returns>the marked content point element</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateMarkedContentPointInlineProperties(System.String)">
            <summary>
Create e_marked_content_point element with an inline property dictionary (i.e. DP operator in PDF content stream). 
</summary>
            <param name="tag">the marked content tag</param>
            <returns>the marked content point element</returns>
            <remarks>The inline property dictionary can be accessed and edited using element.GetMCPropertyDict().</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateMarkedContentEnd">
            <summary>
Create e_marked_content_end element (i.e. EMC operator in PDF content stream).
</summary>
            <returns>the marked content end element</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateMarkedContentBegin(System.String,pdftron.SDF.Obj)">
            <summary>
Create e_marked_content_begin element with an associated property dictionary (i.e. BMC or BDC operator in PDF content stream).
</summary>
            <param name="tag">the marked content tag</param>
            <param name="property_dict">the property dictionary</param>
            <returns>the marked content begin element</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateMarkedContentBeginInlineProperties(System.String)">
            <summary>
 Create e_marked_content_begin element with an inline property dictionary (i.e. BDC operator in PDF content stream). 
</summary>
            <param name="tag">the marked content tag</param>
            <returns>the marked content begin element</returns>
            <remarks>The inline property dictionary can be accessed and edited using element.GetMCPropertyDict().</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.ClosePath">
            <summary> Closes the current subpath.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.Ellipse(System.Double,System.Double,System.Double,System.Double)">
            <summary> Add an ellipse (or circle, if rx == ry) to the current path as a complete subpath.
Setting the current point is not required before using this function.

</summary>
            <param name="cx">the cx
</param>
            <param name="cy">the cy
</param>
            <param name="rx">the rx
</param>
            <param name="ry">the ry
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.ArcTo(System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary> Draw an arc from the current point to the end point.

</summary>
            <param name="xr">the xr
</param>
            <param name="yr">the yr
</param>
            <param name="rx">				x-axis rotation in radians
</param>
            <param name="isLargeArc">		indicates if smaller or larger arc is chosen
1 - one of the two larger arc sweeps is chosen
0 - one of the two smaller arc sweeps is chosen
</param>
            <param name="sweep">			direction in which arc is drawn (1 - clockwise, 0 - counterclockwise)
</param>
            <param name="endX">the end x
</param>
            <param name="endY">the end y
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>The Arc is defined the same way as it is specified by SVG or XPS standards. For
further questions please refer to the XPS or SVG standards.	</remarks>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.ArcTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary> Draw an arc with the specified parameters (upper left corner, width, height and angles).

</summary>
            <param name="x">the x
</param>
            <param name="y">the y
</param>
            <param name="width">the width
</param>
            <param name="height">the height
</param>
            <param name="start">		starting angle of the arc in degrees
</param>
            <param name="extent">		angular extent of the arc in degrees
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CurveTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary> Draw a Bezier curve from the current point to the given point (x2, y2) using
(cx1, cy1) and (cx2, cy2) as control points.

</summary>
            <param name="cx1">the cx1
</param>
            <param name="cy1">the cy1
</param>
            <param name="cx2">the cx2
</param>
            <param name="cy2">the cy2
</param>
            <param name="x2">the x2
</param>
            <param name="y2">the y2
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.LineTo(System.Double,System.Double)">
            <summary> Draw a line from the current point to the given point.

</summary>
            <param name="x">the x
</param>
            <param name="y">the y
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.MoveTo(System.Double,System.Double)">
            <summary> Set the current point.

</summary>
            <param name="x">the x
</param>
            <param name="y">the y
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.Rect(System.Double,System.Double,System.Double,System.Double)">
            <summary> Add a rectangle to the current path as a complete subpath.
Setting the current point is not required before using this function.

</summary>
            <param name="x">the x
</param>
            <param name="y">the y
</param>
            <param name="width">the width
</param>
            <param name="height">the height
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.PathEnd">
            <summary> Finishes building of the path Element.

</summary>
            <returns> the path Element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.PathBegin">
            <summary> Starts building a new path Element that can contain an arbitrary sequence
of lines, curves, and rectangles.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreatePath(System.Double[],System.Int32,System.Byte[],System.Int32)">
            <summary> Create a path Element using given path segment data.

</summary>
            <param name="points">the points
</param>
            <param name="point_count">number of points in points array
</param>
            <param name="seg_types_count">number of segment types in seg_types array
</param>
            <param name="seg_types">the seg_types
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary> Create an ellipse (or circle, if rx == ry) path Element.

</summary>
            <param name="cx">the cx
</param>
            <param name="cy">the cy
</param>
            <param name="rx">the rx
</param>
            <param name="ry">the ry
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateRect(System.Double,System.Double,System.Double,System.Double)">
            <summary> Create a rectangle path Element.

</summary>
            <param name="x">the x
</param>
            <param name="y">the y
</param>
            <param name="width">the width
</param>
            <param name="height">the height
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateTextNewLine">
            <summary> Create e_text_new_line Element (i.e. a T* operator in PDF content stream).

</summary>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateTextNewLine(System.Double,System.Double)">
            <summary> Create e_text_new_line Element (i.e. a Td operator in PDF content stream).
Move to the start of the next line, offset from the start of the current
line by (dx , dy). dx and dy are numbers expressed in unscaled text space
units.

</summary>
            <param name="dx">the dx
</param>
            <param name="dy">the dy
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateShapedTextRun(pdftron.PDF.ShapedText)">
            <summary> Create a new text run from shaped text. Shaped Text can be created
with an approriate Font, using the Font.GetShapedText() method. 

</summary>
            <param name="shaped_text">the shaped text data
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> 
You must set the current Font and font size before calling this function.
The font must be created using Font::CreateCIDTrueTypeFont() method, and should
be the same font used to generate the shaped text content. For best results, the
font should be encoded using the e_Indices encoding scheme.
A text run can be created only within a text block </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateUnicodeTextRun(System.String,pdftron.PDF.Font,System.Double)">
            <summary> Create a new Unicode text run.

</summary>
            <param name="text_data">the text_data
</param>
            <param name="font">font for the text run
</param>
            <param name="font_sz">size of the font
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> you must set the current Font and font size before calling this function
and the font must be created using Font::CreateCIDTrueTypeFont() method.
a text run can be created only within a text block </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateUnicodeTextRun(System.String)">
            <summary> Create a new Unicode text run.

</summary>
            <param name="text_data">the text_data
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> you must set the current Font and font size before calling this function
and the font must be created using Font::CreateCIDTrueTypeFont() method.
a text run can be created only within a text block </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateTextRun(System.String)">
            <summary> Create a new text run.

</summary>
            <param name="text_data">the text_data
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  a text run can be created only within a text block
you must set the current Font and font size before calling this function. </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateTextRun(System.String,pdftron.PDF.Font,System.Double)">
            <summary> Create a text run using the given font.

</summary>
            <param name="text_data">the text_data
</param>
            <param name="font">the font
</param>
            <param name="font_sz">the font_sz
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  a text run can be created only within a text block </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateTextEnd">
            <summary> Ends a text block.

</summary>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateTextBegin">
            <summary> Start a text block ('BT' operator in PDF content stream).

</summary>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateTextBegin(pdftron.PDF.Font,System.Double)">
            <summary> Start a text block ('BT' operator in PDF content stream).
The function installs the given font in the current graphics state.

</summary>
            <param name="font">the font
</param>
            <param name="font_sz">the font_sz
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateForm(pdftron.PDF.Page,pdftron.PDF.PDFDoc)">
            <summary> Create a Form XObject Element using the content of the existing page.
Unlike CreateForm(Page) method, you can use this method to create form
in another document.

</summary>
            <param name="page">A page used to create the Form XObject.
</param>
            <param name="doc">Destination document for the Form XObject.
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateForm(pdftron.PDF.Page)">
            <summary> Create a Form XObject Element using the content of the existing page.
This method assumes that the XObject will be used in the same
document as the given page. If you need to create the Form XObject
in a different document use CreateForm(Page, Doc) method.

</summary>
            <param name="page">A page used to create the Form XObject.
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateForm(pdftron.SDF.Obj)">
            <summary> Create a Form XObject Element.

</summary>
            <param name="form">a Form XObject content stream
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateShading(pdftron.PDF.Shading)">
            <summary> Create a shading Element.

</summary>
            <param name="sh">the sh
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateGroupEnd">
            <summary> Create e_group_end Element (i.e. 'Q' operator in PDF content stream).
The function restores the previous graphics state.

</summary>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateGroupBegin">
            <summary> Create e_group_begin Element (i.e. 'q' operator in PDF content stream).
The function saves the current graphics state.

</summary>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateImage(pdftron.PDF.Image,System.Double,System.Double,System.Double,System.Double)">
            <summary> Create a content image Element out of a given document Image with
the lower left corner at (x, y), and scale factors (hscale, vscale).

</summary>
            <param name="img">the img
</param>
            <param name="x">the x
</param>
            <param name="y">the y
</param>
            <param name="hscale">the hscale
</param>
            <param name="vscale">the vscale
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateImage(pdftron.PDF.Image,pdftron.Common.Matrix2D)">
            <summary> Create a content image Element out of a given document Image.

</summary>
            <param name="img">the img
</param>
            <param name="mtx">the image transformation matrix.
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.CreateImage(pdftron.PDF.Image)">
            <summary> Create a content image Element out of a given document Image.

</summary>
            <param name="img">the img
</param>
            <returns> the element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.Reset(pdftron.PDF.GState)">
            <summary> Reset.

</summary>
            <param name="gs">the gs
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.Reset">
            <summary> The function sets the graphics state of this Element to the given value.
If 'gs' parameter is not specified or is NULL the function resets the
graphics state of this Element to the default graphics state (i.e. the
graphics state at the begining of the display list).

The function can be used in situations where the same ElementBuilder is used
to create content on several pages, XObjects, etc. If the graphics state is not
Reset() when moving to a new display list, the new Element will have the same
graphics state as the last Element in the previous display list (and this may
or may not be your intent).

Another use of Reset(gs) is to make sure that two Elements have the graphics
state.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementBuilder.#ctor">
            <summary> Instantiates a new element builder.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.ElementBuilder">
            <summary> ElementBuilder is used to build new PDF.Elements (e.g. image, text, path, etc) 
from scratch. In conjunction with ElementWriter, ElementBuilder can be used to create
new page content.

</summary>
            <remarks>  Analogous to ElementReader, every call to ElementBuilder.Create method destroys
the Element currently associated with the builder and all previous Element pointers are 
invalidated. </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.Dispose">
            <summary> Releases all resources used by the ElementWriter </summary>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.Flush">
            <summary> The Flush method flushes all pending Element writing operations.
This method is typically only required to be called when intermixing
direct content writing (i.e. WriteBuffer/WriteString) with Element writing.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.SetDefaultGState(pdftron.PDF.ElementReader)">
            <summary> 
This method is used to initialize ElementWriter state with the state of a given ElementReader.
This can be used to avoid incorrectly writing inherited GState attributes.

</summary>
            <param name="reader">the ElementReader
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.WritePlacedElement(pdftron.PDF.Element)">
            <summary> A utility function that surrounds the given Element with a graphics state
Save/Restore Element (i.e. in PDF content stream represented as 'q element Q').

The function is equivalent to calling WriteElement three times:
WriteElement(eSave);
WriteElement(element);
WriteElement(eRestore);

where eSave is 'e_group_begin' and eRestore is 'e_group_end' Element

The function is useful when XObjects such as Images and Forms are drawn on
the page.

</summary>
            <param name="element">the element
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.WriteGStateChanges(pdftron.PDF.Element)">
            <summary> 
Write only the graphics state changes applied to this element and skip writing the element itself.
This is especially useful when rewriting page content, but with the intention to skip certain elements.

</summary>
            <param name="element">The element for which to write graphics state changes.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.WriteElement(pdftron.PDF.Element)">
            <summary> Writes the Element to the content stream.

</summary>
            <param name="element">the element
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.WriteString(System.String)">
            <summary> Writes an arbitrary string to the content stream.
Serves the same purpose as WriteBuffer().

</summary>
            <param name="data">the str
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.WriteBuffer(System.Byte[])">
            <summary> Writes an arbitrary buffer to the content stream.
This function can be used to insert comments, inline-image data, and
chunks of arbitrary content to the output stream.

</summary>
            <param name="buf">the data
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.End">
            <summary> Finish writing to a page.

</summary>
            <returns> A low-level stream object that was used to store Elements.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.Begin(pdftron.SDF.Obj,System.Boolean,pdftron.SDF.Obj)">
            <summary> Begin writing an Element sequence to a stream. Use this function to write 
Elements to a content stream which will replace an existing content stream in an
object passed as a parameter.
</summary>
            <param name="stream_obj_to_update">the streamobj_to_update
</param>
            <param name="compress">the compress
</param>
            <param name="resources">the resource dictionary in which to store resources for the final page.
By default, a new resource dictionary will be created.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.Begin(pdftron.SDF.Obj,System.Boolean)">
            <summary> Begin writing an Element sequence to a stream. Use this function to write 
Elements to a content stream which will replace an existing content stream in an
object passed as a parameter.
</summary>
            <param name="stream_obj_to_update">the streamobj_to_update
</param>
            <param name="compress">the compress
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.Begin(pdftron.SDF.SDFDoc,System.Boolean)">
            <summary> Begin writing an Element sequence to a new stream. Use this function to write 
Elements to a content stream other than the page. For example, you can create
Form XObjects (See Section '4.9 Form XObjects' in PDF Reference for more details) 
pattern streams, Type3 font glyph streams, etc.
</summary>
            <param name="doc">the doc
</param>
            <param name="compress">the compress
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.Begin(pdftron.SDF.SDFDoc)">
            <summary> Begin writing an Element sequence to a new stream. Use this function to write
Elements to a content stream other than the page. For example, you can create
Form XObjects (See Section '4.9 Form XObjects' in PDF Reference for more details)
pattern streams, Type3 font glyph streams, etc.

</summary>
            <param name="doc">- A low-level SDF/Cos document that will contain the new stream. You can
access low-level document using PDFDoc::GetSDFDoc() or Obj::GetDoc() methods.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the newly created content stream object is returned when writing operations 
are completed (i.e. after the call to ElementWriter::End()).</remarks>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.Begin(pdftron.PDF.Page,pdftron.PDF.ElementWriter.WriteMode,System.Boolean,System.Boolean,pdftron.SDF.Obj)">
            <summary> Begin writing to the given page.
By default, new content will be appended to the page, as foreground graphics. 
It is possible to add new page content as background graphics by setting the 
second parameter in begin method to 'true' (e.g. writer.Begin(page, true)).
</summary>
            <param name="page">The page to write content. 
</param>
            <param name="placement">An optional flag indicating whether the new content should 
be added as a foreground or background layer to the existing page. By default, the new
content will appear on top of the existing graphics. 
</param>
            <param name="page_coord_sys">An optional flag used to select the target coordinate system.
 If true (default), the coordinates are relative to the lower-left corner of the page,
 otherwise the coordinates are defined in PDF user coordinate system (which may, 
 or may not coincide with the page coordinates).
</param>
            <param name="compress">An optional flag indicating whether the page content stream 
should be compressed. This may be useful for debugging content streams. Also 
some applications need to do a clear text search on strings in the PDF files.
By default, all content streams are compressed.
</param>
            <param name="resources">the resource dictionary in which to store resources for the final page.
 By default, a new resource dictionary will be created.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.Begin(pdftron.PDF.Page,pdftron.PDF.ElementWriter.WriteMode,System.Boolean,System.Boolean)">
            <summary> Begin writing to the given page.
By default, new content will be appended to the page, as foreground graphics. 
It is possible to add new page content as background graphics by setting the 
second parameter in begin method to 'true' (e.g. writer.Begin(page, true)).
</summary>
            <param name="page">The page to write content. 
</param>
            <param name="placement">An optional flag indicating whether the new content should 
be added as a foreground or background layer to the existing page. By default, the new
content will appear on top of the existing graphics. 
</param>
            <param name="page_coord_sys">An optional flag used to select the target coordinate system.
 If true (default), the coordinates are relative to the lower-left corner of the page,
 otherwise the coordinates are defined in PDF user coordinate system (which may, 
 or may not coincide with the page coordinates).
</param>
            <param name="compress">An optional flag indicating whether the page content stream 
should be compressed. This may be useful for debugging content streams. Also 
some applications need to do a clear text search on strings in the PDF files.
By default, all content streams are compressed.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.Begin(pdftron.PDF.Page,pdftron.PDF.ElementWriter.WriteMode,System.Boolean)">
            <summary> Begin writing to the given page.
By default, new content will be appended to the page, as foreground graphics.
It is possible to add new page content as background graphics by setting the
second parameter in begin method to 'true' (e.g. writer.Begin(page, true)).
</summary>
            <param name="page">The page to write content. 
</param>
            <param name="placement">An optional flag indicating whether the new content should 
be added as a foreground or background layer to the existing page. By default, the new
content will appear on top of the existing graphics. 
</param>
            <param name="page_coord_sys">An optional flag used to select the target coordinate system.
 If true (default), the coordinates are relative to the lower-left corner of the page,
 otherwise the coordinates are defined in PDF user coordinate system (which may, 
 or may not coincide with the page coordinates).
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.Begin(pdftron.PDF.Page,pdftron.PDF.ElementWriter.WriteMode)">
            <summary> Begin writing to the given page.
By default, new content will be appended to the page, as foreground graphics.
It is possible to add new page content as background graphics by setting the
second parameter in begin method to 'true' (e.g. writer.Begin(page, true)).
</summary>
            <param name="page">The page to write content. 
</param>
            <param name="placement">An optional flag indicating whether the new content should 
be added as a foreground or background layer to the existing page. By default, the new
content will appear on top of the existing graphics. 
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.Begin(pdftron.PDF.Page)">
            <summary> Begin writing to the given page.

By default, new content will be appended to the page, as foreground graphics.
It is possible to add new page content as background graphics by setting the
second parameter in begin method to 'true' (e.g. writer.Begin(page, true)).

</summary>
            <param name="page">The page to write content.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.ElementWriter.WriteMode.e_replacement">
            <summary>element will replace current page contents</summary>
        </member>
        <member name="F:pdftron.PDF.ElementWriter.WriteMode.e_overlay">
            <summary>element appears on top of the existing graphics</summary>
        </member>
        <member name="F:pdftron.PDF.ElementWriter.WriteMode.e_underlay">
            <summary>element is put in the background layer of the page</summary>
        </member>
        <member name="T:pdftron.PDF.ElementWriter.WriteMode">
            <summary>Enumeration describing the placement of the element written to a page.</summary>
        </member>
        <member name="M:pdftron.PDF.ElementWriter.#ctor">
            <summary> Instantiates a new element writer.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.ElementWriter">
            <summary> ElementWriter can be used to assemble and write new content to a page, Form XObject, 
Type3 Glyph stream, pattern stream, or any other content stream. 
</summary>
        </member>
        <member name="M:pdftron.PDF.ElementReader.Dispose">
            <summary> Releases all resources used by the ElementReader </summary>
        </member>
        <member name="M:pdftron.PDF.ElementReader.GetExtGState(System.String)">
            <summary> Gets the ext g state.

</summary>
            <param name="name">the name
</param>
            <returns> the ext g state
</returns>
            <remarks>  see ElementReader::GetFont </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementReader.GetPattern(System.String)">
            <summary> Gets the pattern.

</summary>
            <param name="name">the name
</param>
            <returns> the pattern
</returns>
            <remarks>  see ElementReader::GetFont </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementReader.GetColorSpace(System.String)">
            <summary> Gets the color space.

</summary>
            <param name="name">the name
</param>
            <returns> the color space
</returns>
            <remarks>  see ElementReader::GetFont </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementReader.GetShading(System.String)">
            <summary> Gets the shading.

</summary>
            <param name="name">the name
</param>
            <returns> the shading
</returns>
            <remarks>  see ElementReader::GetFont </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementReader.GetXObject(System.String)">
            <summary> Gets the x object.

</summary>
            <param name="name">the name
</param>
            <returns> the x object
</returns>
            <remarks>  see ElementReader::GetFont </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementReader.GetFont(System.String)">
            <summary> Gets the font.

</summary>
            <param name="name">the name
</param>
            <returns> SDF/Cos object matching the specified name in the current resource
dictionary. For 'Page' the name is looked up in the page's /Resources/&lt;Class&gt;
dictionary. For Form XObjects, Patterns, and Type3 fonts that have a content
stream within page content stream the specified resource is first looked-up in the
resource dictionary of the inner stream. If the resource is not found, the name is
looked up in the outer content streamï¿½s resource dictionary. The function returns
NULL if the resource was not found.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementReader.ClearChangeList">
            <summary> Clear the list containing identifiers of modified graphics state attributes.
The list of modified attributes is then accumulated during a subsequent call(s)
to ElementReader.Next().

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementReader.IsChanged(pdftron.PDF.GState.GStateAttribute)">
            <summary> Checks if is changed.

</summary>
            <param name="attrib">the gstate_attrib
</param>
            <returns> true if given GState attribute was changed since the last call to
ClearChangeList().
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementReader.GetChangesIterator">
            <summary> Gets the changes iterator.

</summary>
            <returns> an iterator to the beginning of the list containing identifiers of modified
graphics state attributes since the last call to ClearChangeList(). The list can
be consulted to determine which graphics states were modified between two
Elements. Attributes are ordered in the same way as they are set in the content
stream. Duplicate attributes are eliminated.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementReader.End">
            <summary> Close the current display list.

If the current display list is a sub-list created using FormBegin(), PatternBegin(),
or Type3FontBegin() methods, the function will end the sub-list and will return
processing to the parent display list at the point where it left off before
entering the sub-list.

</summary>
            <returns> true if the closed display list is a sub-list or false if it is a root
display list.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementReader.Type3FontBegin(pdftron.PDF.CharData)">
            <summary> A method used to spawn a sub-display list representing a Type3 Font glyph. You can
call this method at any point as long as the current element in the ElementReader
is a text element whose font type is type 3.

</summary>
            <param name="char_data">The information about the glyph to process. You can get this information
by dereferencing a CharIterator.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementReader.PatternBegin(System.Boolean,System.Boolean)">
            <summary> A method used to spawn the sub-display list representing the tiling pattern
of the current element in the ElementReader. You can call this method at any
point as long as the current element is valid.

</summary>
            <param name="fill_pattern">If true, the filling pattern of the current element will
be spawned; otherwise, the stroking pattern of the current element will be
spawned. Note that the graphics state will be inherited from the parent content
stream (the content stream in which the pattern is defined as a resource) automatically.
</param>
            <param name="reset_ctm_tfm">An optional parameter used to indicate whether the pattern's
display list should set its initial CTM and transformation matrices to identity matrix.
In general, we should leave it to be false.

To open a tiling pattern sub-display list use PatternBegin() method.
The Next() returned Element will be the first Element in the pattern display list.
Subsequent calls to Next() will traverse pattern's display list until NULL is
encountered. At any point you can close the pattern sub-list using
ElementReader::End() method. After the pattern display list is closed,
the processing will return to the parent display list at the point where
pattern display list was spawned.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementReader.PatternBegin(System.Boolean)">
            <summary> Pattern begin.

</summary>
            <param name="fill_pattern">the fill_pattern
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementReader.FormBegin">
            <summary> When the current element is a form XObject you have the option to skip form
processing (by not calling FormBegin()) or to open the form stream and
continue Element traversal into the form.

To open a form XObject display list use FormBegin() method. The Next() returned
Element will be the first Element in the form XObject display list. Subsequent calls to Next()
will traverse form's display list until NULL is returned. At any point you can
close the form sub-list using ElementReader::End() method. After the form display
list is closed (using End()) the processing will return to the parent display list
at the point where it left off before entering the form XObject.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ElementReader.Current">
            <summary> Current.

</summary>
            <returns> the current Element or a 'NULL' Element. The current element is the one
returned in the last call to Next().
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Every call to ElementReader::Next() destroys the current Element. Therefore, an
Element becomes invalid after subsequent ElementReader::Next() operation.</remarks>
        </member>
        <member name="M:pdftron.PDF.ElementReader.Next">
            <summary> Next.

</summary>
            <returns> a page Element or a 'NULL' element if the end of current-display list was
reached. You may use GetType() to determine the type of the returned Element.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Every call to ElementReader::Next() destroys the current Element.
Therefore, an Element becomes invalid after subsequent
ElementReader::Next() operation.</remarks>
        </member>
        <member name="M:pdftron.PDF.ElementReader.Begin(pdftron.SDF.Obj,pdftron.SDF.Obj,pdftron.PDF.OCG.Context)">
            <summary> Begin processing given content stream. The content stream may be
a Form XObject, Type3 glyph stream, pattern stream or any other content stream.

</summary>
            <param name="content_stream">- A stream object representing the content stream (usually
a Form XObject).
</param>
            <param name="resource_dict">- An optional '/Resource' dictionary parameter.
If content stream refers to named resources that are not present in
the local Resource dictionary, the names are looked up in the supplied
resource dictionary.
</param>
            <param name="ctx">the ctx
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  When page processing is completed, make sure to call ElementReader.End(). </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementReader.Begin(pdftron.SDF.Obj,pdftron.SDF.Obj)">
            <summary> Begin processing given content stream. The content stream may be
a Form XObject, Type3 glyph stream, pattern stream or any other content stream.

</summary>
            <param name="content_stream">- A stream object representing the content stream (usually
a Form XObject).
</param>
            <param name="resource_dict">- An optional '/Resource' dictionary parameter.
If content stream refers to named resources that are not present in
the local Resource dictionary, the names are looked up in the supplied
resource dictionary.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  When page processing is completed, make sure to call ElementReader.End(). </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementReader.Begin(pdftron.SDF.Obj)">
            <summary> Begin processing given content stream. The content stream may be
a Form XObject, Type3 glyph stream, pattern stream or any other content stream.

</summary>
            <param name="content_stream">- A stream object representing the content stream (usually
a Form XObject).
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  When page processing is completed, make sure to call ElementReader.End(). </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementReader.Begin(pdftron.PDF.Page,pdftron.PDF.OCG.Context)">
            <summary> Begin processing a page.

</summary>
            <param name="page">A page to start processing.
</param>
            <param name="ctx">the ctx
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  When page processing is completed, make sure to call ElementReader.End(). </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementReader.Begin(pdftron.PDF.Page)">
            <summary> Begin processing a page.

</summary>
            <param name="page">A page to start processing.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  When page processing is completed, make sure to call ElementReader.End(). </remarks>
        </member>
        <member name="M:pdftron.PDF.ElementReader.#ctor">
            <summary> Instantiates a new element reader.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.ElementReader">
            <summary> ElementReader can be used to parse and process content streams. ElementReader provides a 
convenient interface used to traverse the Element display list of a page. The display list 
representing graphical elements (such as text-runs, paths, images, shadings, forms, etc) is 
accessed using the intrinsic iterator. ElementReader automatically concatenates page contents
spanning multiple streams and provides a mechanism to parse contents of sub-display lists 
(e.g. forms XObjects and Type3 fonts).
</summary>
            <example>
For a full sample, please refer to ElementReader and ElementReaderAdv sample projects.
A sample use case for ElementReader is given below:	
<code>  
...
ElementReader reader=new ElementReader();
reader.Begin(page);
for (Element element=reader.next(); element!=null;element=reader.next()) {
Rect bbox;
if((bbox=element.getBBox())!=null) System.out.println("Bounding Box: " + bbox.getRectangle());
switch (element.getType())	{
case Element.e_path: { // Process path data...
double[] data = element.getPathPoints();
}
break; 
case Element.e_text: 
// ...
break;
}
}
reader.End();	    
</code></example>
        </member>
        <member name="M:pdftron.PDF.Element.GetMCTag">
            <summary> Gets the mC tag.

</summary>
            <returns> a tag is a name object indicating the role or significance of
the marked content point/sequence.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetMCPropertyDict">
            <summary> Gets the mC property dict.

</summary>
            <returns> a dictionary containing the property list or NULL if property
dictionary is not present.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>the function automatically looks under Properties sub-dictionary of the
current resource dictionary if the dictionary is not in-line. Therefore you
can assume that returned Obj is dictionary if it is not NULL.</remarks>
        </member>
        <member name="M:pdftron.PDF.Element.GetShading">
            <summary> Gets the shading.

</summary>
            <returns> the SDF object of the Shading object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.SetNewTextLineOffset(System.Double,System.Double)">
            <summary> Sets the offset (dx, dy) to the start of the current line relative to the beginning
of the previous line.

</summary>
            <param name="dx">the dx
</param>
            <param name="dy">the dy
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.UpdateTextMetrics">
            <summary> Recompute the character positioning information (i.e. CharIterator-s) and
text length.

Element objects caches text length and character positioning information.
If the user modifies the text data or graphics state the cached information
is not correct. UpdateTextMetrics() can be used to recalculate the correct
positioning and length information.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.SetPosAdjustment(System.Double)">
            <summary> Sets the pos adjustment.

</summary>
            <param name="adjust">the new pos adjustment
</param>
            <returns> Set the horizontal adjustment factor (i.e. a number value within TJ array)
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.SetTextMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary> Sets the text matrix for a text element. This method accepts text
transformation matrix components directly.

A transformation matrix in PDF is specified by six numbers, usually
in the form of an array containing six elements. In its most general
form, this array is denoted [a b c d h v]; it can represent any linear
transformation from one coordinate system to another. For more
information about PDF matrices please refer to section 4.2.2 'Common
Transformations' in PDF Reference Manual, and to documentation for
Matrix2D class.

</summary>
            <param name="a">- horizontal 'scaling' component of the new text matrix.
</param>
            <param name="b">- 'rotation' component of the new text matrix.
</param>
            <param name="c">- 'rotation' component of the new text matrix.
</param>
            <param name="d">- vertical 'scaling' component of the new text matrix.
</param>
            <param name="h">- horizontal translation component of the new text matrix.
</param>
            <param name="v">- vertical translation component of the new text matrix.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.SetTextMatrix(pdftron.Common.Matrix2D)">
            <summary> Sets the text matrix for a text element.

</summary>
            <param name="mtx">The new text matrix for this text element
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.SetTextData(System.Byte[],System.Int32)">
            <summary> GetTextString() maps the raw text directly into Unicode (as specified by Adobe
Glyph List (AGL) ). Even if you would prefer to decode text yourself it is more
convenient to use CharIterators returned by CharBegin()/CharEnd() and
PDF::Font code mapping methods.
</summary>
            <param name="text_data">a pointer to a buffer containing text.
</param>
            <param name="text_data_size">size of the cli::array</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the buffer owner is the current element (i.e. ElementReader or ElementBuilder).
 Set the text data for the current e_text Element.</remarks>
        </member>
        <member name="M:pdftron.PDF.Element.GetNewTextLineOffset(System.Double@,System.Double@)">
            <summary> Gets the offset (out_x, out_y) to the start of the current line relative to
the beginning of the previous line.

out_x and out_y are numbers expressed in unscaled text space units.
The returned numbers correspond to the arguments of 'Td' operator.

</summary>
            <param name="out_x">x coordinate of the text line offset
</param>
            <param name="out_y">y coordinate of the text line offset
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.HasTextMatrix">
            <summary> Checks for text matrix.

</summary>
            <returns> true if this element is directly associated with a text matrix
(that is Tm operator is just before this text element) or false if the text
matrix is default or is inherited from previous text elements.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetPosAdjustment">
            <summary> Gets the pos adjustment.

</summary>
            <returns> The number used to adjust text matrix in horizontal direction when drawing
text. The number is expressed in thousandths of a unit of text space. The returned
number corresponds to a number value within TJ array. For 'Tj' text strings the
returned value is always 0.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  because CharIterator positioning information already accounts for TJ
adjustments this method is rarely used.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Element.GetTextLength">
            <summary> Gets the text length.

</summary>
            <returns> The text advance distance in text space.

The total sum of all of the advance values from rendering all of the characters
within this element, including the advance value on the glyphs, the effect of
properties such as 'char-spacing', 'word-spacing' and positioning adjustments
on 'TJ' elements.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> Computed text length is represented in text space. In order to get the
length of the text run in the user space, the returned value should be scaled
using the text matrix (GetTextMatrix()) and the current transformation
matrix (GetCTM()). See section 4.2 'Other Coordinate Spaces' in PDF Reference
Manual for details.</remarks>
        </member>
        <member name="M:pdftron.PDF.Element.GetCharIterator">
            <summary> Gets the char iterator.

</summary>
            <returns> a CharIterator addressing the first CharData element in the text run.

CharIterator points to CharData. CharData is a data structure that contains
the char_code number (used to retrieve glyph outlines, to map to Unicode, etc.),
character positioning information (x, y), and the number of bytes taken by the
character within the text buffer.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>
CharIterator follows the standard STL forward-iterator interface.        
<example>
An example of how to use CharIterator.		
<code>  
for (CharIterator itr = element.GetCharIterator(); itr.HasNext(); itr.Next()) {
unsigned int char_code = itr.Current().char_code;
double char_pos_x = itr.Current().x;
double char_pos_y = itr.Current().y;
}
</code></example>
Character positioning information (x, y) is represented in text space. 

In order to get the positioning in the user space, the returned value should
be scaled using the text matrix (GetTextMatrix()) and the current transformation
matrix (GetCTM()). See section 4.2 'Other Coordinate Spaces' in PDF Reference
Manual for details and PDFNet FAQ - "How do I get absolute/relative text and
character positioning?".

whithin a text run a character may occupy more than a single byte (e.g. 
in case of composite/Type0 fonts). The role of CharIterator/CharData is to
provide a uniform and easy to use inteface to access character information.		
</remarks>
        </member>
        <member name="M:pdftron.PDF.Element.GetTextMatrix">
            <summary> Gets the text matrix.

</summary>
            <returns> a reference to the current text matrix (Tm).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetTextDataSize">
            <summary>Gets the size of the internal text buffer returned in GetTextData().
</summary>
            <returns>the size of the internal text buffer returned in GetTextData().
</returns>
        </member>
        <member name="M:pdftron.PDF.Element.GetTextData">
            <summary> Gets the text data.

</summary>
            <returns> a pointer to the internal text buffer for this text element.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>GetTextData() returns the raw text data and not a Unicode string.
In PDF text can be encoded using various encoding schemes so it is necessary
to consider Font encoding while processing the content of this buffer.		
Most of the time GetTextString() is what you are looking for instead.</remarks>
        </member>
        <member name="M:pdftron.PDF.Element.GetTextString">
            <summary> Gets the text string.

</summary>
            <returns> a pointer to Unicode string for this text Element. The
function maps character codes to Unicode array defined by Adobe
Glyph List (http://partners.adobe.com/asn/developer/type/glyphlist.txt).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>In PDF text can be encoded using various encoding schemes 
and in some cases it is not possible to extract Unicode encoding.
If it is not possible to map charcode to Unicode the function will
map a character to undefined code, 0xFFFD. This code is defined in
private Unicode range.

If you would like to map raw text to Unicode (or some other encoding)
yourself use CharIterators returned by CharBegin()/CharEnd() and
PDF::Font code mapping methods.

The string owner is the current element (i.e. ElementReader or ElementBuilder).
</remarks>
        </member>
        <member name="M:pdftron.PDF.Element.GetImageRenderingIntent">
            <summary> Gets the image rendering intent.

</summary>
            <returns> The color rendering intent to be used in rendering the image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetMask">
            <summary> Gets the mask.

</summary>
            <returns> an image XObject defining an image mask to be applied to this image (See
'Explicit Masking', 4.8.5), or an array specifying a range of colors
to be applied to it as a color key mask (See 'Color Key Masking').

If IsImageMask() return true, this method will return NULL.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.IsImageInterpolate">
            <summary> Checks if is image interpolate.

</summary>
            <returns> a boolean indicating whether image interpolation is to be performed.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.IsImageMask">
            <summary> Checks if is image mask.

</summary>
            <returns> a boolean indicating whether the inline image is to be treated as an image mask.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetComponentNum">
            <summary> Gets the component number.

</summary>
            <returns> the number of color components per sample.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetBitsPerComponent">
            <summary> Gets the bits per component.

</summary>
            <returns> the number of bits used to represent each color component. Only a
single value may be specified; the number of bits is the same for all color
components. Valid values are 1, 2, 4, and 8.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetDecodeArray">
            <summary> Gets the decode array.

</summary>
            <returns> Decode array or NULL if the paramter is not specified. A decode object is an
array of numbers describing how to map image samples into the range of values
appropriate for the imageï¿½s color space . If ImageMask is true, the array must be
either [0 1] or [1 0]; otherwise, its length must be twice the number of color
components required by ColorSpace. Default value depends on the color space,
See Table 4.36 in PDF Ref. Manual.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetImageHeight">
            <summary> Gets the image height.

</summary>
            <returns> the height of the image, in samples.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetImageWidth">
            <summary> Gets the image width.

</summary>
            <returns> the width of the image, in samples.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetImageColorSpace">
            <summary> Gets the image color space.

</summary>
            <returns> The SDF object representing the color space in which image
are specified or NULL if:
- the image is an image mask
- or is compressed using JPXDecode with missing ColorSpace entry in image dictionary.

The returned color space may be any type of color space except Pattern.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetBitmapSource">
            <summary>Gets Bitmap
</summary>
            <returns>BitmapSource from this image. PDFNet creates a GDI+ bitmap that closely matches the original image in terms of the image depth and the number of color channels. PDF color spaces that do not have a counterpart in GDI+ are converted to RGB. Then convert into BitmapSource.
</returns>
        </member>
        <member name="M:pdftron.PDF.Element.GetBitmap">
            <summary>Gets Bitmap
</summary>
            <returns>GDI+ bitmap from this image. PDFNet creates a GDI+ bitmap that closely matches the original image in terms of the image depth and the number of color channels. PDF color spaces that do not have a counterpart in GDI+ are converted to RGB.
</returns>
        </member>
        <member name="M:pdftron.PDF.Element.GetImageDataSize">
            <summary> Gets the image data size.

</summary>
            <returns> the size of image data in bytes
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetImageData">
            <summary> Gets the image data.

</summary>
            <returns> A stream (filter) containing decoded image data
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetXObject">
            <summary> Gets the x object.

</summary>
            <returns> the SDF object of the Image/Form object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.SetPathData(pdftron.PDF.PathData)">
            <summary> Set the PathData of this element. The PathData contains the array of points
stored by the element and the array of path segment types.  

</summary>
            <param name="data">The new path data.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.SetClipWindingFill(System.Boolean)">
            <summary> Sets clipping path's fill rule.

</summary>
            <param name="winding_rule">if winding_rule is true clipping should use non-zero
winding rule, or false for even-odd rule.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.SetWindingFill(System.Boolean)">
            <summary> Sets path's fill rule.

</summary>
            <param name="winding_rule">if winding_rule is true path will be filled using non-zero
winding fill rule, otherwise even-odd fill will be used.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.SetPathFill(System.Boolean)">
            <summary> Indicate whether the path should be filled.

</summary>
            <param name="fill">the new path fill
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.SetPathStroke(System.Boolean)">
            <summary> Indicate whether the path should be stroked.

</summary>
            <param name="stroke">the new path stroke
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.SetPathClip(System.Boolean)">
            <summary> Indicate whether the path is a clipping path or non-clipping path.

</summary>
            <param name="clip">the new path clip
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetPathData">
            <summary> Get the PathData stored by the path element.

</summary>
            <returns> The PathData which contains the operators and corresponding point data.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetStructMCID">
            <summary> Gets the struct MCID.

</summary>
            <returns> Marked Content Identifier (MCID) for this Element or
a negative number if the element is not assigned an identifier/MCID.

Marked content identifier can be used to associate an Element with
logical structure element that refers to the Element.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetParentStructElement">
            <summary> Gets the parent logical structure element

</summary>
            <returns>Parent logical structure element (such as 'span' or 'paragraph'). If the Element is not associated with any structure element, the returned SElement will not be valid (i.e. selem.IsValid() -&gt; false).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.IsOCVisible">
            <summary> Checks if is oC visible.

</summary>
            <returns> true if this element is visible in the optional-content
context (OCG::Context). The method considers the context's current OCMD stack,
the group ON-OFF states, the non-OC drawing status, the drawing and enumeration mode,
and the intent.

When enumerating page content, OCG::Context can be passed as a parameter in
ElementReader.Begin() method. When using PDFDraw, PDFRasterizer or PDFViewCtrl class to
render PDF pages use SetOCGContext() method to select an OC context.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.IsClipWindingFill">
            <summary> Checks if is clip winding fill.

</summary>
            <returns> true if the current clip path is using non-zero winding rule, or false
for even-odd rule.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.IsWindingFill">
            <summary> Checks if is winding fill.

</summary>
            <returns> true if the current path should be filled using non-zero winding rule,
or false if the path should be filled using even-odd rule.

According non-zero winding rule, you can determine whether a test point is inside or
outside a closed curve as follows: Draw a line from a test point to a point that
is distant from the curve. Count the number of times the curve crosses the test
line from left to right, and count the number of times the curve crosses the test
line from right to left. If those two numbers are the same, the test point is
outside the curve; otherwise, the test point is inside the curve.

According to even-odd rule, you can determine whether a test point is inside
or outside a closed curve as follows: Draw a line from the test point to a point
that is distant from the curve. If that line crosses the curve an odd number of
times, the test point is inside the curve; otherwise, the test point is outside
the curve.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.IsFilled">
            <summary> Checks if is filled.

</summary>
            <returns> true if the current path element should be filled
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.IsStroked">
            <summary> Checks if is stroked.

</summary>
            <returns> true if the current path element should be stroked
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.IsClippingPath">
            <summary> Checks if is clipping path.

</summary>
            <returns> true if the current path element is a clipping path and should be added
to clipping path stack.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetBBox(pdftron.PDF.Rect)">
            <summary> Obtains the bounding box for a graphical element.

Calculates the bounding box for a graphical element (i.e. an Element that belongs
to one of following types: e_path, e_text, e_image, e_inline_image, e_shading e_form).
The returned bounding box is guaranteed to encompass the Element, but is not guaranteed
to be the smallest box that could contain the element. For example, for Bezier curves
the bounding box will enclose all control points, not just the curve itself.

</summary>
            <param name="bbox">(Filled by the method) A reference to a rectangle specifying the bounding box of 
Element (a rectangle that surrounds the entire element). The coordinates are represented in the default 
PDF page coordinate system and are using units called points ( 1 point = 1/72 inch = 2.54 /72 centimeter). 
The bounding box already accounts for the effects of current transformation matrix (CTM), text matrix, 
font size, and other properties in the graphics state. If this is a non-graphical element (i.e. the method 
returns false) the bounding box is undefined.
</param>
            <returns> Rect if this is a graphical element and the bounding box can be calculated;
null for non-graphical elements which don't have bounding box.
The coordinates are represented in the default PDF page coordinate system and are using units called
points ( 1 point = 1/72 inch =  2.54 /72 centimeter). The bounding box already accounts for the
effects of current transformation matrix (CTM), text matrix, font size, and other properties
in the graphics state. If this is a non-graphical element (i.e. the method returns false) the
bounding box is undefined.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetCTM">
            <summary> Gets the cTM.

</summary>
            <returns> current transformation matrix (ctm) that maps coordinates to the
initial user space.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetGState">
            <summary> Gets the g state.

</summary>
            <returns> GState of this Element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Element.GetType">
            <summary> Gets the type.

</summary>
            <returns> the current element type.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_marked_content_point">
            <summary>designate a marked-content point (MP, DP)
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_marked_content_end">
            <summary>marks the end of marked content sequence (EMC)
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_marked_content_begin">
            <summary>marks the beginning of marked content sequence (BMC, BDC)
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_group_end">
            <summary>pop graphics state operator (Q)
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_group_begin">
            <summary>push graphics state operator (q)
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_form">
            <summary>a form XObject 
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_shading">
            <summary>shading object
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_inline_image">
            <summary>inline image object
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_image">
            <summary>image XObject
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_text_end">
            <summary>marks the end of text container
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_text_new_line">
            <summary>indicates the start of the new text line
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_text">
            <summary>text object within a text container
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_text_begin">
            <summary>marks the beginning of a text container
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_path">
            <summary>path object
</summary>
        </member>
        <member name="F:pdftron.PDF.Element.Type.e_null">
            <summary>undefined element type
</summary>
        </member>
        <member name="T:pdftron.PDF.Element.Type">
            <summary>
                <c>Element</c> types
</summary>
        </member>
        <member name="T:pdftron.PDF.Element">
            <summary> Element is the abstract interface used to access graphical elements used to build the 
display list. 

Just like many other classes in PDFNet (e.g. ColorSpace, Font, Annot, etc), Element
class follows the composite design pattern. This means that all Elements are 
accessed through the same interface, but depending on the Element type (that can be 
obtained using GetType()), only methods related to that type can be called.
For example, if GetType() returns e_image, it is illegal to call a method specific to 
another Element type (i.e. a call to a text specific GetTextData() will throw an 
Exception).
</summary>
        </member>
        <member name="M:pdftron.PDF.Optimizer.Optimize(pdftron.PDF.PDFDoc,pdftron.PDF.Optimizer.OptimizerSettings)">
            <summary>Optimize the given document using the optimizers settings
</summary>
            <param name="doc"> the document to optimize
</param>
            <param name="opt_settings">optimizer settings
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.Optimize(pdftron.PDF.PDFDoc)">
            <summary>Optimize the given document using the optimizers settings
</summary>
            <param name="doc"> the document to optimize
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.OptimizerSettings.RemoveCustomEntries(System.Boolean)">
            <summary>Enable or disable removal of custom entries in the PDF. By default custom entries are removed.</summary>
            <param name="should_remove">if true custom entries will be removed.</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.OptimizerSettings.SetTextSettings(pdftron.PDF.Optimizer.TextSettings)">
            <summary>updates the settings for text processing</summary>
        </member>
        <member name="M:pdftron.PDF.Optimizer.OptimizerSettings.SetMonoImageSettings(pdftron.PDF.Optimizer.MonoImageSettings)">
            <summary>updates the settings for monochrome image processing</summary>
        </member>
        <member name="M:pdftron.PDF.Optimizer.OptimizerSettings.SetGrayscaleImageSettings(pdftron.PDF.Optimizer.ImageSettings)">
            <summary>updates the settings for grayscale image processing</summary>
        </member>
        <member name="M:pdftron.PDF.Optimizer.OptimizerSettings.SetColorImageSettings(pdftron.PDF.Optimizer.ImageSettings)">
            <summary>updates the settings for color image processing</summary>
        </member>
        <member name="M:pdftron.PDF.Optimizer.OptimizerSettings.#ctor">
            <summary>create an OptimizerSettings object with default options
</summary>
        </member>
        <member name="T:pdftron.PDF.Optimizer.OptimizerSettings">
            <summary> A class that stores settings
for the optimizer</summary>
        </member>
        <member name="M:pdftron.PDF.Optimizer.TextSettings.EmbedFonts(System.Boolean)">
            <summary>Sets whether fonts should be embedded.  This
will generally increase the size of the file, but will
make the file appear the same on different machines.  
Font embedding is off by default. </summary>
            <param name="embed"> if true all fonts will be embedded.
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.TextSettings.SubsetFonts(System.Boolean)">
            <summary>Sets whether embedded fonts will be subset.  This
will generally reduce the size of fonts, but will
strip font hinting.  Subsetting is off by default. </summary>
            <param name="subset">if true all embedded fonts will be subsetted.
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.TextSettings.#ctor">
            <summary>create an TextSettings object with default options
</summary>
        </member>
        <member name="T:pdftron.PDF.Optimizer.TextSettings">
            <summary> A class that stores text optimization settings.
</summary>
        </member>
        <member name="M:pdftron.PDF.Optimizer.MonoImageSettings.SetJBIG2Threshold(System.Double)">
            <summary>Sets the quality for lossy JBIG2Decode compression mode.
The threshold is a floating point number in the range from 4 to 9
The default value for JBIG2 is 8.5.  The setting is
ignored for FLATE.
</summary>
            <param name="jbig2_threshold">The jbig2 threshold value
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.MonoImageSettings.ForceChanges(System.Boolean)">
            <summary>Sets whether image changes that grow the
PDF file should be kept.  This is off by default.
</summary>
            <param name="force">if true all image changes will be kept.
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.MonoImageSettings.ForceRecompression(System.Boolean)">
            <summary>Sets whether recompression to the specified compression
method should be forced when the image is not downsampled.
By default the compression method for these images
</summary>
            <param name="force">if true the compression method for all
images will be changed to the specified compression mode
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.MonoImageSettings.SetDownsampleMode(pdftron.PDF.Optimizer.MonoImageSettings.DownsampleMode)">
            <summary>Sets the downsample mode for monochrome images
The default value is e_default
</summary>
            <param name="mode">the compression mode to set
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.MonoImageSettings.SetCompressionMode(pdftron.PDF.Optimizer.MonoImageSettings.CompressionMode)">
            <summary>Sets the output compression mode for monochrome images
The default value is e_ccitt (CCITT group 4 compression)
</summary>
            <param name="mode">the compression mode to set
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.MonoImageSettings.SetImageDPI(System.Double,System.Double)">
            <summary>Sets the maximum and resampling dpi for monochrome images.
By default these are set to 144 and 96 respectively.
</summary>
            <param name="maximum">the highest dpi of an image before
it will be resampled
</param>
            <param name="resampling">the image dpi to resample to if an
image is encountered over the maximum dpi
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.MonoImageSettings.#ctor">
            <summary>create an MonoImageSettings object with default options
</summary>
        </member>
        <member name="T:pdftron.PDF.Optimizer.MonoImageSettings.DownsampleMode">
            <summary>mono-image downsample mode
</summary>
        </member>
        <member name="T:pdftron.PDF.Optimizer.MonoImageSettings.CompressionMode">
            <summary>mono-image compression mode
</summary>
        </member>
        <member name="T:pdftron.PDF.Optimizer.MonoImageSettings">
            <summary>A class that stores image downsampling/recompression
settings for monochrome images.
</summary>
        </member>
        <member name="M:pdftron.PDF.Optimizer.ImageSettings.ForceChanges(System.Boolean)">
            <summary>Sets whether image changes that grow the
PDF file should be kept.  This is off by default.
</summary>
            <param name="force">if true all image changes will be kept.
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.ImageSettings.ForceRecompression(System.Boolean)">
            <summary>Sets whether recompression to the specified compression
method should be forced when the image is not downsampled.
By default the compression method for these images
will not be changed.
</summary>
            <param name="force">if true the compression method for all
images will be changed to the specified compression mode
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.ImageSettings.SetQuality(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Sets the quality for lossy compression modes
from 1 to 10 where 10 is lossless (if possible)
the default value is 5
</summary>
            <param name="quality">compression quality to set
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.ImageSettings.SetDownsampleMode(pdftron.PDF.Optimizer.ImageSettings.DownsampleMode)">
            <summary>Sets the downsample mode for this type of image
The default value is e_default
</summary>
            <param name="mode">the downloadsample mode to set
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.ImageSettings.SetCompressionMode(pdftron.PDF.Optimizer.ImageSettings.CompressionMode)">
            <summary>Sets the output compression mode for this type of image
The default value is e_retain
</summary>
            <param name="mode">the compression mode to set
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.ImageSettings.SetImageDPI(System.Double,System.Double)">
            <summary>Sets the maximum and resampling dpi for images.
By default these are set to 144 and 96 respectively.
</summary>
            <param name="maximum">the highest dpi of an image before
it will be resampled
</param>
            <param name="resampling">resampling the image dpi to resample to if an
image is encountered over the maximum dpi
</param>
        </member>
        <member name="M:pdftron.PDF.Optimizer.ImageSettings.#ctor">
            <summary>create an ImageSetting object with default options
</summary>
        </member>
        <member name="T:pdftron.PDF.Optimizer.ImageSettings.DownsampleMode">
            <summary> Different Downsample Modes for color and grayscale images.
</summary>
        </member>
        <member name="T:pdftron.PDF.Optimizer.ImageSettings.CompressionMode">
            <summary> Different Compression Modes for color and grayscale images.
</summary>
        </member>
        <member name="T:pdftron.PDF.Optimizer.ImageSettings">
            <summary>A class that stores downsampling/recompression
settings for color and grayscale images.
</summary>
        </member>
        <member name="T:pdftron.PDF.Optimizer">
            <summary>
                <para>The Optimizer class provides functionality for optimizing/shrinking
output PDF files.</para>
                <para>'pdftron.PDF.Optimizer' is an optional PDFNet Add-On utility class that can be 
used to optimize PDF documents by reducing the file size, removing redundant 
information, and compressing data streams using the latest in image compression 
technology. PDF Optimizer can compress and shrink PDF file size with the 
following operations:</para>
                <ul>
                    <li> Remove duplicated fonts, images, ICC profiles, and any other data stream.</li>
                    <li> Optionally convert high-quality or print-ready PDF files to small, efficient and web-ready PDF. </li>
                    <li> Optionally down-sample large images to a given resolution. </li>
                    <li> Optionally compress or recompress PDF images using JBIG2 and JPEG2000 compression formats. </li>
                    <li> Compress uncompressed streams and remove unused PDF objects. </li>
                </ul>
            </summary>
            <remarks>'Optimizer' is available as a separately licensable add-on to PDFNet 
core license.</remarks>
            <remarks>See 'pdftron.PDF.Flattener' for alternate approach to optimize PDFs for fast 
viewing on mobile devices and the Web.</remarks>
        </member>
        <member name="M:pdftron.PDF.Stamper.HasStamps(pdftron.PDF.PDFDoc,pdftron.PDF.PageSet)">
            <summary> Returns true if the given set of pages has at least one stamp.

</summary>
            <param name="doc">The document that's being checked
</param>
            <param name="page_set">The set of page that's being checked
</param>
            <returns> true, if successful
</returns>
        </member>
        <member name="M:pdftron.PDF.Stamper.DeleteStamps(pdftron.PDF.PDFDoc,pdftron.PDF.PageSet)">
            <summary> Deletes PDFTron stamps from document at given page numbers.

</summary>
            <param name="doc">The document to delete stamps from
</param>
            <param name="page_set">The set of pages to delete stamps from
</param>
        </member>
        <member name="M:pdftron.PDF.Stamper.ShowsOnScreen(System.Boolean)">
            <summary> Shows on screen.

</summary>
            <param name="on_screen">Specifies if the watermark will be displayed on screen
</param>
        </member>
        <member name="M:pdftron.PDF.Stamper.ShowsOnPrint(System.Boolean)">
            <summary> Shows on print.

</summary>
            <param name="on_print">Specifies if the watermark will be displayed when printed
</param>
        </member>
        <member name="M:pdftron.PDF.Stamper.SetTextAlignment(pdftron.PDF.Stamper.TextAlignment)">
            <summary> Sets the text alignment (note: this only applies to text watermarks).

</summary>
            <param name="text_alignment">Enumerator for text alignment (e_left, e_center, e_right)
</param>
        </member>
        <member name="M:pdftron.PDF.Stamper.SetSize(pdftron.PDF.Stamper.SizeType,System.Double,System.Double)">
            <summary> Sets the size of the stamp.

</summary>
            <param name="size_type">Specifies how the stamp will be sized		
</param>
            <param name="a">the a
</param>
            <param name="b">the b
</param>
        </member>
        <member name="M:pdftron.PDF.Stamper.SetAlignment(pdftron.PDF.Stamper.HorizontalAlignment,pdftron.PDF.Stamper.VerticalAlignment)">
            <summary> Sets the alignment for the x and y variables.

</summary>
            <param name="horizontal_alignment">the horizontal alignment
</param>
            <param name="vertical_alignment">the vertical alignment
</param>
            <seealso cref="M:pdftron.PDF.Stamper.SetPosition(System.Double,System.Double,System.Boolean)" />
        </member>
        <member name="M:pdftron.PDF.Stamper.SetPosition(System.Double,System.Double,System.Boolean)">
            <summary> Sets the horizontal and vertical position of the stamp.

</summary>
            <param name="horizontal_distance">Horizontal distance from left, right or center of crop box
</param>
            <param name="vertical_distance">the vertical_distance
</param>
            <param name="percentage">If true, horizontal_distance is a percentage of the crop
box width (e.g.: 0.5 is 50% of the width of the crop box) and vertical_distance
is a percentage of the crop box height. If false, horizontal_distance and
vertical_distance is measured in points.
</param>
            <seealso cref="M:pdftron.PDF.Stamper.SetAlignment(pdftron.PDF.Stamper.HorizontalAlignment,pdftron.PDF.Stamper.VerticalAlignment)" />
        </member>
        <member name="M:pdftron.PDF.Stamper.SetPosition(System.Double,System.Double)">
            <summary> Sets the horizontal and vertical position of the stamp.

</summary>
            <param name="horizontal_distance">Horizontal distance from left, right or center of crop box; in points
</param>
            <param name="vertical_distance">the vertical_distance
</param>
            <seealso cref="M:pdftron.PDF.Stamper.SetAlignment(pdftron.PDF.Stamper.HorizontalAlignment,pdftron.PDF.Stamper.VerticalAlignment)" />
        </member>
        <member name="M:pdftron.PDF.Stamper.SetAsAnnotation(System.Boolean)">
            <summary> Specifies if the stamp is to be stamped as annotation or not.

</summary>
            <param name="annotation">A flag specifying if the stamp should be added 
as an annotation to the destination page
</param>
            <remarks> SetAsBackground, HasStamps and DeleteStamps methods will not
work on stamps created with this as true. </remarks>
        </member>
        <member name="M:pdftron.PDF.Stamper.SetAsBackground(System.Boolean)">
            <summary> Specifies if the stamp is to be stamped in the background or the foreground.

</summary>
            <param name="background">A flag specifying if the stamp should be added 
as a background layer to the destination page
</param>
        </member>
        <member name="M:pdftron.PDF.Stamper.SetRotation(System.Double)">
            <summary> Rotates the stamp by the given number of degrees.

</summary>
            <param name="rotation">Rotation in degrees
</param>
        </member>
        <member name="M:pdftron.PDF.Stamper.SetOpacity(System.Double)">
            <summary> Sets the opacity value for the stamp.

</summary>
            <param name="opacity">The opacity value of the stamp
</param>
        </member>
        <member name="M:pdftron.PDF.Stamper.SetFontColor(pdftron.PDF.ColorPt)">
            <summary> Sets the font color (This only effects text-based stamps).

</summary>
            <param name="font_color">the new font color
</param>
        </member>
        <member name="M:pdftron.PDF.Stamper.SetFont(pdftron.PDF.Font)">
            <summary> 
Defines the font of the stamp. (This only applies to text-based stamps)

</summary>
            <param name="font">The font of the text stamp
</param>
        </member>
        <member name="M:pdftron.PDF.Stamper.StampText(pdftron.PDF.PDFDoc,System.String,pdftron.PDF.PageSet)">
            <summary> Stamps text to the given destination document at the set of page numbers.

</summary>
            <param name="dest_doc">The document being stamped
</param>
            <param name="txt">The image that is being stamped to the document
</param>
            <param name="dest_pages">The set of pages in the document being stamped
</param>
        </member>
        <member name="M:pdftron.PDF.Stamper.StampPage(pdftron.PDF.PDFDoc,pdftron.PDF.Page,pdftron.PDF.PageSet)">
            <summary> Stamps a PDF page to the given destination document at the set of page numbers.

</summary>
            <param name="dest_doc">The document being stamped
</param>
            <param name="src_page">The page that is being stamped to the document
</param>
            <param name="dest_pages">The set of pages in the document being stamped
</param>
        </member>
        <member name="M:pdftron.PDF.Stamper.StampImage(pdftron.PDF.PDFDoc,pdftron.PDF.Image,pdftron.PDF.PageSet)">
            <summary> Stamps an image to the given destination document at the set of page numbers.

</summary>
            <param name="dest_doc">The document being stamped
</param>
            <param name="src_img">The image that is being stamped to the document
</param>
            <param name="dest_pages">The set of pages in the document being stamped
</param>
        </member>
        <member name="M:pdftron.PDF.Stamper.Dispose">
            <summary> Releases all resources used by the Stamper </summary>
        </member>
        <member name="M:pdftron.PDF.Stamper.#ctor(pdftron.PDF.Stamper.SizeType,System.Double,System.Double)">
            <summary> Stamper constructor.

</summary>
            <param name="size_type">Specifies how the stamp will be sized	
</param>
            <param name="a">the a
</param>
            <param name="b">the b
</param>
        </member>
        <member name="F:pdftron.PDF.Stamper.SizeType.e_font_size">
            <summary>This type only applies to text stamps.</summary>
        </member>
        <member name="F:pdftron.PDF.Stamper.SizeType.e_absolute_size">
            <summary>Stamp size is explicitly set.The width and height are constant, regardless of the size of the
destination page's bounding box.</summary>
        </member>
        <member name="F:pdftron.PDF.Stamper.SizeType.e_relative_scale">
            <summary>Stamp size is relative to the size of the crop box of
the destination page.</summary>
        </member>
        <member name="T:pdftron.PDF.Stamper.SizeType">
            <summary>Size Types</summary>
        </member>
        <member name="T:pdftron.PDF.Stamper">
            <summary>
                <para>Stamper is a utility class that can be used to PDF pages with text, images, 
or with other PDF content in only a few lines of code.</para>
                <para>
Although Stamper is very simple to use compared to ElementBuilder/ElementWriter 
it is not as powerful or flexible. In case you need full control over PDF creation
use ElementBuilder/ElementWriter to add new content to existing PDF pages as 
shown in the ElementBuilder sample project.</para>
            </summary>
        </member>
        <member name="M:pdftron.PDF.Image.Dispose">
            <summary> Releases all resources used by the Image </summary>
        </member>
        <member name="M:pdftron.PDF.Image.ExportAsPng(pdftron.Filters.FilterWriter)">
            <summary> Saves this image to a PNG output stream.

</summary>
            <param name="writer">FilterWriter used to write to the output stream.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.ExportAsPng(System.String)">
            <summary> Saves this image to a PNG file.

</summary>
            <param name="filename">string that specifies the path name for
the saved image. The filename should include the file extension
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.ExportAsTiff(pdftron.Filters.FilterWriter)">
            <summary> Saves this image to a TIFF output stream.

</summary>
            <param name="writer">FilterWriter used to write to the output stream.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.ExportAsTiff(System.String)">
            <summary> Saves this image to a TIFF file.

</summary>
            <param name="filename">string that specifies the path name for
the saved image. The filename should include the file extension
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Export(pdftron.Filters.FilterWriter)">
            <summary> Saves this image to the output stream.

</summary>
            <param name="writer">A pointer to FilterWriter used to write to the
output stream. If the parameter is null, nothing will be written
to the output stream, but the function returns the format identifier.
</param>
            <returns>the number indicating the selected image format:
(0 - PNG, 1 - TIF, 2 - JPEG).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  see the overloaded Image::Export method for more information. </remarks>
        </member>
        <member name="M:pdftron.PDF.Image.Export(System.String)">
            <summary> Saves this image to a file.

The output image format (TIFF, JPEG, or PNG) will be
automatically selected based on the properties of the embedded
image. For example, if the embedded image is using CCITT Fax
compression, the output format will be TIFF. Similarly, if the
embedded image is using JPEG compression the output format will
be JPEG. If your application needs to explicitly control output
image format you may want to use ExportAsTiff() or ExportAsPng().

</summary>
            <param name="filename">string that specifies the path name for
the saved image. The filename should not include the extension
which will be appended to the filename string based on the output
format.
</param>
            <returns> the number indicating the selected image format:
(0 - PNG, 1 - TIF, 2 - JPEG).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.GetImageRenderingIntent">
            <summary> Gets the image rendering intent.

</summary>
            <returns> The color rendering intent to be used in rendering the image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.SetSoftMask(pdftron.PDF.Image)">
            <summary> Set a Soft Mask.

</summary>
            <param name="soft_mask">is a subsidiary Image object defining a soft-mask image
(See section 7.5.4 'Soft-Mask Images' in PDF Reference Manual) to be used
as a source of mask shape or mask opacity values in the transparent imaging
model. The alpha source parameter in the graphics state determines whether
the mask values are interpreted as shape or opacity.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.GetSoftMask">
            <summary> Gets the soft mask.

</summary>
            <returns> an image XObject defining a Soft Mask to be applied to this image
(See section 7.5.4 'Soft-Mask Images' in PDF Reference Manual), or NULL
if the image does not have the soft mask.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.SetMask(pdftron.SDF.Obj)">
            <summary> Set a Color Key Mask.

</summary>
            <param name="mask">is an Cos/SDF array specifying a range of colors to be masked
out. Samples in the image that fall within this range are not painted, allowing
the existing background to show through. The effect is similar to that of the
video technique known as chroma-key. For details of the array format please
refer to section 4.8.5 'Color Key Masking' in PDF Reference Manual.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the current document takes the ownership of the given SDF object. </remarks>
        </member>
        <member name="M:pdftron.PDF.Image.SetMask(pdftron.PDF.Image)">
            <summary> Set an Explicit Image Mask.

</summary>
            <param name="image_mask">the new mask
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  image_mask must be a valid image mask (i.e. image_mask.IsImageMask() must 
return true.</remarks>
        </member>
        <member name="M:pdftron.PDF.Image.GetMask">
            <summary> Gets the mask.

</summary>
            <returns> an image XObject defining an image mask to be applied to this image (See
'Explicit Masking', 4.8.5), or an array specifying a range of colors
to be applied to it as a color key mask (See 'Color Key Masking').

If IsImageMask() return true, this method will return NULL.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.IsImageInterpolate">
            <summary> Checks if is image interpolate.

</summary>
            <returns> a boolean indicating whether image interpolation is to be performed.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.IsImageMask">
            <summary> Checks if is image mask.

</summary>
            <returns> a boolean indicating whether the inline image is to be treated as an image mask.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.GetComponentNum">
            <summary> Gets the component number.

</summary>
            <returns> the number of color components per sample.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.GetBitsPerComponent">
            <summary> Gets the bits per component.

</summary>
            <returns> the number of bits used to represent each color component. Only a
single value may be specified; the number of bits is the same for all color
components. Valid values are 1, 2, 4, 8, and 16.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.GetDecodeArray">
            <summary> Gets the decode array.

</summary>
            <returns> Decode array or NULL if the paramter is not specified. A decode object is an
array of numbers describing how to map image samples into the range of values
appropriate for the images color space . If ImageMask is true, the array must be
either [0 1] or [1 0]; otherwise, its length must be twice the number of color
components required by ColorSpace. Default value depends on the color space,
See Table 4.36 in PDF Ref. Manual.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.GetImageHeight">
            <summary> Gets the image height.

</summary>
            <returns> the height of the image, in samples.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.GetImageWidth">
            <summary> Gets the image width.

</summary>
            <returns> the width of the image, in samples.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.GetImageColorSpace">
            <summary> Gets the image color space.

</summary>
            <returns> The SDF object representing the color space in which image
samples are specified or NULL if:
- the image is an image mask
- or is compressed using JPXDecode with missing ColorSpace entry in image dictionary.

The returned color space may be any type of color space except Pattern.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.GetBitmapSource">
            <summary> Gets the bitmapSource.

</summary>
            <returns> the bitmapSource
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.GetBitmap">
            <summary> Gets the bitmap.

</summary>
            <returns> the bitmap
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.GetImageDataSize">
            <summary> Gets the image data size.

</summary>
            <returns> the size of image data in bytes
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.GetImageData">
            <summary> Gets the image data.

</summary>
            <returns> A stream (filter) containing decoded image data
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> the underlying SDF/Cos object
</returns>
        </member>
        <member name="M:pdftron.PDF.Image.IsValid">
            <summary> Checks if is valid.

</summary>
            <returns> whether this is a valid raster image. If the function returns false the
underlying SDF/Cos object is not a valid raster image and this Image object should
be treated as null.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.op_Assign(pdftron.PDF.Image)">
            <summary>Assignment operator</summary>
            <param name="r">an given <c>Image</c> object
</param>
            <returns>an <c>Image</c> object that equals to the given object
</returns>
        </member>
        <member name="M:pdftron.PDF.Image.Set(pdftron.PDF.Image)">
            <summary> Sets value to the given image value
</summary>
            <param name="p">image object
</param>
        </member>
        <member name="M:pdftron.PDF.Image.#ctor(pdftron.SDF.Obj)">
            <summary> Create an image from an existing image represented as a SDF/Cos object.

</summary>
            <param name="image_xobject">the image_xobject
</param>
            <remarks>  To create the Image object from image PDF::Element, pass the Element's
SDF/Cos dictionary to Image constructor (i.e. Image image(element-&gt;GetXObject()))</remarks>
        </member>
        <member name="M:pdftron.PDF.Image.CreateSoftMask(pdftron.SDF.SDFDoc,pdftron.Filters.FilterReader,System.Int32,System.Int32,System.Int32,pdftron.SDF.Obj)">
            <summary> Creates the soft mask.

</summary>
            <param name="doc">the doc
</param>
            <param name="image_data">the image_data
</param>
            <param name="width">the width
</param>
            <param name="height">the height
</param>
            <param name="bpc">the bpc
</param>
            <param name="encoder_hints">the encoder_hint
</param>
            <returns> the image
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  see Image::CreateSoftMask for details. </remarks>
        </member>
        <member name="M:pdftron.PDF.Image.CreateSoftMask(pdftron.SDF.SDFDoc,pdftron.Filters.FilterReader,System.Int32,System.Int32,System.Int32)">
            <summary> Create and embed a Soft Mask. Embed the raw image data taking into account
specified compression hints.

</summary>
            <param name="doc">- A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">- The stream or buffer containing image data represented in
DeviceGray color space (i.e. one component per sample). The image data must not
be compressed and must follow PDF format for sample representation (please refer
to section 4.8.2 'Sample Representation' in PDF Reference Manual for details).
</param>
            <param name="width">- The width of the image, in samples.
</param>
            <param name="height">- The height of the image, in samples.
</param>
            <param name="bpc">- The number of bits used to represent each color component.
</param>
            <returns> the image
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this feature is available only in PDF 1.4 and higher. </remarks>
        </member>
        <member name="M:pdftron.PDF.Image.CreateSoftMask(pdftron.SDF.SDFDoc,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary> Create and embed a Soft Mask. Embed the raw image data taking into account
specified compression hints.

</summary>
            <param name="doc">the doc
</param>
            <param name="image_data">the image_data
</param>
            <param name="width">the width
</param>
            <param name="height">the height
</param>
            <param name="bpc">the bpc
</param>
            <returns> the image
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  see Image::CreateSoftMask for details. </remarks>
        </member>
        <member name="M:pdftron.PDF.Image.CreateSoftMask(pdftron.SDF.SDFDoc,System.Byte[],System.Int32,System.Int32,System.Int32,pdftron.SDF.Obj)">
            <summary> Create and embed a Soft Mask. Embed the raw image data taking into account 
specified compression hints.
</summary>
            <param name="doc">A document to which the image should be added. The 'Doc' object 
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">The stream or buffer containing image data represented in 
DeviceGray color space (i.e. one component per sample). The image data must not 
be compressed and must follow PDF format for sample representation (please refer
to section 4.8.2 'Sample Representation' in PDF Reference Manual for details).
</param>
            <param name="width">The width of the image, in samples.
</param>
            <param name="height">The height of the image, in samples.
</param>
            <param name="bpc">The number of bits used to represent each color component.
</param>
            <param name="encoder_hints">An optional parameter that can be used to fine tune 
compression or to select a different compression algorithm. See Image::Create() 
for details.
</param>
            <returns> the image
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.CreateImageMask(pdftron.SDF.SDFDoc,pdftron.Filters.FilterReader,System.Int32,System.Int32,pdftron.SDF.Obj)">
            <summary> Create and embed an ImageMask. Embed the raw image data taking into account
specified compression hints. The ImageMask can be used as a stencil mask for
painting in the current color or as an explicit mask specifying which areas of
the image to paint and which to mask out. One of the most important uses of
stencil masking is for painting character glyphs represented as bitmaps.

</summary>
            <param name="doc">- A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">- The stream or buffer containing image data stored in 1 bit per
sample format. The image data must not be compressed and must follow PDF format for
sample representation (please refer to section 4.8.2 'Sample Representation' in PDF
Reference Manual for details).
</param>
            <param name="width">- The width of the image, in samples.
</param>
            <param name="height">- The height of the image, in samples.
</param>
            <param name="encoder_hints">The encoder hints
</param>
            <returns> PDF::Image object representing the embedded ImageMask.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.CreateImageMask(pdftron.SDF.SDFDoc,pdftron.Filters.FilterReader,System.Int32,System.Int32)">
            <summary> Create and embed an ImageMask. Embed the raw image data taking into account
specified compression hints. The ImageMask can be used as a stencil mask for
painting in the current color or as an explicit mask specifying which areas of
the image to paint and which to mask out. One of the most important uses of
stencil masking is for painting character glyphs represented as bitmaps.

</summary>
            <param name="doc">- A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">- The stream or buffer containing image data stored in 1 bit per
sample format. The image data must not be compressed and must follow PDF format for
sample representation (please refer to section 4.8.2 'Sample Representation' in PDF
Reference Manual for details).
</param>
            <param name="width">- The width of the image, in samples.
</param>
            <param name="height">- The height of the image, in samples.
</param>
            <returns> PDF::Image object representing the embedded ImageMask.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  see Image::CreateImageMask for details. </remarks>
        </member>
        <member name="M:pdftron.PDF.Image.CreateImageMask(pdftron.SDF.SDFDoc,System.Byte[],System.Int32,System.Int32,pdftron.SDF.Obj)">
            <summary> Create and embed an ImageMask. Embed the raw image data taking into account
specified compression hints. The ImageMask can be used as a stencil mask for
painting in the current color or as an explicit mask specifying which areas of
the image to paint and which to mask out. One of the most important uses of
stencil masking is for painting character glyphs represented as bitmaps.

</summary>
            <param name="doc">- A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">- The stream or buffer containing image data stored in 1 bit per
sample format. The image data must not be compressed and must follow PDF format for
sample representation (please refer to section 4.8.2 'Sample Representation' in PDF
Reference Manual for details).
</param>
            <param name="width">- The width of the image, in samples.
</param>
            <param name="height">- The height of the image, in samples.
</param>
            <param name="encoder_hints">The encoder hints
</param>
            <returns> PDF::Image object representing the embedded ImageMask.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.CreateImageMask(pdftron.SDF.SDFDoc,System.Byte[],System.Int32,System.Int32)">
            <summary> Create and embed an ImageMask. Embed the raw image data taking into account
specified compression hints. The ImageMask can be used as a stencil mask for
painting in the current color or as an explicit mask specifying which areas of
the image to paint and which to mask out. One of the most important uses of
stencil masking is for painting character glyphs represented as bitmaps.

</summary>
            <param name="doc">- A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">- The stream or buffer containing image data stored in 1 bit per
sample format. The image data must not be compressed and must follow PDF format for
sample representation (please refer to section 4.8.2 'Sample Representation' in PDF
Reference Manual for details).
</param>
            <param name="width">- The width of the image, in samples.
</param>
            <param name="height">- The height of the image, in samples.
</param>
            <returns> PDF::Image object representing the embedded ImageMask.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,System.IO.Stream,pdftron.SDF.Obj)">
            <summary> Directly embed the image that is already compressed using the Image::InputFilter
format. The function can be used to pass-through pre-compressed image data.

</summary>
            <param name="doc">A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="stream">The stream or buffer containing compressed image data.
The compression format must match the input_format parameter.
</param>
            <param name="encoder_hints">The encoder hints
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,System.IO.Stream)">
            <summary> Directly embed the image that is already compressed using the Image::InputFilter
format. The function can be used to pass-through pre-compressed image data.

</summary>
            <param name="doc">A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="stream">The stream or buffer containing compressed image data.
The compression format must match the input_format parameter.
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,pdftron.Filters.Filter,pdftron.SDF.Obj)">
            <summary> Directly embed the image that is already compressed using the Image::InputFilter
format. The function can be used to pass-through pre-compressed image data.

</summary>
            <param name="doc">A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="stream">The stream or buffer containing compressed image data.
The compression format must match the input_format parameter.
</param>
            <param name="encoder_hints">The encoder hints
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,pdftron.Filters.Filter)">
            <summary> Directly embed the image that is already compressed using the Image::InputFilter
format. The function can be used to pass-through pre-compressed image data.

</summary>
            <param name="doc">A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="stream">The stream or buffer containing compressed image data.
The compression format must match the input_format parameter.
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,System.Byte[],pdftron.SDF.Obj)">
            <summary> Directly embed the image that is already compressed using the Image::InputFilter
format. The function can be used to pass-through pre-compressed image data.

</summary>
            <param name="doc">A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">The stream or buffer containing compressed image data.
The compression format must match the input_format parameter.
</param>
            <param name="encoder_hints">The encoder hints
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,System.Byte[])">
            <summary> Directly embed the image that is already compressed using the Image::InputFilter
format. The function can be used to pass-through pre-compressed image data.

</summary>
            <param name="doc">A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">The stream or buffer containing compressed image data.
The compression format must match the input_format parameter.
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,System.Byte[],System.Int32,System.Int32,System.Int32,pdftron.PDF.ColorSpace)">
            <summary> Directly embed the image that is already compressed using the Image::InputFilter
format. The function can be used to pass-through pre-compressed image data.

</summary>
            <param name="doc">A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">The stream or buffer containing compressed image data.
The compression format must match the input_format parameter.
</param>
            <param name="width">The width of the image, in samples.
</param>
            <param name="height">The height of the image, in samples.
</param>
            <param name="bpc">The number of bits used to represent each color component.
</param>
            <param name="color_space">The color space in which image samples are specified.
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,System.Byte[],System.Int32,System.Int32,System.Int32,pdftron.PDF.ColorSpace,pdftron.SDF.Obj)">
            <summary> Directly embed the image that is already compressed using the Image::InputFilter
format. The function can be used to pass-through pre-compressed image data.

</summary>
            <param name="doc">A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">The stream or buffer containing compressed image data.
The compression format must match the input_format parameter.
</param>
            <param name="width">The width of the image, in samples.
</param>
            <param name="height">The height of the image, in samples.
</param>
            <param name="bpc">The number of bits used to represent each color component.
</param>
            <param name="color_space">The color space in which image samples are specified.
</param>
            <param name="encoder_hints">The encoder hints
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,System.Byte[],System.Int32,System.Int32,System.Int32,pdftron.PDF.ColorSpace,pdftron.PDF.Image.InputFilter)">
            <summary> Directly embed the image that is already compressed using the Image::InputFilter
format. The function can be used to pass-through pre-compressed image data.

</summary>
            <param name="doc">A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">The stream or buffer containing compressed image data.
The compression format must match the input_format parameter.
</param>
            <param name="width">The width of the image, in samples.
</param>
            <param name="height">The height of the image, in samples.
</param>
            <param name="bpc">The number of bits used to represent each color component.
</param>
            <param name="color_space">The color space in which image samples are specified.
</param>
            <param name="input_format">Image::InputFilter describing the format of pre-compressed
image data.
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,pdftron.Filters.FilterReader,System.Int32,System.Int32,System.Int32,pdftron.PDF.ColorSpace,pdftron.SDF.Obj)">
            <summary> Create and embed an Image. Embed the raw image data taking into account
specified compression hints.

By default the function will compress all images using Flate compression.
It is possible to fine tune compression or to select a different compression
algorithm using 'encoder_hints' object.

</summary>
            <param name="doc">- A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">- The stream or buffer containing image data. The image data must
not be compressed and must follow PDF format for sample representation (please refer
to section 4.8.2 'Sample Representation' in PDF Reference Manual for details).
</param>
            <param name="width">- The width of the image, in samples.
</param>
            <param name="height">- The height of the image, in samples.
</param>
            <param name="bpc">- The number of bits used to represent each color component.
</param>
            <param name="color_space">- The color space in which image samples are represented.
</param>
            <param name="encoder_hints">The encoder hints
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,pdftron.Filters.FilterReader,System.Int32,System.Int32,System.Int32,pdftron.PDF.ColorSpace,pdftron.PDF.Image.InputFilter)">
            <summary> Create and embed an Image. Embed the raw image data taking into account
specified compression hints.

By default the function will compress all images using Flate compression.
It is possible to fine tune compression or to select a different compression
algorithm using 'encoder_hints' object.

</summary>
            <param name="doc">- A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">- The stream or buffer containing image data. The image data must
not be compressed and must follow PDF format for sample representation (please refer
to section 4.8.2 'Sample Representation' in PDF Reference Manual for details).
</param>
            <param name="width">- The width of the image, in samples.
</param>
            <param name="height">- The height of the image, in samples.
</param>
            <param name="bpc">- The number of bits used to represent each color component.
</param>
            <param name="color_space">- The color space in which image samples are represented.
</param>
            <param name="input_format">- Image::InputFilter describing the format of pre-compressed
image data.
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  see the above method for details. </remarks>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,pdftron.Filters.FilterReader,System.Int32,System.Int32,System.Int32,pdftron.PDF.ColorSpace)">
            <summary> Create and embed an Image. Embed the raw image data taking into account
specified compression hints.

By default the function will compress all images using Flate compression.
It is possible to fine tune compression or to select a different compression
algorithm using 'encoder_hints' object.

</summary>
            <param name="doc">- A document to which the image should be added. The 'Doc' object
can be obtained using Obj::GetDoc() or PDFDoc::GetSDFDoc().
</param>
            <param name="image_data">- The stream or buffer containing image data. The image data must
not be compressed and must follow PDF format for sample representation (please refer
to section 4.8.2 'Sample Representation' in PDF Reference Manual for details).
</param>
            <param name="width">- The width of the image, in samples.
</param>
            <param name="height">- The height of the image, in samples.
</param>
            <param name="bpc">- The number of bits used to represent each color component.
</param>
            <param name="color_space">- The color space in which image samples are represented.
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,System.Windows.Media.Imaging.BitmapSource,pdftron.SDF.Obj)">
            <summary> Create and embed an Image. Embed the raw image data taking into account 
specified compression hints.
</summary>
            <param name="doc">A document to which the image should be added. To obtain
SDF::Doc from PDFDoc use PDFDoc::GetSDFDoc() or Obj::GetDoc().
</param>
            <param name="bitmapSource">The bitmap source containing image data. 
</param>
            <param name="encoder_hints">The encoder hints
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <exception cref="T:pdftron.Common.PDFNetException">  InterruptedException the interrupted exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,System.Windows.Media.Imaging.BitmapSource)">
            <summary> Create and embed an Image. Embed the raw image data. 

</summary>
            <param name="doc">A document to which the image should be added. To obtain
SDF::Doc from PDFDoc use PDFDoc::GetSDFDoc() or Obj::GetDoc().
</param>
            <param name="bitmapSource">The bitmap source containing image data. 
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <exception cref="T:pdftron.Common.PDFNetException">  InterruptedException the interrupted exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,System.Drawing.Bitmap,pdftron.SDF.Obj)">
            <summary> Create and embed an Image. Embed the raw image data taking into account 
specified compression hints.
</summary>
            <param name="doc">A document to which the image should be added. To obtain
SDF::Doc from PDFDoc use PDFDoc::GetSDFDoc() or Obj::GetDoc().
</param>
            <param name="bitmap">The bitmap containing image data. 
</param>
            <param name="encoder_hints">The encoder hints
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <exception cref="T:pdftron.Common.PDFNetException">  InterruptedException the interrupted exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,System.Drawing.Bitmap)">
            <summary> Create and embed an Image. Embed the raw image data. 

</summary>
            <param name="doc">A document to which the image should be added. To obtain
SDF::Doc from PDFDoc use PDFDoc::GetSDFDoc() or Obj::GetDoc().
</param>
            <param name="bitmap">The bitmap containing image data. 
</param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <exception cref="T:pdftron.Common.PDFNetException">  InterruptedException the interrupted exception </exception>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,System.String,pdftron.SDF.Obj)">
            <summary> Create and embed an Image from an external file taking into account specified 
compression hints. 
</summary>
            <param name="doc">A document to which the image should be added. To obtain
SDF::Doc from PDFDoc use PDFDoc::GetSDFDoc() or Obj::GetDoc().
</param>
            <param name="filename">The name of the image file. Currently supported formats are
JPEG, PNG, GIF, TIFF, BMP, EMF, and WMF. Other raster formats can be embedded by
decompressing image data and using other versions of Image::Create(...) method.
</param>
            <param name="encoder_hints">An optional SDF::Obj containing a hint (or an SDF::Array of 
hints) that could be used to select a specific compression method and compression 
parameters. For a concrete example of how to create encoder hints, please take a look 
at JBIG2Test and AddImage sample projects. The image encoder accepts the following 
hints: 
<para>- /JBIG2; SDF::Name("JBIG2"), An SDF::Name Object with value equal to "JBIG2". If the 
image is monochrome (i.e. bpc == 1), the encoder will compress the image using JBIG2Decode 
filter.
Note that JBIG2 compression is not recommended for use on scanned text/financial documents or equivalent
since its lossless nature can lead to similar looking numbers or characters being replaced.	
</para><para>- [/JBIG2 /Threshold 0.6 /SharePages 50] - Compress a monochrome image using lossy JBIG2Decode 
 compression with the given image threshold and by sharing segments from a specified number 
 of pages. The threshold is a floating point number in the rage from 0.4 to 0.9. Increasing the threshold 
 value will increase image quality, but may increase the file size. The default value 
 for threshold is 0.85. "SharePages" parameter can be used to specify the maximum number of 
 pages sharing a common 'JBIG2Globals' segment stream. Increasing the value of this parameter 
 improves compression ratio at the expense of memory usage.</para><para>- /CCITT; Compress a monochrome (i.e. bpc == 1) image using CCITT Group 4 compression. This algorithm typically produces 
			larger output than JBIG2, but is lossless. This makes it much more suitable for scanned text documents.
			CCITT is the best option for more general monochrome compression use cases, since JBIG2 has potential to change image content.</para><para>- [/JPEG] - Use JPEG compression with default compression. </para><para>- [/JPEG /Quality 60] - Use JPEG compression with given quality setting. The "Quality" 
value is expressed on the 0..100 scale.</para><para>- [/JP2] or [/JPEG2000] - Use JPEG2000 compression to compress a RGB or a grayscale image</para><para>- [/Flate] - Use Flate compression with maximum compression at the expense of 
speed. </para><para>- [/Flate /Level 9] - Use Flate compression using specified compression level. 
Compression "Level" must be a number between 0 and 9: 1 gives best speed, 
9 gives best compression, 0 gives no compression at all (the input data is simply 
copied a block at a time). </para><para>- /RAW or [/RAW] - The encoder will not use any compression method and the image 
will be stored in the raw format.</para></param>
            <returns> PDF::Image object representing the embedded image.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> By default the function will either pass-through data preserving the original
compression or will compress data using Flate compression. It is possible to
fine tune compression or to select a different compression algorithm using
'encoder_hints' object.</remarks>
            <remarks>For C++ developers: Current document does not take the ownership of the 
encoder_hints object. Therefore it is a good programming practice to create 
encoder_hints object on the stack.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Image.Create(pdftron.SDF.SDFDoc,System.String)">
            <summary> Create and embed an Image from an external file.

</summary>
            <param name="doc">A document to which the image should be added. To obtain
SDF::Doc from PDFDoc use PDFDoc::GetSDFDoc() or Obj::GetDoc().
</param>
            <param name="filename">The name of the image file. Currently supported formats are
JPEG, PNG, GIF, TIFF, BMP, EMF, and WMF. Other raster formats can be embedded by
decompressing image data and using other versions of Image::Create(...) method.
</param>
            <returns> PDF::Image object representing the embedded image.		
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> By default the function will either pass-through data preserving the original
compression or will compress data using Flate compression. It is possible to
fine tune compression or to select a different compression algorithm using
'encoder_hints' object.</remarks>
        </member>
        <member name="F:pdftron.PDF.Image.InputFilter.e_ascii_hex">
            <summary>Input image stream compressed using ASCIIHexDecode filter</summary>
        </member>
        <member name="F:pdftron.PDF.Image.InputFilter.e_g4">
            <summary>Input image is a G4 stream</summary>
        </member>
        <member name="F:pdftron.PDF.Image.InputFilter.e_g3">
            <summary>Input image is a G3 stream</summary>
        </member>
        <member name="F:pdftron.PDF.Image.InputFilter.e_flate">
            <summary>Input image is a Flate compressed</summary>
        </member>
        <member name="F:pdftron.PDF.Image.InputFilter.e_jp2">
            <summary>Input image is a JP2 (JPEG2000) image</summary>
        </member>
        <member name="F:pdftron.PDF.Image.InputFilter.e_jpeg">
            <summary>Input image is a JPEG image</summary>
        </member>
        <member name="F:pdftron.PDF.Image.InputFilter.e_none">
            <summary>Input stream is not compressed</summary>
        </member>
        <member name="T:pdftron.PDF.Image.InputFilter">
            <summary>InputFilter types</summary>
        </member>
        <member name="T:pdftron.PDF.Image">
            <summary> Image class provides common methods for working with PDF images. 

</summary>
            <remarks>  PDF::Element contains a similar interface used to access image data.
To create the Image object from image PDF::Element, pass the Element's SDF/Cos 
dictionary to Image constructor (i.e. Image image(element-&gt;GetXObject()) )</remarks>
        </member>
        <member name="M:pdftron.PDF.GSChangesIterator.Finalize">
            <summary> Allows a GSChangesIterator to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.GSChangesIterator.Dispose">
            <summary> Releases all resources used by the GSChangesIterator </summary>
        </member>
        <member name="M:pdftron.PDF.GSChangesIterator.op_Inequality(pdftron.PDF.GSChangesIterator,pdftron.PDF.GSChangesIterator)">
            <summary>Inequality operator checks whether two <c>GSChangesIterator</c> are different</summary>
            <param name="l">the <c>GSChangesIterator</c> on the left of the operator
</param>
            <param name="r">the <c>GSChangesIterator</c> on the right of the operator
</param>
            <returns>true if both objects are not equal
</returns>
        </member>
        <member name="M:pdftron.PDF.GSChangesIterator.op_Equality(pdftron.PDF.GSChangesIterator,pdftron.PDF.GSChangesIterator)">
            <summary>Equality operator checks whether two <c>GSChangesIterator</c> are the same</summary>
            <param name="l">the <c>GSChangesIterator</c> on the left of the operator
</param>
            <param name="r">the <c>GSChangesIterator</c> on the right of the operator
</param>
            <returns>true if both objects are equal
</returns>
        </member>
        <member name="M:pdftron.PDF.GSChangesIterator.Equals(System.Object)">
            <summary>Checks whether this GSChangesIterator is the same as the given object.
</summary>
            <param name="o">a given object
</param>
            <returns>true if equals to the give object
</returns>
        </member>
        <member name="M:pdftron.PDF.GSChangesIterator.Current">
            <summary>Gets the current <c>GStateAttribute</c> value
</summary>
            <returns>current Unicode value
</returns>
        </member>
        <member name="M:pdftron.PDF.GSChangesIterator.HasNext">
            <summary>Determines if the iteration has more elements.
</summary>
            <returns>Returns true if the iteration has more elements.
</returns>
        </member>
        <member name="M:pdftron.PDF.GSChangesIterator.Next">
            <summary>Iterates to the next object in the iteration
</summary>
        </member>
        <member name="T:pdftron.PDF.GSChangesIterator">
            <summary> GSChangesIterator is an iterator type that can be used to traverse a list 
of changes in the graphics state between subsequnet graphical elements on the 
page. For a sample use case, please take a look at ElementReaderAdv sample project.
</summary>
        </member>
        <member name="M:pdftron.PDF.CharIterator.Finalize">
            <summary> Allows a CharIterator to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.CharIterator.Dispose">
            <summary> Releases all resources used by the CharIterator </summary>
        </member>
        <member name="M:pdftron.PDF.CharIterator.op_Inequality(pdftron.PDF.CharIterator,pdftron.PDF.CharIterator)">
            <summary>Inequality operator checks whether two CharData objects are different</summary>
            <param name="l">the <c>CharData</c> on the left of the operator
</param>
            <param name="r">the <c>CharData</c> on the right of the operator
</param>
            <returns>true if both objects are not equal
</returns>
        </member>
        <member name="M:pdftron.PDF.CharIterator.op_Equality(pdftron.PDF.CharIterator,pdftron.PDF.CharIterator)">
            <summary>Equality operator checks whether two CharData objects are the same</summary>
            <param name="l">the <c>CharData</c> on the left of the operator
</param>
            <param name="r">the <c>CharData</c> on the right of the operator
</param>
            <returns>true if both objects are equal
</returns>
        </member>
        <member name="M:pdftron.PDF.CharIterator.Equals(System.Object)">
            <summary>checks if this CharData object is the same as the given object</summary>
            <param name="o">a given object
</param>
            <returns>true if equals to the give object
</returns>
        </member>
        <member name="M:pdftron.PDF.CharIterator.Current">
            <summary>Gets the current <c>CharData</c> value
</summary>
            <returns>current Unicode value
</returns>
        </member>
        <member name="M:pdftron.PDF.CharIterator.HasNext">
            <summary>Determines if the iteration has more elements.
</summary>
            <returns>Returns true if the iteration has more elements.
</returns>
        </member>
        <member name="M:pdftron.PDF.CharIterator.Next">
            <summary>Iterates to the next object in the iteration
</summary>
        </member>
        <member name="T:pdftron.PDF.CharIterator">
            <summary> CharIterator is an iterator type that can be used to traverse CharData 
in the current e_text element. For a sample use case, please take a look 
at ElementReaderAdv sample project.
</summary>
        </member>
        <member name="M:pdftron.PDF.CharData.Finalize">
            <summary> Allows a CharData to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.CharData.Dispose">
            <summary> Releases all resources used by the CharData </summary>
        </member>
        <member name="P:pdftron.PDF.CharData.bytes">
            <summary>the number of bytes representing this character in char_data 
buffer.  For simple fonts 'bytes' will equal 1. For multibyte (CID or Type0) 
fonts 'bytes may be larger than 1.
</summary>
            <returns>the number of bytes representing this character in char_data 
buffer. 1 for symple fonts.
</returns>
        </member>
        <member name="P:pdftron.PDF.CharData.char_data(System.Int32)">
            <summary> Gets the char data.

</summary>
            <returns> A buffer containing character data.
For simple fonts each character is represented by a single byte.
For multibyte (CID or Type0) fonts each character may take more than
one byte.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.CharData.y">
            <summary> Gets the glyph y.

</summary>
            <returns> glyph vertical position
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.CharData.x">
            <summary> To render text, a virtual point (x, y), located on the baseline,
called the pen position, is used to locate glyphs.

The pen position has already taken into account the effects of
any inter-character adjustments due to properties such as font size,
text rise, character spacing, word spacing and positioning adjustments
on 'TJ' elements.

</summary>
            <returns> glyph horizontal position
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="P:pdftron.PDF.CharData.char_code">
            <summary> Gets the char code.

</summary>
            <returns> Char code' For SimpleFonts char_code := char_data[0]
for composite fonts char_code is the numeric value of data stored in char_data buffer.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.CharData">
            <summary> CharData is a data structure returned by CharIterator that is 
used to provide extra information about a character within 
a text run. The extra information includes positioning information, 
the character data and a number of bytes taken by the character.
</summary>
        </member>
        <member name="M:pdftron.PDF.GState.SetRenderingIntent(pdftron.PDF.GState.RenderingIntent)">
            <summary> Sets the color intent to be used for rendering the Element.

</summary>
            <param name="intent">the new rendering intent
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetTextKnockout(System.Boolean)">
            <summary> Mark the object as elementary for purposes of color compositing in the
transparent imaging model.

</summary>
            <param name="knockout">the new text knockout
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetTextRise(System.Double)">
            <summary> Sets text rise.
Text rise specifies the distance, in unscaled text space units, to move the
baseline up or down from its default location. Positive values of text rise
move the baseline up

</summary>
            <param name="rise">the new text rise
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetTextRenderMode(pdftron.PDF.GState.TextRenderingMode)">
            <summary> Sets text rendering mode.
The text rendering mode determines whether showing text causes glyph outlines to
be stroked, filled, used as a clipping boundary, or some combination of the three.
See Section 5.2.5 in PDF Reference Manual for details..

</summary>
            <param name="rmode">the new text render mode
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetFont(pdftron.PDF.Font,System.Double)">
            <summary> Sets the font and font size used to draw text.

</summary>
            <param name="font">the font
</param>
            <param name="font_sz">the font_sz
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetLeading(System.Double)">
            <summary> Sets the leading parameter.

The leading parameter is measured in unscaled text space units. It specifies
the vertical distance between the baselines of adjacent lines of text.
See Section 5.2.4 in PDF Reference Manual for details.

</summary>
            <param name="leading">the new leading
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetHorizontalScale(System.Double)">
            <summary> Sets horizontal scale.
The horizontal scaling parameter adjusts the width of glyphs by stretching
or compressing them in the horizontal direction. Its value is specified as
a percentage of the normal width of the glyphs, with 100 being the normal width.
The scaling always applies to the horizontal coordinate in text space, independently
of the writing mode. See Section 5.2.3 in PDF Reference Manual for details.

</summary>
            <param name="hscale">the new horizontal scale
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetWordSpacing(System.Double)">
            <summary> Sets word spacing.

</summary>
            <param name="word_spacing">- a number specified in unscaled text space units.
Word spacing works the same way as character spacing, but applies only to the
space character (char code 32). See Section 5.2.2 in PDF Reference Manual for details.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetCharSpacing(System.Double)">
            <summary> Sets character spacing.

</summary>
            <param name="char_spacing">a number specified in unscaled text space units. When the
glyph for each character in the string is rendered, the character spacing is
added to the horizontal or vertical component of the glyphï¿½s displacement,
depending on the writing mode. See Section 5.2.1 in PDF Reference Manual for details.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetDashPattern(System.Double[],System.Double)">
            <summary> Sets the dash pattern used to stroke paths.

The line dash pattern controls the pattern of dashes and gaps used to stroke
paths. It is specified by a dash array and a dash phase. The dash arrayï¿½s elements
are numbers that specify the lengths of alternating dashes and gaps; the dash phase
specifies the distance into the dash pattern at which to start the dash. The elements
of both the dash array and the dash phase are expressed in user space units.

</summary>
            <param name="dash_array">the dash_array
</param>
            <param name="phase">the phase
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetMiterLimit(System.Double)">
            <summary> Sets miter limit.

</summary>
            <param name="miter_limit">A number that imposes a maximum on the ratio of the miter
length to the line width. When the limit is exceeded, the join is converted
from a miter to a bevel.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetLineWidth(System.Double)">
            <summary> Sets the thickness of the line used to stroke a path.

</summary>
            <param name="width">a non-negative number expressed in user space units.
A line width of 0 denotes the thinnest line that can be rendered at device
resolution: 1 device pixel wide.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetLineJoin(pdftron.PDF.GState.LineJoin)">
            <summary> Sets LineJoin style property.

The line join style specifies the shape to be used at the corners of paths that
are stroked.

</summary>
            <param name="join">the new line join
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetLineCap(pdftron.PDF.GState.LineCap)">
            <summary> Sets LineCap style property.
The line cap style specifies the shape to be used at the ends of open subpaths
(and dashes, if any) when they are stroked.

</summary>
            <param name="cap">the new line cap
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetFlatness(System.Double)">
            <summary> Sets the value of flatness tolerance.

</summary>
            <param name="flatness">is a number in the range 0 to 100; a value of 0 specifies the output
deviceï¿½s default flatness tolerance.

The flatness tolerance controls the maximum permitted distance in device pixels
between the mathematically correct path and an approximation constructed from
straight line segments.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetFillColor(pdftron.PDF.PatternColor,pdftron.PDF.ColorPt!System.Runtime.CompilerServices.IsConst)">
            <summary> Set the fill color to the given uncolored tiling pattern.

</summary>
            <param name="pattern">the pattern
</param>
            <param name="c">is a color in the patternï¿½s underlying color space.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The currently selected fill color space must be Pattern color space. </remarks>
        </member>
        <member name="M:pdftron.PDF.GState.SetFillColor(pdftron.PDF.PatternColor)">
            <summary> Set the fill color to the given tiling pattern.

</summary>
            <param name="pattern">SDF pattern object.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The currently selected fill color space must be Pattern color space. </remarks>
        </member>
        <member name="M:pdftron.PDF.GState.SetFillColor(pdftron.PDF.ColorPt!System.Runtime.CompilerServices.IsConst)">
            <summary> Sets the color value/point used for filling operations.
The color value must be represented in the currently selected color space used
for filling.

</summary>
            <param name="c">the new fill color
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetStrokeColor(pdftron.PDF.PatternColor,pdftron.PDF.ColorPt!System.Runtime.CompilerServices.IsConst)">
            <summary> Set the stroke color to the given uncolored tiling pattern.

</summary>
            <param name="pattern">the pattern
</param>
            <param name="c">is a color in the patternï¿½s underlying color space.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The currently selected stroke color space must be Pattern color space. </remarks>
        </member>
        <member name="M:pdftron.PDF.GState.SetStrokeColor(pdftron.PDF.PatternColor)">
            <summary> Set the stroke color to the given tiling pattern.

</summary>
            <param name="pattern">SDF pattern object.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The currently selected stroke color space must be Pattern color space. </remarks>
        </member>
        <member name="M:pdftron.PDF.GState.SetStrokeColor(pdftron.PDF.ColorPt!System.Runtime.CompilerServices.IsConst)">
            <summary> Sets the color value/point used for stroking operations.
The color value must be represented in the currently selected color space used
for stroking.

</summary>
            <param name="c">the new stroke color
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetFillColorSpace(pdftron.PDF.ColorSpace)">
            <summary> Sets the color space used for filling operations.

</summary>
            <param name="cs">the new fill color space
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetStrokeColorSpace(pdftron.PDF.ColorSpace)">
            <summary> Sets the color space used for stroking operations.

</summary>
            <param name="cs">the new stroke color space
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.Concat(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary> Concat.

</summary>
            <param name="a">- horizontal 'scaling' component of the new text matrix.
</param>
            <param name="b">- 'rotation' component of the new text matrix.
</param>
            <param name="c">- 'rotation' component of the new text matrix.
</param>
            <param name="d">- vertical 'scaling' component of the new text matrix.
</param>
            <param name="h">- horizontal translation component of the new text matrix.
</param>
            <param name="v">- vertical translation component of the new text matrix.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.Concat(pdftron.Common.Matrix2D!System.Runtime.CompilerServices.IsConst)">
            <summary> Concatenate the given matrix to the transformation matrix of this element.

</summary>
            <param name="mtx">the mtx
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetTransform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary> Sets the transformation matrix for this element. This method accepts text
transformation matrix components directly.

A transformation matrix in PDF is specified by six numbers, usually
in the form of an array containing six elements. In its most general
form, this array is denoted [a b c d h v]; it can represent any linear
transformation from one coordinate system to another. For more
information about PDF matrices please refer to section 4.2.2 'Common
Transformations' in PDF Reference Manual, and to documentation for
pdftron::Common::Matrix2D class.

</summary>
            <param name="a">- horizontal 'scaling' component of the new text matrix.
</param>
            <param name="b">- 'rotation' component of the new text matrix.
</param>
            <param name="c">- 'rotation' component of the new text matrix.
</param>
            <param name="d">- vertical 'scaling' component of the new text matrix.
</param>
            <param name="h">- horizontal translation component of the new text matrix.
</param>
            <param name="v">- vertical translation component of the new text matrix.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetTransform(pdftron.Common.Matrix2D!System.Runtime.CompilerServices.IsConst)">
            <summary> Set the transformation matrix associated with this element.

</summary>
            <param name="mtx">The new transformation for this text element.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  in PDF associating a transformation matrix with an element
('cm' operator) will also affect all subsequent elements.</remarks>
        </member>
        <member name="M:pdftron.PDF.GState.SetHalftone(pdftron.SDF.Obj)">
            <summary> Sets the halftone.

</summary>
            <param name="HT">- SDF/Cos halftone dictionary, stream, or name
</param>
            <returns> currently selected halftone dictionary or stream (NULL by default).
Corresponds to the /HT key within the ExtGState's dictionary.
Halftoning is a process by which continuous-tone colors are approximated on an
output device that can achieve only a limited number of discrete colors.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetTransferFunct(pdftron.SDF.Obj)">
            <summary> Sets transfer function used during color conversion process. A transfer
function adjusts the values of color components to compensate for nonlinear
response in an output device and in the human eye. Corresponds to the /TR key
within the ExtGState's dictionary.

</summary>
            <param name="TR">- SDF/Cos transfer function, array, or name
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetUCRFunct(pdftron.SDF.Obj)">
            <summary> Sets undercolor-removal function used during conversion between DeviceRGB
and DeviceCMYK. Corresponds to the /UCR key within the ExtGState's
dictionary.

</summary>
            <param name="UCR">- SDF/Cos undercolor-removal function or name
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetBlackGenFunct(pdftron.SDF.Obj)">
            <summary> Sets black-generation function used during conversion between DeviceRGB
and DeviceCMYK. Corresponds to the /BG key within the ExtGState's
dictionary.

</summary>
            <param name="BG">- SDF/Cos black-generation function or name
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetSmoothnessTolerance(System.Double)">
            <summary> Sets the smoothness tolerance used to control the quality of smooth
shading. Corresponds to the /SM key within the ExtGState's dictionary.

</summary>
            <param name="SM">the new smoothness tolerance
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetAutoStrokeAdjust(System.Boolean)">
            <summary> Specify whether to apply automatic stroke adjustment.
Corresponds to the /SA key within the ExtGState's dictionary.

</summary>
            <param name="SA">the new auto stroke adjust
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetOverprintMode(System.Int32)">
            <summary> Sets the overprint mode. Corresponds to the /OPM key within the ExtGState's
dictionary.

</summary>
            <param name="OPM">the new overprint mode
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetFillOverprint(System.Boolean)">
            <summary> Specifies if overprint is enabled for fill operations. Corresponds to the /op
key within the ExtGState's dictionary.

</summary>
            <param name="op">the new fill overprint
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetStrokeOverprint(System.Boolean)">
            <summary> Specifies if overprint is enabled for stroke operations. Corresponds to the /OP
key within the ExtGState's dictionary.

</summary>
            <param name="OP">the new stroke overprint
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetSoftMask(pdftron.SDF.Obj)">
            <summary> Sets the soft mask of the extended graphics state.
Corresponds to the /SMask key within the ExtGState's dictionary.

</summary>
            <param name="SM">the new soft mask
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetAISFlag(System.Boolean)">
            <summary> Specifies if the alpha is to be interpreted as a shape or opacity mask.
The alpha source flag ('alpha is shape'), specifies whether the
current soft mask and alpha constant are to be interpreted as shape values
(true) or opacity values (false).

</summary>
            <param name="AIS">the new aIS flag
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetStrokeOpacity(System.Double)">
            <summary> Sets opacity value for stroke painting operations for paths and glyph outlines.
Corresponds to the value of the /CA key in the ExtGState dictionary.

</summary>
            <param name="CA">the new stroke opacity
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetFillOpacity(System.Double)">
            <summary> Sets the opacity value for painting operations other than stroking.
Corresponds to the value of the /ca key in the ExtGState dictionary.

</summary>
            <param name="ca">the new fill opacity
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.SetBlendMode(pdftron.PDF.GState.BlendMode)">
            <summary> Gets the blend mode.

</summary>
            <returns> the current blend mode to be used in the transparent imaging model.
Corresponds to the /BM key within the ExtGState's dictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <summary> Sets the current blend mode to be used in the transparent imaging model.
Corresponds to the /BM key within the ExtGState's dictionary.
</summary>
            <param name="BM">- New blending mode type.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <example>
                <code>  
// C#
gs.SetBlendMode(GState.BlendMode.e_lighten);
</code>
            </example>
        </member>
        <member name="M:pdftron.PDF.GState.GetHalftone">
            <summary> Gets the halftone.

</summary>
            <returns> currently selected halftone dictionary or stream (NULL by default).
Corresponds to the /HT key within the ExtGState's dictionary.
Halftoning is a process by which continuous-tone colors are approximated on an
output device that can achieve only a limited number of discrete colors.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetUCRFunct">
            <summary> Gets the uCR funct.

</summary>
            <returns> currently selected undercolor-removal function (NULL by default) used
during conversion between DeviceRGB and DeviceCMYK. Corresponds to the /UCR key
within the ExtGState's dictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetBlackGenFunct">
            <summary> Gets the black gen funct.

</summary>
            <returns> currently selected black-generation function (NULL by default) used
during conversion between DeviceRGB and DeviceCMYK. Corresponds to the /BG key
within the ExtGState's dictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetTransferFunct">
            <summary> Gets the transfer funct.

</summary>
            <returns> currently selected transfer function (NULL by default) used during
color conversion process. A transfer function adjusts the values of color
components to compensate for nonlinear response in an output device and in
the human eye. Corresponds to the /TR key within the ExtGState's dictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetSmoothnessTolerance">
            <summary> Gets the smoothness tolerance.

</summary>
            <returns> the smoothness tolerance used to control the quality of smooth
shading. Corresponds to the /SM key within the ExtGState's dictionary.
The allowable error (or tolerance) is expressed as a fraction of the range
of the color component, from 0.0 to 1.0.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetAutoStrokeAdjust">
            <summary> Gets the auto stroke adjust.

</summary>
            <returns> a flag specifying whether stroke adjustment is enabled in the graphics
state. Corresponds to the /SA key within the ExtGState's dictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetOverprintMode">
            <summary> Gets the overprint mode.

</summary>
            <returns> the overprint mode used by this graphics state.
Corresponds to the /OPM key within the ExtGState's dictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetFillOverprint">
            <summary> Gets the fill overprint.

</summary>
            <returns> whether overprint is enabled for fill painting operations.
Corresponds to the /op key within the ExtGState's dictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetStrokeOverprint">
            <summary> Gets the stroke overprint.

</summary>
            <returns> whether overprint is enabled for stroke painting operations.
Corresponds to the /OP key within the ExtGState's dictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetSoftMaskTransform">
            <summary> Gets the soft mask transform.

</summary>
            <returns> The soft mask transform. This is the transformation matrix at the moment the soft
mask is established in the graphics state with the gs operator. This information is only
relevant when applying the soft mask that may be specified in the graphics state to the
current element.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetSoftMask">
            <summary> Gets the soft mask.

</summary>
            <returns> Associated soft mask. NULL if the soft mask is not selected or
SDF dictionary representing the soft mask otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetAISFlag">
            <summary> Gets the aIS flag.

</summary>
            <returns> the alpha source flag ('alpha is shape'), specifying whether the
current soft mask and alpha constant are to be interpreted as shape values
(true) or opacity values (false).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetStrokeOpacity">
            <summary> Gets the stroke opacity.

</summary>
            <returns> opacity value for stroke painting operations for paths and glyph outlines.
Returns the value of the /CA key in the ExtGState dictionary. If the value is not
found, the default value of 1 is returned.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetFillOpacity">
            <summary> Gets the fill opacity.

</summary>
            <returns> the opacity value for painting operations other than stroking.
Returns the value of the /ca key in the ExtGState dictionary. If the value is not
found, the default value of 1 is returned.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetBlendMode">
            <summary> Gets the blend mode.

</summary>
            <returns> the current blend mode to be used in the transparent imaging model.
Corresponds to the /BM key within the ExtGState's dictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.GState.BlendMode">
            <summary>The standard separable blend modes available in PDF.</summary>
        </member>
        <member name="M:pdftron.PDF.GState.GetRenderingIntentType(System.String)">
            <summary> A utility function that maps a string representing a rendering intent to
RenderingIntent type.

</summary>
            <param name="name">the name
</param>
            <returns> The color rendering intent type matching the specified string
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetRenderingIntent">
            <summary> Gets the rendering intent.

</summary>
            <returns> The color intent to be used for rendering the Element
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.IsTextKnockout">
            <summary> Checks if is text knockout.

</summary>
            <returns> a boolean flag that determines the text element is considered
elementary objects for purposes of color compositing in the transparent imaging
model.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetTextRise">
            <summary> Gets the text rise.

</summary>
            <returns> current value of text rise

Text rise specifies the distance, in unscaled text space units, to move the
baseline up or down from its default location. Positive values of text rise
move the baseline up
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetTextRenderMode">
            <summary> Gets the text render mode.

</summary>
            <returns> current text rendering mode.

The text rendering mode determines whether showing text causes glyph outlines to
be stroked, filled, used as a clipping boundary, or some combination of the three.
See Section 5.2.5 in PDF Reference Manual for details..
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.GState.TextRenderingMode.e_clip_text">
            <summary>Add text to path for clipping.</summary>
        </member>
        <member name="F:pdftron.PDF.GState.TextRenderingMode.e_fill_stroke_clip_text">
            <summary>Fill, then stroke text and add to path for clipping.</summary>
        </member>
        <member name="F:pdftron.PDF.GState.TextRenderingMode.e_stroke_clip_text">
            <summary>Stroke text and add to path for clipping.</summary>
        </member>
        <member name="F:pdftron.PDF.GState.TextRenderingMode.e_fill_clip_text">
            <summary>Fill text and add to path for clipping (see above).</summary>
        </member>
        <member name="F:pdftron.PDF.GState.TextRenderingMode.e_invisible_text">
            <summary>Neither fill nor stroke text (invisible).</summary>
        </member>
        <member name="F:pdftron.PDF.GState.TextRenderingMode.e_fill_stroke_text">
            <summary>Fill, then stroke text.</summary>
        </member>
        <member name="F:pdftron.PDF.GState.TextRenderingMode.e_stroke_text">
            <summary>Stroke text.</summary>
        </member>
        <member name="F:pdftron.PDF.GState.TextRenderingMode.e_fill_text">
            <summary>Fill text.</summary>
        </member>
        <member name="T:pdftron.PDF.GState.TextRenderingMode">
            <summary>Text Rendering modes</summary>
        </member>
        <member name="M:pdftron.PDF.GState.GetFontSize">
            <summary> Gets the font size.

</summary>
            <returns> the font size
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetFont">
            <summary> Gets the font.

</summary>
            <returns> currently selected font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetLeading">
            <summary> Gets the leading.

</summary>
            <returns> currently selected leading parameter

The leading parameter is measured in unscaled text space units. It specifies
the vertical distance between the baselines of adjacent lines of text.
See Section 5.2.4 in PDF Reference Manual for details.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetHorizontalScale">
            <summary> Gets the horizontal scale.

</summary>
            <returns> currently selected horizontal scale

The horizontal scaling parameter adjusts the width of glyphs by stretching
or compressing them in the horizontal direction. Its value is specified as
a percentage of the normal width of the glyphs, with 100 being the normal width.
The scaling always applies to the horizontal coordinate in text space, independently
of the writing mode. See Section 5.2.3 in PDF Reference Manual for details.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetWordSpacing">
            <summary> Gets the word spacing.

</summary>
            <returns> currently selected word spacing

Word spacing works the same way as character spacing, but applies only to the
space character (char code 32). See Section 5.2.2 in PDF Reference Manual for details.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetCharSpacing">
            <summary> Gets the char spacing.

</summary>
            <returns> currently selected character spacing.

The character spacing parameter is a number specified in unscaled text space
units. When the glyph for each character in the string is rendered, the character
spacing is added to the horizontal or vertical component of the glyphï¿½s displacement,
depending on the writing mode. See Section 5.2.1 in PDF Reference Manual for details.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetPhase">
            <summary> Gets the phase.

</summary>
            <returns> the phase of the currently selected dash pattern. dash phase is expressed in
user space units.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetDashes">
            <summary> Gets the dashes.

</summary>
            <returns> The method fills the vector with an array of numbers representing the dash pattern

The line dash pattern controls the pattern of dashes and gaps used to stroke
paths. It is specified by a dash array and a dash phase. The dash arrayï¿½s elements
are numbers that specify the lengths of alternating dashes and gaps; the dash phase
specifies the distance into the dash pattern at which to start the dash. The elements
of both the dash array and the dash phase are expressed in user space units.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetMiterLimit">
            <summary> Gets the miter limit.

</summary>
            <returns> current value of miter limit.

The miter limit imposes a maximum on the ratio of the miter length to the
line width. When the limit is exceeded, the join is converted from a miter
to a bevel.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetLineWidth">
            <summary> Gets the line width.

</summary>
            <returns> the thickness of the line used to stroke a path.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  A line width of 0 denotes the thinnest line that can be rendered at device </remarks>
        </member>
        <member name="M:pdftron.PDF.GState.GetLineJoin">
            <summary> Gets the line join.

</summary>
            <returns> currently selected LineJoin style

The line join style specifies the shape to be used at the corners of paths that
are stroked.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.GState.LineJoin.e_bevel_join">
            <summary>The two segments are finished with butt caps</summary>
        </member>
        <member name="F:pdftron.PDF.GState.LineJoin.e_round_join">
            <summary>A circle with a diameter equal to the line width</summary>
        </member>
        <member name="F:pdftron.PDF.GState.LineJoin.e_miter_join">
            <summary>The two segments are extended until they meet</summary>
        </member>
        <member name="T:pdftron.PDF.GState.LineJoin">
            <summary>LineJoin types</summary>
        </member>
        <member name="M:pdftron.PDF.GState.GetLineCap">
            <summary> Gets the line cap.

</summary>
            <returns> currently selected LineCap style

The line cap style specifies the shape to be used at the ends of open subpaths
(and dashes, if any) when they are stroked.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.GState.LineCap.e_square_cap">
            <summary>squared off stroke continues beyond the endpoint of the path.</summary>
        </member>
        <member name="F:pdftron.PDF.GState.LineCap.e_round_cap">
            <summary>A semicircular arc with a diameter equal to the line width.</summary>
        </member>
        <member name="F:pdftron.PDF.GState.LineCap.e_butt_cap">
            <summary>The stroke is squared off at the endpoint of the path.</summary>
        </member>
        <member name="T:pdftron.PDF.GState.LineCap">
            <summary>LineCap types</summary>
        </member>
        <member name="M:pdftron.PDF.GState.GetFlatness">
            <summary> Gets the flatness.

</summary>
            <returns> current value of flatness tolerance

Flatness is a number in the range 0 to 100; a value of 0 specifies the output
deviceï¿½s default flatness tolerance.

The flatness tolerance controls the maximum permitted distance in device pixels
between the mathematically correct path and an approximation constructed from
straight line segments.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetFillPattern">
            <summary> Gets the fill pattern.

</summary>
            <returns> the SDF pattern object of currently selected PatternColorSpace used for filling.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetFillColor">
            <summary> Gets the fill color space.

</summary>
            <returns> color space used for filling
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetStrokePattern">
            <summary> Gets the stroke pattern.

</summary>
            <returns> the SDF pattern object of currently selected PatternColorSpace used for stroking.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetStrokeColor">
            <summary> Gets the stroke color space.

</summary>
            <returns> color space used for stroking
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetFillColorSpace">
            <summary> Gets the fill color.

</summary>
            <returns> a color value/point represented in the current fill color space
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetStrokeColorSpace">
            <summary> Gets the stroke color.

</summary>
            <returns> a color value/point represented in the current stroke color space
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.GState.GetTransform">
            <summary> Gets the transform.

</summary>
            <returns> the transformation matrix for this element.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If you are looking for a matrix that maps coordinates to the initial
user space see Element::GetCTM().</remarks>
        </member>
        <member name="T:pdftron.PDF.GState.GStateAttribute">
            <summary>GState properties</summary>
        </member>
        <member name="T:pdftron.PDF.GState">
            <summary> GState is a class that keeps track of a number of style attributes used to visually 
define graphical Elements. Each PDF::Element has an associated GState that can be used to 
query or set various graphics properties.

</summary>
            <remarks>  current clipping path is not tracked in the graphics state for efficiency  
reasons. In most cases tracking of the current clipping path is best left to the 
client.</remarks>
        </member>
        <member name="M:pdftron.PDF.PatternColor.Finalize">
            <summary> Allows a PatternColor to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.PatternColor.Dispose">
            <summary> Releases all resources used by the PatternColor </summary>
        </member>
        <member name="M:pdftron.PDF.PatternColor.GetYStep">
            <summary> Gets the y step.

</summary>
            <returns> the desired vertical spacing between pattern cells, measured in
the pattern coordinate system.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  for patterns other than Tiling this method throws an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.PatternColor.GetXStep">
            <summary> Gets the x step.

</summary>
            <returns> the desired horizontal spacing between pattern cells, measured
in the pattern coordinate system.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  that XStep and YStep may differ from the dimensions of the pattern
cell implied by the BBox entry. This allows tiling with irregularly shaped
figures. XStep and YStep may be either positive or negative, but not zero.		
 for patterns other than Tiling this method throws an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.PatternColor.GetBBox">
            <summary> Gets the bounding box.

</summary>
            <returns> A rectangle in the pattern coordinate system giving the
coordinates of the left, bottom, right, and top edges, respectively,
of the pattern cellï¿½s bounding box. These boundaries are used to clip
the pattern cell.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  for patterns other than Tiling this method throws an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.PatternColor.GetTilingType">
            <summary> Gets the tiling type.

</summary>
            <returns> the tiling type identifier that controls adjustments to the spacing
of tiles relative to the device pixel grid:
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  for patterns other than Tiling this method throws an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.PatternColor.GetShading">
            <summary> Gets the shading.

</summary>
            <returns> The shading object defining the shading patternï¿½s gradient fill.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  for patterns other than Shading this method throws an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.PatternColor.GetType(pdftron.SDF.Obj)">
            <summary> Gets the type.

</summary>
            <param name="pattern">the pattern
</param>
            <returns> The Type of a given SDF/Cos color space, or e_null for if
SDF object is not a valid pattern object
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PatternColor.GetMatrix">
            <summary> Gets the matrix.

</summary>
            <returns> pattern matrix, a transformation matrix that maps the patternï¿½s
internal coordinate system to the default coordinate system of the patternï¿½s
parent content stream (the content stream in which the pattern is defined as
a resource). The concatenation of the pattern matrix with that of the parent content
stream establishes the pattern coordinate space, within which all graphics objects
in the pattern are interpreted.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PatternColor.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> the underlying SDF/Cos object
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PatternColor.GetType">
            <summary> Gets the type.

</summary>
            <returns> The Type of a given SDF/Cos color space, or e_null for if
SDF object is not a valid pattern object
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.PatternColor.Type.e_null">
            <summary />
        </member>
        <member name="F:pdftron.PDF.PatternColor.Type.e_shading">
            <summary />
        </member>
        <member name="F:pdftron.PDF.PatternColor.Type.e_colored_tiling_pattern">
            <summary />
        </member>
        <member name="F:pdftron.PDF.PatternColor.Type.e_uncolored_tiling_pattern">
            <summary />
        </member>
        <member name="T:pdftron.PDF.PatternColor.Type">
            <summary />
        </member>
        <member name="M:pdftron.PDF.PatternColor.#ctor(pdftron.SDF.Obj)">
            <summary> Create a PatternColor from the given SDF/Cos object listed under Pattern entry
in page Resource dictionary.

</summary>
            <param name="pattern">the pattern
</param>
        </member>
        <member name="T:pdftron.PDF.PatternColor">
            <summary> Patterns are quite general, and have many uses; for example, they can be used 
to create various graphical textures, such as weaves, brick walls, sunbursts, 
and similar geometrical and chromatic effects.
Patterns are specified in a special family of color spaces named Pattern, whose
'color values' are PatternColor objects instead of the numeric component values 
used with other spaces. Therefore PatternColor is to pattern color space what is 
ColorPt to all other color spaces.

A tiling pattern consists of a small graphical figure called a pattern cell. 
Painting with the pattern replicates the cell at fixed horizontal and vertical 
intervals to fill an area. The effect is as if the figure were painted on the 
surface of a clear glass tile, identical copies of which were then laid down 
in an array covering the area and trimmed to its boundaries. This is called 
tiling the area.

The pattern cell can include graphical elements such as filled areas, text, 
and sampled images. Its shape need not be rectangular, and the spacing of 
tiles can differ from the dimensions of the cell itself.

The order in which individual tiles (instances of the cell) are painted is 
unspecified and unpredictable; it is inadvisable for the figures on adjacent 
tiles to overlap.
</summary>
        </member>
        <member name="M:pdftron.PDF.Font.Finalize">
            <summary> Allows a Font to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.Font.Dispose">
            <summary> Releases all resources used by the Font </summary>
        </member>
        <member name="M:pdftron.PDF.Font.GetVerticalAdvance(System.Int32,System.Double@,System.Double@)">
            <summary> Gets the vertical advance.

</summary>
            <param name="char_code">character to query for vertical advance
</param>
            <param name="out_pos_vect_x"> initialized by the method. horizontal component of the position vector defining the position of the vertical writing mode origin relative to horizontal writing mode origin.
</param>
            <param name="out_pos_vect_y"> initialized by the method. vertical component of the position vector defining the position of the vertical writing mode origin relative to horizontal writing mode origin.
</param>
            <returns> an double array containing in the following order

vertical advance. vertical advance is a displacement vector for vertical
writing mode (i.e. writing mode 1); its horizontal component is always 0.

horizontal component of the position vector defining the position
of the vertical writing mode origin relative to horizontal writing mode origin.

vertical component of the position vector defining the position
of the vertical writing mode origin relative to horizontal writing mode origin.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>Use this method only for composite fonts with vertical writing mode
(i.e. if Font.IsHorizontalMode() returns false). The method will return 0 as vertical
advance for simple fonts or for composite fonts with only horizontal writing mode.		
Relevant only for a Type0 font. </remarks>
        </member>
        <member name="M:pdftron.PDF.Font.MapToCID(System.Int32)">
            <summary> Map to CID.

</summary>
            <param name="char_code">the char_code
</param>
            <returns> a CID matching specified charcode.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Relevant only for a Type0 font. </remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetDescendant">
            <summary> Gets the descendant.

</summary>
            <returns> descendant CIDFont.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Relevant only for a Type0 font. </remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetType3GlyphStream(System.Int32)">
            <summary> Gets the type3 glyph stream.

</summary>
            <param name="char_code">the char_code
</param>
            <returns> a SDF/Cos glyph stream for the given char_code.
If specified char_code is not found in CharPorcs dictionary the
function returns NULL.
</returns>
            <remarks>  Relevant only for a Type3 font. </remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetType3FontMatrix">
            <summary> Gets the type3 font matrix.

</summary>
            <returns> Type3 font matrix, mapping glyph space to text space
A common practice is to define glyphs in terms of a 1000-unit
glyph coordinate system, in which case the font matrix is [0.001 0 0 0.001 0 0].
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Relevant only for a Type3 font. </remarks>
        </member>
        <member name="M:pdftron.PDF.Font.IsCFF">
            <summary> Checks if is cFF.

</summary>
            <returns> true if the embedded font is represented as CFF (Compact Font Format).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Only Type1 and Type1C fonts can be represented in CFF format</remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetStandardType1FontType">
            <summary> Gets the standard type1 font type.

</summary>
            <returns> Font::e_null if the font is not a standard Type1 font or some
other StandardType1Font value for a standard Type1 font.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.GetBBox">
            <summary> Gets the b box.

</summary>
            <returns> A rectangle expressed in the glyph coordinate system, specifying the
font bounding box. This is the smallest rectangle enclosing the shape that would
result if all of the glyphs of the font were placed with their origins coincident
and then filled.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.GetDescent">
            <summary> The face's descender is the vertical distance from the baseline to the bottommost
point of any glyph in the face. This field's value is a negative number expressed
in the glyph coordinate system. For all font types except Type 3, the units of
glyph space are one-thousandth of a unit of text space. Some font designs use
a value different from 'bbox.yMin'.

</summary>
            <returns> the descent
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Only relevant for scalable formats. </remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetAscent">
            <summary> The face's ascender is the vertical distance from the baseline to the topmost
point of any glyph in the face. This field's value is a positive number, expressed
in the glyph coordinate system. For all font types except Type 3, the units of
glyph space are one-thousandth of a unit of text space. Some font designs use
a value different from 'bbox.yMax'.

</summary>
            <returns> the ascent
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Only relevant for scalable formats. </remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetUnitsPerEm">
            <summary> Gets the units per em.

</summary>
            <returns> the number of font units per EM square for this face. This is
typically 2048 for TrueType fonts, 1000 for Type1 fonts
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Only relevant for scalable formats (such as TrueType and Type1).
This function is not applicable to Type3 font and will throw an exception.
Use GetType3FontMatrix instead.</remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetEmbeddedFontBufSize">
            <summary> Gets the embedded font buf size.

</summary>
            <returns> the size of decoded buffer containing embedded font data or 0
if this information is not known in advance.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The size of decoded buffer may not be known in advance for all
fonts and may not be correct.
This function is not applicable to Type3 font and will throw an exception. 
</remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetEmbeddedFont">
            <summary> Gets the embedded font.

</summary>
            <returns> the stream object of the embedded font or NULL if there if the
font is not embedded.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This function is not applicable to Type3 font and will throw an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetEmbeddedFontName">
            <summary> Gets the embedded font name.

</summary>
            <returns> the PostScript font name for the embedded font. If the embedded font
name is not available the function returns the empty string .
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.IsEmbedded">
            <summary> Tests whether or not the specified font is stored as a font file in a stream
embedded in the PDF file.

</summary>
            <returns> true if the font is embedded in the file, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.GetEncoding">
            <summary> Gets the encoding.

</summary>
            <returns> the fontï¿½s encoding array (the mapping of character codes to glyphs).
The array contains 256 Strings. If a String is not NULL, it containing the name
of the glyph for the code point corresponding to the index.
If it is NULL, then the name of the glyph is unchanged from
that specified by the fontï¿½s builtin encoding.

For a Type 3 font, all glyph names will be present in the encoding array,
and NULL entries correspond to un-encoded code points.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>The Font object is the owner of the array.
This function is not applicable to composite fonts (e_type0, e_CIDType0,
and e_CIDType2) and will throw an exception.</remarks>
        </member>
        <member name="M:pdftron.PDF.Font.MapToUnicode(System.Int32,System.Int32[]@,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32@)">
            <summary> Maps the encoding specific 'charcode' to Unicode. Conversion of 'charcode'
to Unicode can result in up to four Unicode characters.

</summary>
            <param name="char_code">encoding specific 'charcode' that needs to be converted
to Unicode.
</param>
            <param name="out_unicode">A pointer to an array of Unicode characters where the conversion result will be stored.
</param>
            <param name="in_uni_sz">The number of characters that can be written to out_unicode. You can assume that the function will never map to more than 10 characters.
</param>
            <param name="out_chars">The function will modify this value to return the number of Unicode characters written in 'out_unicode' array.
</param>
            <returns> true if char_code was mapped to Unicode public area or false if
the char_code was mapped to Unicode private area.

A char_code is mapped to Unicode private area when the information required
for proper mapping is missing in PDF document (e.g. a predefined encoding
or ToUnicode CMap).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This function is not applicable to CIDFonts (e_CIDType0 and e_CIDType2)
and will throw an exception if called.</remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetShapedText(System.String)">
            <summary> Creates a set of positioned glyphs corresponding to the visual 
representation of the provided text string. The shaped text will take into
account any advanced positioning and substitution features provided by
an underylying embedded font file. For example, these features could include
kerning, ligatures, and diacritic positioning.
Typically the resulting shaped text would be fed into ElementBuilder.CreateShapedTextRun()

</summary>
            <param name="text_to_shape">The string to be shaped.
</param>
            <returns> A ShapedText object representing the result of the shaping operation.
</returns>
            <remarks> Shaping requires a Type0 font with an embedded font file which covers all the 
unicode codepoints in the source text. For best results, this font should use
the e_Indices encoding scheme, as shaping features that combine multiple codepoints
into one glyph (ligatures, for example) will not work well in non-index encoded fonts.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetGlyphPath(System.Int32,System.Byte[]@,System.Double[]@,System.Boolean)">
            <summary> The function retrieves the glyph outline for a given character code.

</summary>
            <param name="char_code">character to query
</param>
            <param name="out_oprs">a vector of operators. The array is filled in by the method.
</param>
            <param name="out_data">a vector of data points that represent arguments for operators. The array is filled in by the method.
</param>
            <param name="conics2cubics">if set to true converts all quadratic Bezier curves to cubic
Beziers, otherwise no coversion is performed.
</param>
            <returns> false if the char_code was mapped to 'undefined character code'.
In some fonts 'undefined character code' corresponds to a space, in some fonts it
is a box, and in others it may be a more complicated glyph.
</returns>
            <remarks>  the function can return only the following operators (Element::e_moveto,
Element::e_lineto, Element::e_cubicto and optionaly Element::e_conicto if
conics2cubics parameter is set to true.

This function is not applicable to Type3 font and will throw an exception.
Use <c>GetType3GlyphStream</c> instead.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetGlyphPath(System.Int32,System.Boolean)">
            <summary> The function retrieves the glyph outline for a given character code.

</summary>
            <param name="char_code">character to query
</param>
            <param name="conics2cubics">if set to true converts all quadratic Bezier curves to cubic
Beziers, otherwise no coversion is performed.
</param>
            <returns> A PathData object containing the path information.
</returns>
            <remarks>  the function can return only the following operators (Element::e_moveto,
Element::e_lineto, Element::e_cubicto and optionaly Element::e_conicto if
conics2cubics parameter is set to true.

This function is not applicable to Type3 font and will throw an exception.
Use <c>GetType3GlyphStream</c> instead.

Check PathData.IsDefined to see if the char_code was mapped to 'undefined character code'.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetCharCodeIterator">
            <summary> CharCodeGetIterator represents an iterator interface used to traverse
a list of char codes for which there is a glyph outline in the embedded font.

</summary>
            <returns> the char code iterator
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.GetVerticalAdvance(System.Int32,System.Double,System.Double)">
            <summary> Gets the vertical advance.

</summary>
            <param name="char_code">character to query for vertical advance
</param>
            <param name="pos_x">x coordinate
</param>
            <param name="pos_y">y coordinate
</param>
            <returns> an double array containing in the following order

vertical advance. vertical advance is a displacement vector for vertical
writing mode (i.e. writing mode 1); its horizontal component is always 0.

horizontal component of the position vector defining the position
of the vertical writing mode origin relative to horizontal writing mode origin.

vertical component of the position vector defining the position
of the vertical writing mode origin relative to horizontal writing mode origin.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>Use this method only for composite fonts with vertical writing mode
(i.e. if Font.IsHorizontalMode() returns false). The method will return 0 as vertical
advance for simple fonts or for composite fonts with only horizontal writing mode.		
Relevant only for a Type0 font. </remarks>
        </member>
        <member name="M:pdftron.PDF.Font.GetMissingWidth">
            <summary> Gets the missing width.

</summary>
            <returns> the default width to use for character codes whose widths are
not specified in a font dictionaryï¿½s Widths array.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.GetMaxWidth">
            <summary> Gets the max width.

</summary>
            <returns> the maximal advance width, in font units, for all glyphs in this face.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.GetWidth(System.Int32)">
            <summary> Gets the width.

</summary>
            <param name="char_code">the char_code
</param>
            <returns> advance width, measured in character space units for the glyph
matching given character code.

The function gets the advance width of the font glyph. The advance width
is the amount by which the current point advances when the glyph is drawn.
The advance width may not correspond to the visible width of the glyph
and for this reason, the advance width cannot be used to determine the glyphsï¿½
bounding boxes.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.IsHorizontalMode">
            <summary> Checks if is horizontal mode.

</summary>
            <returns> true if the font uses horizontal writing mode, false for vertical writing mode.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.IsForceBold">
            <summary> Checks if is force bold.

</summary>
            <returns> true if bold glyphs should be painted with extra pixels at very small text sizes.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.IsAllCap">
            <summary> Checks if is all cap.

</summary>
            <returns> true if font contains no lowercase letters
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.IsItalic">
            <summary> Checks if is italic.

</summary>
            <returns> true if glyphs have dominant vertical strokes that are slanted.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.IsSymbolic">
            <summary> Checks if is symbolic.

</summary>
            <returns> true if font contains characters outside the Adobe standard Latin character set.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.IsSerif">
            <summary> Checks if is serif.

</summary>
            <returns> true if glyphs have serifs
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.IsFixedWidth">
            <summary> Checks if is fixed width.

</summary>
            <returns> true if all glyphs have the same width
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.GetFamilyName">
            <summary> Gets the family name.

</summary>
            <returns> the face's family name. This is an ASCII string, usually in English,
which describes the typeface's family (like 'Times New Roman', 'Bodoni', 'Garamond',
etc). This is a least common denominator used to list fonts.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.GetName">
            <summary> Gets the name.

</summary>
            <returns> the name of a font. The behavior depends on the font type;
for a Type 3 font it gets the value of the Name key in a PDF Font resource.
For other types it gets the value of the BaseFont key in a PDF font resource.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.GetDescriptor">
            <summary> Gets the descriptor.

</summary>
            <returns> a SDF/Cos object representing FontDescriptor or NULL is FontDescriptor
is not present.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> a SDF/Cos object of this Font.
</returns>
        </member>
        <member name="M:pdftron.PDF.Font.GetType(pdftron.SDF.Obj)">
            <summary> Gets the type.

</summary>
            <param name="font_dict">the font_dict
</param>
            <returns> The type of a given SDF/Cos font dictionary
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.IsSimple">
            <summary> Checks if is simple.
</summary>
            <returns> true for non-CID based fonts such as Type1, TrueType, and Type3</returns>
            <remarks>
All simple fonts have the following properties:
<list type="bullet"><item><description>
Glyphs in the font are selected by single-byte character codes
obtained from a string that is shown by the text-showing operators.
Logically, these codes index into a table of 256 glyphs; the mapping
from codes to glyphs is called the fontï¿½s encoding. Each font program
has a built-in encoding. Under some circumstances, the encoding can
be altered by means described in Section 5.5.5 "Character Encoding" in
PDF Reference Manual.
</description></item><item><description>
Each glyph has a single set of metrics. Therefore simple fonts support
only horizontal writing mode.
</description></item></list></remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.GetType">
            <summary> Gets the type.

</summary>
            <returns> Font Type
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.#ctor(pdftron.SDF.Obj)">
            <summary> Instantiates a new font.

</summary>
            <param name="fnt_dict">the font_dict
</param>
        </member>
        <member name="F:pdftron.PDF.Font.Type.e_CIDType2">
            <summary>Type 2 CID font</summary>
        </member>
        <member name="F:pdftron.PDF.Font.Type.e_CIDType0">
            <summary>Type 0 CID font</summary>
        </member>
        <member name="F:pdftron.PDF.Font.Type.e_Type0">
            <summary>Type 0 PostScript composite (CID) font</summary>
        </member>
        <member name="F:pdftron.PDF.Font.Type.e_Type3">
            <summary>Type 3 PostScript font</summary>
        </member>
        <member name="F:pdftron.PDF.Font.Type.e_MMType1">
            <summary>Type 1 multiple master PostScript font</summary>
        </member>
        <member name="F:pdftron.PDF.Font.Type.e_TrueType">
            <summary>TrueType font</summary>
        </member>
        <member name="F:pdftron.PDF.Font.Type.e_Type1">
            <summary>Type 1 PostScript font	</summary>
        </member>
        <member name="T:pdftron.PDF.Font.Type">
            <summary>Font types</summary>
        </member>
        <member name="M:pdftron.PDF.Font.CreateCIDTrueTypeFont(pdftron.SDF.SDFDoc,System.Drawing.Font,System.Boolean,System.Boolean,pdftron.PDF.Font.Encoding)">
            <summary> Creates a Type0 CID font backed by a CIDTruetype descendant font.

</summary>
            <param name="doc">the base document
</param>
            <param name="system_font">the system font to use as the font source
</param>
            <param name="embed">Should we embed the font data in the PDF (recommended for portability)
</param>
            <param name="subset">should this font be subset when saved
</param>
            <param name="encoding">the CID encoding scheme.
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateCIDTrueTypeFont(pdftron.SDF.SDFDoc,System.Drawing.Font,System.Boolean,System.Boolean)">
            <summary> Creates the cid true type font.

</summary>
            <param name="doc">the doc
</param>
            <param name="font_path">the font_path
</param>
            <param name="embed">the embed
</param>
            <param name="subset">the subset
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateCIDTrueTypeFont(pdftron.SDF.SDFDoc,System.String,System.Boolean,System.Boolean,pdftron.PDF.Font.Encoding,System.Int32)">
            <summary> Creates the cid true type font.

</summary>
            <param name="doc">the doc
</param>
            <param name="font_path">the font_path
</param>
            <param name="embed">the embed
</param>
            <param name="subset">the subset
</param>
            <param name="encoding">the encoding
</param>
            <param name="ttc_font_index">for TTC fonts the index of the actual font to use
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateCIDTrueTypeFont(pdftron.PDF.PDFDoc,System.String,System.Boolean,System.Boolean,pdftron.PDF.Font.Encoding,System.Int32)">
            <summary> Creates the cid true type font.

</summary>
            <param name="doc">the doc
</param>
            <param name="font_path">the font_path
</param>
            <param name="embed">the embed
</param>
            <param name="subset">the subset
</param>
            <param name="encoding">the encoding
</param>
            <param name="ttc_font_index">for TTC fonts the index of the actual font to use
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateCIDTrueTypeFont(pdftron.SDF.SDFDoc,System.String,System.Boolean,System.Boolean,pdftron.PDF.Font.Encoding)">
            <summary> Creates the cid true type font.

</summary>
            <param name="doc">the doc
</param>
            <param name="font_path">the font_path
</param>
            <param name="embed">the embed
</param>
            <param name="subset">the subset
</param>
            <param name="encoding">the encoding
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateCIDTrueTypeFont(pdftron.PDF.PDFDoc,System.String,System.Boolean,System.Boolean,pdftron.PDF.Font.Encoding)">
            <summary> Creates the cid true type font.

</summary>
            <param name="doc">the doc
</param>
            <param name="font_path">the font_path
</param>
            <param name="embed">the embed
</param>
            <param name="subset">the subset
</param>
            <param name="encoding">the encoding
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateCIDTrueTypeFont(pdftron.SDF.SDFDoc,System.String,System.Boolean,System.Boolean)">
            <summary> Creates the cid true type font.

</summary>
            <param name="doc">the doc
</param>
            <param name="font_path">the font_path
</param>
            <param name="embed">the embed
</param>
            <param name="subset">the subset
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateCIDTrueTypeFont(pdftron.PDF.PDFDoc,System.String,System.Boolean,System.Boolean)">
            <summary> Creates the cid true type font.

</summary>
            <param name="doc">the doc
</param>
            <param name="font_path">the font_path
</param>
            <param name="embed">the embed
</param>
            <param name="subset">the subset
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateCIDTrueTypeFont(pdftron.SDF.SDFDoc,System.String)">
            <summary> Embed an external TrueType font in the document as a CID font.
By default the function selects "Identity-H" encoding that maps 2-byte
character codes ranging from 0 to 65,535 to the same Unicode value.
Other predefined encodings are listed in Table 5.15 'Predefined CMap names'
in PDF Reference Manual.

</summary>
            <param name="doc">- document in which the external font should be embedded.
</param>
            <param name="font_path">- path to the external font file.
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateCIDTrueTypeFont(pdftron.PDF.PDFDoc,System.String)">
            <summary> Embed an external TrueType font in the document as a CID font.
By default the function selects "Identity-H" encoding that maps 2-byte
character codes ranging from 0 to 65,535 to the same Unicode value.
Other predefined encodings are listed in Table 5.15 'Predefined CMap names'
in PDF Reference Manual.

</summary>
            <param name="doc">- document in which the external font should be embedded.
</param>
            <param name="font_path">- path to the external font file.
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateType1Font(pdftron.SDF.SDFDoc,System.String,System.Boolean)">
            <summary> Creates the type1 font.

</summary>
            <param name="doc">the doc
</param>
            <param name="font_path">the font_path
</param>
            <param name="embed">the embed
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateType1Font(pdftron.PDF.PDFDoc,System.String,System.Boolean)">
            <summary> Creates the type1 font.

</summary>
            <param name="doc">the doc
</param>
            <param name="font_path">the font_path
</param>
            <param name="embed">the embed
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateType1Font(pdftron.SDF.SDFDoc,System.String)">
            <summary> Embed an external TrueType font in the document as a CID font.
By default the function selects "Identity-H" encoding that maps 2-byte
character codes ranging from 0 to 65,535 to the same Unicode value.
Other predefined encodings are listed in Table 5.15 'Predefined CMap names'
in PDF Reference Manual.

</summary>
            <param name="doc">- document in which the external font should be embedded.
</param>
            <param name="font_path">- path to the external font file.
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateType1Font(pdftron.PDF.PDFDoc,System.String)">
            <summary> Embed an external TrueType font in the document as a CID font.
By default the function selects "Identity-H" encoding that maps 2-byte
character codes ranging from 0 to 65,535 to the same Unicode value.
Other predefined encodings are listed in Table 5.15 'Predefined CMap names'
in PDF Reference Manual.

</summary>
            <param name="doc">- document in which the external font should be embedded.
</param>
            <param name="font_path">- path to the external font file.
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateTrueTypeFont(pdftron.SDF.SDFDoc,System.Drawing.Font,System.Boolean,System.Boolean)">
            <summary> Creates the true type font.

</summary>
            <param name="doc">PDF Document
</param>
            <param name="font_path">Path to the external font file.
</param>
            <param name="embed">if font is embeded
</param>
            <param name="subset">if font is subset
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateTrueTypeFont(pdftron.SDF.SDFDoc,System.String,System.Boolean,System.Boolean)">
            <summary> Creates the true type font.

</summary>
            <param name="doc">PDF Document
</param>
            <param name="font_path">Path to the external font file.
</param>
            <param name="embed">if font is embeded
</param>
            <param name="subset">if font is subset
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateTrueTypeFont(pdftron.PDF.PDFDoc,System.String,System.Boolean,System.Boolean)">
            <summary> Creates the true type font.

</summary>
            <param name="doc">PDF Document
</param>
            <param name="font_path">Path to the external font file.
</param>
            <param name="embed">if font is embeded
</param>
            <param name="subset">if font is subset
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.CreateTrueTypeFont(pdftron.SDF.SDFDoc,System.String)">
            <summary> Embed an external TrueType font in the document as a Simple font.

</summary>
            <param name="doc">Document in which the external font should be embedded.
</param>
            <param name="font_path">Path to the external font file.
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  glyphs in the Simple font are selected by single-byte character codes.
If you want to work with multi-byte character codes (e.g. UTF16) you need to
create a CID font.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Font.CreateTrueTypeFont(pdftron.PDF.PDFDoc,System.String)">
            <summary> Embed an external TrueType font in the document as a Simple font.

</summary>
            <param name="doc">Document in which the external font should be embedded.
</param>
            <param name="font_path">Path to the external font file.
</param>
            <returns> the font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  glyphs in the Simple font are selected by single-byte character codes.
If you want to work with multi-byte character codes (e.g. UTF16) you need to
create a CID font.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Font.Create(pdftron.SDF.SDFDoc,System.String,System.String)">
            <summary> Create a new Unicode font based on the description of an existing PDF font.

</summary>
            <param name="doc">PDF document
</param>
            <param name="name">name of existing PDF font
</param>
            <param name="char_set">the character set
</param>
            <returns> the created font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.Create(pdftron.PDF.PDFDoc,System.String,System.String)">
            <summary> Create a new Unicode font based on the description of an existing PDF font.

</summary>
            <param name="doc">PDF document
</param>
            <param name="name">name of existing PDF font
</param>
            <param name="char_set">the character set
</param>
            <returns> the created font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Font,System.String)">
            <summary> Create a new Unicode font based on the description of an existing PDF font.

</summary>
            <param name="doc">PDF document
</param>
            <param name="from">existing PDF font
</param>
            <param name="char_set">the character set
</param>
            <returns> the created font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Font,System.String)">
            <summary> Create a new Unicode font based on the description of an existing PDF font.

</summary>
            <param name="doc">PDF document
</param>
            <param name="from">existing PDF font
</param>
            <param name="char_set">the character set
</param>
            <returns> the created font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Font.StandardType1Font,System.Boolean)">
            <summary> Create a PDF::Font object for the given standard (also known as base 14 font).

</summary>
            <param name="doc">PDF document
</param>
            <param name="type">font type
</param>
            <param name="embed">if it is embeded font
</param>
            <returns> the created font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Font.StandardType1Font,System.Boolean)">
            <summary> Create a PDF::Font object for the given standard (also known as base 14 font).

</summary>
            <param name="doc">PDF document
</param>
            <param name="type">font type
</param>
            <param name="embed">if it is embeded font
</param>
            <returns> the created font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.Create(pdftron.SDF.SDFDoc,pdftron.PDF.Font.StandardType1Font)">
            <summary> Create a PDF::Font object for the given standard (also known as base 14 font).

</summary>
            <param name="doc">PDF document
</param>
            <param name="type">font type
</param>
            <returns> newly created font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.Create(pdftron.PDF.PDFDoc,pdftron.PDF.Font.StandardType1Font)">
            <summary> Create a PDF::Font object for the given standard (also known as base 14 font).

</summary>
            <param name="doc">PDF document
</param>
            <param name="type">font type
</param>
            <returns> newly created font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Font.Create(pdftron.SDF.Obj)">
            <summary> Create a PDF::Font object 

</summary>
            <param name="font_dict">font dictionary object
</param>
            <returns> newly created font
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.Font">
            <summary> A font that is used to draw text on a page. It corresponds to a Font Resource 
in a PDF file. More than one page may reference the same Font object.
A Font has a number of attributes, including an array of widths, the character 
encoding, and the fontï¿½s resource name.

PDF document can contain several different types of fonts and Font class 
represents a single, flat interface around all PDF font types.

There are two main classes of fonts in PDF: simple and composite fonts.

Simple fonts are Type1, TrueType, and Type3 fonts. All simple fonts have the 
following properties:
<list type="bullet"><item><description>
Glyphs in the font are selected by single-byte character codes 
obtained from a string that is shown by the text-showing operators. 
Logically, these codes index into a table of 256 glyphs; the mapping 
from codes to glyphs is called the fontï¿½s encoding. Each font program 
has a built-in encoding. Under some circumstances, the encoding can 
be altered by means described in Section 5.5.5 "Character Encoding" in 
PDF Reference Manual.
</description></item><item><description>
Each glyph has a single set of metrics. Therefore simple fonts support 
only horizontal writing mode.
</description></item></list>
A composite font is one whose glyphs are obtained from a font like object 
called a CIDFont (e.g. CIDType0Font and CIDType0Font). A composite font is 
represented by a font dictionary whose Subtype value is Type0. The Type 0 font 
is known as the root font, while its associated CIDFont is called its descendant.
CID-keyed fonts provide a convenient and efficient method for defining
multiple-byte character encodings and fonts with a large number of glyphs. 
These capabilities provide great flexibility for representing text in writing 
systems for languages with large character sets, such as Chinese, Japanese, 
and Korean (CJK).
</summary>
        </member>
        <member name="M:pdftron.PDF.FontCharCodeIterator.Finalize">
            <summary> Allows a FontCharCodeIterator to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.FontCharCodeIterator.Dispose">
            <summary> Releases all resources used by the FontCharCodeIterator </summary>
        </member>
        <member name="M:pdftron.PDF.FontCharCodeIterator.HasNext">
            <summary>Determines if the iteration has more elements.
</summary>
            <returns>Returns true if the iteration has more elements.
</returns>
        </member>
        <member name="M:pdftron.PDF.FontCharCodeIterator.Current">
            <summary>Gets the current Uncode value
</summary>
            <returns>current Unicode value
</returns>
        </member>
        <member name="M:pdftron.PDF.FontCharCodeIterator.Next">
            <summary>Iterates to the next object in the iteration
</summary>
        </member>
        <member name="T:pdftron.PDF.FontCharCodeIterator">
            <summary> FontCharCodeIterator is an iterator type that can be used to traverse a list 
of visible char codes in a font embedded in PDF. For more information, please 
take a look at Font.getCodeIterator().
</summary>
        </member>
        <member name="M:pdftron.PDF.Shading.Finalize">
            <summary> Allows a Shading to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.Shading.Dispose">
            <summary> Releases all resources used by the Shading </summary>
        </member>
        <member name="M:pdftron.PDF.Shading.GetColor(System.Double,System.Double,pdftron.PDF.ColorPt)">
            <summary> Gets the color.
</summary>
            <param name="t1">t1
</param>
            <param name="t2">t2
</param>
            <param name="out_color">a color point for the given value of parametric variable (t1, t2).
</param>
            <exception cref="T:pdftron.Common.PDFNetException">for shadings other than Function this method throws an exception.</exception>
        </member>
        <member name="M:pdftron.PDF.Shading.GetMatrix">
            <summary> Gets the matrix.

</summary>
            <returns> a matrix specifying a mapping from the coordinate space specified
by the Domain entry into the shadingï¿½s target coordinate space.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  for shadings other than Function this method throws an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.Shading.GetDomain(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary> Gets the domain.

</summary>
            <param name="out_minx">minimum x
</param>
            <param name="out_maxx">maximum x
</param>
            <param name="out_miny">minimum y
</param>
            <param name="out_maxy">maximum y
</param>
            <returns> An array of four numbers [xmin xmax ymin ymax] specifying the rectangular
domain of coordinates over which the color function(s) are defined.
If the function does not contain /Domain entry the function returns: [0 1 0 1].
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  for shadings other than Function this method throws an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.Shading.GetCoords(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary> Gets the coords radial.

</summary>
            <param name="out_x0">x0
</param>
            <param name="out_y0">y0
</param>
            <param name="out_r0">r0
</param>
            <param name="out_x1">x1
</param>
            <param name="out_y1">y1
</param>
            <param name="out_r1">r1
</param>
            <exception cref="T:pdftron.Common.PDFNetException"> for shadings other than Radial this method throws an exception.</exception>
            <remarks>for Radial shading returns six numbers (x0 y0 r0 x1 y1 r1) specifying
the centers and radii of the starting and ending circles, expressed in the
shadingï¿½s target coordinate space. The radii r0 and r1 must both be greater
than or equal to 0. If one radius is 0, the corresponding circle is treated
as a point; if both are 0, nothing is painted.</remarks>
        </member>
        <member name="M:pdftron.PDF.Shading.GetCoords(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary> Gets the coords radial.

</summary>
            <param name="out_x0">x0
</param>
            <param name="out_y0">y0
</param>
            <param name="out_x1">x1
</param>
            <param name="out_y1">y1
</param>
            <exception cref="T:pdftron.Common.PDFNetException"> for shadings other than Radial this method throws an exception.</exception>
            <remarks>for Radial shading returns six numbers (x0 y0 r0 x1 y1 r1) specifying
the centers and radii of the starting and ending circles, expressed in the
shadingï¿½s target coordinate space. The radii r0 and r1 must both be greater
than or equal to 0. If one radius is 0, the corresponding circle is treated
as a point; if both are 0, nothing is painted.</remarks>
        </member>
        <member name="M:pdftron.PDF.Shading.GetColor(System.Double,pdftron.PDF.ColorPt)">
            <summary> Gets the color.

</summary>
            <param name="t">color point
</param>
            <param name="out_color">a color point for the given value of t.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  for shadings other than Axial or Radial this method throws an exception. </exception>
        </member>
        <member name="M:pdftron.PDF.Shading.IsExtendEnd">
            <summary> Checks if is extend end.

</summary>
            <returns> a flag specifying whether to extend the shading beyond the ending
point of the axis for Axial shading or ending circle for Radial shading.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  for shadings other than Axial or Radial this method throws an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.Shading.IsExtendStart">
            <summary> Checks if is extend start.

</summary>
            <returns> a flag specifying whether to extend the shading beyond the starting
point of the axis for Axial shading or starting circle for Radial shading.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  for shadings other than Axial or Radial this method throws an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.Shading.GetParamEnd">
            <summary> Gets the param end.

</summary>
            <returns> a number specifying the limiting value of a parametric variable t.
The variable is considered to vary linearly between GetParamStart() and
GetParamEnd() as the color gradient varies between the starting and ending points
of the axis for Axial shading or circles for Radial shading.
The variable t becomes the input argument to the color function(s).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the returned value corresponds to the second value in Domain array. 
for shadings other than Axial or Radial this method throws an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.Shading.GetParamStart">
            <summary> Gets the param start.

</summary>
            <returns> a number specifying the limiting value of a parametric variable t.
The variable is considered to vary linearly between GetParamStart() and
GetParamEnd() as the color gradient varies between the starting and ending points
of the axis for Axial shading or circles for Radial shading.
The variable t becomes the input argument to the color function(s).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the returned value corresponds to the first value in Domain array.
for shadings other than Axial or Radial this method throws an exception.</remarks>
        </member>
        <member name="M:pdftron.PDF.Shading.GetType(pdftron.SDF.Obj)">
            <summary> Gets shading type from shading dictionary.

</summary>
            <param name="shading_dict">the shading dictionary
</param>
            <returns> The Type of a given SDF/Cos shading dictionary, or e_null for if
SDF object is not a valid shading object
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Shading.GetAntialias">
            <summary> Gets the antialias.

</summary>
            <returns> A flag indicating whether to filter the shading function to prevent
aliasing artifacts. See Table 4.25
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Shading.GetBackground">
            <summary> An color point represented in base color space specifying a single
background color value. If present, this color is used before
any painting operation involving the shading, to fill those portions of the
area to be painted that lie outside the bounds of the shading object itself.
In the opaque imaging model, the effect is as if the painting operation were
performed twice: first with the background color and then again with the
shading.

</summary>
            <returns> the background color point
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>The background color is applied only when the shading is used as part
of a shading pattern, not when it is painted directly with the sh operator.		
Use <c>HasBackground()</c> method to determine whether the shading has a 
background color.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Shading.HasBackground">
            <summary> Checks for background.

</summary>
            <returns> true if the shading has a background color or false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Shading.GetBBox">
            <summary> Gets the bounding box.
</summary>
            <returns> a rectangle giving the left, bottom, right, and top
coordinates, respectively, of the shadingï¿½s bounding box. The coordinates
are interpreted in the shadingï¿½s target coordinate space. If present, this
bounding box is applied as a temporary clipping boundary when the shading
is painted, in addition to the current clipping path and any other clipping
boundaries in effect at that time.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>Use HasBBox() method to determine whether the shading has a 
 background color.
 </remarks>
        </member>
        <member name="M:pdftron.PDF.Shading.HasBBox">
            <summary> Checks for bounding box.
</summary>
            <returns> true if shading has a bounding box, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Shading.GetBaseColorSpace">
            <summary> Gets the base color space.

</summary>
            <returns> The color space in which color values are expressed.
This may be any device, CIE-based, or special color space
except a Pattern space.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Shading.GetSDFObj">
            <summary> Gets the SDFObj.
</summary>
            <returns> the underlying SDF/Cos object
</returns>
        </member>
        <member name="M:pdftron.PDF.Shading.GetType">
            <summary> Gets the shading type.

</summary>
            <returns> The Type of a given SDF/Cos shading dictionary, or e_null for if
SDF object is not a valid shading object
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Shading.Create(pdftron.SDF.Obj)">
            <summary> Create a Shading from the given SDF/Cos object listed under /Shading entry
in the page Resource dictionary.

</summary>
            <param name="shading_dict">shading dictionary
</param>
            <returns>newly created <c>Shading</c> object
</returns>
        </member>
        <member name="F:pdftron.PDF.Shading.Type.e_null">
            <summary />
        </member>
        <member name="F:pdftron.PDF.Shading.Type.e_tensor_shading">
            <summary>Tensor-product patch mesh shadings (type 7)</summary>
        </member>
        <member name="F:pdftron.PDF.Shading.Type.e_coons_shading">
            <summary>Coons patch mesh shadings (type 6)</summary>
        </member>
        <member name="F:pdftron.PDF.Shading.Type.e_lattice_gouraud_shading">
            <summary>lattice Gouraud shadings (type 5)</summary>
        </member>
        <member name="F:pdftron.PDF.Shading.Type.e_free_gouraud_shading">
            <summary>Free-form Gouraud-shaded triangle mesh shadings (type 4)</summary>
        </member>
        <member name="F:pdftron.PDF.Shading.Type.e_radial_shading">
            <summary>Radial shadings (type 3)</summary>
        </member>
        <member name="F:pdftron.PDF.Shading.Type.e_axial_shading">
            <summary>Axial shadings (type 2)</summary>
        </member>
        <member name="F:pdftron.PDF.Shading.Type.e_function_shading">
            <summary>Function-based (type 1) shadings</summary>
        </member>
        <member name="T:pdftron.PDF.Shading.Type">
            <summary />
        </member>
        <member name="M:pdftron.PDF.Shading.#ctor(pdftron.SDF.Obj)">
            <summary> Create a Shading from the given SDF/Cos object listed under /Shading entry
in the page Resource dictionary.

</summary>
            <param name="shading_dict">shading dictionary
</param>
        </member>
        <member name="T:pdftron.PDF.Shading">
            <summary> Shading is a class that represents a flat interface around all PDF shading types: 
<list type="bullet"><item><description>
In Function-based (type 1) shadings, the color at every point in 
the domain is defined by a specified mathematical function. The function need 
not be smooth or continuous. This is the most general of the available shading 
types, and is useful for shadings that cannot be adequately described with any 
of the other types.
</description></item><item><description>
Axial shadings (type 2) define a color blend along a line between two points,
optionally extended beyond the boundary points by continuing the boundary
colors.
</description></item><item><description>
Radial shadings (type 3) define a color blend that varies between two circles.
Shadings of this type are commonly used to depict three-dimensional spheres
and cones.
</description></item><item><description>
Free-form Gouraud-shaded triangle mesh shadings (type 4) and lattice gouraud 
shadings (type 5) are commonly used to represent complex colored and shaded 
three-dimensional shapes. The area to be shaded is defined by a path composed entirely 
of triangles. The color at each vertex of the triangles is specified, and a technique 
known as Gouraud interpolation is used to color the interiors. The interpolation 
functions defining the shading may be linear or nonlinear.
</description></item></list>
Coons patch mesh shadings (type 6) are constructed from one or more color
patches, each bounded by four cubic Bï¿½zier curves.

A Coons patch generally has two independent aspects:
<list type="bullet"><item><description>
Colors are specified for each corner of the unit square, and bilinear 
interpolation is used to fill in colors over the entire unit square
</description></item><item><description>
Coordinates are mapped from the unit square into a four-sided patch whose
sides are not necessarily linear. The mapping is continuous: the corners 
of the unit square map to corners of the patch and the sides of the unit 
square map to sides of the patch.
</description></item><item><description>
Tensor-product patch mesh shadings (type 7) are identical to type 6 
(Coons mesh), except that they are based on a bicubic tensor-product 
patch defined by 16 control points, instead of the 12 control points 
that define a Coons patch. The shading Patterns dictionaries representing 
the two patch types differ only in the value of the Type entry and 
in the number of control points specified for each patch in the data stream. 
Although the Coons patch is more concise and easier to use, the tensor-
product patch affords greater control over color mapping. 
</description></item></list></summary>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.Finalize">
            <summary> Allows a ColorSpace to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.Dispose">
            <summary> Releases all resources used by the ColorSpace </summary>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.GetType(pdftron.SDF.Obj)">
            <summary> Gets the type.

</summary>
            <param name="cs">Cos/SDF color space object.
</param>
            <returns> The Type of a given SDF/Cos color space, or e_null for if
SDF object is not a valid color space
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.GetComponentNum(pdftron.PDF.ColorSpace.Type,pdftron.SDF.Obj)">
            <summary>Gets the number of colorants (tint components) used to represent color point in this color space
</summary>
            <param name="cs_type">
                <c>ColorSpace</c> type
</param>
            <param name="cs">
                <c>ColorSpace</c> object
</param>
            <returns>The number of colorants (tint components) used to represent color point in this color space
</returns>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.IsNone">
            <summary> Checks if is none.

</summary>
            <returns> True if Separation or DeviceN color space contains None colorants.
For DeviceN the function returns true only if component colorant names are all None.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  for color spaces other than Separation or DeviceN this method throws
an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.IsAll">
            <summary> Checks if is all.

</summary>
            <returns> True if Separation color space contains the colorant All.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  for color spaces other than Separation this method throws an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.GetTintFunction">
            <summary> Gets the tint function.

</summary>
            <returns> the function that transforms tint values into color component
values in the alternate color space.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  for color spaces other than Separation this method throws an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.GetLookupTable">
            <summary> Gets the lookup table.

</summary>
            <returns> the color lookup table for Indexed color space. for color spaces other
than indexed the method returns null.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  for color spaces other than Indexed this method throws an exception. </remarks>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.GetHighVal">
            <summary>Gets the highest index for the color lookup table for Indexed color space.
</summary>
            <returns>the highest index for the color lookup table for Indexed color space. Since the color table is indexed from zero to highval, the actual number of entries is highval + 1. For color spaces other than indexed the method returns 0.
</returns>
            <remarks>for color spaces other than Indexed this method throws an exception.
</remarks>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.GetBaseColorSpace">
            <summary> Gets the base color space.

</summary>
            <returns> the base color space if this is an e_indexed or e_pattern with
associated base color space; NULL otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.GetAlternateColorSpace">
            <summary> Gets the alternate color space.

</summary>
            <returns> the alternate color space if it is available or NULL otherwise.
Color spaces that include alternate color space are e_separation, e_device_n,
and e_icc.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.Convert2CMYK(pdftron.PDF.ColorPt!System.Runtime.CompilerServices.IsConst,pdftron.PDF.ColorPt)">
            <summary> A convenience function used to convert color points from the current
color space to DeviceCMYK color space.

</summary>
            <param name="in_color">input color point in the current color space
</param>
            <param name="out_color">output color point in the DeviceCMYK color space
</param>
            <returns> the color pt
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the number to input colorants must match the number of colorants expected by the current color space.
</remarks>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.Convert2RGB(pdftron.PDF.ColorPt!System.Runtime.CompilerServices.IsConst,pdftron.PDF.ColorPt)">
            <summary> A convenience function used to convert color points from the current
color space to DeviceRGB color space.

</summary>
            <param name="in_color">input color point in the current color space
</param>
            <param name="out_color">output color point in the DeviceRGB color space
</param>
            <returns> the color pt
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the number to input colorants must match the number of colorants
expected by the current color space.
</remarks>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.Convert2Gray(pdftron.PDF.ColorPt!System.Runtime.CompilerServices.IsConst,pdftron.PDF.ColorPt)">
            <summary> A convenience function used to convert color points from the current
color space to DeviceGray color space.

</summary>
            <param name="in_color">input color point in the current color space
</param>
            <param name="out_color">output color point in the DeviceGray color space
</param>
            <returns> the color pt
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the number to input colorants must match the number of colorants 
expected by the current color space.
</remarks>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.InitComponentRanges(System.Double[],System.Double[])">
            <summary> Initialize default ranges for each color component in the color space.
For example, default ranges for DeviceRGB are [0 1 0 1 0 1] but for Lab
the default values might be [0 100 -100 100 -100 100].

</summary>
            <param name="out_decode_low">the out_decode_low
</param>
            <param name="out_decode_range">the out_decode_range
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the size of resulting vectors will match the number of color components 
 in this color space.
</remarks>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.InitColor(pdftron.PDF.ColorPt)">
            <summary> Set color to the initial value used for this color space.
The initial value depends on the color space (see 4.5.7 in PDF Ref. Manual).

</summary>
            <param name="out_colorants">the out_colorants
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.GetComponentNum">
            <summary> Gets the component num.

</summary>
            <returns> The number of components (tint components) used to represent color
point for this color space
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.GetSDFObj">
            <summary> Gets the sDF obj.

</summary>
            <returns> the underlying SDF/Cos object
</returns>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.GetType">
            <summary> Gets the type.

</summary>
            <returns> The type of this color space
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.ColorSpace.Type.e_null">
            <summary />
        </member>
        <member name="F:pdftron.PDF.ColorSpace.Type.e_device_n">
            <summary />
        </member>
        <member name="F:pdftron.PDF.ColorSpace.Type.e_separation">
            <summary />
        </member>
        <member name="F:pdftron.PDF.ColorSpace.Type.e_pattern">
            <summary />
        </member>
        <member name="F:pdftron.PDF.ColorSpace.Type.e_indexed">
            <summary />
        </member>
        <member name="F:pdftron.PDF.ColorSpace.Type.e_icc">
            <summary />
        </member>
        <member name="F:pdftron.PDF.ColorSpace.Type.e_lab">
            <summary />
        </member>
        <member name="F:pdftron.PDF.ColorSpace.Type.e_cal_rgb">
            <summary />
        </member>
        <member name="F:pdftron.PDF.ColorSpace.Type.e_cal_gray">
            <summary />
        </member>
        <member name="F:pdftron.PDF.ColorSpace.Type.e_device_cmyk">
            <summary />
        </member>
        <member name="F:pdftron.PDF.ColorSpace.Type.e_device_rgb">
            <summary />
        </member>
        <member name="F:pdftron.PDF.ColorSpace.Type.e_device_gray">
            <summary />
        </member>
        <member name="T:pdftron.PDF.ColorSpace.Type">
            <summary> Types of colorspace </summary>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.#ctor(pdftron.SDF.Obj)">
            <summary> Create a ColorSpace from the given SDF/Cos object listed under ColorSpaces entry
in page Resource dictionary. If color_space dictionary is null, a non valid ColorSpace
object is created.

</summary>
            <param name="cs_dict">the color_space
</param>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.CreateICCFromBuffer(pdftron.SDF.SDFDoc,System.Byte[])">
            <summary> Creates the icc from buffer.

</summary>
            <param name="doc">the doc
</param>
            <param name="buffer">the data
</param>
            <returns> the color space
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.CreateICCFromFilter(pdftron.SDF.SDFDoc,pdftron.Filters.Filter)">
            <summary> Creates the icc from filter.

</summary>
            <param name="doc">the doc
</param>
            <param name="filter">the filter
</param>
            <returns> the color space
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.CreateICCFromFile(pdftron.SDF.SDFDoc,System.String)">
            <summary> Create a PDF 'ICCBased' color space given an ICC profile.

</summary>
            <param name="doc">the doc
</param>
            <param name="filepath">the filepath
</param>
            <returns> the color space
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.Create(pdftron.SDF.Obj)">
            <summary>Create a new ColorSpace from a given object
</summary>
            <param name="color_space">existing color space
</param>
            <returns>the color space
</returns>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.CreatePattern">
            <summary> Create a new Pattern ColorSpace object.			
</summary>
            <returns> the color space
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.CreateDeviceCMYK">
            <summary> Create a new DeviceCMYK ColorSpace object.

</summary>
            <returns> the color space
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.CreateDeviceRGB">
            <summary> Create a new DeviceRGB ColorSpace object.

</summary>
            <returns> the color space
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorSpace.CreateDeviceGray">
            <summary> Create a new DeviceGray ColorSpace object.

</summary>
            <returns> the color space
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.ColorSpace">
            <summary> This abstract class is used to serve as a color space tag to identify the specific 
color space of a Color object. It contains methods that transform colors in a specific 
color space to/from several color space such as DeviceRGB and DeviceCMYK. 

For purposes of the methods in this class, colors are represented as arrays of color 
components represented as doubles in a normalized range defined by each ColorSpace. 
For many ColorSpaces (e.g. DeviceRGB), this range is 0.0 to 1.0. However, some ColorSpaces 
have components whose values have a different range. Methods are provided to inquire per 
component minimum and maximum normalized values. 

</summary>
            <remarks>  Note that in Pattern color space (i.e. for ColorSpace::e_pattern) 'color values'
are PDF::PatternColor objects instead of the numeric component values (i.e. ColorPt) 
used with other spaces.
</remarks>
        </member>
        <member name="M:pdftron.PDF.ColorPt.Finalize">
            <summary> Allows a ColorPt to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.ColorPt.Dispose">
            <summary> Releases all resources used by the ColorPt </summary>
        </member>
        <member name="M:pdftron.PDF.ColorPt.Get(System.Int32)">
            <summary> Gets the tint value at a given colorant index.

</summary>
            <param name="colorant_index">the colorant_index
</param>
            <returns> the tint value at the specified colorant index.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorPt.Set(System.Int32,System.Double)">
            <summary> Sets the colorant index and value.

</summary>
            <param name="colorant_index">the colorant_index. For example, for a color point
associated with a Gray color space the only allowed value for index 
is 0. For a color point associated with a CMYK color space, the color_index
can range from 0 (cyan) to 4 (black).
</param>
            <param name="colorant_value">the colorant_value The new tint value.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>If a color point has more than 4 colorants, SetColorantNum(num_colorants)
must be called before getting or setting tint values.
</remarks>
            <remarks>All colorants should be in the range [0..1], so colors in the range [0..255]should be divided by 255.0 first.</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorPt.SetColorantNum(System.Int32)">
            <summary> Sets the colorant number.

</summary>
            <param name="num">the new colorant number
</param>
            <remarks>If a color point has more than 4 colorants, SetColorantNum(num_colorants) must be called 
before getting or setting tint values. The number of colorants depends on the associated color space. 
To find how many colorant are associated with a given color space use color_space.GetComponentNum().
</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorPt.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary> A utility method to set the first 4 tint values. For example, 
color.Set(red, green, blue) will initialize the ColorPt to given 
tint values. 
</summary>
            <param name="x">initialized value of first color value (eg. red for rgb colorspace)
</param>
            <param name="y">initialized value of second color value (eg. green for rgb colorspace)
</param>
            <param name="z">initialized value of third color value (eg. blue for rgb colorspace)
</param>
            <param name="w">initialized value of fourth color value (eg. when using CMYK)
</param>
            <remarks>color.Set(gray) is equivalent to Set(0, gray);</remarks>
            <remarks>All colorants should be in the range [0..1], so colors in the range [0..255]should be divided by 255.0 first.</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorPt.Set(System.Double,System.Double,System.Double)">
            <summary> Sets the first three values x, y, and z of the ColorPt.

</summary>
            <param name="x">initialized value of first color value (eg. red for rgb colorspace)
</param>
            <param name="y">initialized value of second color value (eg. green for rgb colorspace)
</param>
            <param name="z">initialized value of third color value (eg. blue for rgb colorspace)
</param>
            <remarks>All colorants should be in the range [0..1], so colors in the range [0..255]should be divided by 255.0 first.</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorPt.Set(System.Double,System.Double)">
            <summary> Sets the first two values x and y of the ColorPt.

</summary>
            <param name="x">initialized value of first color value (eg. red for rgb colorspace)
</param>
            <param name="y">initialized value of second color value (eg. green for rgb colorspace)
</param>
            <remarks>All colorants should be in the range [0..1], so colors in the range [0..255]should be divided by 255.0 first.</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorPt.Set(System.Double)">
            <summary> Sets the first value x of the ColorPt.

</summary>
            <param name="x">initialized value of first color value (eg. red for rgb colorspace)
</param>
            <remarks>All colorants should be in the range [0..1], so colors in the range [0..255]should be divided by 255.0 first.</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorPt.op_Equality(pdftron.PDF.ColorPt)">
            <summary>Equals operator</summary>
            <param name="other">object at the right of the operator
</param>
            <returns>true if the colorant values of the objects are equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.PDF.ColorPt.op_Assign(pdftron.PDF.ColorPt)">
            <summary>Assignment operator</summary>
            <param name="r">object at the right of the operator
</param>
            <returns>object equals to the given object
</returns>
        </member>
        <member name="M:pdftron.PDF.ColorPt.Set(pdftron.PDF.ColorPt)">
            <summary>Sets value to the given <c>ColorPt</c> object
</summary>
            <param name="p">given <c>ColorPt</c> object
</param>
        </member>
        <member name="M:pdftron.PDF.ColorPt.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary> Instantiates a new <c>ColorPt</c> object.

</summary>
            <param name="x">initialized value of first color value (eg. red for rgb colorspace)
</param>
            <param name="y">initialized value of second color value (eg. green for rgb colorspace)
</param>
            <param name="z">initialized value of third color value (eg. blue for rgb colorspace)
</param>
            <param name="w">initialized value of fourth color value (eg. when using CMYK)
</param>
            <remarks>All colorants should be in the range [0..1], so colors in the range [0..255]should be divided by 255.0 first.</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorPt.#ctor(System.Double,System.Double,System.Double)">
            <summary> Instantiates a new <c>ColorPt</c> object.

</summary>
            <param name="x">initialized value of first color value (eg. red for rgb colorspace)
</param>
            <param name="y">initialized value of second color value (eg. green for rgb colorspace)
</param>
            <param name="z">initialized value of third color value (eg. blue for rgb colorspace)
</param>
            <remarks>All colorants should be in the range [0..1], so colors in the range [0..255]should be divided by 255.0 first.</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorPt.#ctor(System.Double,System.Double)">
            <summary> Instantiates a new <c>ColorPt</c> object.

</summary>
            <param name="x">initialized value of first color value (eg. red for rgb colorspace)
</param>
            <param name="y">initialized value of second color value (eg. green for rgb colorspace)
</param>
            <remarks>All colorants should be in the range [0..1], so colors in the range [0..255]should be divided by 255.0 first.</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorPt.#ctor(System.Double)">
            <summary> Instantiates a new <c>ColorPt</c> object.

</summary>
            <param name="x">initialized value of first color value (eg. red for rgb colorspace)
</param>
            <remarks>All colorants should be in the range [0..1], so colors in the range [0..255]should be divided by 255.0 first.</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.ColorPt.#ctor">
            <summary> Instantiates a new <c>ColorPt</c> object.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.ColorPt">
            <summary> ColorPt is an array of colorants (or tint values) representing a color point
in an associated color space.
</summary>
        </member>
        <member name="M:pdftron.PDF.Function.Finalize">
            <summary> Allows a Function to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.Function.Dispose">
            <summary> Releases all resources used by the Function </summary>
        </member>
        <member name="M:pdftron.PDF.Function.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> the underlying SDF/Cos object
</returns>
        </member>
        <member name="M:pdftron.PDF.Function.Eval(System.Double[],System.Double[])">
            <summary> Evaluate the function at a given point.

</summary>
            <param name="in">the in
</param>
            <param name="out"> the double[]
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  that size of 'in' array must be greater than or equal to function input cardinality.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Function.GetOutputCardinality">
            <summary> Gets the output cardinality.

</summary>
            <returns> the number of output components returned by the function
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Function.GetInputCardinality">
            <summary> Gets the input cardinality.

</summary>
            <returns> the number of input components required by the function
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Function.GetType">
            <summary> Gets the type.

</summary>
            <returns> The function type
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Function.Type.e_postscript">
            <summary>A PostScript calculator function.</summary>
        </member>
        <member name="F:pdftron.PDF.Function.Type.e_stitching">
            <summary>a combination of other functions, partitioned across a domain.</summary>
        </member>
        <member name="F:pdftron.PDF.Function.Type.e_exponential">
            <summary>defines a set of coefficients for an exponential function.</summary>
        </member>
        <member name="F:pdftron.PDF.Function.Type.e_sampled">
            <summary>uses a table of sample values to define the function.</summary>
        </member>
        <member name="T:pdftron.PDF.Function.Type">
            <summary>functions types</summary>
        </member>
        <member name="M:pdftron.PDF.Function.Create(pdftron.SDF.Obj)">
            <summary> Create a PDF::Function object from an existing SDF function dictionary.

</summary>
            <param name="function">the funct_dict
</param>
            <returns>newly created <c>Function</c> object
</returns>
        </member>
        <member name="T:pdftron.PDF.Function">
            <summary> Although PDF is not a programming language it provides several types of function 
object that represent parameterized classes of functions, including mathematical 
formulas and sampled representations with arbitrary resolution. Functions are used 
in various ways in PDF, including device-dependent rasterization information for 
high-quality printing (halftone spot functions and transfer functions), color 
transform functions for certain color spaces, and specification of colors as a 
function of position for smooth shadings. Functions in PDF represent static, 
self-contained numerical transformations.

PDF::Function represents a single, flat interface around all PDF function types.
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.Finalize">
            <summary> Allows a PDFDoc to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.Dispose">
            <summary> Releases all resources used by the PDFDoc </summary>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.VerifySignedDigitalSignatures(pdftron.PDF.VerificationOptions)">
            <summary>
Attempts to verify all signed cryptographic digital signatures in the document, ignoring unsigned signatures.
</summary>
            <returns> an enumeration value representing the state of the document's signatures.</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.SaveViewerOptimized(pdftron.PDF.ViewerOptimizedOptions)">
            <summary>
Applies optimizations to improve viewing speed and saves the document to a memory buffer.
The main optimizations used are linearization and embedding thumbnails for the
first page and any other pages that are slow to render.
</summary>
            <param name="opts">The optimization options.</param>
            <returns> The buffer containing the serialized version of the document. </returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception if the file can't be opened for saving or if there is a problem during Save
an Exception object will be thrown. </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.SaveViewerOptimized(System.String,pdftron.PDF.ViewerOptimizedOptions)">
            <summary>
Applies optimizations to improve viewing speed and saves the document to the specified file.
The main optimizations used are linearization and embedding thumbnails for the
first page and any complex pages.
</summary>
            <param name="path">The full path name to which the file is saved.</param>
            <param name="opts">The optimization options.</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception if the file can't be opened for saving or if there is a problem during Save
an Exception object will be thrown. </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetDigitalSignaturePermissions">
            <summary>Retrieves the most restrictive document permissions locking level from all of the signed digital signatures in the document.</summary>
            <returns>An enumerated value representing the most restrictive document permission level found in the document.</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetDigitalSignatureFieldIterator">
            <summary>Retrieves an iterator that iterates over digital signature fields.</summary>
            <returns>An iterator that iterates over digital signature fields.</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateDigitalSignatureField">
            <summary>Creates an unsigned digital signature form field inside the document with an automatically-generated unique name. 
</summary>
            <returns>A DigitalSignatureField object representing the created digital signature field.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateDigitalSignatureField(System.String)">
            <summary>Creates an unsigned digital signature form field inside the document.
</summary>
            <param name="in_sig_field_name">The fully-qualified name to give the digital signature field. If one is not provided, a unique name is created automatically.
</param>
            <returns>A DigitalSignatureField object representing the created digital signature field.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetUndoManager">
            <returns> The UndoManager object (one-to-one mapped to document)
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.AppendVisualDiff(pdftron.PDF.Page,pdftron.PDF.Page,pdftron.PDF.DiffOptions)">
            <summary> Generates a PDF diff of the given pages by overlaying and blending them on top of each other, 
then appends that diff as a new page in this document.
</summary>
            <param name="pageA">The first page to compare. Must be from another document.</param>
            <param name="pageB">The second page to compare. Must be from another document.</param>
            <param name="options">The options to use when comparing the page.</param>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetSignatureHandler(pdftron.SDF.SignatureHandlerId)">
            <summary> Gets the associated signature handler instance from the signature manager by looking it up with the
handler name.
</summary>
            <param name="signature_handler_id"> The unique id of the signature handler to get.
</param>
            <returns> The signature handler instance if found, otherwise null.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.RemoveSignatureHandler(pdftron.SDF.SignatureHandlerId)">
            <summary> Removes a signature handler from the signature manager.
</summary>
            <param name="signature_handler_id"> The unique id of the signature handler to remove.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.AddStdSignatureHandler(System.Byte[],System.String)">
            <summary>
Adds a standard (built-in) signature handler to the signature manager. This method will use cryptographic
algorithm based on Adobe.PPKLite/adbe.pkcs7.detached filter to sign a PDF.
</summary>
            <param name="pkcs12_keybuffer">The private key certificate store to use. (As an array of bytes)</param>
            <param name="pkcs12_keypass">The passphrase for the provided private key.</param>
            <returns>A unique ID representing the SignatureHandler within the SignatureManager.</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.AddStdSignatureHandler(System.String,System.String)">
            <summary>
Adds a standard (built-in) signature handler to the signature manager. This method will use cryptographic
algorithm based on Adobe.PPKLite/adbe.pkcs7.detached filter to sign a PDF.
</summary>
            <param name="pkcs12_keyfile">The private key certificate store to use.</param>
            <param name="pkcs12_keypass">The passphrase for the provided private key.</param>
            <returns>A unique ID representing the SignatureHandler within the SignatureManager.</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.AddSignatureHandler(pdftron.SDF.SignatureHandler)">
            <summary> Adds a signature handler to the signature manager.
</summary>
            <param name="signature_handler"> The signature handler instance to add to the signature manager.
</param>
            <returns> A unique ID representing the SignatureHandler within the SignatureManager.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.HasSignatures">
            <summary> Indicates whether this documents contains any digital signatures.
</summary>
            <returns> True if a digital signature is found in this PDFDoc.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.AddHighlights(System.String)">
            <summary> AddHighlights is used to highlight text in a document using 'Adobe's Highlight
File Format' (Technical Note #5172 ). The method will parse the character offset data
and modify the current document by adding new highlight annotations.

</summary>
            <param name="hilite">a string representing the filename for the highlight file or
or a data buffer containing XML data.
</param>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GenerateThumbnails(System.UInt32)">
            <summary>
Generates thumbnail images for all the pages in this PDF document.
</summary>
            <param name="size">The maximum dimension (width or height) that thumbnails will have.</param>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetFileName">
            <summary> Gets the file name.

</summary>
            <returns> The filename of the document if the document is loaded from disk,
or empty string if the document is not yet saved or is loaded from a memory
buffer.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.TimedLockRead(System.Int32)">
            <summary> Tries to obtain a read lock on the document, waiting no longer than specified number of milliseconds.

</summary>
            <param name="milliseconds">maxiumum number of milliseconds to wait for the lock
</param>
            <returns> true if the document is locked for multi-threaded access, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.TryLockRead">
            <summary> Tries to obtain a read lock in a non-blocking manner.

</summary>
            <returns> true if the document is locked for multi-threaded access, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.UnlockRead">
            <summary> Removes the read lock from the document. 

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.LockRead">
            <summary> Locks the document to prevent competing write threads (using Lock()) from accessing the document 
at the same time. Other reader threads however, will be allowed to access the document.
Threads attempting to obtain write access to the document will wait in 
suspended state until the thread that owns the lock calls doc.UnlockRead().
Note: To avoid deadlocks obtaining a write lock while holding
a read lock is not permitted and will throw an exception. If this situation is encountered
please either unlock the read lock before the write lock is obtained
or acquire a write lock (rather than read lock) in the first place.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.TimedLock(System.Int32)">
            <summary> Try locking the document, waiting no longer than specified number of milliseconds.

</summary>
            <param name="milliseconds">the milliseconds
</param>
            <returns> true if the document is locked for multi-threaded access, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.TryLock">
            <summary> Try locking the document in non-blocking manner.

</summary>
            <returns> true if the document is locked for multi-threaded access, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.Unlock">
            <summary> Removes the lock from the document.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.Lock">
            <summary> Locks the document to prevent competing threads from accessiong the document
at the same time. Threads attempting to access the document will wait in
suspended state until the thread that owns the lock calls doc.Unlock().

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetSDFDoc">
            <summary> Gets the SDFDoc.

</summary>
            <returns> document's SDF/Cos document
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetOCGConfig">
            <summary> Gets the OCG configuration.
</summary>
            <returns>the default optional-content configuration for the document
from the OCProperties D entry.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetOCGs">
            <summary> Gets the OCGs.

</summary>
            <returns> the Obj array that contains optional-content groups (OCGs) for
the document, or NULL if the document does not contain any OCGs. The
order of the groups is not guaranteed to be the creation order, and is
not the same as the display order.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.HasOC">
            <summary> Checks for oc.

</summary>
            <returns> true if the optional content (OC) feature is associated with
the document. The document is considered to have optional content if
there is an OCProperties dictionary in the document's catalog, and
that dictionary has one or more entries in the OCGs array.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetStructTree">
            <summary>Gets the structure tree.
</summary>
            <returns>document's logical structure tree root.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">PDFNetException the PDFNet exception</exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.RemovePageLabel(System.Int32)">
            <summary> Removes the page label that is attached to the specified page,
effectively merging the specified range with the previous page
label sequence.

</summary>
            <param name="page_num">The page from which the page label is removed.
Because PDFNet indexes pages starting from 1, page_num must be
larger than 0.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.SetPageLabel(System.Int32,pdftron.PDF.PageLabel)">
            <summary> Attaches a label to a page. This establishes the numbering scheme
for that page and all following it, until another page label is
encountered. This label allows PDF producers to define a page
numbering system other than the default.

</summary>
            <param name="page_num">The number of the page to label. If page_num is
less than 1 or greater than the number of pages in the document,
the method does nothing.
</param>
            <param name="label">the label
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetPageLabel(System.Int32)">
            <summary> Gets the page label.

</summary>
            <param name="page_num">The page number. Because PDFNet indexes pages
starting from 1, page_num must be larger than 0.
</param>
            <returns> the PageLabel that is in effect for the given page.
If there is no label object in effect, this method returns an
invalid page label object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.AddFileAttachment(System.String,pdftron.PDF.FileSpec)">
            <summary> Associates a file attachment with the document.

The file attachment will be displayed in the user interface of a viewer application
(in Acrobat this is File Attachment tab). The function differs from
Annot.CreateFileAttachment() because it associates the attachment with the
whole document instead of an annotation on a specific page.

</summary>
            <param name="file_key">A key/name under which the attachment will be stored.
</param>
            <param name="embeded_file">the embedded_file
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <example>  Another way to associate a file attachment with the document is using SDF::NameTree: 
<code>  
SDF.NameTree names = SDF.NameTree.Create(doc, "EmbeddedFiles");
names.put(file_key, file_keysz, embedded_file.GetSDFObj());
</code></example>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.FDFUpdate(pdftron.FDF.FDFDoc)">
            <summary> Replace existing form and annotation data with those imported from the FDF file.
Since this method avoids updating annotations unnecessarily it is ideal for incremental save.

</summary>
            <param name="fdf_doc">- a pointer to the FDF file
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.FDFMerge(pdftron.FDF.FDFDoc)">
            <summary> Import form data from FDF file to PDF interactive form.

</summary>
            <param name="fdf_doc">- a pointer to the FDF file
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.FDFExtract(System.Collections.ArrayList)">
            <summary> Extract selected annotations to FDF.

</summary>
            <param name="annotations">the annotation(s) to extract
</param>
            <returns> the newly created FDF file with the interactive data.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.FDFExtract(pdftron.PDF.PDFDoc.ExtractFlag)">
            <summary> Fdf extract.

</summary>
            <param name="flag">the flag that specifies the extract options
</param>
            <returns> a pointer to the newly created FDF file with an interactive data.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.FDFExtract">
            <summary> Fdf extract.

</summary>
            <returns> a pointer to the newly created FDF file with an interactive data.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetTriggerAction(pdftron.PDF.PDFDoc.EventType)">
            <summary> Get the Action associated with the selected PDFDoc Trigger event
</summary>
            <param name="trigger">the type of trigger event to get
</param>
            <returns> The action Obj if present, otherwise NULL
</returns>
        </member>
        <member name="F:pdftron.PDF.PDFDoc.EventType.e_action_trigger_doc_did_print">
            <summary>Triggered after printing a document.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDoc.EventType.e_action_trigger_doc_will_print">
            <summary>Triggered before printing a document.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDoc.EventType.e_action_trigger_doc_did_save">
            <summary>Triggered after saving a document.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDoc.EventType.e_action_trigger_doc_will_save">
            <summary>Triggered before saving a document.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDoc.EventType.e_action_trigger_doc_will_close">
            <summary>Triggered before closing a document.</summary>
        </member>
        <member name="T:pdftron.PDF.PDFDoc.EventType">
            <summary>
Event types for PDFDoc
</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDoc.ExtractFlag.e_annots_only_no_links">
            <summary>same as e_annots_only but no url links get converted</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDoc.ExtractFlag.e_both">
            <summary>extract both form fields and annotations</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDoc.ExtractFlag.e_annots_only">
            <summary>extract only annotations</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDoc.ExtractFlag.e_forms_only">
            <summary>default, extract only form fields</summary>
        </member>
        <member name="T:pdftron.PDF.PDFDoc.ExtractFlag">
            <summary />
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetAcroForm">
            <summary> Gets the acro form.

</summary>
            <returns> the AcroForm dictionary located in "/Root" or NULL if dictionary is not present.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.FlattenAnnotations">
            <summary>Flatten all annotations in the document.</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.FlattenAnnotations(System.Boolean)">
            <summary>Flatten all annotations in the document.</summary>
            <param name="forms_only"> f false flatten all annotations, otherwise flatten only form fields.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.RefreshAnnotAppearances">
            <summary> Generates the appearance stream for annotations in the document using the default RefreshOptions. A common use case is to generate appearances
only for missing annotations, which can be accomplished using the default options.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.RefreshAnnotAppearances(pdftron.PDF.RefreshOptions)">
            <summary> Generates the appearance stream for annotations in the document using the specified options. A common use case is to generate appearances
only for missing annotations, which can be accomplished using the default options.

</summary>
            <param name="options"> Options that can be used to adjust this generation process.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.RefreshFieldAppearances">
            <summary> Regenerates the appearance stream for every widget annotation in the document
Call this method if you modified field's value and would like to update
field's appearances.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.FieldCreate(System.String,pdftron.PDF.Field.Type,pdftron.SDF.Obj,pdftron.SDF.Obj)">
            <summary> Field create.

</summary>
            <param name="field_name">the field_name
</param>
            <param name="type">the type
</param>
            <param name="field_value">the field_value
</param>
            <param name="def_field_value">the def_field_value
</param>
            <returns> the field
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.FieldCreate(System.String,pdftron.PDF.Field.Type,pdftron.SDF.Obj)">
            <summary> Field create.

</summary>
            <param name="field_name">the field_name
</param>
            <param name="type">the type
</param>
            <param name="field_value">the field_value
</param>
            <returns> the field
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.FieldCreate(System.String,pdftron.PDF.Field.Type,System.String,System.String)">
            <summary> Field create.

</summary>
            <param name="field_name">the field_name
</param>
            <param name="type">the type
</param>
            <param name="field_value">the field_value
</param>
            <param name="def_field_value">the def_field_value
</param>
            <returns> the field
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.FieldCreate(System.String,pdftron.PDF.Field.Type,System.String)">
            <summary> Field create.

</summary>
            <param name="field_name">the field_name
</param>
            <param name="type">the type
</param>
            <param name="field_value">the field_value
</param>
            <returns> the field
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.FieldCreate(System.String,pdftron.PDF.Field.Type)">
            <summary> Create a new interactive form Field.

</summary>
            <param name="field_name">a string representing the fully qualified name of the
field (e.g. "employee.name.first"). field_name must be either a unique name or
equal to an existing terminal field name.
</param>
            <param name="type">field type (e.g. Field::e_text, Field::e_button, etc.)
</param>
            <returns> the new form Field.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetField(System.String)">
            <summary> Gets the field.

</summary>
            <param name="field_name">the field_name
</param>
            <returns> the field
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetFieldIterator(System.String)">
            <summary> field_name - a string representing the fully qualified name of
the field (e.g. "employee.name.first").

</summary>
            <param name="field_name">the field_name
</param>
            <returns> a FieldIterator referring to an interactive Field
or to invalid field if the field name was not found. If a given field name was
not found itr.HasNext() will return false. For example:
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <example>
                <code>
FieldIterator itr = pdfdoc.GetFieldIterator("name");
if (itr.hasNext()) {
string name = itr.current().getName());
}
else { ...field was not found... }
</code>
            </example>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetFieldIterator">
            <summary> An interactive form (sometimes referred to as an AcroForm) is a
collection of fields for gathering information interactively from
the user. A PDF document may contain any number of fields appearing
on any combination of pages, all of which make up a single, global
interactive form spanning the entire document.

The following methods are used to access and manipulate Interactive form
fields (sometimes referred to as AcroForms).

</summary>
            <returns> an iterator to the first Field in the document.

The list of all Fields present in the document can be traversed as follows:
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <example>For a full sample, please refer to 'InteractiveForms' sample project.
<code>  
FieldIterator itr = pdfdoc.getFieldIterator();
for(; itr.hasNext(); itr.next()) {
Field field = itr.current();
string s = field.getName();
}
</code></example>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateIndirectStream(System.Byte[])">
            <summary> Creates the indirect stream.

</summary>
            <param name="buf">the data
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateIndirectStream(System.Byte[],pdftron.Filters.Filter)">
            <summary> Creates the indirect stream.

</summary>
            <param name="buf">the data
</param>
            <param name="filter">the filter_chain
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateIndirectStream(pdftron.Filters.FilterReader)">
            <summary> Creates the indirect stream.

</summary>
            <param name="data">the data
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateIndirectStream(pdftron.Filters.FilterReader,pdftron.Filters.Filter)">
            <summary> Creates the indirect stream.

</summary>
            <param name="data">the data
</param>
            <param name="filter">the filter_chain
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateIndirectString(System.Byte[])">
            <summary> Creates the indirect string.

</summary>
            <param name="buf">the str
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateIndirectString(System.String)">
            <summary> Creates the indirect string.

</summary>
            <param name="value">the value
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateIndirectNumber(System.Double)">
            <summary> Creates the indirect number.

</summary>
            <param name="value">the value
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateIndirectNull">
            <summary> Creates the indirect null.

</summary>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateIndirectDict">
            <summary> Creates the indirect dict.

</summary>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateIndirectBool(System.Boolean)">
            <summary> Creates the indirect bool.

</summary>
            <param name="value">the value
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateIndirectArray">
            <summary> Creates the indirect array.

</summary>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.CreateIndirectName(System.String)">
            <summary> The following list of methods is used to create SDF/Cos indirect objects.

Unlike direct objects, indirect objects can be referenced by more than one
object (i.e. indirect objects they can be shared).

</summary>
            <param name="name">the name
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.SetOpenAction(pdftron.PDF.Action)">
            <summary> Sets the Action that will be triggered when the document is opened.

</summary>
            <param name="action">A new Action that will be triggered when the document is opened.
An example of such action is a GoTo Action that takes the user to a given
location in the document.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetOpenAction">
            <summary>Action that is triggered when the document is opened. The returned action can be either a destination or some other kind of Action (see Section 8.5, 'Actions' in PDF Reference Manual).
</summary>
            <returns>the open action
</returns>
            <remarks>if the document does not nave associated action the returned Action will be null (i.e. Action.IsValid() returns false)
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetPageCount">
            <summary> Gets the page count.

</summary>
            <returns> the number of pages in the document.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetPages">
            <summary> Gets the pages.

</summary>
            <returns> - A dictionary representing the root of the low level page-tree
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetRoot">
            <summary> Gets the root.

</summary>
            <returns> - A dictionary representing the Cos root of the document (/Root entry
within the trailer dictionary)
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetTrailer">
            <summary> Gets the trailer.

</summary>
            <returns> - A dictionary representing the Cos root of the document (document's trailer)
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.AddRootBookmark(pdftron.PDF.Bookmark)">
            <summary> Adds/links the specified Bookmark to the root level of documentï¿½s outline tree.

</summary>
            <param name="root_bookmark">the root_bookmark
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  parameter 'root_bookmark' must not be linked (must not be belong) to 
a bookmark tree.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetFirstBookmark">
            <summary>Gets the first bookmark

</summary>
            <returns>the first Bookmark from the documentï¿½s outline tree. If the Bookmark tree is empty 
the underlying SDF/Cos Object is null and returned Bookmark is not valid (i.e. Bookmark::IsValid() returns false).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.PageCreate(pdftron.PDF.Rect)">
            <summary> Page create.

</summary>
            <param name="media_box">the media_box
</param>
            <returns> the page
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.PageCreate">
            <summary> Create a new, empty page in the document. You can use PageWriter to fill the
page with new content. Finally the page should be inserted at specific
place within document page sequence using PageInsert/PagePushFront/PagePushBack
methods.

</summary>
            <returns> A new, empty page.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the new page still does not belong to document page sequence and should be 
subsequently placed at a specific location within the sequence.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.AppendTextDiff(pdftron.PDF.PDFDoc,pdftron.PDF.PDFDoc)">
            <summary> Imports two external PDFs and highlights the differences between them.
</summary>
            <param name="doc1">the before document, the basis of the comparison
</param>
            <param name="doc2">the after document, to which the basis is compared to
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This function is beta and is subject to change
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.AppendTextDiff(pdftron.PDF.Page,pdftron.PDF.Page)">
            <summary> Imports two external pages and highlights the differences between them.
This function adds two new pages to the current document. The two input
pages are typically coming from two different PDF files.
</summary>
            <param name="page1">the before page, the basis of the comparison
</param>
            <param name="page2">the after page, to which the basis is compared to
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This function is beta and is subject to change
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.ImportPages(System.Collections.ArrayList,System.Boolean)">
            <summary> Import pages.

</summary>
            <param name="pages">the pages
</param>
            <param name="import_bookmarks">the import_bookmarks
</param>
            <returns> the page[]
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.ImportPages(System.Collections.ArrayList)">
            <summary> The function imports a list of pages to this documents. Although a list of pages
can be imported using repeated calls to PageInsert(), PageImport will not import
duplicate copies of resources that are shared across pages (such as fonts, images,
colorspaces etc). Therefore this method is recommended when a page import list
consists of several pages that share the same resources.

</summary>
            <param name="pages">A list of pages to import. All pages should belong to the same source document.
</param>
            <returns> a list of imported pages. Note that imported pages are not placed in the
document page sequence. This can be done using methods such as PageInsert(),
PagePushBack(), etc.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.PagePushBack(pdftron.PDF.Page)">
            <summary> Adds a page to the end of a documents's page sequence.

</summary>
            <param name="page">- a page to append to the document
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Invalidates all PageIterators pointing to the document. </remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.PagePushFront(pdftron.PDF.Page)">
            <summary> Adds a page to the beginning of a documents's page sequence.

</summary>
            <param name="page">- a page to prepend to the document
Invalidates all PageIterators pointing to the document.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.MovePages(System.Int32,pdftron.PDF.PDFDoc,pdftron.PDF.PageSet,pdftron.PDF.PDFDoc.InsertFlag)">
            <summary>Moves a range of pages from specified PDFDoc. Pages are deleted from source document after move.
</summary>
            <param name="moveBeforeThisPage">the destination of the move. If less than or equal to 1, 
the pages are moved to the beginning of the document. If larger than the number of pages 
in the destination document, the pages are moved to the end of the document.
</param>
            <param name="sourceDoc">source PDFDoc to move from</param>
            <param name="sourcePageSet">a collection of the page number to move</param>
            <param name="flag">specifies insert options</param>
            <remarks>MovePages function does not save sourceDoc. It merely delete pages in memeory. For permanent changes,
PDFDoc::Save should be used to save sourceDoc after function exists.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.MovePages(System.Int32,pdftron.PDF.PDFDoc,System.Int32,System.Int32,pdftron.PDF.PDFDoc.InsertFlag)">
            <summary>Moves a range of pages from specified PDFDoc. Pages are deleted from source document after move.
</summary>
            <param name="moveBeforeThisPage">the destination of the move. If less than or equal to 1, 
the pages are moved to the beginning of the document. If larger than the number of pages 
in the destination document, the pages are moved to the end of the document.
</param>
            <param name="sourceDoc">source PDFDoc to move from</param>
            <param name="startPage">start of the page number to move</param>
            <param name="endPage">end of the page number to move</param>
            <param name="flag">specifies insert options</param>
            <remarks>MovePages function does not save sourceDoc. It merely delete pages in memeory. For permanent changes,
PDFDoc::Save should be used to save sourceDoc after function exists.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.InsertPages(System.Int32,pdftron.PDF.PDFDoc,pdftron.PDF.PageSet,pdftron.PDF.PDFDoc.InsertFlag)">
            <summary>Inserts a range of pages from specified PDFDoc using PageSet
</summary>
            <param name="insertBeforeThisPage">the destination of the insertion. If less than or equal to 1, 
the pages are added to the beginning of the document. If larger than the number of pages 
in the destination document, the pages are appended to the document.
</param>
            <param name="sourceDoc">source PDFDoc to insert from</param>
            <param name="sourcePageSet">a collection of the page number to insert</param>
            <param name="flag">specifies insert options</param>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.InsertPages(System.Int32,pdftron.PDF.PDFDoc,System.Int32,System.Int32,pdftron.PDF.PDFDoc.InsertFlag)">
            <summary>Inserts a range of pages from specified PDFDoc
</summary>
            <param name="insertBeforeThisPage">the destination of the insertion. If less than or equal to 1, 
the pages are added to the beginning of the document. If larger than the number of pages 
in the destination document, the pages are appended to the document.
</param>
            <param name="sourceDoc">source PDFDoc to insert from</param>
            <param name="startPage">start of the page number to insert</param>
            <param name="endPage">end of the page number to insert</param>
            <param name="flag">specifies insert options</param>
        </member>
        <member name="F:pdftron.PDF.PDFDoc.InsertFlag.e_insert_goto_bookmark">
            <summary>same as e_insert_bookmark, but ignore GoToR and URI links, while still retaining bookmark hierarchy (use this option when inserting one page at a time).</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDoc.InsertFlag.e_insert_bookmark">
            <summary>insert bookmarks (use this option when inserting many pages in a single call)</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDoc.InsertFlag.e_none">
            <summary>default, do not insert</summary>
        </member>
        <member name="T:pdftron.PDF.PDFDoc.InsertFlag">
            <summary />
        </member>
        <member name="M:pdftron.PDF.PDFDoc.PageInsert(pdftron.PDF.PageIterator,pdftron.PDF.Page)">
            <summary> Insert/Import a single page at a specific location in the page sequence.

</summary>
            <param name="where">- The location in the page sequence indicating where to insert
the page. The page is inserted before the specified location.
</param>
            <param name="page">- A page to insert.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Invalidates all PageIterators pointing to the document. </remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.PageRemove(pdftron.PDF.PageIterator)">
            <summary> Page remove.

</summary>
            <param name="page_itr">- the PageIterator to the page that should be removed
A PageIterator for the given page can be obtained using PDFDoc::Find(page_num)
or using direct iteration through document's page sequence.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetPage(System.Int32)">
            <summary> Gets the page.

</summary>
            <param name="page_num">- the page number in document's page sequence. Page numbers
in document's page sequence are indexed from 1.
</param>
            <returns> a Page corresponding to a given page number, or null (invalid page)
if the document does not contain the given page number.				
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <example>
                <code>  
Page page = pdfdoc.GetPage(page_num);
if (page == null) return; //  Page not found
</code>
            </example>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetPageIterator(System.Int32)">
            <summary> Gets the page iterator.

</summary>
            <param name="page_num">the page_number
</param>
            <returns> the page iterator
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetPageIterator">
            <summary> Gets the page iterator.

</summary>
            <returns> an iterator to the first page in the document.
Use the <c>Next()</c> method on the returned iterator to traverse all pages in the document.
For example:
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <example>
For full sample code, please take a look at ElementReader, PDFPageTest and PDFDraw sample projects.
<code>  
PageIterator itr = pdfdoc.getPageIterator();
while (itr.hasNext()) { //  Read every page
Page page = itr.current();
// ...
itr.next()
}
</code></example>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.Save(System.IO.Stream,pdftron.SDF.SDFDoc.SaveOptions)">
            <summary>Saves the document to a Stream.</summary>
            <param name="stm">A stream where to serialize the document.</param>
            <param name="flags">A bit field composed of an OR of <c>SDF.SDFDoc.SaveOptions</c> values.</param>
            <exception cref="T:pdftron.Common.PDFNetException">PDFNetException the PDFNet exception</exception>
            <remarks> Saving modifies the PDFDoc's internal representation.  As such, the user should
acquire a write lock before calling save.
If the original pdf has a corrupt xref table (see HasRepairedXref or
http://www.pdftron.com/kb_corrupt_xref), then it can not be saved using the e_incremental flag.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.Save(pdftron.SDF.SDFDoc.SaveOptions)">
            <summary>Saves the document to a memory buffer.</summary>
            <returns>Byte array containing the serialized version of the document</returns>
            <param name="flags">A bit field composed of an OR of <c>SDF.SDFDoc.SaveOptions</c> values.</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>this method ignores e_incremental flag</remarks>
            <remarks> Saving modifies the PDFDoc's internal representation.  As such, the user should
acquire a write lock before calling save.
If the original pdf has a corrupt xref table (see HasRepairedXref or
http://www.pdftron.com/kb_corrupt_xref), then it can not be saved using the e_incremental flag.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.Save(System.String,pdftron.SDF.SDFDoc.SaveOptions)">
            <summary> Saves the document to a file.

If a full save is requested to the original path, the file is saved to a file
system-determined temporary file, the old file is deleted, and the temporary file
is renamed to path.

A full save with remove unused or linearization option may re-arrange object in
the cross reference table. Therefore all pointers and references to document objects
and resources should be re acquired in order to continue document editing.

In order to use incremental save the specified path must match original path and
e_incremental flag bit should be set.

</summary>
            <param name="path">- The full path name to which the file is saved.
</param>
            <param name="flags">- A bit field composed of an OR of Doc::SaveOptions values.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> Saving modifies the PDFDoc's internal representation.  As such, the user should
acquire a write lock before calling save. 
If the original pdf has a corrupt xref table (see HasRepairedXref or
http://www.pdftron.com/kb_corrupt_xref), then it can not be saved using the e_incremental flag.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.IsTagged">
            <summary> Checks if is tagged.

</summary>
            <returns> true if this document is marked as Tagged PDF, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.IsLinearized">
            <summary> Call this function to determine whether the document is represented in
linearized (fast web view) format.

</summary>
            <returns> - true if document is stored in fast web view format, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  any changes to the document can invalidate linearization. The function will
return 'true' only if the original document is linearized and if it is not
modified.

In order to provide good performance over relatively slow communication links,
PDFNet can generate PDF documents with linearized objects and hint tables that
can allow a PDF viewer application to download and view one page of a PDF file
at a time, rather than requiring the entire file (including fonts and images) to
be downloaded before any of it can be viewed.

To save a document in linearized (fast web view) format you only need to pass
'Doc.SaveOptions.e_linearized' flag in the Save method.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.HasRepairedXRef">
            <summary> Checks whether or not the underlying file has an XRef table that had to be repaired
when the file was opened.If the document had an invalid XRef table when opened,
PDFNet will have repaired the XRef table for its working representation of the document.

</summary>
            <returns> - true if document was found to be corrupted, and was repaired, during
opening and has not been saved since.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>If this function returns true, it is not possible to incrementally save the document
(see http://www.pdftron.com/kb_corrupt_xref)</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.IsModified">
            <summary> Call this function to determine whether the document has been modified since
it was last saved.

</summary>
            <returns> - true if document was modified, false otherwise
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetViewPrefs">
            <summary> Gets the view prefs.

</summary>
            <returns> Viewer preferences for this document.

PDFDocViewPrefs is a high-level utility class that can be
used to control the way the document is to be presented on
the screen or in print.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetDocInfo">
            <summary> Gets the doc info.

</summary>
            <returns> The class representing document information metadata.
(i.e. entries in the document information dictionary).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.RemoveSecurity">
            <summary> Removes all security for the document.</summary>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.SetSecurityHandler(pdftron.SDF.SecurityHandler)">
            <summary> The function sets a new SecurityHandler as the current security handler.

</summary>
            <param name="handler">the new security handler
</param>
            <remarks>  Setting a new security handler will not invalidate the access to
the original file and will take effect during document Save().

If the security handler is modified, document will perform a full save
even if e_incremental was given as a flag in Save() method.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.GetSecurityHandler">
            <summary> Gets the security handler.

</summary>
            <returns> Currently selected SecurityHandler.
</returns>
            <remarks>  InitSecurityHandler() should be called before GetSecurityHandler()
in order to initialize the handler.

Returned security handler can be modified in order to change the
security settings of the existing document. Changes to the current handler
will not invalidate the access to the original file and will take effect
during document Save().

If the security handler is modified, document will perform a full save
even if e_incremental was given as a flag in Save() method.</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.InitSecurityHandler">
            <summary> Initializes document's SecurityHandler. This version of InitSecurityHandler()
works with Standard and Custom PDF security and can be used in situations where
the password is obtained dynamically via user feedback. See EncTest sample for
example code.

This function should be called immediately after an encrypted
document is opened. The function does not have any side effects on
documents that are not encrypted.

If the security handler was successfully initialized it can be later obtained
using GetSecurityHandler() method.

</summary>
            <returns> true if the SecurityHandler was successfully initialized (this
may include authentication data collection, verification etc.),
false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.InitSecurityHandler(System.Int32)">
            <summary> Inits the security handler.

</summary>
            <param name="custom_data">the custom_data
</param>
            <returns> true, if successful
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.InitStdSecurityHandler(System.Byte[])">
            <summary>
Initializes document's SecurityHandler using the supplied
password. This version of InitSecurityHandler() assumes that
document uses Standard security and that a password is specified
directly.

This function should be called immediately after an encrypted
document is opened. The function does not have any side effects on
documents that are not encrypted.

If the security handler was successfully initialized, it can be later
obtained using GetSecurityHandler() method.
</summary>
            <param name="passwordBuffer">Specifies the password used to open the document without any user feedback.</param>
            <returns>True if the SecurityHandler was successfully initialized.</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.InitStdSecurityHandler(System.String)">
            <summary> Initializes document's SecurityHandler using the supplied
password. This version of InitSecurityHandler() assumes that
document uses Standard security and that a password is specified
directly.

This function should be called immediately after an encrypted
document is opened. The function does not have any side effects on
documents that are not encrypted.

If the security handler was successfully initialized, it can be later
obtained using GetSecurityHandler() method.

</summary>
            <param name="password">Specifies the password used to open the document without
any user feedback. If you would like to dynamically obtain the password,
you need to derive a custom class from StdSecurityHandler() and use
InitSecurityHandler() without any parameters. See EncTest sample
for example code.
</param>
            <returns> true if the given password successfully unlocked the document,
false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.IsEncrypted">
            <summary> Checks if is encrypted.

</summary>
            <returns> true if the document is/was originally encrypted false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.Close">
            <summary> Closes PDFDoc and release resources		
</summary>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.#ctor(System.Byte[],System.Int32)">
            <summary> Open a SDF/Cos document from a memory buffer.

</summary>
            <param name="buf">a memory buffer containing the serialized document
</param>
            <param name="buf_size">buffer size
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the document should be fully loaded in the memory buffer. </remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.#ctor(System.IO.Stream)">
            <summary> Open an existing PDF document.

</summary>
            <param name="stream">- input stream containing a serialized document. The input stream may be a
random-access file, memory buffer, slow HTTP connection etc.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.#ctor(pdftron.Filters.Filter)">
            <summary> Open an existing PDF document.

</summary>
            <param name="stream">- input stream containing a serialized document. The input stream may be a
random-access file, memory buffer, slow HTTP connection etc.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  if the input stream doesn't support <c>Seek()</c> operation the document will load whole  data stream in memory before parsing. 
In case of linearized PDF, the document may be parsed on-the-fly while it is being loaded in memory. 
Note that since StdFile implements <c>Seek()</c> interface, the document does not have to be fully in memory before it is used.		
Make sure to call <c>InitSecurityHandler()</c> after <c>PDFDoc(...)</c> for encrypted documents. </remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.#ctor(System.String)">
            <summary> Open an existing PDF document.

</summary>
            <param name="filepath">- pathname to the file.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Make sure to call InitSecurityHandler() after PDFDoc(...) in case 
a document is encrypted</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.#ctor(pdftron.SDF.SDFDoc)">
            <summary> Create a PDF document from an existing SDF/Cos document.

</summary>
            <param name="sdfdoc">a pointer to the SDF document. Created PDFDoc will
take the ownership of the low-level document.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  the SDFDoc will become invalid.  If you would
like to access the low level document use GetSDFDoc</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDoc.#ctor">
            <summary> Default constructor. Creates an empty new document.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.PDFDoc">
            <summary> PDFDoc is a high-level class describing a single PDF (Portable Document 
Format) document. Most applications using PDFNet will use this class to 
open existing PDF documents, or to create new PDF documents from scratch.

The class offers a number of entry points into the document. For example,
<list type="bullet"><item><description>To access pages use pdfdoc.getPageIterator() or pdfdoc.PageFind(page_num).</description></item><item><description>To access form fields use pdfdoc.GetFieldIterator(), pdfdoc.GetFieldIterator(name) or pdfdoc.GetField(name).</description></item><item><description>To access document's meta-data use pdfdoc.GetDocInfo().</description></item><item><description>To access the outline tree use pdfdoc.GetFirstBookmark().</description></item><item><description>To access low-level Document Catalog use pdfdoc.GetRoot().</description></item></list>
The class also offers utility methods to slit and merge PDF pages, 
to create new pages, to flatten forms, to change security settings, etc.</summary>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.Finalize">
            <summary> Allows a DigitalSignatureField to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.TimestampOnNextSave(pdftron.PDF.TimestampingConfiguration,pdftron.PDF.VerificationOptions)">
            <summary>
Must be called to prepare a secure PDF-embedded timestamp signature (RFC 3161 
DocTimeStamp) for signing, which is done afterwards by calling Save on the 
document with an e_incremental flag. Throws if document is locked by other 
signatures,  if signature is already signed, or if another signature has already 
been prepared for signing on the next save (because only one signing operation 
can be done per incremental save). Default document permission level is 
e_annotating_formfilling_signing_allowed.
</summary>
            <param name="in_timestamping_config">
Configuration options to store for timestamping.
These will include various items related to contacting a timestamping authority.
Incorrect configuration will result in document Save throwing an exception. 
The usability of a combination of a TimestampingConfiguration and VerificationOptions 
can be checked ahead of time to prevent exceptions by calling TestConfiguration on 
TimestampingConfiguration and passing VerificationOptions.
</param>
            <param name="in_timestamp_response_verification_options">
Options for the timestamp
response verification step (which is required by RFC 3161 to be done as part of 
timestamping). These response verification options should include the root certificate
of the timestamp authority, so that the trust status of the timestamp signature
can be verified. The options that should be passed are the same ones that one expects
the timestamp to be verifiable with in the future (once it is embedded in the document),
except the response verification requires online revocation information whereas
the later verification may not (depending on whether LTV offline verification
information for the timestamp signature gets embedded into the document by that
time). The timestamp response verification step makes sure that (a) the
timestamp response has a success status, which is the only time that this is 
verified in the entire workflow, which prevents embedding an unsuccessful 
response; (b) that it digests the document correctly and is otherwise generally 
verifiable; and (c) that the nonce is correct (which is the only time that this 
is verifiable in the entire workflow) to prevent replay attacks (if it was not 
requested in the TimestampingConfiguration that the nonce mechanism should be 
disabled).
</param>
            <remarks> A failure in timestamp response verification will result in document Save
throwing an exception. It is recommended to use TimestampingConfiguration.TestConfiguration 
with the VerificationOptions ahead of time to avoid this.
</remarks>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.EnableLTVOfflineVerification(pdftron.PDF.VerificationResult)">
            <summary>
Given a successful verification result that required online information to verify trust
(trust verification must have been enabled and successful during the verification),
embeds data into the PDF document that allows the signature to be verified offline.
(This is accomplished using DSS and VRI dictionaries.) When this operation is
successfully completed, one of the two components of secure long term validation (LTV)
will be in place. The other necessary component of secure long term validation is
to make sure to timestamp the document appropriately while the signature
is still verifiable to maintain a chain of unexpired secure timestamps
attesting to the integrity of the document.The verifiability of the signature
should thereafter be maintainable in such a fashion despite any possible
certificate expiry, algorithm compromise, or key compromise that would
have otherwise rendered it invalid if it were to be verified using a time in
the future rather than a securely - signed timestamp - derived time nearer the time
of signing (at which which the signature was verifiable without extra data).
This function, if given a good verification result, is also capable of making timestamp
(DocTimeStamp ETSI.RFC3161) signatures LTV - enabled, which is necessary to do first when
you intend to add another timestamp around an already - timestamped document to extend
or enhance its verifiability (as described above), as per the PDF 2.0 and
ETSI TS 102 778-4 (PAdES Level 4) specifications.
</summary>
            <param name="in_verification_result">a successful verification result containing a successful TrustVerificationResult</param>
            <returns>a boolean status that reflects whether offline verification information was added successfully</returns>
            <remarks> It is necessary to save the document incrementally after this function completes successfully
in order to actually write the LTV data into the document. </remarks>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetCertPathsFromCMS">
            <summary>
Retrieves all constructible certificate paths from an adbe.pkcs7.detached digital signature. The signer 
will always be returned if the signature is CMS-based and not corrupt. Must only be called on 
signed adbe.pkcs7.detached signatures. The order of the certificates in each of the paths returned is as follows: 
the signer will be first, and issuers come after it in order of the issuer of the previous certificate.
The default behaviour is to return a sub-path for each marginal issuer in a max-length path.

</summary>
            <returns>a container of X509Certificate objects.</returns>
            <remarks> This function does not verify the paths. It merely extracts certificates and constructs paths. 
This function only works when the build has support for verification-related APIs. 
</remarks>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetByteRanges">
            <summary>
Retrieves the ranges of byte indices within the document over which this signature is intended to apply/be verifiable.
</summary>
            <returns> a container of byte range objects </returns>
            <remarks> This function does not verify that the signature is valid over its byte
ranges. It merely returns them. This can be useful when a document consists of
multiple incremental revisions, the latter of which may or may not have been
signed, for telling which revisions were actually signed by which signature.
The outputs of this function can also be used to truncate the document at the
end of a signed byte range, in order that the signed document revision may
be retrieved from a document with later incremental revisions. Of course, to
be certain that the signature is valid, it must also then be verified using the
verification API. Also, the caller is responsible for making sure that the
byte ranges returned from this function actually make sense (i.e. fit inside
the document).
</remarks>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetSignerCertFromCMS">
            <summary>
Returns the signing certificate. Must only be called on signed adbe.pkcs7.detached signatures. 
</summary>
            <returns>An X509Certificate object</returns>
            <remarks>This function does not verify the signature. It merely extracts the claimed signing certificate. This function only works when the build has support for verification-related APIs. </remarks>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.IsCertification">
            <summary>
Returns whether or not this signature is a certification.
</summary>
            <returns>a boolean value representing whether or not this signature is a certification</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.Verify(pdftron.PDF.VerificationOptions!System.Runtime.CompilerServices.IsConst)">
            <summary>
Verifies this cryptographic digital signature in the manner specified by the VerificationOptions. EXPERIMENTAL. Digital signature verification is undergoing active development, but currently does not support a number of features. If we are missing a feature that is important to you, or if you have files that do not act as expected, please contact us using one of the following forms: https://www.pdftron.com/form/trial-support/ or https://www.pdftron.com/form/request/
</summary>
            <param name="in_verification_options">The options specifying how to do the verification.</param>
            <returns>A VerificationResult object containing various information about the verifiability of the cryptographic digital signature.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.ClearSignature">
            <summary>
Clears cryptographic signature, if present. Otherwise, does nothing. Do not need to call HasCryptographicSignature before calling this. After clearing, other signatures should still pass validation. Clears the appearance as well.
</summary>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetDocumentPermissions">
            <summary>
If HasCryptographicSignature, returns most restrictive permissions found in any reference entries in this digital signature. Returns Lock-resident (i.e. tentative) permissions otherwise. Throws if invalid permission value is found.
</summary>
            <returns>An enumeration value representing the level of restrictions (potentially) placed on the document by this signature.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetLockedFields">
            <summary>
Returns the fully-qualified names of all fields locked by this signature using the field permissions feature. Retrieves from the digital signature dictionary if the form field HasCryptographicSignature. Otherwise, retrieves from the Lock entry of the digital signature form field. Result is invalidated by any field additions or removals. Does not take document permissions restrictions into account.
</summary>
            <returns> An array of Strings representing the fully-qualified names of all fields locked by this signature.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.IsLockedByDigitalSignature">
            <summary>
Returns whether this digital signature field is locked against modifications by any digital signatures. Can be called when this field is unsigned.
</summary>
            <returns>A boolean representing whether this digital signature field is locked against modifications by any digital signatures in the document.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetSDFObj">
            <summary>Gets the SDFObj.</summary>
            <returns>The underlying SDF/Cos object.</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.CertifyOnNextSaveWithCustomHandler(pdftron.SDF.SignatureHandlerId)">
            <summary>Must be called to prepare a signature for certification, which is done afterwards by calling Save. Throws if document already certified. Default document permission level is e_annotating_formfilling_signing_allowed. Throws if signature field already has a digital signature dictionary.</summary>
            <param name="in_signature_handler_id">The unique id of the signature handler to use to certify this digital signature.</param>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.CertifyOnNextSave(System.Byte[],System.String)">
            <summary>Must be called to prepare a signature for certification, which is done afterwards by calling Save. Throws if document already certified. Default document permission level is e_annotating_formfilling_signing_allowed. Throws if signature field already has a digital signature dictionary.</summary>
            <param name="in_pkcs12_buffer">A buffer of bytes containing the PKCS #12 private key certificate store to use to sign this digital signature.</param>
            <param name="in_password">The password to use to parse the PKCS #12 buffer.</param>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.CertifyOnNextSave(System.String,System.String)">
            <summary>
Must be called to prepare a signature for certification, which is done afterwards by calling Save. Throws if document already certified. Default document permission level is e_annotating_formfilling_signing_allowed. Throws if signature field already has a digital signature dictionary.
</summary>
            <param name="in_pkcs12_keyfile_path">The path to the PKCS 12 keyfile to use to certify this digital signature.</param>
            <param name="in_password">The password to use to parse the PKCS 12 keyfile.</param>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.SignOnNextSaveWithCustomHandler(pdftron.SDF.SignatureHandlerId)">
            <summary>Must be called to prepare a signature for signing, which is done afterwards by calling Save. Cannot sign two signatures during one save (throws). Default document permission level is e_annotating_formfilling_signing_allowed. Throws if signature field already has a digital signature dictionary.</summary>
            <param name="in_signature_handler_id">The unique id of the signature handler to use to sign this digital signature.</param>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.SignOnNextSave(System.Byte[],System.String)">
            <summary>Must be called to prepare a signature for signing, which is done afterwards by calling Save. Cannot sign two signatures during one save (throws). Default document permission level is e_annotating_formfilling_signing_allowed. Throws if signature field already has a digital signature dictionary.</summary>
            <param name="in_pkcs12_buffer">A buffer of bytes containing the PKCS #12 private key certificate store to use to sign this digital signature.</param>
            <param name="in_password">The password to use to parse the PKCS #12 buffer.</param>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.SignOnNextSave(System.String,System.String)">
            <summary>
Must be called to prepare a signature for signing, which is done afterwards by calling Save. Cannot sign two signatures during one save (throws). Default document permission level is e_annotating_formfilling_signing_allowed. Throws if signature field already has a digital signature dictionary.
</summary>
            <param name="in_pkcs12_keyfile_path">The path to the PKCS 12 keyfile to use to sign this digital signature.</param>
            <param name="in_password">The password to use to parse the PKCS 12 keyfile.</param>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.SetFieldPermissions(pdftron.PDF.DigitalSignatureField.FieldPermissions,System.String[])">
            <summary>Tentatively sets which fields are to be locked by this digital signature upon signing. It is not necessary to call HasCryptographicSignature before using this function. Throws if non-empty array of field names is passed along with FieldPermissions Action == e_lock_all. </summary>
            <param name="in_action">An enumerated value representing which sort of field locking should be done. Options are All (lock all fields), Include (lock listed fields), and Exclude (lock all fields except listed fields).</param>
            <param name="in_field_names">A list of field names; can be empty (and must be empty, if Action is set to All). Empty by default.</param>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.SetDocumentPermissions(pdftron.PDF.DigitalSignatureField.DocumentPermissions)">
            <summary>
Sets the document locking permission level for this digital signature field. Call only on unsigned signatures, otherwise a valid hash will be invalidated.
</summary>
            <param name="in_perms">An enumerated value representing the document locking permission level to set.</param>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.SetReason(System.String)">
            <summary>
Should not be called when SubFilter is ETSI.RFC3161 (i.e. on a DocTimeStamp). Sets the Reason entry in the digital signature dictionary. Must create a digital signature dictionary first using [Certify/Sign]OnNextSave[WithCustomHandler]. If this function is called on a digital signature field that has already been cryptographically signed with a valid hash, the hash will no longer be valid, so do not call Save (to sign/create the hash) until after you call this function, if you need to call this function in the first place. Essentially, call this function after [Certify/Sign]OnNextSave[WithCustomHandler] and before Save.
</summary>
            <param name="in_reason">A string containing the Reason to be set.</param>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.SetLocation(System.String)">
            <summary>
Should not be called when SubFilter is ETSI.RFC3161 (i.e. on a DocTimeStamp). Sets the Location entry in the digital signature dictionary. Must create a digital signature dictionary first using [Certify/Sign]OnNextSave[WithCustomHandler]. If this function is called on a digital signature field that has already been cryptographically signed with a valid hash, the hash will no longer be valid, so do not call Save (to sign/create the hash) until after you call this function, if you need to call this function in the first place. Essentially, call this function after [Certify/Sign]OnNextSave[WithCustomHandler] and before Save.
</summary>
            <param name="in_location">A string containing the Location to be set.</param>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.SetContactInfo(System.String)">
            <summary>
Should not be called when SubFilter is ETSI.RFC3161 (i.e. on a DocTimeStamp). Sets the ContactInfo entry in the digital signature dictionary. Must create a digital signature dictionary first using [Certify/Sign]OnNextSave[WithCustomHandler]. If this function is called on a digital signature field that has already been cryptographically signed with a valid hash, the hash will no longer be valid, so do not call Save (to sign/create the hash) until after you call this function, if you need to call this function in the first place. Essentially, call this function after [Certify/Sign]OnNextSave[WithCustomHandler] and before Save.
</summary>
            <param name="in_contact_info">A string containing the ContactInfo to be set.</param>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.HasVisibleAppearance">
            <summary>
Returns whether the field has a visible appearance. Can be called without checking HasCryptographicSignature first, since it operates on the surrounding Field dictionary, not the "V" entry (i.e. digital signature dictionary). Performs the zero-width+height check, the Hidden bit check, and the NoView bit check as described by the PDF 2.0 specification, section 12.7.5.5 "Signature fields".
</summary>
            <returns>A boolean representing whether or not the signature field has a visible signature.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetCertCount">
            <summary>
Gets number of certificates in certificate chain (Cert entry of digital signature dictionary). Must call HasCryptographicSignature first and use it to check whether the signature is signed.
</summary>
            <returns>An integer value - the number of certificates in the Cert entry of the digital signature dictionary.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetCert(System.Int32)">
            <summary>
Gets a certificate in the certificate chain (Cert entry) of the digital signature dictionary by index. Throws if Cert is not Array or String, throws if index is out of range and Cert is Array, throws if index is less than 1 and Cert is string, otherwise retrieves the certificate.
</summary>
            <param name="in_index">  -- An integral index which must be greater than 0 and less than the cert count as retrieved using GetCertCount.</param>
            <returns>A vector of bytes containing the certificate at the index. Returns empty vector if Cert is missing.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetContactInfo">
            <summary>
Should not be called when SubFilter is ETSI.RFC3161 (i.e. on a DocTimeStamp). Returns the contact information of the signer from the digital signature dictionary. Must call HasCryptographicSignature first and use it to check whether the signature is signed.
</summary>
            <returns>A unicode string containing the contact information of the signer from within the digital signature dictionary. Empty if ContactInfo entry not present.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetReason">
            <summary>
Should not be called when SubFilter is ETSI.RFC3161 (i.e. on a DocTimeStamp). Returns the Reason for the signature from the digital signature dictionary. Must call HasCryptographicSignature first and use it to check whether the signature is signed.
</summary>
            <returns>A unicode string containing the reason for the signature from within the digital signature dictionary. Empty if Reason entry not present.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetLocation">
            <summary>
Should not be called when SubFilter is ETSI.RFC3161 (i.e. on a DocTimeStamp). Returns the Location of the signature from the digital signature dictionary. Must call HasCryptographicSignature first and use it to check whether the signature is signed.
</summary>
            <returns>A unicode string containing the signing location from within the digital signature dictionary. Empty if Location entry not present.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetSigningTime">
            <summary>Should not be called when SubFilter is ETSI.RFC3161 (i.e. on a DocTimeStamp). 
Returns the "M" entry from the digital signature dictionary, which represents the 
signing date/time. Must call HasCryptographicSignature first and use it to check whether the 
signature is signed. </summary>
            <returns>A PDF::Date object holding the signing date/time from within the digital signature dictionary. Returns a default-constructed PDF::Date if no date is present.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetSignatureName">
            <summary>
Should not be called when SubFilter is ETSI.RFC3161 (i.e. on a DocTimeStamp). Returns the name of the signer of the signature from the digital signature dictionary. Must call HasCryptographicSignature first and use it to check whether the signature is signed.
</summary>
            <returns>A unicode string containing the name of the signer from within the digital signature dictionary. Empty if Name entry not present.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.GetSubFilter">
            <summary>
Returns the SubFilter type of the digital signature. Specification says that one must check the SubFilter before using various getters. Must call HasCryptographicSignature first and use it to check whether the signature is signed.
</summary>
            <returns>An enumeration describing what the SubFilter of the digital signature is from within the digital signature dictionary.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.HasCryptographicSignature">
            <summary>
Returns whether the digital signature field has been cryptographically signed. Checks whether there is a digital signature dictionary in the field and whether it has a Contents entry. Must be called before using various digital signature dictionary-related functions. Does not check validity - will return true even if a valid hash has not yet been generated (which will be the case after [Certify/Sign]OnNextSave[WithCustomHandler] has been called on the signature but even before Save is called on the document).
</summary>
            <returns>A boolean value representing whether the digital signature field has a digital signature dictionary with a Contents entry.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.op_Assign(pdftron.PDF.DigitalSignatureField)">
            <summary>Assignment operator</summary>
            <param name="r">a DigitalSignatureField object</param>
            <returns>a DigitalSignatureField object equal to the one passed in</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.Set(pdftron.PDF.DigitalSignatureField)">
            <summary>Sets this DigitalSignatureField equal to a given DigitalSignatureField</summary>
            <param name="p">a DigitalSignatureField object</param>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureField.#ctor(pdftron.PDF.Field)">
            <summary> Constructs a DigitalSignatureField from a Field.
</summary>
            <param name="field" />
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.DigitalSignatureField">
            <summary>
A class representing a digital signature form field.
</summary>
        </member>
        <member name="M:pdftron.PDF.PageSet.Finalize">
            <summary> Allows a PageSet to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.PageSet.AddRange(System.Int32,System.Int32,pdftron.PDF.PageSet.Filter)">
            <summary> Add a range of values to the sequence. Reverse ordering is legal.

</summary>
            <param name="range_start">The low value in the range
</param>
            <param name="range_end">The high value in the range
</param>
            <param name="filter">page set filter type		
</param>
        </member>
        <member name="M:pdftron.PDF.PageSet.AddRange(System.Int32,System.Int32)">
            <summary> Add a range of values to the sequence. Reverse ordering is legal.

</summary>
            <param name="range_start">The low value in the range
</param>
            <param name="range_end">The high value in the range
</param>
        </member>
        <member name="M:pdftron.PDF.PageSet.AddPage(System.Int32)">
            <summary> Add a value to the sequence.

</summary>
            <param name="one_page">The page number being added
</param>
        </member>
        <member name="M:pdftron.PDF.PageSet.Dispose">
            <summary> Releases all resources used by the PageSet </summary>
        </member>
        <member name="M:pdftron.PDF.PageSet.#ctor(System.Int32,System.Int32,pdftron.PDF.PageSet.Filter)">
            <summary> Construct a filtered range of pages.

</summary>
            <param name="range_start">the range_start
</param>
            <param name="range_end">the range_end
</param>
            <param name="filter">the filter
</param>
            <seealso cref="M:pdftron.PDF.PageSet.AddRange(System.Int32,System.Int32,pdftron.PDF.PageSet.Filter)" />
        </member>
        <member name="M:pdftron.PDF.PageSet.#ctor(System.Int32,System.Int32)">
            <summary> Construct a range of pages.

</summary>
            <param name="range_start">the range_start
</param>
            <param name="range_end">the range_end
</param>
            <seealso cref="M:pdftron.PDF.PageSet.AddRange(System.Int32,System.Int32,pdftron.PDF.PageSet.Filter)" />
        </member>
        <member name="M:pdftron.PDF.PageSet.#ctor(System.Int32)">
            <summary> Construct a set of pages with just one number.

</summary>
            <param name="one_page">the one_page
</param>
            <seealso cref="M:pdftron.PDF.PageSet.AddPage(System.Int32)" />
        </member>
        <member name="M:pdftron.PDF.PageSet.#ctor">
            <summary> Default constructor. Constructs 'PageSet' with no pages</summary>
        </member>
        <member name="F:pdftron.PDF.PageSet.Filter.e_odd">
            <summary>even numbers in the range (discards odd numbers)</summary>
        </member>
        <member name="F:pdftron.PDF.PageSet.Filter.e_even">
            <summary>odd numbers in the range (discards even numbers)</summary>
        </member>
        <member name="F:pdftron.PDF.PageSet.Filter.e_all">
            <summary>all pages in the range</summary>
        </member>
        <member name="T:pdftron.PDF.PageSet.Filter">
            <summary>PageSet filters</summary>
        </member>
        <member name="T:pdftron.PDF.PageSet">
            <summary> PageSet is a container of page numbers ordered following a linear sequence. 
The page numbers are integers and must be greater than zero. Duplicates are allowed.
</summary>
            <remarks>This is not a mathematical set</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.Finalize">
            <summary> Allows a PDFDocViewPrefs to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.Dispose">
            <summary> Releases all resources used by the PDFDocViewPrefs </summary>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> documentï¿½s SDF/Cos 'ViewerPreferences' dictionary
or NULL if the object is not present.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.GetPrintClip">
            <summary> Gets the prints the clip.

</summary>
            <returns> the page boundary to which the contents of a page
are to be clipped when printing the document.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.SetPrintClip(pdftron.PDF.Page.Box)">
            <summary> Sets the page boundary to which the contents of a page are
to be clipped when printing the document.

</summary>
            <param name="box">printing clip region. The default value is page
crop-box.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.GetPrintArea">
            <summary> Gets the prints the area.

</summary>
            <returns> the page boundary representing the area of a page
to be rendered when printing the document.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.SetPrintArea(pdftron.PDF.Page.Box)">
            <summary> Sets the page boundary representing the area of a page to
be rendered when printing the document.

</summary>
            <param name="box">printing region. The default value is page
crop-box.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.GetViewClip">
            <summary> Gets the view clip.

</summary>
            <returns> the page boundary to which the contents of a page
are to be clipped when viewing the document on the screen.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.SetViewClip(pdftron.PDF.Page.Box)">
            <summary> Sets the page boundary to which the contents of a page are
to be clipped when viewing the document on the screen.

</summary>
            <param name="box">screen clip region. The default value is
page crop-box.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.GetViewArea">
            <summary> Gets the view area.

</summary>
            <returns> the page boundary representing the area of a page
to be displayed when viewing the document on the screen.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.SetViewArea(pdftron.PDF.Page.Box)">
            <summary> Sets the page boundary representing the area of a page
to be displayed when viewing the document on the screen.

</summary>
            <param name="box">page boundary displayed when viewing the document
on the screen. By defualt, PDF viewers will display the
crop-box.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.GetDirection">
            <summary> Gets the direction.

</summary>
            <returns> true is the predominant reading order for text
is left to right, false otherwise. See SetDirection() for
more information.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.SetDirection(System.Boolean)">
            <summary> Sets the predominant reading order for text.

This flag has no direct effect on the documentï¿½s contents
or page numbering but can be used to determine the relative
positioning of pages when displayed side by side or
printed n-up.

</summary>
            <param name="left_to_right">- true if the predominant reading
order for text is from left to right and false if it is
right to left (including vertical writing systems, such
as Chinese, Japanese, and Korean).		
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.GetNonFullScreenPageMode">
            <summary> Gets the non full screen page mode.

</summary>
            <returns> the PageMode used after exiting full-screen mode.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> This entry is meaningful only if the value of the 
PageMode is set to e_FullScreen; it is ignored otherwise.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.SetNonFullScreenPageMode(pdftron.PDF.PDFDocViewPrefs.PageMode)">
            <summary> Set the documentï¿½s page mode, specifying how to display the
document on exiting full-screen mode.

</summary>
            <param name="mode">PageMode used after exiting full-screen mode.
Default value: e_UseNone.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> This entry is meaningful only if the value of the 
PageMode is set to e_FullScreen; it is ignored otherwise.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.GetPref(pdftron.PDF.PDFDocViewPrefs.ViewerPref)">
            <summary> Gets the pref.

</summary>
            <param name="pref">the ViewerPref property type to query.
</param>
            <returns> the value of given ViewerPref property.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.SetPref(pdftron.PDF.PDFDocViewPrefs.ViewerPref,System.Boolean)">
            <summary> Sets the value of given ViewerPref property.		
</summary>
            <param name="pref">the ViewerPref property type to modifiy.
</param>
            <param name="value">The new value for the property.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.ViewerPref.e_DisplayDocTitle">
            <summary>A flag specifying whether the windowï¿½s 
title bar should display the document title taken from the 
Title entry of the document information dictionary. 
If false, the title bar should instead display the name of 
the PDF file containing the document.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.ViewerPref.e_CenterWindow">
            <summary>A enumerator specifying whether to resize the 
documentï¿½s window to fit the size of the first displayed 
page.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.ViewerPref.e_FitWindow">
            <summary>A enumerator specifying whether to resize the 
documentï¿½s window to fit the size of the first displayed 
page.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.ViewerPref.e_HideWindowUI">
            <summary>A enumerator specifying whether to hide user 
interface elements in the documentï¿½s window (such as scroll 
bars and navigation controls), leaving only the documentï¿½s 
contents displayed</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.ViewerPref.e_HideMenubar">
            <summary>A enumerator specifying whether to hide the viewer 
applicationï¿½s menu bar when the document is active. </summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.ViewerPref.e_HideToolbar">
            <summary>A enumerator specifying whether to hide the 
viewer applicationï¿½s toolbars when the document is active. </summary>
        </member>
        <member name="T:pdftron.PDF.PDFDocViewPrefs.ViewerPref">
            <summary> ViewerPref enumeration specifies how various GUI elements 
should behave when the document is opened.</summary>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.GetLayoutMode">
            <summary> Gets the layout mode.

</summary>
            <returns> The value of currently selected PageLayout property.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.SetLayoutMode(pdftron.PDF.PDFDocViewPrefs.PageLayout)">
            <summary> Sets PageLayout property and change the value of the
PageLayout key in the Catalog dictionary.

</summary>
            <param name="layout">the new layout mode
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.PageLayout.e_TwoPageRight">
            <summary>Display the pages two at a time, with 
odd-numbered pages on the right.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.PageLayout.e_TwoPageLeft">
            <summary>Display the pages two at a time, with 
odd-numbered pages on the left.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.PageLayout.e_TwoColumnRight">
            <summary>Display the pages in two-column 
continuous mode with first page on right (i.e. all odd 
numbered pages on the right).</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.PageLayout.e_TwoColumnLeft">
            <summary>Display the pages in two-column continuous 
mode with first page on left (i.e. all odd numbered pages 
on the left).</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.PageLayout.e_OneColumn">
            <summary>Display the pages in one-column 
mode.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.PageLayout.e_SinglePage">
            <summary>Display one page at a time </summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.PageLayout.e_Default">
            <summary>PageLayout is not explicitly specified, use user defined
preferred layout.</summary>
        </member>
        <member name="T:pdftron.PDF.PDFDocViewPrefs.PageLayout">
            <summary> PageLayout specifies the page layout to be used when the
document is opened</summary>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.GetPageMode">
            <summary> Gets the page mode.

</summary>
            <returns> The value of currently selected PageMode property.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.SetPageMode(pdftron.PDF.PDFDocViewPrefs.PageMode)">
            <summary> Sets PageMode property and change the value of the
PageMode key in the Catalog dictionary.

</summary>
            <param name="mode">New PageMode setting. Default value is e_UseNone.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.PageMode.e_UseAttachments">
            <summary>Displays attachments panel.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.PageMode.e_UseOC">
            <summary>Displays Optional Content (OC) group panel.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.PageMode.e_FullScreen">
            <summary>Displays document in full-screen viewing mode.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.PageMode.e_UseBookmarks">
            <summary>Displays document plus bookmarks.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.PageMode.e_UseThumbs">
            <summary>Displays document plus thumbnails.</summary>
        </member>
        <member name="F:pdftron.PDF.PDFDocViewPrefs.PageMode.e_UseNone">
            <summary>Displays document, but neither thumbnails nor 
bookmarks.</summary>
        </member>
        <member name="T:pdftron.PDF.PDFDocViewPrefs.PageMode">
            <summary> PageMode specifies how the document should be displayed
when opened</summary>
        </member>
        <member name="M:pdftron.PDF.PDFDocViewPrefs.SetInitialPage(pdftron.PDF.Destination)">
            <summary> A utility method used to set the fist page displayed after
the document is opened. This method is equivalent to
<c>PDFDoc::SetOpenAction(goto_action)</c>

If OpenAction is not specified the document should be
opened to the top of the first page at the default magnification
factor.		
</summary>
            <param name="dest">A value specifying the page destination to be
displayed when the document is opened.		
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <example>
                <code>  
Destination dest = Destination::CreateFit(page);
pdfdoc.GetViewPrefs().SetInitialPage(dest);
</code>
            </example>
        </member>
        <member name="T:pdftron.PDF.PDFDocViewPrefs">
            <summary> PDFDocViewPrefs is a high-level utility class that can be 
used to control the way the document is to be presented on 
the screen or in print.

PDFDocViewPrefs class corresponds to PageMode, PageLayout, and
ViewerPreferences entries in the documentï¿½s catalog. For more 
details please refer to section 8.1 'Viewer Preferences' in 
PDF Reference Manual.
</summary>
        </member>
        <member name="M:pdftron.PDF.PageLabel.Finalize">
            <summary> Allows a PageLabel to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.PageLabel.Dispose">
            <summary> Releases all resources used by the PageLabel </summary>
        </member>
        <member name="M:pdftron.PDF.PageLabel.GetSDFObj">
            <summary> Gets the sDF obj.

</summary>
            <returns> The pointer to the underlying SDF/Cos object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PageLabel.GetLastPageNum">
            <summary> Gets the last page num.

</summary>
            <returns> the last page in the range associated with this label
or -1 if the label is not associated with any page.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PageLabel.GetFirstPageNum">
            <summary> Gets the first page num.

</summary>
            <returns> the first page in the range associated with this label
or -1 if the label is not associated with any page.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PageLabel.SetStart(System.Int32)">
            <summary> Sets the start.

</summary>
            <param name="start_at">the value to use when generating the numeric
portion of the first label in this range; must be greater than
or equal to 1.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PageLabel.GetStart">
            <summary> Gets the start.

</summary>
            <returns> the value to use when generating the numeric portion of
the first label in this range; must be greater than or equal to 1.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PageLabel.SetPrefix(System.String)">
            <summary> Sets the prefix.

</summary>
            <param name="prefix">the string used to prefix the numeric portion of
the page label.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PageLabel.GetPrefix">
            <summary> Gets the prefix.

</summary>
            <returns> the string used to prefix the numeric portion of
the page label
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PageLabel.GetStyle">
            <summary> Gets the style.

</summary>
            <returns> page numbering style.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PageLabel.SetStyle(pdftron.PDF.PageLabel.Style)">
            <summary> Sets the numbering style for the label.

</summary>
            <param name="style">the numbering style for the label.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>
You may use label style to customize the page numbering schemes
used throughout a document. There are three numbering formats:
<list style="bullet"><item><description>
decimal (often used for normal page ranges)
</description></item><item><description>
roman (often used for front matter such as a preface)
</description></item><item><description>
alphabetic (often used for back matter such as appendices)
</description></item></list>
There is no default numbering style; if no 'S' (Style) entry is present,
page labels consist solely of a label prefix with no numeric portion.
</remarks>
        </member>
        <member name="M:pdftron.PDF.PageLabel.GetLabelTitle(System.Int32)">
            <summary>Gets full tittle of the page label

</summary>
            <param name="page_num">page number
</param>
            <returns> the full label title that is in effect for the given page. If there is no label object in effect, this method returns an empty string.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PageLabel.IsValid">
            <summary> Checks if is valid.

</summary>
            <returns> whether this is a valid (non-null) PageLabel. If the
function returns false the underlying SDF/Cos object is null or is
not valid and the PageLabel object should be treated as null as well.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PageLabel.#ctor(pdftron.SDF.Obj)">
            <summary> Instantiates a new page label.

</summary>
            <param name="obj">the l
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PageLabel.Create(pdftron.SDF.SDFDoc,pdftron.PDF.PageLabel.Style,System.String,System.Int32)">
            <summary> Creates a new PageLabel.

</summary>
            <param name="doc">A document to which the page label is added.
</param>
            <param name="style">The numbering style for the label.
</param>
            <param name="prefix">page label prefix
</param>
            <param name="start_at">start at position
</param>
            <returns> newly created PageLabel object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.PageLabel.Style.e_none">
            <summary>No numeric portion in the label</summary>
        </member>
        <member name="F:pdftron.PDF.PageLabel.Style.e_alphabetic_lowercase">
            <summary>Lowercase letters (a to z for the first 26 pages, aa to zz for the next 26, and so on)</summary>
        </member>
        <member name="F:pdftron.PDF.PageLabel.Style.e_alphabetic_uppercase">
            <summary>Uppercase letters (A to Z for the first 26 pages, AA to ZZ for the next 26, and so on)</summary>
        </member>
        <member name="F:pdftron.PDF.PageLabel.Style.e_roman_lowercase">
            <summary>Lowercase roman numerals</summary>
        </member>
        <member name="F:pdftron.PDF.PageLabel.Style.e_roman_uppercase">
            <summary>Uppercase roman numerals</summary>
        </member>
        <member name="F:pdftron.PDF.PageLabel.Style.e_decimal">
            <summary>Decimal Arabic numerals</summary>
        </member>
        <member name="T:pdftron.PDF.PageLabel.Style">
            <summary>The numbering style to be used for the numeric portion of page label.</summary>
        </member>
        <member name="T:pdftron.PDF.PageLabel">
            <summary>
                <para>PDF page labels can be used to describe a page. This is used to 
allow for non-sequential page numbering or the addition of arbitrary 
labels for a page (such as the inclusion of Roman numerals at the 
beginning of a book). PDFNet PageLabel object can be used to specify 
the numbering style to use (for example, upper- or lower-case Roman, 
decimal, and so forth), the starting number for the first page,
and an arbitrary prefix to be pre-appended to each number (for 
example, "A-" to generate "A-1", "A-2", "A-3", and so forth.)
</para>
                <para>
                    <c>PageLabel</c> corresponds to the PDF Page Label object (Section 8.3.1, 
'Page Labels' in the PDF Reference Manual.
</para>
                <para>
Each page in a PDF document is identified by an integer page index 
that expresses the pageï¿½s relative position within the document. 
In addition, a document may optionally define page labels to identify 
each page visually on the screen or in print. Page labels and page 
indices need not coincide: the indices are fixed, running consecutively 
through the document starting from 1 for the first page, but the 
labels can be specified in any way that is appropriate for the particular
document. For example, if the document begins with 12 pages of front 
matter numbered in roman numerals and the remainder of the document is 
numbered in Arabic, the first page would have a page index of 1 and a 
page label of i, the twelfth page would have index 12 and label xii, 
and the thirteenth page would have index 13 and label 1.
</para>
                <para>
For purposes of page labeling, a document can be divided into labeling 
ranges, each of which is a series of consecutive pages using the same 
numbering system. Pages within a range are numbered sequentially in 
ascending order. A page's label consists of a numeric portion based 
on its position within its labeling range, optionally preceded by a 
label prefix denoting the range itself. For example, the pages in an 
appendix might be labeled with decimal numeric portions prefixed with 
the string "A-" and the resulting page labels would be "A-1", "A-2", 
</para>	

There is no default numbering style; if no 'S' (Style) entry is present, 
page labels consist solely of a label prefix with no numeric portion. 
For example, if the 'P' entry (Prefix) specifies the label prefix 
"Appendix", each page is simply labeled "Appendix" with no page number. 
If the 'P' entry is also missing or empty, the page label is an empty 
string.

<example>
Sample code (See PableLabelsTest sample project for examples):	
  
Create a page labeling scheme that starts with the first page in 
the document (page 1) and is using uppercase roman numbering 
style. 

<code> doc.SetPageLabel(1, PageLabel::Create(doc, PageLabel::e_roman_uppercase, "My Prefix ", 1)); </code>

Create a page labeling scheme that starts with the fourth page in 
the document and is using decimal arabic numbering style. 
Also the numeric portion of the first label should start with number 
4 (otherwise the first label would be "My Prefix 1"). 
<code>
PageLabel L2 = PageLabel::Create(doc, PageLabel::e_decimal, "My Prefix ", 4);
doc.SetPageLabel(4, L2);
</code>

Create a page labeling scheme that starts with the seventh page in 
the document and is using alphabetic numbering style. The numeric 
portion of the first label should start with number 1. 
<code>
PageLabel L3 = PageLabel::Create(doc, PageLabel::e_alphabetic_uppercase, "My Prefix ", 1);
doc.SetPageLabel(7, L3);
</code>

Read page labels from an existing PDF document.
<code>
PageLabel label = new PageLabel();
for (int i=1; i&lt;=doc.GetPageCount(); ++i) {
label = doc.GetPageLabel(i);
if (label.IsValid()) {
string title = label.GetLabelTitle(i);
}
</code></example></summary>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.Finalize">
            <summary> Allows a PDFDocInfo to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.Dispose">
            <summary> Releases all resources used by the PDFDocInfo </summary>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> documentï¿½s SDF/Cos 'Info' dictionary or NULL if
the info dictionary is not available.
</returns>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.SetModDate(pdftron.PDF.Date)">
            <summary> Set documentï¿½s modification date.

</summary>
            <param name="mod_date">The date and time the document was most
recently modified.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetModDate">
            <summary>Gets the mod date.

</summary>
            <returns>date and time the document was most recently modified, in human-readable form.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.SetCreationDate(pdftron.PDF.Date)">
            <summary> Set documentï¿½s creation date.

</summary>
            <param name="creation_date">The date and time the document was created.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetCreationDate">
            <summary>Gets the creation date.			
</summary>
            <returns>date and time the document was created, in human-readable form.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.SetProducer(System.String)">
            <summary> Set documentï¿½s producer.

</summary>
            <param name="producer">The name of the application that generated PDF.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetProducerObj">
            <summary> Gets the producer obj.

</summary>
            <returns> SDF/Cos string object representing document's producer.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetProducer">
            <summary> Gets the producer.

</summary>
            <returns> If the document was converted to PDF from another format,
the name of the application (for example, Distiller) that
converted it to PDF.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.SetCreator(System.String)">
            <summary> Set documentï¿½s creator.

</summary>
            <param name="creator">The name of the application that created
the original document.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetCreatorObj">
            <summary> Gets the creator obj.

</summary>
            <returns> SDF/Cos string object representing document's creator.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetCreator">
            <summary> Gets the creator.

</summary>
            <returns> If the document was converted to PDF from another
format, the name of the application that created the original
document from which it was converted.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.SetKeywords(System.String)">
            <summary> Set keywords associated with the document.

</summary>
            <param name="keywords">the new keywords
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetKeywordsObj">
            <summary> Gets the keywords obj.

</summary>
            <returns> SDF/Cos string object representing document's keywords.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetKeywords">
            <summary> Gets the keywords.

</summary>
            <returns> Keywords associated with the document.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.SetSubject(System.String)">
            <summary> Set the subject of the document.

</summary>
            <param name="subject">The subject of the document.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetSubjectObj">
            <summary> Gets the subject obj.

</summary>
            <returns> SDF/Cos string object representing document's subject.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetSubject">
            <summary> Gets the subject.

</summary>
            <returns> The subject of the document.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.SetAuthor(System.String)">
            <summary> Set the author of the document.

</summary>
            <param name="author">the new author
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetAuthorObj">
            <summary> Gets the author obj.

</summary>
            <returns> SDF/Cos string object representing document's author.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetAuthor">
            <summary> Gets the author.

</summary>
            <returns> The name of the person who created the document.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.SetTitle(System.String)">
            <summary> Set documentï¿½s title.

</summary>
            <param name="title">New title of the document.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetTitleObj">
            <summary> Gets the title obj.

</summary>
            <returns> SDF/Cos string object representing document's title.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.PDFDocInfo.GetTitle">
            <summary> Gets the title.

</summary>
            <returns> The documentï¿½s title.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.PDFDocInfo">
            <summary> PDFDocInfo is a high-level utility class that can be used 
to read and modify document's metadata.
</summary>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureFieldIterator.Finalize">
            <summary> Allows a DigitalSignatureFieldIterator to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureFieldIterator.Dispose">
            <summary> Releases all resources used by the DigitalSignatureFieldIterator </summary>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureFieldIterator.op_Inequality(pdftron.PDF.DigitalSignatureFieldIterator,pdftron.PDF.DigitalSignatureFieldIterator)">
            <summary>Inequality operator checks whether two DigitalSignatureFieldIterator objects are different</summary>
            <param name="l">a <c>DigitalSignatureFieldIterator</c> object on the left of the operator</param>
            <param name="r">a <c>DigitalSignatureFieldIterator</c> object on the right of the operator</param>
            <returns>true, if both objects are not equal</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureFieldIterator.op_Equality(pdftron.PDF.DigitalSignatureFieldIterator,pdftron.PDF.DigitalSignatureFieldIterator)">
            <summary>Equality operator check whether two DigitalSignatureFieldIterator objects are the same</summary>
            <param name="l">a <c>DigitalSignatureFieldIterator</c> object on the left of the operator</param>
            <param name="r">a <c>DigitalSignatureFieldIterator</c> object on the right of the operator</param>
            <returns>true, if both objects are equal</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureFieldIterator.Equals(System.Object)">
            <summary>Determines if equals to the given object</summary>
            <param name="o">given object</param>
            <returns>true if equals to the given object</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureFieldIterator.HasNext">
            <summary>Determines if the iteration has more elements.</summary>
            <returns>true if the iteration has more elements.</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureFieldIterator.Current">
            <summary>Gets the current <c>DigitalSignatureField</c> object</summary>
            <returns>current <c>DigitalSignatureField</c> object</returns>
        </member>
        <member name="M:pdftron.PDF.DigitalSignatureFieldIterator.Next">
            <summary>iterates to the next object</summary>
        </member>
        <member name="T:pdftron.PDF.DigitalSignatureFieldIterator">
            <summary> DigitalSignatureFieldIterator is an iterator type that can be used to traverse a list 
of digital signature form fields in a PDF document. 
</summary>
        </member>
        <member name="M:pdftron.PDF.FieldIterator.Finalize">
            <summary> Allows a FieldIterator to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.FieldIterator.Dispose">
            <summary> Releases all resources used by the FieldIterator </summary>
        </member>
        <member name="M:pdftron.PDF.FieldIterator.op_Inequality(pdftron.PDF.FieldIterator,pdftron.PDF.FieldIterator)">
            <summary>Inequality operator checks whether two FieldIterator objects are different</summary>
            <param name="l">a <c>Field</c> iterator object on the left of the operator</param>
            <param name="r">a <c>Field</c> iterator object on the right of the operator</param>
            <returns>true, if both objects are not equal</returns>
        </member>
        <member name="M:pdftron.PDF.FieldIterator.op_Equality(pdftron.PDF.FieldIterator,pdftron.PDF.FieldIterator)">
            <summary>Equality operator check whether two FieldIterator objects are the same</summary>
            <param name="l">a <c>Field</c> iterator object on the left of the operator</param>
            <param name="r">a <c>Field</c> iterator object on the right of the operator</param>
            <returns>true, if both objects are equal</returns>
        </member>
        <member name="M:pdftron.PDF.FieldIterator.Equals(System.Object)">
            <summary>Determines if equals to the given object</summary>
            <param name="o">given object</param>
            <returns>true if equals to the given object</returns>
        </member>
        <member name="M:pdftron.PDF.FieldIterator.HasNext">
            <summary>Determines if the iteration has more elements.</summary>
            <returns>true if the iteration has more elements.</returns>
        </member>
        <member name="M:pdftron.PDF.FieldIterator.Current">
            <summary>Get the current <c>Field</c> object</summary>
            <returns>current <c>Field</c> object</returns>
        </member>
        <member name="M:pdftron.PDF.FieldIterator.Next">
            <summary>iterates to the next object</summary>
        </member>
        <member name="T:pdftron.PDF.FieldIterator">
            <summary> FieldIterator is an iterator type that can be used to traverse a list 
form fields in a PDF document. For more information, please PDFDoc.getFieldIterator().
</summary>
        </member>
        <member name="M:pdftron.PDF.Field.Finalize">
            <summary> Allows a Field to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.Field.Dispose">
            <summary> Releases all resources used by the Field </summary>
        </member>
        <member name="M:pdftron.PDF.Field.IsLockedByDigitalSignature">
            <summary>Returns whether modifying this field would invalidate a digital signature in the document.</summary>
            <returns>whether modifying this field would invalidate a digital signature in the document</returns>
        </member>
        <member name="M:pdftron.PDF.Field.UseSignatureHandler(pdftron.SDF.SignatureHandlerId)">
            <summary> Sets the signature handler to use for adding a signature to this field. If the signature handler is not found
in PDFDoc's signature handlers list, this field will not be signed. To add signature handlers, use PDFDoc.AddSignatureHandler
method.
If a signature handler is already assigned to this field and this method is called once again, the associate signature
handler for this field will be updated with the new handler.
</summary>
            <param name="signature_handler_id">The unique id of the SignatureHandler to use for adding signature in this field.</param>
            <returns>The signature dictionary created using the SignatureHandler, or null if the signature handler is not found.</returns>
        </member>
        <member name="M:pdftron.PDF.Field.Flatten(pdftron.PDF.Page)">
            <summary> Flatten/Merge existing form field appearances with the page content and
remove widget annotation.

Form 'flattening' refers to the operation that changes active form fields
into a static area that is part of the PDF document, just like the other
text and images in the document. A completely flattened PDF form does not
have any widget annotations or interactive fields.

</summary>
            <param name="page">the page
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>an alternative approach to set the field as read only is using 
<c>Field.SetFlag(Field::e_read_only, true)</c> method. Unlike <c>Field.SetFlag(...)</c>,
the result of <c>Flatten()</c> operation can not be programatically reversed.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Field.GetMaxLen">
            <summary> Gets the maximum length.

</summary>
            <returns> The maximum length of the field's text, in characters, or a
negative number if the length is not limited.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This method is specific to a text field. </remarks>
        </member>
        <member name="M:pdftron.PDF.Field.SetMaxLen(System.Int32)">
            <summary> Sets the maximum length of the field's text, in characters.

</summary>
            <param name="max_len">the new maximum length
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This method is specific to a text field. </remarks>
        </member>
        <member name="M:pdftron.PDF.Field.SetJustification(pdftron.PDF.Field.TextJustification)">
            <summary> Sets the justification to be used in displaying the text field.

</summary>
            <param name="j">the new justification
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.GetJustification">
            <summary> Gets the justification.

</summary>
            <returns> the form of quadding (justification) to be used in displaying
the text fields.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Field.TextJustification.e_right_justified">
            <summary>right justified style</summary>
        </member>
        <member name="F:pdftron.PDF.Field.TextJustification.e_centered">
            <summary>centered text style</summary>
        </member>
        <member name="F:pdftron.PDF.Field.TextJustification.e_left_justified">
            <summary>left justified text style</summary>
        </member>
        <member name="T:pdftron.PDF.Field.TextJustification">
            <summary>form of quadding (justification) to be used in displaying the text fields.</summary>
        </member>
        <member name="M:pdftron.PDF.Field.SetFlag(pdftron.PDF.Field.Flag,System.Boolean)">
            <summary> Set the value of given FieldFlag.

</summary>
            <param name="flag">the flag
</param>
            <param name="value">the value
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>You can use this method to set the field as read-only. An alternative approach to set the 
field as read only is using <c>Page.Flatten(...)</c> method. Unlike <c>Flatten(...)</c>, the result of <c>SetFlag(...)</c> 
can be programatically reversed.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Field.GetFlag(pdftron.PDF.Field.Flag)">
            <summary> Gets the flag.

</summary>
            <param name="flag">the flag
</param>
            <returns> the value of given field flag
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_commit_on_sel_change">
            <summary>If e_commit_on_sel_change is set, the new value is committed as soon as a 
selection is made with the pointing device. This option enables applications 
to perform an action once a selection is made, without requiring the user
to exit the field. If clear, the new value is not committed until the user
exits the field.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_multiselect">
            <summary>If e_multiselect is set, more than one of the fieldï¿½s option items may be 
selected simultaneously; if clear, no more than one item at a time may be
selected.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_sort">
            <summary>If e_sort is set, the fieldï¿½s option items should be sorted alphabetically. 
This flag is intended for use by form authoring tools, not by PDF viewer 
applications. Viewers should simply display the options in the order in
which they occur in the Opt array.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_edit">
            <summary>If e_edit is set, the combo box includes an editable text box as well as a 
dropdown list; if clear, it includes only a drop-down list. This flag is 
meaningful only if the e_combo flag is set.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_combo">
            <summary>If e_combo is set, the field is a combo box; 
if clear, the field is a list box.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_rich_text">
            <summary>If e_rich_text is set, the value of this field should be represented as a rich 
text string. If the field has a value, the RV entry of the field dictionary 
specifies the rich text string.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_comb">
            <summary>If e_comb is set, the field is automatically divided into as many equally
spaced positions, or combs, as the value of MaxLen, and the text is laid out
into those combs. Meaningful only if the MaxLen entry is present in the text 
field and if the Multiline, Password, and FileSelect flags are clear. </summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_no_scroll">
            <summary>If e_no_scroll is set, the field does not scroll (horizontally for single-line 
fields, vertically for multiple-line fields) to accommodate more text than fits
within its annotation rectangle. Once the field is full, no further text is 
accepted.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_no_spellcheck">
            <summary>If e_no_spellcheck is set, text entered in the field is not spell-checked.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_file_select">
            <summary>If e_file_select is set, the text entered in the field represents the pathname 
of a file whose contents are to be submitted as the value of the field.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_password">
            <summary>If e_password If set, the field is intended for entering a secure password 
that should not be echoed visibly to the screen. Characters typed from the 
keyboard should instead be echoed in some unreadable form, such as asterisks 
or bullet characters. The value is not stored if this flag is set.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_multiline">
            <summary>If e_multiline is set, the field can contain multiple lines of text; 
if clear, the fieldï¿½s text is restricted to a single line.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_radios_in_unison">
            <summary>If e_radios_in_unison is set, a group of radio buttons within a radio button 
field that use the same value for the on state will turn on and off in unison; 
that is if one is checked, they are all checked. If clear, the buttons are 
mutually exclusive (the same behavior as HTML radio buttons).</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_toggle_to_off">
            <summary>If e_toggle_to_off is clear, exactly one radio button must be selected 
at all times; clicking the currently selected button has no effect. 
If set, clicking the selected button deselects it, leaving no button selected.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_radio_flag">
            <summary>Radio buttons flags
</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_pushbutton_flag">
            <summary>Push Buttons flags</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_no_export">
            <summary>If e_no_export flag is set, the field must not be exported by a 
submit-form action.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_required">
            <summary>If e_required flag is set, the field must have a value at the time 
it is exported by a submit-form action.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Flag.e_read_only">
            <summary>If e_read_only flag is set the user may not change the value 
of the field. Any associated widget annotations will not interact with 
the user; that is, they will not respond to mouse clicks or change their 
appearance in response to mouse motions. This flag is useful for fields 
whose values are computed or imported from a database.</summary>
        </member>
        <member name="T:pdftron.PDF.Field.Flag">
            <summary> Flags specifying various characteristics of the fields.</summary>
        </member>
        <member name="M:pdftron.PDF.Field.GetUpdateRect">
            <summary> Return the rectangle that should be refreshed after changing a field.
</summary>
        </member>
        <member name="M:pdftron.PDF.Field.FindInheritedAttribute(System.String)">
            <summary> Some of the Field attributes are designated as inheritable.
If such an attribute is omitted from a Field object, its value is inherited
from an ancestor node in the Field tree. If the attribute is a required one,
a value must be supplied in an ancestor node; if it is optional and no
inherited value is specified, the default value should be used.

The function walks up the Field inhritance tree in search for specified
attribute.

</summary>
            <param name="attrib">the attrib
</param>
            <returns> The attribute value if the given attribute name was found
or a NULL object if the given attribute name was not found.

Resources dictionary (Required; inheritable)
MediaBox rectangle (Required; inheritable)
CropBox rectangle (Optional; inheritable)
Rotate integer (Optional; inheritable)
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> the underlying SDF/Cos object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.IsValid">
            <summary> Checks if current field is valid.

</summary>
            <returns> whether this is a valid (non-null) Field. If the function returns false 
the underlying SDF/Cos object is null and the Field object should be treated as null 
as well. </returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.IsAnnot">
            <summary> Checks if is annot.

</summary>
            <returns> true if this Field is a Widget Annotation

Determines whether or not this Field is an Annotation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.Rename(System.String)">
            <summary> Modifies the field name.

</summary>
            <param name="field_name">a string representing the fully qualified name of
the field (e.g. "employee.name.first").
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.GetOpts">
            <summary> Returns an array of strings corresponding to the options in a list or combo box.

</summary>
        </member>
        <member name="M:pdftron.PDF.Field.GetPartialName">
            <summary> Gets the partial name.

</summary>
            <returns> a string representing the partial name of the field (e.g.
"first" when "employee.name.first" is fully qualified name).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.GetName">
            <summary> Gets the name.

</summary>
            <returns> a string representing the fully qualified name of the field
(e.g. "employee.name.first").
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.EraseAppearance">
            <summary> Removes any appearances associated with the field.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.RefreshAppearance">
            <summary> Regenerates the appearance stream for the Widget Annotation containing
variable text. Call this method if you modified field's value and would
like to update field's appearance.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> If this field contains text, and has been added to a rotated page, the text in 
the field may be rotated. If RefreshAppearance is called *after* the field is added 
to a rotated page, then any text will be rotated in the opposite direction of the page 
rotation. If this method is called *before* the field is added to any rotated page, then 
no counter rotation will be applied. If you wish to call RefreshAppearance on a field 
already added to a rotated page, but you don't want the text to be rotated, you can do one 
of the following; temporarily un-rotate the page, or, temporarily remove the "P" object 
from the field. </remarks>
        </member>
        <member name="M:pdftron.PDF.Field.GetDefaultValue">
            <summary> Gets the default value.

</summary>
            <returns> The default value to which the field reverts when a reset-form action
is executed or NULL if the default value is not specified.

The format of fieldï¿½s value varies depending on the field type.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.GetDefaultValueAsString">
            <summary> Gets the default value as string.

</summary>
            <returns> the default value as string
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.GetDefaultAppearance">
            <summary> Gets the default graphics state.

</summary>
            <returns> The default graphics state that should be used in formatting the text. 
The state corresponds to /DA entry in the field dictionary. </returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.GetValueAsString">
            <summary> Gets the value as string.

</summary>
            <returns> the value as string
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.GetValueAsBool">
            <summary> Gets the value as bool.

</summary>
            <returns> the value as bool
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.SetValue(System.Boolean)">
            <summary> Sets the value.

</summary>
            <param name="is_checked">the new value
</param>
            <returns> A collection of modified fields and regions
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.SetValue(System.String)">
            <summary> Sets the value.

</summary>
            <param name="value">the new value
</param>
            <returns> A collection of modified fields and regions
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.SetValue(pdftron.SDF.Obj)">
            <summary> Sets the value of the Field (i.e. the value of the field's /V key).
The format of fieldï¿½s value varies depending on the field type.

</summary>
            <param name="value">the new value
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  in order to remove/erase the existing value use pass a <c>SDF::Null</c> object to <c>SetValue()</c>.		
In PDF, Field's value is separate from its annotation (i.e. how the field appears on the page). 
After you modify Field's value you need to
refresh Field's appearance using RefreshAppearance() method.

Alternatively, you can delete "AP" entry from the Widget annotation and set
"NeedAppearances" flag in AcroForm dictionary (i.e.
doc.GetAcroForm().Put("NeedAppearances", Obj.CreateBool(true)); )
This will force viewer application to auto-generate new field appearances
every time the document is opened.

Yet another option is to generate a custom annotation appearance using
ElementBuilder and ElementWriter and then set the "AP" entry in the widget
dictionary to the new appearance stream. This functionality is useful in
applications that need advanced control over how the form fields are rendered.
</remarks>
            <returns> A collection of modified fields and regions
</returns>
        </member>
        <member name="M:pdftron.PDF.Field.GetTriggerAction(pdftron.PDF.Field.EventType)">
            <summary> Get the Action associated with the selected Field Trigger event
</summary>
            <param name="trigger">the type of trigger event to get
</param>
            <returns> The action Obj if present, otherwise NULL
</returns>
        </member>
        <member name="M:pdftron.PDF.Field.GetValue">
            <summary> Gets the value.

</summary>
            <returns> the value of the Field (the value of its /V key) or NULL if the
value is not specified.

The format of fieldï¿½s value varies depending on the field type.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Field.GetType">
            <summary> Gets the type.

</summary>
            <returns> The fieldï¿½s value, whose type/format varies depending on the field type.
See the descriptions of individual field types for further information.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Field.EventType.e_action_trigger_calculate">
            <summary>Triggered when field is recalculated due to a change in another field.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.EventType.e_action_trigger_validate">
            <summary>Triggered when a field value is changed.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.EventType.e_action_trigger_format">
            <summary>Triggered before a field value is displayed.</summary>
        </member>
        <member name="F:pdftron.PDF.Field.EventType.e_action_trigger_keystroke">
            <summary>Triggered when user modifies text, or selection, in a text, combo or list field.</summary>
        </member>
        <member name="T:pdftron.PDF.Field.EventType">
            <summary>
Event types for field.
</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Type.e_null">
            <summary>Unknown field type</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Type.e_signature">
            <summary>Digital signature field</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Type.e_choice">
            <summary>Choice field</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Type.e_text">
            <summary>Text field</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Type.e_radio">
            <summary>Radio button field</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Type.e_check">
            <summary>Check box field</summary>
        </member>
        <member name="F:pdftron.PDF.Field.Type.e_button">
            <summary>Pushbutton field</summary>
        </member>
        <member name="T:pdftron.PDF.Field.Type">
            <summary>interactive form field type</summary>
        </member>
        <member name="M:pdftron.PDF.Field.op_Assign(pdftron.PDF.Field)">
            <summary>Assignment operator</summary>
            <param name="r">a <c>Field</c> object</param>
            <returns>a <c>Field</c> object equals to given object</returns>
        </member>
        <member name="M:pdftron.PDF.Field.Set(pdftron.PDF.Field)">
            <summary>Sets to given <c>Field</c> object</summary>
            <param name="p">a <c>Field</c> object</param>
        </member>
        <member name="M:pdftron.PDF.Field.#ctor(pdftron.SDF.Obj)">
            <summary> Construct a Field from a SDF dictionary representing a terminal field node.

</summary>
            <param name="field_dict">the field_dict
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.Field">
            <summary>
                <para>
An interactive form (sometimes referred to as an AcroForm) is a 
collection of fields for gathering information interactively from 
the user. A PDF document may contain any number of Fields appearing 
on any combination of pages, all of which make up a single, global 
interactive form spanning the entire document.
</para>
                <para>
PDFNet fully supports reading, writing, and editing PDF forms and 
provides many utility methods so that work with forms is simple and 
efficient. Using PDFNet forms API arbitrary subsets of form fields 
can be imported or exported from the document, new forms can be 
created from scratch, and the appearance of existing forms can be 
modified. 
</para>
                <example>
In PDFNet Fields are accessed through FieldIterator-s. For a full 
sample, please refer to 'InteractiveForms' sample project. The 
list of all Fields present in the document can be traversed as 
follows:	
<code>  
for(FieldIterator itr = doc.getFieldIterator(); itr.hasNext();) {
Field current=(Field)(itr.next());
System.out.println("Field name: " + current.getName());
System.out.println("Field partial name: " + current.getPartialName());
}
</code>	
To search field by name use GetFieldIterator method. For example:	
<code>
// Search for a specific field
FieldIterator itr = doc.GetFieldIterator("employee.name.first");
if (itr.hasNext()) System.out.println("Field search for " + ((Field)(itr.next())).getName() + " was successful");
else System.out.println("Field search failed");
</code>

If a given field name was not found or if the end of the field list 
was reached the iterator <c>HasNext()</c> will return false.

If you have a valid iterator you can access the Field using <c>Current()</c> method. For example: 
<code>Field field = itr.Current();</code>

Using <c>Flatten(...)</c> method it is possible to merge field 
appearances with the page content. Form 'flattening' refers to the 
operation that changes active form fields into a static area that is  
part of the PDF document, just like the other text and images in 
the document. A completely flattened PDF form does not have any 
widget annotations or interactive fields. 
</example>
            </summary>
        </member>
        <member name="M:pdftron.PDF.ViewChangeCollection.Finalize">
            <summary> Allows a ViewChangeCollection to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.ViewChangeCollection.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:pdftron.PDF.ViewChangeCollection.#ctor">
            <summary>
A default constructor for ViewChangeCollection
</summary>
        </member>
        <member name="T:pdftron.PDF.ViewChangeCollection">
            <summary>
Class for collecting changes to a PDFDoc and/or viewer, which can be 
passed to various functions to act on. Allows for chaining of 
modifications, which can then be updated by PDFNet in the best possible
way.
</summary>
        </member>
        <member name="M:pdftron.PDF.KeyStrokeActionResult.GetText">
            <summary>
The new text to be added. For example, getText() could
return an upper case version of the text entered by user.
</summary>
            <return> returns the added text.
</return>
        </member>
        <member name="M:pdftron.PDF.KeyStrokeActionResult.IsValid">
            <summary>
Indicates whether the added text passed validation.
</summary>
            <return> returns true if it is, otherwise returns false.
</return>
        </member>
        <member name="M:pdftron.PDF.KeyStrokeActionResult.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="T:pdftron.PDF.KeyStrokeActionResult">
            <summary>
A class that contains information from a KeyStrokeAction.
</summary>
        </member>
        <member name="M:pdftron.PDF.KeyStrokeEventData.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:pdftron.PDF.KeyStrokeEventData.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
The constructor for KeyStrokeEventData.For example, given the starting string "PDFTron Rocks",
and the user selected "Tron" and pasted "Net", this would be indicated with the following
constructor : KeyStrokeEventData(field_name, "PDFTron Rocks", "Net", 3, 7);
</summary>
            <param name="field_name">the name of the field where the event happens
</param>
            <param name="current_value">the value of the field before event happens
</param>
            <param name="change">the value of text that user wants to add
</param>
            <param name="selection_start">the start position of the selected text
</param>
            <param name="selection_end">the end position of the selected text
</param>
        </member>
        <member name="T:pdftron.PDF.KeyStrokeEventData">
            <summary>
KeyStrokeEventData contains information for executing KeyStrokeAction
</summary>
        </member>
        <member name="M:pdftron.PDF.ActionParameter.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:pdftron.PDF.ActionParameter.GetAction">
            <summary>
Get the action object 
</summary>
            <return> The action object
</return>
        </member>
        <member name="M:pdftron.PDF.ActionParameter.#ctor(pdftron.PDF.Action)">
            <summary>
Construct an ActionParameter object
</summary>
            <param name="action">the action object
</param>
        </member>
        <member name="M:pdftron.PDF.ActionParameter.#ctor(pdftron.PDF.Action,pdftron.PDF.Page)">
            <summary>
Construct an ActionParameter object
</summary>
            <param name="action">the action object
</param>
            <param name="page">the page object
</param>
        </member>
        <member name="M:pdftron.PDF.ActionParameter.#ctor(pdftron.PDF.Action,pdftron.PDF.Annot)">
            <summary>
Construct an ActionParameter object
</summary>
            <param name="action">the action object
</param>
            <param name="annot">the annot object
</param>
        </member>
        <member name="M:pdftron.PDF.ActionParameter.#ctor(pdftron.PDF.Action,pdftron.PDF.Field)">
            <summary>
Construct an ActionParameter object
</summary>
            <param name="action">the action object
</param>
            <param name="field">the field object
</param>
        </member>
        <member name="T:pdftron.PDF.ActionParameter">
            <summary>
Container for parameters used in handling various actions
</summary>
        </member>
        <member name="M:pdftron.PDF.PageIterator.Finalize">
            <summary> Allows a PageIterator to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.PageIterator.Dispose">
            <summary> Releases all resources used by the PageIterator </summary>
        </member>
        <member name="M:pdftron.PDF.PageIterator.op_Inequality(pdftron.PDF.PageIterator,pdftron.PDF.PageIterator)">
            <summary>Inequality operator checks whether two <c>PageIterator</c> objects are different.</summary>
            <param name="l">a <c>PageIterator</c> at the left of the operator
</param>
            <param name="r">a <c>PageIterator</c> at the right of the operator
</param>
            <returns>true, if both <c>PageIterator</c> are not equal
</returns>
        </member>
        <member name="M:pdftron.PDF.PageIterator.op_Equality(pdftron.PDF.PageIterator,pdftron.PDF.PageIterator)">
            <summary>Equality operator checks whether two <c>PageIterator</c> objects are the same.</summary>
            <param name="l">a <c>PageIterator</c> at the left of the operator
</param>
            <param name="r">a <c>PageIterator</c> at the right of the operator
</param>
            <returns>true, if both <c>PageIterator</c> are equal
</returns>
        </member>
        <member name="M:pdftron.PDF.PageIterator.Equals(System.Object)">
            <summary>Checks whether this <c>PageIterator</c> is the same as the specified object.</summary>
            <param name="o">a given <c>Object</c></param>
            <returns>true, if equals to the given object
</returns>
        </member>
        <member name="M:pdftron.PDF.PageIterator.op_Assign(pdftron.PDF.PageIterator)">
            <summary>Assignment operator</summary>
            <param name="r">a <c>PageIterator</c> at the right of the operator
</param>
            <returns>a <c>PageIterator</c> equals to the given object
</returns>
        </member>
        <member name="M:pdftron.PDF.PageIterator.Set(pdftron.PDF.PageIterator)">
            <summary>Sets value to the given <c>PageIterator</c> object
</summary>
            <param name="p">given <c>PageIterator</c> object
</param>
        </member>
        <member name="M:pdftron.PDF.PageIterator.GetPageNumber">
            <summary>Gets the page number
</summary>
            <returns>page number
</returns>
        </member>
        <member name="M:pdftron.PDF.PageIterator.HasNext">
            <summary>Determine if true if the iteration has more elements.
</summary>
            <returns>true if the iteration has more elements.
</returns>
        </member>
        <member name="M:pdftron.PDF.PageIterator.Current">
            <summary>Gets the current <c>Page</c> object
</summary>
            <returns>current <c>Page</c> object
</returns>
        </member>
        <member name="M:pdftron.PDF.PageIterator.Next">
            <summary>iterates to next <c>Page</c> object
</summary>
        </member>
        <member name="T:pdftron.PDF.PageIterator">
            <summary> PageIterator is an iterator type that can be used to traverse a list 
pages in a PDF document. For more information, please PDFDoc::GetPageIterator().
</summary>
        </member>
        <member name="M:pdftron.PDF.Page.GetThumb">
            <summary>Get the thumbnail object.</summary>
            <returns>Object representing the Image thumbnail.</returns>
        </member>
        <member name="M:pdftron.PDF.Page.FindInheritedAttribute(System.String)">
            <summary> Some of the page attributes are designated as inheritable.
If such an attribute is omitted from a page object, its value is inherited
from an ancestor node in the page tree. If the attribute is a required one,
a value must be supplied in an ancestor node; if it is optional and no
inherited value is specified, the default value should be used.

The function walks up the page inhritance tree in search for specified
attribute.

</summary>
            <param name="attrib">the attrib
</param>
            <returns> if the attribute was found return a pointer to the value. otherwise
the function return NULL.

Resources dictionary (Required; inheritable)
MediaBox rectangle (Required; inheritable)
CropBox rectangle (Optional; inheritable)
Rotate integer (Optional; inheritable)
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetSDFObj">
            <summary> Gets the page dictionary.

</summary>
            <returns> the object to the underlying SDF/Cos object.
</returns>
        </member>
        <member name="M:pdftron.PDF.Page.FlattenField(pdftron.PDF.Field)">
            <summary> Flatten/Merge existing form field appearances with the page content and
remove widget annotation.

Form 'flattening' refers to the operation that changes active form fields
into a static area that is part of the PDF document, just like the other
text and images in the document. A completely flattened PDF form does not
have any widget annotations or interactive fields.

</summary>
            <param name="field">the field
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>An alternative approach to set the field as read only is using <c>Field.SetFlag(Field::e_read_only, true)</c>
method. Unlike Field.SetFlag(...), the result of FlattenField() operation can not be programatically reversed.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Page.Scale(System.Double)">
            <summary> A utility method used to scale physical dimensions of the page including
all page content.

</summary>
            <param name="sc">A number greater than 0 which is used as a scale factor.
For example, calling page.Scale(0.5) will reduce physical dimensions of the
page to half its original size, whereas page.Scale(2) will double the physical
dimensions of the page and will rescale all page content appropriately.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Unlike SetUserUnitSize(unit_size) which is only supported in PDF 1.6 
(i.e. Acrobat 7) and above, page.Scale(sc) supports all PDF versions.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Page.SetUserUnitSize(System.Double)">
            <summary> Sets the UserUnit value for a page.

</summary>
            <param name="unit_size">A positive number giving the size of default user space
units, in multiples of 1/72 inch.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  This is a PDF 1.6 feature. See the implementation note 171 in PDF Reference for details.</remarks>
        </member>
        <member name="M:pdftron.PDF.Page.GetUserUnitSize">
            <summary> Gets the UserUnit value for the page. A UserUnit is a positive number giving
the size of default user space units, in multiples of 1/72 inch.

</summary>
            <returns> the UserUnit value for the page. If the key is not present in the
page dictionary the default of 1.0 is returned.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.AnnotRemove(System.Int32)">
            <summary> Removes the annoation at a given location.

</summary>
            <param name="pos">- A zero based index of the annotation to remove.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Removing the annotation invalidates any associated Annot object. </remarks>
        </member>
        <member name="M:pdftron.PDF.Page.AnnotRemove(pdftron.PDF.Annot)">
            <summary> Removes the given annoation from the page.

</summary>
            <param name="annot">the annot
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Removing the annotation invalidates the given Annot object. </remarks>
        </member>
        <member name="M:pdftron.PDF.Page.AnnotPushFront(pdftron.PDF.Annot)">
            <summary> Adds an annotation to the beginning of a page's annotation array.

</summary>
            <param name="annot">- The annotation to append in a page's annotation array.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.AnnotPushBack(pdftron.PDF.Annot)">
            <summary> Adds an annotation to the end of a page's annotation array.

</summary>
            <param name="annot">- The annotation to prepend in a page's annotation array.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.AnnotInsert(System.Int32,pdftron.PDF.Annot)">
            <summary> Adds an annotation at the specified location in a page's annotation array.

</summary>
            <param name="pos">location in the array to insert the object. The object is inserted
before the specified location. The first element in an array has a pos of zero.
If pos &gt;= GetNumAnnots(), the method appends the annotation to the array.
</param>
            <param name="annot">annotation to add.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetAnnot(System.Int32)">
            <summary>Gets the annotation on the page.
</summary>
            <param name="index">index of the annotation to get on a page
</param>
            <returns> Annotation object. If the index is out of range returned Annot object
is not valid (i.e. annot.IsValid() returns false).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">PDFNetException the PDFNet exception </exception>
            <remarks>The first annotation on a page has an index of zero</remarks>
        </member>
        <member name="M:pdftron.PDF.Page.GetNumAnnots">
            <summary>Gets the number of annotations on a page. Widget annotations (form fields) are
included in the count.			
</summary>
            <returns>number of annotations on a page.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetAnnots">
            <summary>Gets the annotation on the page.			
</summary>
            <returns>Annotation object. If the index is out of range returned Annot object
is not valid (i.e. annot.IsValid() returns false).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetContents">
            <summary> Gets the contents.

</summary>
            <returns> NULL if page is empty, otherwise a single stream or an array of streams.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetResourceDict">
            <summary> Gets the resource dictionary.

</summary>
            <returns> a pointer to the page resource dictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.HasTransition">
            <summary> Tests whether this page has a transition.

</summary>
            <returns> true, if successful
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetPageHeight(pdftron.PDF.Page.Box)">
            <summary> Gets the page height.

</summary>
            <param name="region">the box_type
</param>
            <returns> the page height
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetPageWidth(pdftron.PDF.Page.Box)">
            <summary> Gets the page width.

</summary>
            <param name="region">the box_type
</param>
            <returns> the page width
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetPageHeight">
            <summary> Gets the page height.

</summary>
            <returns> the height for the given page region/box taking into account page
rotation attribute (i.e. /Rotate entry in page dictionary).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetPageWidth">
            <summary> Gets the page width.

</summary>
            <returns> the width for the given page region/box taking into account page
rotation attribute (i.e. /Rotate entry in page dictionary).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetDefaultMatrix(System.Boolean,pdftron.PDF.Page.Box,pdftron.PDF.Page.Rotate)">
            <summary> Gets the default matrix.

</summary>
            <param name="flip">this parameter can be used to mirror the page. if 'flip_y' is true the Y
axis is not flipped and it is increasing, otherwise Y axis is decreasing.
</param>
            <param name="region">an optional parameter used to specify the page box/region that the matrix
should map to. By default, the function transforms user space coordinates to cropped
coordinates.
</param>
            <param name="rot">the rot_type
</param>
            <returns> the matrix that transforms user space coordinates to rotated and cropped coordinates.
The origin of this space is the bottom-left of the rotated, cropped page.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetDefaultMatrix(System.Boolean,pdftron.PDF.Page.Box)">
            <summary> Gets the default matrix.

</summary>
            <param name="flip">this parameter can be used to mirror the page. if 'flip_y' is true the Y
axis is not flipped and it is increasing, otherwise Y axis is decreasing.
</param>
            <param name="region">an optional parameter used to specify the page box/region that the matrix
should map to. By default, the function transforms user space coordinates to cropped
coordinates.
</param>
            <returns> the matrix that transforms user space coordinates to rotated and cropped coordinates.
The origin of this space is the bottom-left of the rotated, cropped page.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetDefaultMatrix(System.Boolean)">
            <summary> Gets the default matrix.

</summary>
            <param name="flip">this parameter can be used to mirror the page. if 'flip_y' is true the Y
axis is not flipped and it is increasing, otherwise Y axis is decreasing.
</param>
            <returns> the matrix that transforms user space coordinates to rotated and cropped coordinates.
The origin of this space is the bottom-left of the rotated, cropped page.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetDefaultMatrix">
            <summary> Gets the default matrix.

</summary>
            <returns> the matrix that transforms user space coordinates to rotated and cropped coordinates.
The origin of this space is the bottom-left of the rotated, cropped page.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.SetRotation(pdftron.PDF.Page.Rotate)">
            <summary> Sets the rotation value for this page.

</summary>
            <param name="angle">the new rotation
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetRotation">
            <summary> Gets the rotation.

</summary>
            <returns> the rotation value for this page.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.DegreeToRotation(System.Int32)">
            <summary> Convert a number that represents rotation in degrees to a rotation enum.

</summary>
            <param name="r"> degree to convert to rotation. Valid numbers are multiples of 90.
</param>
            <returns> one of four angles; e_0, e_90, e_180 or e_270. Returns e_0 if input is
not a multiple 90.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.RotationToDegree(pdftron.PDF.Page.Rotate)">
            <summary>  Convert a rotation to a number.

</summary>
            <param name="r"> rotation to convert to number
</param>
            <returns> one of four numbers; 0, 90, 180 or 270.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.SubtractRotations(pdftron.PDF.Page.Rotate,pdftron.PDF.Page.Rotate)">
            <summary> Rotate r0 counter clockwise by r1.

</summary>
            <param name="r0">r0 first rotation.
</param>
            <param name="r1">r1 second rotation.
</param>
            <returns> returns r0 - r1
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.AddRotations(pdftron.PDF.Page.Rotate,pdftron.PDF.Page.Rotate)">
            <summary> Rotate r0 clockwise by r1

</summary>
            <param name="r0">r0 first rotation.
</param>
            <param name="r1">r1 second rotation.
</param>
            <returns> returns r0 + r1
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetTriggerAction(pdftron.PDF.Page.EventType)">
            <summary> Get the Action associated with the selected Page Trigger event
</summary>
            <param name="trigger">the type of trigger event to get
</param>
            <returns> The action Obj if present, otherwise NULL
</returns>
        </member>
        <member name="F:pdftron.PDF.Page.EventType.e_action_trigger_page_close">
            <summary>Triggered when the page is closed, This action applies to the page being closed and shall be executed before any other page is opened.</summary>
        </member>
        <member name="F:pdftron.PDF.Page.EventType.e_action_trigger_page_open">
            <summary>Triggered when the page is opened and shall be executed after such an action.</summary>
        </member>
        <member name="T:pdftron.PDF.Page.EventType">
            <summary>
Event types for Page
</summary>
        </member>
        <member name="F:pdftron.PDF.Page.Rotate.e_270">
            <summary>270 degrees clockwise rotation</summary>
        </member>
        <member name="F:pdftron.PDF.Page.Rotate.e_180">
            <summary>180 degrees clockwise rotation</summary>
        </member>
        <member name="F:pdftron.PDF.Page.Rotate.e_90">
            <summary>90 degrees clockwise rotation</summary>
        </member>
        <member name="F:pdftron.PDF.Page.Rotate.e_0">
            <summary>0 degrees clockwise rotation</summary>
        </member>
        <member name="T:pdftron.PDF.Page.Rotate">
            <summary>specify page rotations in degrees</summary>
        </member>
        <member name="M:pdftron.PDF.Page.GetVisibleContentBox">
            <summary>The bounding box is defined as the smallest rectangle that includes all the visible 
content on the page.</summary>
            <returns>the bounding box for this page. The page dimensions are specified in user space 
coordinates.</returns>
        </member>
        <member name="M:pdftron.PDF.Page.SetMediaBox(pdftron.PDF.Rect)">
            <summary> Sets the media box for this page.

</summary>
            <param name="box">the new media box for this page. The page dimensions are specified in user space
coordinates.

The media box defines the boundaries of the physical medium on which the page is to
be printed. It may include any extended area surrounding the finished page for bleed,
printing marks, or other such purposes.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method is equivalent to SetBox(Page::e_media) </remarks>
        </member>
        <member name="M:pdftron.PDF.Page.GetMediaBox">
            <summary> Gets the media box.

</summary>
            <returns> the media box for this page. The page dimensions are specified in user space
coordinates.

The media box defines the boundaries of the physical medium on which the page is to
be printed. It may include any extended area surrounding the finished page for bleed,
printing marks, or other such purposes.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method is equivalent to GetBox(Page::e_media) </remarks>
        </member>
        <member name="M:pdftron.PDF.Page.SetCropBox(pdftron.PDF.Rect)">
            <summary> Sets the crop box for this page. The crop box is the region of the page to
display and print.

</summary>
            <param name="box">the new crop box for this page. The page dimensions are specified in user space
coordinates.

The crop box defines the region to which the contents of the page are to be clipped (cropped)
when displayed or printed.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method is equivalent to SetBox(Page::e_crop) </remarks>
        </member>
        <member name="M:pdftron.PDF.Page.GetCropBox">
            <summary> Gets the crop box.

</summary>
            <returns> the crop box for this page. The page dimensions are specified in user space
coordinates.

The crop box is the region of the page to display and print.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method is equivalent to GetBox(Page::e_crop) </remarks>
        </member>
        <member name="M:pdftron.PDF.Page.SetBox(pdftron.PDF.Page.Box,pdftron.PDF.Rect)">
            <summary>Sets the specified box</summary>
            <param name="type">The type of the page bounding box. Possible values are: e_media, e_crop,
e_bleed, e_trim, and e_art.</param>
            <param name="box">A rectangle specifying the coordinates to set for the box. The coordinates are
specified in user space units.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.GetBox(pdftron.PDF.Page.Box)">
            <summary>Gets the specified box</summary>
            <param name="type">The type of the page bounding box. Possible values are: e_media, e_crop,
e_bleed, e_trim, and e_art.</param>
            <returns> the box specified for the page object intersected with the media box.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.PDF.Page.Box.e_art">
            <summary>The art box defines the extent of the pageï¿½s meaningful content (including potential 
white space) as intended by the pageï¿½s creator. The default value is the pageï¿½s crop box.</summary>
        </member>
        <member name="F:pdftron.PDF.Page.Box.e_trim">
            <summary>The trim box defines the intended dimensions of the finished page after trimming. It may 
be smaller than the media box to allow for production related content, such as printing 
instructions, cut marks, or color bars. The default value is the pageï¿½s crop box.</summary>
        </member>
        <member name="F:pdftron.PDF.Page.Box.e_bleed">
            <summary>The bleed box defines the region to which the contents of the page should be clipped when 
output in a production environment. This may include any extra bleed area needed to 
accommodate the physical limitations of cutting, folding, and trimming equipment. 
The default value is the pageï¿½s crop box.</summary>
        </member>
        <member name="F:pdftron.PDF.Page.Box.e_crop">
            <summary>The crop box defines the region to which the contents of the page are to be clipped (cropped) 
when displayed or printed. Unlike the other boxes, the crop box has no defined meaning in 
terms of physical page geometry or intended use; it merely imposes clipping on the page 
contents. The default value is the pageï¿½s media box.</summary>
        </member>
        <member name="F:pdftron.PDF.Page.Box.e_media">
            <summary>The media box defines the boundaries of the physical medium on which the page is to be 
printed. It may include any extended area surrounding the finished page for bleed, printing 
marks, or other such purposes. It may also include areas close to the edges of the medium 
that cannot be marked because of physical limitations of the output device. Content falling 
outside this boundary can safely be discarded without affecting the meaning of the PDF file.
</summary>
        </member>
        <member name="T:pdftron.PDF.Page.Box">
            <summary> PDF page can define as many as five separate boundaries to control various aspects of the 
imaging process (for more details please refer to Section 10.10.1 'Page Boundaries' in PDF 
Reference Manual).		
</summary>
        </member>
        <member name="M:pdftron.PDF.Page.GetIndex">
            <summary> Gets the index.

</summary>
            <returns> the Page number indication the position of this Page in document's page sequence.
Document's page sequence is indexed from 1. Page number 0 means that the page is not part
of document's page sequence or that the page is not valid.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.IsValid">
            <summary> Checks if is valid.		
</summary>
            <returns> true if this is a valid (non-null) page, false otherwise.
If the function returns false the underlying SDF/Cos object is null
or is not valid.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Page.op_Assign(pdftron.PDF.Page)">
            <summary>Assignment operator</summary>
            <param name="r">a given <c>Page</c> object
</param>
            <returns>a <c>Page</c> equals to the given <c>Page</c> object
</returns>
        </member>
        <member name="M:pdftron.PDF.Page.Set(pdftron.PDF.Page)">
            <summary>Sets the page to given <c>Page</c> object
</summary>
            <param name="p">a given <c>Page</c> object
</param>
        </member>
        <member name="M:pdftron.PDF.Page.#ctor(pdftron.SDF.Obj)">
            <summary> Instantiates a new page.

</summary>
            <param name="page_dict">the page_dict
</param>
        </member>
        <member name="T:pdftron.PDF.Page">
            <summary> Page is a high-level class representing PDF page object (see 'Page Objects' in 
Section 3.6.2, 'Page Tree,' in PDF Reference Manual).

Among other associated objects, a page object contains: 
<list type="bullet"><item><description>A series of objects representing the objects drawn on the page (See Element and 
ElementReader class for examples of how to extract page content).</description></item><item><description>A list of resources used in drawing the page 
</description></item><item><description>Annotations 
</description></item><item><description>Beads, private metadata, optional thumbnail image, etc.
</description></item></list></summary>
        </member>
        <member name="M:pdftron.PDF.Rect.Finalize">
            <summary> Allows a Rect to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.Rect.Dispose">
            <summary> Releases all resources used by the Rect </summary>
        </member>
        <member name="P:pdftron.PDF.Rect.y2">
            <summary> y coordinate of the top right corner
</summary>
        </member>
        <member name="P:pdftron.PDF.Rect.x2">
            <summary> x coordinate of the top right corner
</summary>
        </member>
        <member name="P:pdftron.PDF.Rect.y1">
            <summary> y coordinate of the bottom left corner
</summary>
        </member>
        <member name="P:pdftron.PDF.Rect.x1">
            <summary> x coordinate of the bottom left corner
</summary>
        </member>
        <member name="M:pdftron.PDF.Rect.Inflate(System.Double,System.Double)">
            <summary> Inflate.

</summary>
            <param name="x">the x
</param>
            <param name="y">the y
</param>
        </member>
        <member name="M:pdftron.PDF.Rect.Inflate(System.Double)">
            <summary> Inflate.

</summary>
            <param name="amount"> amount of inflate
</param>
        </member>
        <member name="M:pdftron.PDF.Rect.Normalize">
            <summary> Normalizes the rectagle to the one with lower-left and upper-right corners.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Although rectangles are conventionally specified by their lower-left 
and upper-right corners, it is acceptable to specify any two diagonally
opposite corners.
</remarks>
        </member>
        <member name="M:pdftron.PDF.Rect.IntersectRect(pdftron.PDF.Rect!System.Runtime.CompilerServices.IsConst,pdftron.PDF.Rect!System.Runtime.CompilerServices.IsConst)">
            <summary> Makes a Rect equal to the intersection of two existing rectangles.

</summary>
            <param name="rect1">- A Rect object that contains a source rectangle.
</param>
            <param name="rect2">- A Rect object that contains a source rectangle.
</param>
            <returns> true if the intersection is not empty; 0 if the intersection is empty.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The intersection is the largest rectangle contained in both existing rectangles. </remarks>
        </member>
        <member name="M:pdftron.PDF.Rect.Contains(System.Double,System.Double)">
            <summary> Determines if the specified point is contained within the rectangular region
defined by this Rectangle.

</summary>
            <param name="x">x coordinate of the specified point
</param>
            <param name="y">y coordinate of the specified point
</param>
            <returns> true is the point is in the rectangle, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Rect.Height">
            <summary> Gets the height.

</summary>
            <returns> rectangle's height
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Rect.Width">
            <summary> Gets the width.

</summary>
            <returns> rectangle's width
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Rect.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary> Set the coordinates of the rectangle.

</summary>
            <param name="x1">x coordinate of the bottom left corner
</param>
            <param name="y1">y coordinate of the bottom left corner
</param>
            <param name="x2">x coordinate of the top right corner
</param>
            <param name="y2">y coordinate of the top right corner
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Rect.Get(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary> Gets the Rectangle coordinates	
</summary>
            <param name="out_x1">x coordinate of the bottom left corner</param>
            <param name="out_y1">y coordinate of the bottom left corner</param>
            <param name="out_x2">x coordinate of the top right corner</param>
            <param name="out_y2">y coordinate of the top right corner</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Rect.Update(pdftron.SDF.Obj)">
            <summary> Saves changes made to the Rect object in the attached (or specified) SDF/Cos rectangle.

</summary>
            <param name="obj">- an SDF array that should be
updated and attached to this Rect. If parameter rect is NULL or is omitted, update
is performed on previously attached Cos/SDF rectangle.
</param>
            <returns> true if the attached Cos/SDF rectangle array was successfully updated,
false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Rect.Update">
            <summary> Saves changes made to the Rect object in the attached (or specified) SDF/Cos rectangle.

</summary>
            <returns> true if the attached Cos/SDF rectangle array was successfully updated,
false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Rect.Attach(pdftron.SDF.Obj)">
            <summary> Attach the Cos/SDF object to the Rect.

</summary>
            <param name="obj">- underlying Cos/SDF object. Must be an SDF::Array with four
SDF::Number elements.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Rect.op_Assign(pdftron.PDF.Rect)">
            <summary>Assignment operator</summary>
            <param name="rr">a <c>Rect</c> object at the right of the operator
</param>
            <returns>a <c>Rect</c> object equals to the given <c>Rect</c> object
</returns>
        </member>
        <member name="M:pdftron.PDF.Rect.Set(pdftron.PDF.Rect)">
            <summary> Set the coordinates of the rectangle.

</summary>
            <param name="p">the r
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary> Create a Rect and initialize it using specified parameters.
The rect is not attached to any Cos/SDF object.

</summary>
            <param name="x1">x coordinate of the bottom left corner
</param>
            <param name="y1">y coordinate of the bottom left corner
</param>
            <param name="x2">x coordinate of the top right corner
</param>
            <param name="y2">y coordinate of the top right corner
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Rect.#ctor(pdftron.SDF.Obj)">
            <summary> Create a Rect and initialize it using given Cos/SDF rectangle Array object.
The rect is attached to this object.

</summary>
            <param name="rect">the rect
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.PDF.Rect.#ctor">
            <summary> Rect default constructor.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.PDF.Rect">
            <summary> Rect is a utility class used to manipulate PDF rectangle objects (refer to 
section 3.8.3 of the PDF Reference Manual). 

Rect can be associated with a SDF/Cos rectangle array using Rect(Obj*) constructor 
or later using Rect::Attach(Obj*) or Rect::Update(Obj*) methods. 

Rect keeps a local cache for rectangle points so it is necessary to call Rect::Update() 
method if the changes to the Rect should be saved in the attached Cos/SDF array.

</summary>
            <remarks>Although rectangles are conventionally specified by their lower-left and
upperright corners, it is acceptable to specify any two diagonally opposite corners.
</remarks>
        </member>
        <member name="M:pdftron.PDF.QuadPoint.Finalize">
            <summary> Allows a QuadPoint to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.QuadPoint.Dispose">
            <summary> Releases all resources used by the QuadPoint </summary>
        </member>
        <member name="M:pdftron.PDF.QuadPoint.#ctor(pdftron.PDF.Point,pdftron.PDF.Point,pdftron.PDF.Point,pdftron.PDF.Point)">
            <summary> Instantiates a new quad point.

</summary>
            <param name="p11">the p1
</param>
            <param name="p22">the p2
</param>
            <param name="p33">the p3
</param>
            <param name="p44">the p4
</param>
        </member>
        <member name="M:pdftron.PDF.QuadPoint.#ctor">
            <summary> Instantiates a new quad point.</summary>
        </member>
        <member name="M:pdftron.PDF.Point.Finalize">
            <summary> Allows a Point to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.PDF.Point.Dispose">
            <summary> Releases all resources used by the Point </summary>
        </member>
        <member name="P:pdftron.PDF.Point.y">
            <summary> y coordinate
</summary>
        </member>
        <member name="P:pdftron.PDF.Point.x">
            <summary> x coordinate
</summary>
        </member>
        <member name="M:pdftron.PDF.Point.#ctor(System.Double,System.Double)">
            <summary> Instantiates a new point.

</summary>
            <param name="px">the x coordinate
</param>
            <param name="py">the y coordinate
</param>
        </member>
        <member name="M:pdftron.PDF.Point.#ctor">
            <summary> Instantiates a new point.</summary>
        </member>
        <member name="T:pdftron.PDF.Point">
            <summary> The Class Point.</summary>
            <summary> Returns the point within the document geometry that is closest to the specified point. Both points are in screen space (pixel coordinates relative to the visible area).
</summary>
            <param name="screen_coord">The screen coordinates from which the nearest snapped point will be calculated.</param>
            <returns> The snapped coordinate in screen space.
</returns>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.Finalize">
            <summary> Allows an FDFDoc to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.Dispose">
            <summary> Releases all resources used by the FDFDoc </summary>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.MergeAnnots(System.String,System.String)">
            <summary> Merge annotations into FDF document from an XML command.

</summary>
            <param name="command_file">the path to XML command file, or the XML command itself
</param>
            <param name="permitted_user">the user name of the permitted user
</param>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.MergeAnnots(System.String)">
            <summary> Merge annotations into FDF document from an XML command.

</summary>
            <param name="command_file">the path to XML command file, or the XML command itself
</param>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.SaveAsXFDF">
            <summary> Save a FDF document into a XFDF string.

</summary>
            <returns> String containing the XFDF representation of the FDF document
</returns>
            <throws> PDFNetException </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.SaveAsXFDF(System.String)">
            <summary> Save a FDF document in XFDF format.

</summary>
            <param name="file_name">the path
</param>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.CreateFromXFDF(System.String)">
            <summary> Create a new FDFDoc from XFDF input. Input can be either a XFDF file path, or the XFDF data itself.

</summary>
            <param name="xfdf">string containing either the file path to a XFDF file, or the XML buffer containing the XFDF.
</param>
            <returns> created FDFDoc 
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.GetSDFDoc">
            <summary> Get the SDFDoc object in FDFDoc

</summary>
            <returns> document's SDF/Cos document
</returns>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.FieldCreate(System.String,System.Int32,pdftron.SDF.Obj)">
            <summary> Create a FDFField with specified name, type and string value

</summary>
            <param name="field_name">the field_name
</param>
            <param name="type">the field_type
</param>
            <param name="field_value">the field_value
</param>
            <returns> the FDF field
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.FieldCreate(System.String,System.Int32,System.String)">
            <summary> Create a FDFField with specified name, type and value

</summary>
            <param name="field_name">the field_name
</param>
            <param name="type">the field_type
</param>
            <param name="field_value">the field_value
</param>
            <returns> the FDF field
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.FieldCreate(System.String,System.Int32)">
            <summary> Create a new interactive form FDFField.

</summary>
            <param name="field_name">the field_name
</param>
            <param name="type">the field_type
</param>
            <returns> the fDF field
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.GetField(System.String)">
            <summary> field_name a string representing the fully qualified name of
the field (e.g. "employee.name.first").

</summary>
            <param name="field_name">the field_name
</param>
            <returns> a FDFFieldIterator referring to the given interactive FDFField
or if the field name was not found HasNext() will return false.
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.GetFieldIterator(System.String)">
            <summary> Get the field iterator.

</summary>
            <param name="field_name">the field_name
</param>
            <returns> the field iterator
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.GetFieldIterator">
            <summary> An interactive form (sometimes referred to as an AcroForm) is a
collection of fields for gathering information interactively from
the user. A FDF document may contain any number of fields appearing
on any combination of pages, all of which make up a single, global
interactive form spanning the entire document.

The following methods are used to access and manipulate Interactive form
fields (sometimes referred to as AcroForms).

</summary>
            <returns> an iterator to the first Filed in the document.
</returns>
            <throws>  PDFNetException  </throws>
            <remarks>  if the document has no AcroForms, <c>HasNext()</c></remarks>
            <summary> will return false.
</summary>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.SetID(pdftron.SDF.Obj)">
            <summary> Set the ID entry in "/Root/FDF" dictionary.

</summary>
            <param name="id">ID array object.
</param>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.GetID">
            <summary> Get the ID entry from "/Root/FDF" dictionary.

</summary>
            <returns> An object representing the ID entry in "/Root/FDF" dictionary.
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.SetPdfFileName(System.String)">
            <summary> Set the PDF document file that this FDF file was exported from or is intended
to be imported into.

</summary>
            <param name="filepath">pathname to the file.
</param>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.GetPdfFileName">
            <summary> Get the PDF document file that this FDF file was exported from or is intended
to be imported into.

</summary>
            <returns> a String with the PDF document file name.
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.GetFDF">
            <summary> Get the FDF dictionary.

</summary>
            <returns> the FDF dictionary located in "/Root" or NULL if dictionary is not present.
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.GetRoot">
            <summary> Get the root.

</summary>
            <returns> A dictionary representing the Cos root of the document (/Root entry
within the trailer dictionary)
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.GetTrailer">
            <summary> Get the trailer.

</summary>
            <returns> A dictionary representing the Cos root of the document (document's trailer)
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.Save(System.String)">
            <summary> Saves the document to a file.

If a full save is requested to the original path, the file is saved to a file
system-determined temporary file, the old file is deleted, and the temporary file
is renamed to path.

A full save with remove unused or linearization option may re-arrange object in
the cross reference table. Therefore all pointers and references to document objects
and resources should be re acquired in order to continue document editing.

In order to use incremental save the specified path must match original path and
e_incremental flag bit should be set.

</summary>
            <param name="path">The full path name to which the file is saved.
</param>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.IsModified">
            <summary> determine whether the document is modified

</summary>
            <returns> true if document was modified, false otherwise
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.Close">
            <summary> Close FDFDoc and release associated resources

</summary>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.#ctor(System.Byte[],System.Int32)">
            <summary> Open an existing FDF document from an InputStream.

</summary>
            <param name="buf">- input stream containing a serialized document.
</param>
            <param name="buf_size">- the expected size of the input stream.
</param>
            <throws>  PDFNetException  </throws>
            <throws>  IOException Signals that an I/O exception has occurred. </throws>
            <remarks>  Make sure to call InitSecurityHandler() after FDFDoc(...) for encrypted documents. </remarks>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.#ctor(pdftron.Filters.Filter)">
            <summary> Open an existing FDF document from an InputStream.

</summary>
            <param name="stream">- input stream containing a serialized document.
</param>
            <throws>  PDFNetException  </throws>
            <throws>  IOException Signals that an I/O exception has occurred. </throws>
            <remarks>  Make sure to call InitSecurityHandler() after FDFDoc(...) for encrypted documents. </remarks>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.#ctor(System.String)">
            <summary> Open an existing FDF document.

</summary>
            <param name="filepath">pathname to the file.
</param>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.#ctor(pdftron.SDF.SDFDoc)">
            <summary> Create a FDF document from an existing SDF/Cos document.

</summary>
            <param name="sdfdoc">An SDF document. Created FDFDoc will
take the ownership of the low-level document.
</param>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.FDF.FDFDoc.#ctor">
            <summary> Default constructor. Creates an empty FDF document.

</summary>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="T:pdftron.FDF.FDFDoc">
            <summary> FDFDoc is a class representing Forms Data Format (FDF) documents.
FDF is typically used when submitting form data to a server, receiving 
the response, and incorporating it into the interactive form. It can also 
be used to export form data to stand-alone files that can be stored, transmitted 
electronically, and imported back into the corresponding PDF interactive form. 
In addition, beginning in PDF 1.3, FDF can be used to define a container for 
annotations that are separate from the PDF document to which they apply.
</summary>
        </member>
        <member name="F:pdftron.FDF.FDFFieldIterator.mp_keep_alive">
            <summary> A reference to managed document (FDFDoc) that is used to KeepAlive() this document 
until it is not needed </summary>
        </member>
        <member name="M:pdftron.FDF.FDFFieldIterator.Finalize">
            <summary> Allows an FDFFieldIterator to try to free resources and 
perform other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.FDF.FDFFieldIterator.Dispose">
            <summary> Releases all resources used by the FDFFieldIterator </summary>
        </member>
        <member name="M:pdftron.FDF.FDFFieldIterator.op_Inequality(pdftron.FDF.FDFFieldIterator,pdftron.FDF.FDFFieldIterator)">
            <summary>check if two <c>FDFFieldIterator</c> are not equal
</summary>
            <param name="l">a <c>FDFFieldIterator</c> object
</param>
            <param name="r">another <c>FDFFieldIterator</c> object
</param>
            <returns>false, if both are equal. true, otherwise.
</returns>
        </member>
        <member name="M:pdftron.FDF.FDFFieldIterator.op_Equality(pdftron.FDF.FDFFieldIterator,pdftron.FDF.FDFFieldIterator)">
            <summary>check if two <c>FDFFieldIterator</c> are equal
</summary>
            <param name="l">a <c>FDFFieldIterator</c> object
</param>
            <param name="r">another <c>FDFFieldIterator</c> object
</param>
            <returns>true, if both are equal. false, otherwise.
</returns>
        </member>
        <member name="M:pdftron.FDF.FDFFieldIterator.Equals(System.Object)">
            <summary>check if equals to another <c>FDFFieldIterator</c></summary>
            <param name="o">another <c>FDFFieldIterator</c> to compare to
</param>
            <returns>true if equals to another <c>FDFFieldIterator</c>. false, otherwise.
</returns>
        </member>
        <member name="M:pdftron.FDF.FDFFieldIterator.HasNext">
            <summary>check if there are more elements for the iterator
</summary>
            <returns>true if there are more elements for the iterator. false, otherwise
</returns>
        </member>
        <member name="M:pdftron.FDF.FDFFieldIterator.Current">
            <summary>get the current FDFFieldIterator
</summary>
            <returns>current <c>FDFField</c> object</returns>
        </member>
        <member name="M:pdftron.FDF.FDFFieldIterator.Next">
            <summary>advance <c>FDFFieldIterator</c> to the next <c>FDFField</c></summary>
        </member>
        <member name="T:pdftron.FDF.FDFFieldIterator">
            <summary> FDFFieldIterator is an iterator type used to traverse interactive form fields 
in a FDF document. A FDFFieldIterator points to FDF.FDFField nodes or to the <c>null</c>
FDFField node. 
</summary>
            <example>
A sample use case:
<code>  
for(FDFFieldIterator itr = fdf_doc.getFieldIterator(); itr.hasNext(); itr.next()) {
Field name: itr.current().getName();
Field partial name: itr.current().getPartialName();
}
</code></example>
        </member>
        <member name="M:pdftron.FDF.FDFField.Finalize">
            <summary> Allows an FDFField to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.FDF.FDFField.Dispose">
            <summary> Releases all resources used by the FDFField </summary>
        </member>
        <member name="M:pdftron.FDF.FDFField.GetSDFObj">
            <summary> Get underlying SDF object

</summary>
            <returns> the object to the underlying SDF/Cos object.
</returns>
        </member>
        <member name="M:pdftron.FDF.FDFField.FindAttribute(System.String)">
            <summary> The function returns the specified attribute.			
</summary>
            <param name="attrib">attribute name</param>
            <returns> return the attribute value if the given attribute name
was found or a NULL object if the given attribute name was not found.
</returns>
        </member>
        <member name="M:pdftron.FDF.FDFField.GetPartialName">
            <summary> Get partial name of the FDFField

</summary>
            <returns> a string representing the partial name of the field (e.g. 
"first" when "employee.name.first" is fully qualified name).
</returns>
        </member>
        <member name="M:pdftron.FDF.FDFField.GetName">
            <summary> Get name of the FDFField

</summary>
            <returns> a string representing the fully qualified name of the field 
(e.g. "employee.name.first").
</returns>
        </member>
        <member name="M:pdftron.FDF.FDFField.SetValue(pdftron.SDF.Obj)">
            <summary> Set value of the FDFField		
</summary>
            <param name="value">new value</param>
            <remarks>  The format of field’s value varies depending on the field type.
Set the value of the FDFField (the value of the field's /V key).
the value of the field (the value of its /V key) or NULL if the 
value is not specified. 		
in order to remove/erase the existing value use <c>SetValue(SDF::Null)</c></remarks>
        </member>
        <member name="M:pdftron.FDF.FDFField.GetValue">
            <summary> Get value of the FDFField		
</summary>
            <returns> the value of the Field (the value of its /V key) or NULL if the 
value is not specified. 
</returns>
            <remarks>  The format of field’s value varies depending on the field type.
Set the value of the FDFField (the value of the field's /V key).
the value of the field (the value of its /V key) or NULL if the 
value is not specified. 		
in order to remove/erase the existing value use <c>SetValue(SDF::Null)</c></remarks>
        </member>
        <member name="M:pdftron.FDF.FDFField.op_Assign(pdftron.FDF.FDFField)">
            <summary> Assign value from another FDFField </summary>
            <param name="r">another <c>FDFField</c>object</param>
            <returns>a <c>FDFField</c> object equals to the give <c>FDFField</c></returns>
        </member>
        <member name="M:pdftron.FDF.FDFField.Set(pdftron.FDF.FDFField)">
            <summary>Sets value to the given <c>FDFField</c> object</summary>
            <param name="rf">another FDFField object</param>
        </member>
        <member name="M:pdftron.FDF.FDFField.#ctor(pdftron.SDF.Obj,pdftron.SDF.Obj)">
            <summary> Construct a <c>FDF::FDFField</c> from a SDF dictionary representing a terminal field node.
</summary>
            <param name="field_dict">FDFField dictionary</param>
            <param name="fdf_dict">FDF dictionary</param>
        </member>
        <member name="T:pdftron.FDF.FDFField">
            <summary />
        </member>
        <member name="M:pdftron.SDF.PDFTronCustomSecurityHandler.#ctor(System.Int32)">
            <summary>
Constructor 
</summary>
            <param name="custom_id">The user's custom ID. A random ID is suggested to make the custom security unique to the application.</param>
            <remarks>Please refer to PDFNet.AddPDFTronCustomHandler(int custom_id) for more details.</remarks>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.SDF.PDFTronCustomSecurityHandler">
            <summary>
This class represents PDFTron Custom Security handler that applies PDFTron's custom encryption method on save.
</summary>
        </member>
        <member name="M:pdftron.SDF.SignatureHandler.CreateSignature">
            <summary> Calculates the actual signature using client implemented signing methods. The returned value (byte array) will
be written as the /Contents entry in the signature dictionary.
</summary>
            <returns>The calculated signature data.</returns>
        </member>
        <member name="M:pdftron.SDF.SignatureHandler.Reset">
            <summary> Resets any data appending and signature calculations done so far. This method should allow PDFNet to restart the
whole signature calculation process. It is important that when this method is invoked, any data processed with
the AppendData method should be discarded.
</summary>
            <returns>True if there are no errors, otherwise false.</returns>
        </member>
        <member name="M:pdftron.SDF.SignatureHandler.AppendData(System.Byte[])">
            <summary> Adds data to be signed. This data will be the raw serialized byte buffer as the PDF is being saved to any stream.
</summary>
            <param name="data">A chunk of data to be signed.</param>
        </member>
        <member name="M:pdftron.SDF.SignatureHandler.GetName">
            <summary> Gets the name of this SignatureHandler. The name of the SignatureHandler is what identifies this SignatureHandler
from all others. This name is also added to the PDF as the value of /Filter entry in the signature dictionary.
</summary>
            <returns>The name of this SignatureHandler.</returns>
        </member>
        <member name="T:pdftron.SDF.SignatureHandler">
            <summary> A base class for SignatureHandler. SignatureHandler instances are responsible for defining the digest and cipher
algorithms to sign and/or verify a PDF document. SignatureHandlers are added to PDFDoc instances by calling the
PDFDoc.AddSignatureHandler method.
</summary>
        </member>
        <member name="T:pdftron.SDF.SignatureHandlerId">
            <summary> Used for identifying a SignatureHandler instances as they are added to the PDFDoc's SignatureManager.
</summary>
        </member>
        <member name="M:pdftron.SDF.NumberTree.Finalize">
            <summary> Allows an NumberTree to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.SDF.NumberTree.Dispose">
            <summary> Releases all resources used by the NumberTree </summary>
        </member>
        <member name="M:pdftron.SDF.NumberTree.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> the object to the underlying SDF/Cos object. If the NumberTree.IsValid()
returns false the SDF/Cos object is NULL.
</returns>
        </member>
        <member name="M:pdftron.SDF.NumberTree.Erase(pdftron.SDF.NumberTreeIterator)">
            <summary> Removes the NumberTree entry pointed by the iterator.

</summary>
            <param name="pos">the pos
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NumberTree.Erase(System.Int32)">
            <summary> Removes the specified object from the tree. Does nothing if no object
with that number exists.

</summary>
            <param name="key">A number representing the key of the entry to be removed.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NumberTree.Put(System.Int32,pdftron.SDF.Obj)">
            <summary> Puts a new entry in the name tree. If an entry with this number
is already in the tree, it is replaced.

</summary>
            <param name="key">A number representing the key of the new entry.
</param>
            <param name="value">the value
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NumberTree.GetIterator">
            <summary>Gets iterator
</summary>
            <returns>
                <c>NumberTreeIterator</c> object
</returns>
        </member>
        <member name="M:pdftron.SDF.NumberTree.GetIterator(System.Int32)">
            <summary> Search for the specified key in the NumberTree.

</summary>
            <param name="key">the number representing the key to be found.		
</param>
            <example>
Sample code:
<code>
NumberTreeIterator i = dests.find(5);
if (i.hasNext()) {
double key = i.getKey()-&gt;getNumber();
Obj value=i.getValue();
}
</code></example>
            <returns> If the key is present the function returns a NumberTreeIterator the points
to the given Key/Value pair. If the key is not found the function returns End()
(a non-valid) iterator.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NumberTree.GetValue(System.Int32)">
            <summary> Gets the value.

</summary>
            <param name="key">the key
</param>
            <returns> the value
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NumberTree.IsValid">
            <summary> Checks if is valid.

</summary>
            <returns> whether this is a valid (non-null) NumberTree. If the
function returns false the underlying SDF/Cos object is null and
the NumberTree object should be treated as null as well.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NumberTree.op_Assign(pdftron.SDF.NumberTree)">
            <param name="rhs">
                <c>NumberTree</c> at the right side of the operator
</param>
            <returns>
                <c>NumberTree</c> that equals to the object at the right side of the operator
</returns>
        </member>
        <member name="M:pdftron.SDF.NumberTree.Set(pdftron.SDF.NumberTree)">
            <summary>Sets value to the specified <c>NumberTree</c></summary>
            <param name="p">another <c>NumberTree</c> object
</param>
        </member>
        <member name="M:pdftron.SDF.NumberTree.#ctor(pdftron.SDF.Obj)">
            <summary> Create a high level NumberTree wrapper around an existing SDF/Cos NumberTree. 
This does not copy the object.

</summary>
            <param name="name_tree">SDF/Cos root of the NumberTree object.
</param>
        </member>
        <member name="T:pdftron.SDF.NumberTree">
            <summary> A NumberTree is a common data structure in PDF. See section 3.8.6 'Number Trees' 
in PDF Reference Manual for more details.

A number tree serves a similar purpose to a dictionary - associating keys and
values - but by different means. NumberTrees allow efficient storage of very 
large association collections (number/Obj* maps). A NumberTree can have many 
more entries than a SDF/Cos dictionary can.
</summary>
            <example>
Sample code:
<code>
PDFDoc doc = new PDFDoc("../Data/test.pdf");
NumberTree labels = doc.getRoot().get("PageLabels").value());
if (labels.isValid()) {
// Traversing the NumberTree 
for (NumberTreeIterator i = labels.GetIterator(); i.HasNext(); i.Next()) 
num = i.Key().GetNumber();
}
</code></example>
        </member>
        <member name="M:pdftron.SDF.NumberTreeIterator.Finalize">
            <summary> Allows an NumberTreeIterator to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.SDF.NumberTreeIterator.Dispose">
            <summary> Releases all resources used by the NumberTreeIterator </summary>
        </member>
        <member name="M:pdftron.SDF.NumberTreeIterator.op_Inequality(pdftron.SDF.NumberTreeIterator,pdftron.SDF.NumberTreeIterator)">
            <summary>Inequality operator checks whether two <c>NumberTreeIterator</c> objects are different.</summary>
            <param name="lhs">
                <c>NumberTreeIterator</c> at the left side of the operator
</param>
            <param name="rhs">
                <c>NumberTreeIterator</c> at the right side of the operator
</param>
            <returns>true if both objects are not equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.SDF.NumberTreeIterator.op_Equality(pdftron.SDF.NumberTreeIterator,pdftron.SDF.NumberTreeIterator)">
            <summary>Equality operator checks whether two <c>NumberTreeIterator</c> objects are the same.</summary>
            <param name="lhs">
                <c>NumberTreeIterator</c> at the left side of the operator
</param>
            <param name="rhs">
                <c>NumberTreeIterator</c> at the right side of the operator
</param>
            <returns>true if both objects are equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.SDF.NumberTreeIterator.op_Assign(pdftron.SDF.NumberTreeIterator)">
            <summary>Assignment operator</summary>
            <param name="rhs">
                <c>NumberTreeIterator</c> at the right side of the operator
</param>
            <returns>
                <c>NumberTreeIterator</c> that equals to the object at the right side of the operator
</returns>
        </member>
        <member name="M:pdftron.SDF.NumberTreeIterator.Set(pdftron.SDF.NumberTreeIterator)">
            <summary>Sets value to the specified <c>NumberTreeIterator</c></summary>
            <param name="p">another <c>NumberTreeIterator</c> object
</param>
        </member>
        <member name="M:pdftron.SDF.NumberTreeIterator.Equals(System.Object)">
            <summary>checks if equals to the specified <c>DictIterator</c> object
</summary>
            <param name="rhs">specified <c>NumberTreeIterator</c></param>
            <returns>true if both are equal
</returns>
        </member>
        <member name="M:pdftron.SDF.NumberTreeIterator.HasNext">
            <summary> Checks for next.

</summary>
            <returns> true if the iterator can be successfully advanced to the
next element; false if the end collection is reached.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NumberTreeIterator.Value">
            <summary> Value.
</summary>
            <returns>the value of the current dictionary entry.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NumberTreeIterator.Key">
            <summary>Key.
</summary>
            <returns>the key of the current dictionary entry.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NumberTreeIterator.Next">
            <summary> Advances the iterator to the next element of the collection.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.SDF.NumberTreeIterator">
            <summary>  NumberTreeIterator is used to traverse key/value pairs in a NumberTree.</summary>
        </member>
        <member name="M:pdftron.SDF.NameTree.Finalize">
            <summary> Allows an NameTree to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.SDF.NameTree.Dispose">
            <summary> Releases all resources used by the NameTree </summary>
        </member>
        <member name="M:pdftron.SDF.NameTree.GetSDFObj">
            <summary> Gets the SDFObj.

</summary>
            <returns> the object to the underlying SDF/Cos object. If the NameTree.IsValid()
returns false the SDF/Cos object is NULL.
</returns>
        </member>
        <member name="M:pdftron.SDF.NameTree.Erase(pdftron.SDF.NameTreeIterator)">
            <summary> Removes the NameTree entry pointed by the iterator.

</summary>
            <param name="pos">the pos
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NameTree.Erase(System.Byte[])">
            <summary> Removes the specified object from the tree. Does nothing if no object
with that name exists.

</summary>
            <param name="key">data buffer representing the key of the entry to be removed.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NameTree.Put(System.Byte[],pdftron.SDF.Obj)">
            <summary> Puts a new entry in the name tree. If an entry with this key
is already in the tree, it is replaced.

</summary>
            <param name="key">data buffer representing the key of the new entry.
</param>
            <param name="value">the value
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NameTree.GetIterator">
            <summary> Gets the iterator.

</summary>
            <returns> an iterator to the first key/value pair (i.e. NNTreeData) in
the document. You can use the increment operator on the returned iterator to
traverese all entries stored under the NameTree.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <code>  
for (NameTreeIterator i = dests.getIterator(); i.hasNext(); i.next()) {
string key = i.getKey().getAsPDFText();
}
</code>
        </member>
        <member name="M:pdftron.SDF.NameTree.GetIterator(System.Byte[])">
            <summary> Search for the specified key in the NameTree.

</summary>
            <param name="key">data buffer representing the key to be found.
</param>
            <returns> If the key is present the function returns a NameTreeIterator the points
to the given Key/Value pair. If the key is not found the function returns End()
(a non-valid) iterator.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <code>  
NameTreeIterator i = dests.find("MyKey", 5);
if (i.hasNext()) {
string key = i.getKey().getAsPDFText();
Obj value = i.getValue();
}
</code>
        </member>
        <member name="M:pdftron.SDF.NameTree.GetValue(System.Byte[])">
            <summary> Gets the value.

</summary>
            <param name="key">the key
</param>
            <returns> the value
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NameTree.IsValid">
            <summary> Checks if is valid.

</summary>
            <returns> whether this is a valid (non-null) NameTree. If the
function returns false the underlying SDF/Cos object is null and
the NameTree object should be treated as null as well.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NameTree.op_Assign(pdftron.SDF.NameTree)">
            <summary>Assignment operator</summary>
            <param name="rhs">
                <c>NameTree</c> object at the right of the operator
</param>
            <returns>
                <c>NameTree</c> object equal to the specified object
</returns>
        </member>
        <member name="M:pdftron.SDF.NameTree.Set(pdftron.SDF.NameTree)">
            <summary>Sets value to the specified <c>NameTree</c></summary>
            <param name="p">
                <c>NameTree</c> object to set the value to
</param>
        </member>
        <member name="M:pdftron.SDF.NameTree.Find(pdftron.SDF.SDFDoc,System.String)">
            <summary> Retrieves a name tree, with the given key name, from the '/Root/Names'
dictionary of the doc.

</summary>
            <param name="doc">- The document in which to search for the name.
</param>
            <param name="name">- The name of the name tree to find.
</param>
            <returns> The requested NameTree. If the requested NameTree exists
NameTree.IsValid() will return true, and false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NameTree.Create(pdftron.SDF.SDFDoc,System.String)">
            <summary> Retrieves the NameTree inside the '/Root/Names' dictionary with the
specified key name, or creates it if it does not exist.

</summary>
            <param name="doc">- The document in which the name tree is created.
</param>
            <param name="name">- The name of the NameTree to create.
</param>
            <returns> The newly created NameTree for the doc or an exising tree with
the same key name.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> although it is possible to create a name tree anywhere in the document 
the convention is that all trees are located under '/Root/Names' dictionary.
</remarks>
        </member>
        <member name="M:pdftron.SDF.NameTree.#ctor(pdftron.SDF.Obj)">
            <summary> Create a high level NameTree wrapper around an existing SDF/Cos NameTree. 
This does not copy the object.

</summary>
            <param name="name_tree">SDF/Cos root of the NameTree object.
</param>
        </member>
        <member name="T:pdftron.SDF.NameTree">
            <summary> A NameTree is a common data structure in PDF. See section 3.8.5 'Name Trees' 
in PDF Reference Manual for more details.

A name tree serves a similar purpose to a dictionary - associating keys and
values - but by different means. NameTrees allow efficient storage of very 
large association collections (string/Obj* maps). A NameTree can have many 
more entries than a SDF/Cos dictionary can.

NameTree-s use SDF/Cos-style strings (not null-terminated C strings), which 
may use Unicode encoding etc.

</summary>
            <code>  
PDFDoc doc = new PDFDoc("../Data/PDFReference.pdf");
NameTree dests = NameTree.find(doc.getSDFDoc(), "Dests");
if (dests.isValid()) {
// Traversing the NameTree
for (DictIterator i = dests.getIterator(); i.hasNext(); i.next()) 
string key = i.key().getAsPDFText(); // ...
}
</code>
        </member>
        <member name="M:pdftron.SDF.NameTreeIterator.Finalize">
            <summary> Allows an NameTreeIterator to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.SDF.NameTreeIterator.Dispose">
            <summary> Releases all resources used by the NameTreeIterator </summary>
        </member>
        <member name="M:pdftron.SDF.NameTreeIterator.op_Inequality(pdftron.SDF.NameTreeIterator,pdftron.SDF.NameTreeIterator)">
            <summary>Inequality operator checks whether two <c>NameTreeIterator</c> objects are different.</summary>
            <param name="lhs">
                <c>NameTreeIterator</c> at the left side of the operator
</param>
            <param name="rhs">
                <c>NameTreeIterator</c> at the right side of the operator
</param>
            <returns>true if both objects are not equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.SDF.NameTreeIterator.op_Equality(pdftron.SDF.NameTreeIterator,pdftron.SDF.NameTreeIterator)">
            <summary>Equality operator checks whether two <c>NameTreeIterator</c> objects are the same.</summary>
            <param name="lhs">
                <c>NameTreeIterator</c> at the left side of the operator
</param>
            <param name="rhs">
                <c>NameTreeIterator</c> at the right side of the operator
</param>
            <returns>true if both objects are equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.SDF.NameTreeIterator.op_Assign(pdftron.SDF.NameTreeIterator)">
            <summary>Assignment operator</summary>
            <param name="rhs">
                <c>NameTreeIterator</c> at the right side of the operator
</param>
            <returns>
                <c>NameTreeIterator</c> that equals to the object at the right side of the operator
</returns>
        </member>
        <member name="M:pdftron.SDF.NameTreeIterator.Set(pdftron.SDF.NameTreeIterator)">
            <summary>Sets value to the specified <c>DictIterator</c></summary>
            <param name="p">another <c>NameTreeIterator</c> object
</param>
        </member>
        <member name="M:pdftron.SDF.NameTreeIterator.Equals(System.Object)">
            <summary>checks if equals to the specified <c>NameTreeIterator</c> object
</summary>
            <param name="rhs">specified <c>DictIterator</c></param>
            <returns>true if both are equal
</returns>
        </member>
        <member name="M:pdftron.SDF.NameTreeIterator.HasNext">
            <summary> Checks for next.

</summary>
            <returns> true if the iterator can be successfully advanced to the
next element; false if the end collection is reached.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.NameTreeIterator.Value">
            <summary>Value
</summary>
            <returns>value of the current dictionary entry.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">PDFNetException the PDFNet exception</exception>
        </member>
        <member name="M:pdftron.SDF.NameTreeIterator.Key">
            <summary>Key
</summary>
            <returns>the key of the current dictionary entry.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">PDFNetException the PDFNet exception</exception>
        </member>
        <member name="M:pdftron.SDF.NameTreeIterator.Next">
            <summary> Advances the iterator to the next element of the collection.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.SDF.NameTreeIterator">
            <summary>  NameTreeIterator is used to traverse key/value pairs in a NameTree.</summary>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.Finalize">
            <summary> Allows an SDFDoc to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.Dispose">
            <summary> Releases all resources used by the SDFDoc </summary>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.TimedLockRead(System.Int32)">
            <summary> Tries to obtain a read lock on the document, waiting no longer than specified number of milliseconds.

</summary>
            <param name="milliseconds">maxiumum number of milliseconds to wait for the lock
</param>
            <returns> true if the document is locked for multi-threaded access, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.TryLockRead">
            <summary> Tries to obtain a read lock in a non-blocking manner.

</summary>
            <returns> true if the document is locked for multi-threaded access, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.UnlockRead">
            <summary> Removes the read lock from the document. 

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.LockRead">
            <summary> Locks the document to prevent competing write threads (using Lock()) from accessing the document 
at the same time. Other reader threads however, will be allowed to access the document.
Threads attempting to obtain write access to the document will wait in 
suspended state until the thread that owns the lock calls doc.UnlockRead().
Note: To avoid deadlocks obtaining a write lock while holding
a read lock is not permitted and will throw an exception. If this situation is encountered
please either unlock the read lock before the write lock is obtained
or acquire a write lock (rather than read lock) in the first place.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.TimedLock(System.Int32)">
            <summary> Try locking the document, waiting no longer than specified number of milliseconds.

</summary>
            <param name="milliseconds">the milliseconds
</param>
            <returns> true if the document is locked for multi-threaded access, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.TryLock">
            <summary>Try locking the document
</summary>
            <returns> true if the document is locked for multi-threaded access, false otherwise.
</returns>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.Unlock">
            <summary> Removes the lock from the document.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.Lock">
            <summary> Locks the document to prevent competing threads from accessiong the document
at the same time. Threads attempting to access the document will wait in
suspended state until the thread that owns the lock calls doc.Unlock().

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.CreateIndirectStream(pdftron.Filters.FilterReader)">
            <summary> Creates the indirect stream.

</summary>
            <param name="data">the data
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.CreateIndirectStream(pdftron.Filters.FilterReader,pdftron.Filters.Filter)">
            <summary> Creates the indirect stream.

</summary>
            <param name="data">the data
</param>
            <param name="filter">the filter_chain
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.CreateIndirectStream(System.Byte[])">
            <summary> Creates the indirect stream.

</summary>
            <param name="buf">the data
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.CreateIndirectStream(System.Byte[],pdftron.Filters.Filter)">
            <summary> Creates the indirect stream.

</summary>
            <param name="buf">the data
</param>
            <param name="filter">the filter_chain
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.CreateIndirectString(System.Byte[])">
            <summary> Creates the indirect string.

</summary>
            <param name="buf">the value
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.CreateIndirectString(System.String)">
            <summary> Creates the indirect string.

</summary>
            <param name="value">the str
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.CreateIndirectNumber(System.Double)">
            <summary> Creates the indirect number.

</summary>
            <param name="value">the value
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.CreateIndirectNull">
            <summary> Creates the indirect null.

</summary>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.CreateIndirectDict">
            <summary> Creates the indirect dict.

</summary>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.CreateIndirectBool(System.Boolean)">
            <summary> Creates the indirect bool.

</summary>
            <param name="value">the value
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.CreateIndirectArray">
            <summary> Creates the indirect array.

</summary>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.CreateIndirectName(System.String)">
            <summary> The following list of methods is used to create SDF/Cos indirect objects.

Unlike direct objects, indirect objects can be referenced by more than one
object (i.e. indirect objects they can be shared).

</summary>
            <param name="name">the name
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.Swap(System.Int32,System.Int32)">
            <summary> Sometimes it is desirable to modify all indirect references to a given
indirect object. It would be inefficient to manually search for all
indirect references to a given indirect object.

A more efficient and less error prone method is to replace the indirect
object in the cross reference table with a new object. This way the object
that is referred to is modified (or replaced) and indirect references do
not have to be changed.

</summary>
            <param name="obj_num1">the obj_num1
</param>
            <param name="obj_num2">the obj_num2
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.SetSecurityHandler(pdftron.SDF.SecurityHandler)">
            <summary> The function sets a new SecurityHandler as the current security handler.

</summary>
            <param name="handler">the new security handler
</param>
            <remarks> Setting a new security handler will not invalidate the access to 
the original file and will take effect during document Save().
</remarks>
            <remarks> If the security handler is modified, document will perform a full save 
even if e_incremental was given as a flag in Save() method.
</remarks>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.GetSecurityHandler">
            <summary> Gets the security handler.

</summary>
            <returns> Currently selected SecurityHandler.
</returns>
            <remarks>  InitSecurityHandler() should be called before GetSecurityHandler() in order to initialize the handler.
Returned security handler can be modified in order to change the security settings of the exisitng document. Changes to the current handler
will not invalidate the access to the original file and will take effect
during document Save().
</remarks>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.GetFileName">
            <summary> Gets the file name.

</summary>
            <returns> The filename of the document if the document is loaded from disk,
or empty string if the document is not yet saved or is loaded from a memory
buffer.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.GetHeader">
            <summary> Gets the PDF file header.</summary>
            <returns> the header string identifying the document version to which the file conforms.
For a file conforming to PDF version 1.4, the header should be %PDF-1.4.
In general header strings have the following syntax: %AAA-N.n where AAA identifies
document specification (such as PDF, FDF, PJTF etc), N is the major version and
n is the minor version. The new header string can be set during a full save (see SDFDoc.save()).
For a document that is not serialized the function returns an empty string.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.Save(System.IO.Stream,pdftron.SDF.SDFDoc.SaveOptions,System.String)">
            <summary>Saves the document to the given stream.</summary>
            <param name="stm">A stream where to serialize the document.</param>
            <param name="flags">A bit field composed of an OR of <c>SDF.SDFDoc.SaveOptions</c>.</param>
            <param name="header">File header. A new file header is set only during full save.</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>this method ignores e_incremental flag</remarks>
            <remarks> Saving modifies the SDFDoc's internal representation.  As such, the user should
acquire a write lock before calling save. 
If the original pdf has a corrupt xref table (see HasRepairedXref or
http://www.pdftron.com/kb_corrupt_xref), then it can not be saved using the e_incremental flag.</remarks>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.Save(pdftron.SDF.SDFDoc.SaveOptions,System.String)">
            <summary>Saves the document to a memory buffer.</summary>
            <returns>buffer containing the serialized version of the document</returns>
            <param name="flags">A bit field composed of an OR of <c>SDF.SDFDoc.SaveOptions</c>.</param>
            <param name="header">File header. A new file header is set only during full save.</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>this method ignores e_incremental flag</remarks>
            <remarks> Saving modifies the SDFDoc's internal representation.  As such, the user should
acquire a write lock before calling save. 
If the original pdf has a corrupt xref table (see HasRepairedXref or
http://www.pdftron.com/kb_corrupt_xref), then it can not be saved using the e_incremental flag.</remarks>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.Save(System.String,pdftron.SDF.SDFDoc.SaveOptions,pdftron.Common.ProgressMonitor,System.String)">
            <summary> Saves the document to a file.

If a full save is requested to the original path, the file is saved to a file
system-determined temporary file, the old file is deleted, and the temporary file
is renamed to path.

A full save with remove unused or linearization option may re-arrange object in
the cross reference table. Therefore all pointers and references to document objects
and resources should be re acquired in order to continue document editing.

In order to use incremental save the specified path must match original path and
e_incremental flag bit should be set.

</summary>
            <param name="path">- The full path name to which the file is saved.</param>
            <param name="flags">- A bit field composed of an OR of <c>SDF.SDFDoc.SaveOptions</c>.</param>
            <param name="progress">- A pointer to the progress interface. NULL if progress tracking is not required.</param>
            <param name="header">- File header. A new file header is set only during full save.</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> Saving modifies the SDFDoc's internal representation.  As such, the user should
acquire a write lock before calling save.
If the original pdf has a corrupt xref table (see HasRepairedXref or
http://www.pdftron.com/kb_corrupt_xref), then it can not be saved using the e_incremental flag.</remarks>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.Save(System.String,pdftron.SDF.SDFDoc.SaveOptions,System.String)">
            <summary> Saves the document to file</summary>
            <param name="path">path to save</param>
            <param name="flags">- A bit field composed of an OR of <c>SDF.SDFDoc.SaveOptions</c>.
Note that this method ignores e_incremental flag.
</param>
            <param name="header">- File header. A new file header is set only during full save.
</param>
            <returns> the byte[]
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> Saving modifies the SDFDoc's internal representation.  As such, the user should
acquire a write lock before calling save. 
If the original pdf has a corrupt xref table (see HasRepairedXref or
http://www.pdftron.com/kb_corrupt_xref), then it can not be saved using the e_incremental flag.
</remarks>
        </member>
        <member name="F:pdftron.SDF.SDFDoc.SaveOptions.e_compatibility">
            <summary> Save the document in a manner that maximizes compatibility with older PDF consumers (e.g. the file will not use object and compressed xref streams).</summary>
        </member>
        <member name="F:pdftron.SDF.SDFDoc.SaveOptions.e_linearized">
            <summary> Save the document in linearized (fast web-view) format. Requires full save.</summary>
        </member>
        <member name="F:pdftron.SDF.SDFDoc.SaveOptions.e_omit_xref">
            <summary> do not save cross-reference table</summary>
        </member>
        <member name="F:pdftron.SDF.SDFDoc.SaveOptions.e_hex_strings">
            <summary> save all string in hexadecimal format.</summary>
        </member>
        <member name="F:pdftron.SDF.SDFDoc.SaveOptions.e_remove_unused">
            <summary> remove unused objects (requires full save)</summary>
        </member>
        <member name="F:pdftron.SDF.SDFDoc.SaveOptions.e_incremental">
            <summary> save document in incremental mode.</summary>
        </member>
        <member name="T:pdftron.SDF.SDFDoc.SaveOptions">
            <summary> SDFDoc sav options </summary>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.EnableDiskCaching(System.Boolean)">
            <summary> If true, this PDFDoc will use a temporary file to cache
new content streams (this is the default behavior).

</summary>
            <param name="use_cache">the use_cache
</param>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.ClearMarks">
            <summary> Removes 'marked' flag from all objects in cross reference table.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.XRefSize">
            <summary> X ref size.

</summary>
            <returns> - The size of cross reference table
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.ImportObj(pdftron.SDF.Obj,System.Boolean)">
            <summary> Import obj.

</summary>
            <param name="obj">- an object to import.
</param>
            <param name="deep_copy">- a boolean indicating whether to perform a deep or shallow copy.
In case of shallow copy all indirect references will be set to null.

If the object belongs to a document the function will perform deep or shallow
clone depending whether deep_copy flag was specified.

If the object does not belong to any document ImportObj does not take the
object ownership. ImportObj copies the source object and it is users
responibility to delete free objects.
</param>
            <returns> - a pointer to the root indirect object in this document
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.GetObj(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Gets the obj.

</summary>
            <param name="obj_num">the obj_num
</param>
            <returns> - the latest version of the object matching specified object number.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.GetTrailer">
            <summary> Gets the trailer.

</summary>
            <returns> - A dictionary representing the root of the document (i.e.
a document trailer dictionary)
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.GetHintStream">
            <summary> Gets document's initial linearization hint stream if it is available.

</summary>
            <returns> - the linearization hint stream of the original document or NULL
if the hint stream is not available.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.GetLinearizationDict">
            <summary> Gets document's initial linearization dictionary if it is available.

</summary>
            <returns> - the linearization dictionary of the original document or NULL
if the dictionary is not available.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.IsLinearized">
            <summary> Call this function to determine whether the document is represented in
linearized (fast web view) format.

</summary>
            <returns> - true if document is stored in fast web view format, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> any changes to the document can invalidate linearization. The function will 
return 'true' only if the original document is linearized and if it is not
modified.

In order to provide good performance over relatively slow communication links,
PDFNet can generate PDF documents with linearized objects and hint tables that
can allow a PDF viewer application to download and view one page of a PDF file
at a time, rather than requiring the entire file (including fonts and images) to
be downloaded before any of it can be viewed.

To save a document in linearized (fast web view) format you only need to pass
'SDFDoc.e_linearized' flag in the Save method.
</remarks>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.IsFullSaveRequired">
            <summary> Checks if is full save required.

</summary>
            <returns> - true if the document requires full save.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.HasRepairedXRef">
            <summary> Checks whether or not the underlying file has an XRef table that had to be repaired
when the file was opened.If the document had an invalid XRef table when opened,
PDFNet will have repaired the XRef table for its working representation of the document.

</summary>
            <returns> - true if document was found to be corrupted, and was repaired, during
opening and has not been saved since.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>If this function returns true, it is not possible to incrementally save the document
(see http://www.pdftron.com/kb_corrupt_xref)</remarks>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.IsModified">
            <summary> Checks if is modified.

</summary>
            <returns> - true if document was modified, false otherwise
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.InitStdSecurityHandler(System.Byte[])">
            <summary>
Initializes document's SecurityHandler using the supplied
password. This version of InitSecurityHandler() assumes that
document uses Standard security and that a password is specified
directly.

This function should be called immediately after an encrypted
document is opened. The function does not have any side effects on
documents that are not encrypted.

If the security handler was successfully initialized, it can be later
obtained using GetSecurityHandler() method.
</summary>
            <param name="passwordBuffer">Specifies the password used to open the document without any user feedback.</param>
            <returns>True if the SecurityHandler was successfully initialized.</returns>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.InitStdSecurityHandler(System.String)">
            <summary>
Initializes document's SecurityHandler using the supplied
password. This version of InitSecurityHandler() assumes that
document uses Standard security and that a password is specified
directly.

This function should be called immediately after an encrypted
document is opened. The function does not have any side effects on
documents that are not encrypted.

If the security handler was successfully initialized, it can be later
obtained using GetSecurityHandler() method.
</summary>
            <param name="password">Specifies the password used to open the document without any user feedback.</param>
            <returns>True if the SecurityHandler was successfully initialized.</returns>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.InitSecurityHandler">
            <summary> Initializes document's SecurityHandler. This version of InitSecurityHandler()
works with Standard and Custom PDF security and can be used in situations where
the password is obtained dynamically via user feedback. See EncTest sample for
example code.

This function should be called immediately after an encrypted
document is opened. The function does not have any side effects on
documents that are not encrypted.

If the security handler was successfully initialized it can be later obtained
using GetSecurityHandler() method.

</summary>
            <returns> true if the SecurityHandler was successfully initialized (this
may include authentication data collection, verification etc.),
false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.IsEncrypted">
            <summary> Checks if is encrypted.

</summary>
            <returns> true if the document is/was originally encrypted false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.Close">
            <summary> Close.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.op_Implicit(pdftron.PDF.PDFDoc)~pdftron.SDF.SDFDoc">
            <summary>Explicit and implicit conversion operator from <c>PDFDoc</c> to <c>SDF::Doc</c>.
</summary>
            <param name="pdfdoc">
                <c>PDFDoc</c> to convert to <c>SDFDoc</c></param>
            <returns> document’s SDF/Cos document </returns>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.#ctor(pdftron.PDF.PDFDoc)">
            <summary> Open a SDF/Cos document from a PDFDoc object.
</summary>
            <param name="pdfdoc">
                <c>PDFDoc</c> object containing <c>SDFDoc</c> object
</param>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.#ctor(System.Byte[],System.Int32)">
            <summary> Instantiates a new <c>SDFDoc</c>.

</summary>
            <param name="buf">the buffer
</param>
            <param name="buf_size">the size
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <exception cref="T:pdftron.Common.PDFNetException">  IOException Signals that an I/O exception has occurred. </exception>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.#ctor(pdftron.Filters.Filter)">
            <summary> Open a SDF/Cos document from a Filter (i.e. a data stream) object.
</summary>
            <param name="stream">- input stream containing a serialized document. The input stream may be a
random-access file, memory buffer, slow HTTP connection etc.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> if the input stream doesn't support Seek() operation the document will load whole 
data stream in memory before parsing. In case of linearized PDF, the document may be parsed
on-the-fly while it is being loaded in memory. Note that since StdFile implements Seek()
interface, the document does not have to be fully in memory before it is used.
</remarks>
            <remarks> Make sure to call InitStdSecurityHandler() or InitSecurityHandler() after SDFDoc(...) 
in case the document is encrypted.
</remarks>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.#ctor(System.String)">
            <summary> Open a SDF/Cos document from a file.

</summary>
            <param name="filepath">- path name to the file.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> Make sure to call InitStdSecurityHandler() or InitSecurityHandler() after SDFDoc(...) 
in case the document is encrypted.
</remarks>
        </member>
        <member name="M:pdftron.SDF.SDFDoc.#ctor">
            <summary> Default constructor. Creates a new document.
The new document contains only trailer and Info dictionary.
To build the rest of the document get document's root dictionary using GetTrailer() and
populate it with new key/value pairs.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.SDF.SDFDoc">
            <summary> SDFDoc is a low-level document representing a graph of SDF.Obj nodes that 
can be used to build higher-level document models such as PDF (Portable Document
Format) or FDF (Forms Document Format).

SDF Doc brings together document security, document utility methods, and all SDF 
objects.

</summary>
            <example>
A SDF document can be created from scratch using a default constructor:
<code>
SDFDoc mydoc = new SDFDoc();
Obj trailer = mydoc.getTrailer();
</code>
SDF document can be also created from an existing file (e.g. an external PDF document): 	
<code>  
SDFDoc mydoc = new SDFDoc("in.pdf");
Obj trailer = mydoc.getTrailer();
</code>	
SDF document can be also created from a memory buffer or some other Filter/Stream such as a HTTP Filter connection: 	
<code>  
MemoryFilter memory = ....
SDFDoc mydoc = new SDFDoc(memory);
Obj trailer = mydoc.getTrailer();
</code>	
SDF document can be accessed from a high-level PDF document as follows: 	
<code>  
PDFDoc doc = new PDFDoc("in.pdf");
SDFDoc mydoc = doc.getSDFDoc();
Obj trailer = mydoc.getTrailer();
</code></example>
            <remarks>
Note that the examples above used doc.GetTrailer() in order to access document 
trailer, the starting SDF object (root node) in every document. Following the trailer 
links, it is possible to visit all low-level objects in a document (e.g. all pages, 
outlines, fonts, etc). 

SDFDoc also provides utility methods used to import objects and object collections 
from one document to another. These methods can be useful for copy operations between 
documents such as a high-level page merge and document assembly.
</remarks>
        </member>
        <member name="M:pdftron.SDF.SecurityManager.RegisterSecurityHandler(System.String,pdftron.SDF.SecurityDescriptor!System.Runtime.CompilerServices.IsConst)">
            <summary>Registers a new type of SecurityHandler. If a handler with the same name was 
already registered, the new SecurityHandler will replace the old handler.
</summary>
            <param name="handler_name">SecurityHandler's document name (as it appears in Encrypt dictionary).
</param>
            <param name="descriptor" />
        </member>
        <member name="M:pdftron.SDF.SecurityDescriptor.#ctor(pdftron.SDF.SecurityDescriptor!System.Runtime.CompilerServices.IsConst)">
            <summary>Creates <c>SecurityDescriptor</c> from specified object
</summary>
            <param name="d">specified <c>SecurityDescriptor</c></param>
        </member>
        <member name="M:pdftron.SDF.SecurityDescriptor.#ctor(System.String,pdftron.SDF.CreateDelegate)">
            <summary />
            <param name="gui_name" />
            <param name="factory_method" />
        </member>
        <member name="T:pdftron.SDF.SecurityDescriptor">
            <summary>SecurityDescriptor is a class describing SecurityHandler
</summary>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.IsRC4">
            <summary>Checks if RC4 encryption algorithm is used
</summary>
            <returns>true, if RC4 is used, false otherwise
</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.IsAES(pdftron.SDF.Obj)">
            <summary>The following function can be used to verify whether a given stream is 
encrypted using AES.
</summary>
            <param name="stream">A pointer to an <c>SDF::Stream</c> object
</param>
            <returns>true if the given stream is encrypted using AES encryption.
</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.IsAES">
            <summary>Checks if AES encryption algorithm is used
</summary>
            <returns>true, if AES is used, false otherwise
</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.SetEncryptMetadata(System.Boolean)">
            <summary>Sets whether to encrypt metadata
</summary>
            <param name="encrypt_metadata">whether to encrypt metadata
</param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.SetModified(System.Boolean)">
            <summary>Sets if security handler is modified
</summary>
            <param name="is_modified">true if the security handler is modified
</param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.SetModified">
            <summary>Sets if security handler is modified
</summary>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.GetHandlerDocName">
            <summary> Gets the handler doc name.

</summary>
            <returns> The name of the security handler as it appears in the serialized file
as the value of /Filter key in /Encrypt dictionary.
</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.IsModified">
            <summary>Checks if security handler is modified
</summary>
            <returns>true if security handler is modified, false otherwise
</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.GetEncryptionAlgorithmID">
            <summary>Gets encryption algorithm
</summary>
            <returns>encryption algorithm
</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.GetKeyLength">
            <summary>Gets key length
</summary>
            <returns>length of the encryption key
</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.GetPermission(pdftron.SDF.SecurityHandler.Permission)">
            <summary>Gets permission</summary>
            <param name="p">A Permission to be granted.</param>
            <returns>true if the SecurityHandler permits the specified action <c>p</c> on the document, or false if the permission was not granted</returns>
            <remarks>in order to check for permission the method will repeatedly (up to three times) attempt to GetAuthorizationData() and Authorize() permission. If the permission is not granted AuthorizeFailed() callback will be called. This callback method allows derived class to provide UI feedback for failed authorization.</remarks>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.FillEncryptDict(pdftron.SDF.SDFDoc)">
            <summary>Called when an encrypted document is saved. Fills the document's Encryption 
dictionary with whatever information the security handler wants to store in 
the document.
<list type="bullet">
The sequence of events during creation of the encrypt_dict is as follows:
<item><description>encrypt_dict is created (if it does not exist)</description></item><item><description>Filter attribute is added to the dictionary</description></item><item><description>call this method to allow the security handler to add its own attributes</description></item><item><description>call the GetCryptKey to get the algorithm version, key, and key length</description></item><item><description>checks if the V attribute has been added to the dictionary and, if not, then sets V to the algorithm version</description></item><item><description>set the Length attribute if V is 2 or greater</description></item><item><description>add the encrypt_dict to the document</description></item></list></summary>
            <param name="doc">The document to save.
</param>
            <returns>encrypt_dict
</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.Authorize(pdftron.SDF.SecurityHandler.Permission)">
            <summary>The method is called when a user tries to set security for an encrypted document and when a user tries to open a file. It must decide, based on the contents of the authorization data structure, whether or not the user is permitted to open the file, and what permissions the user has for this file.</summary>
            <param name="req_opr">permission to authorize</param>
            <returns />
            <remarks>This callback must not obtain the authorization data <example> by displaying a user interface into which a user can type a password). This is handled by the security handler’s GetAuthorizationData(), which must be called before this callback. Instead, Authorize() should work with authorization data it has access to.</example></remarks>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.IsMasterPasswordRequired">
            <summary>Checks if master password required
</summary>
            <returns>true if master password is required, false otherwise
</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.IsUserPasswordRequired">
            <summary>Checks if user password required
</summary>
            <returns>true if user password required, false otherwise
</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.GetRevisionNumber">
            <summary>Gets revision number
</summary>
            <returns>revsion number
</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.ChangeRevisionNumber(System.Int32)">
            <summary>Changes revision number
</summary>
            <param name="rev_num">new revision number
</param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.SetPermission(pdftron.SDF.SecurityHandler.Permission,System.Boolean)">
            <summary>Set the permission setting of the StdSecurityHandler.
</summary>
            <param name="perm">indicates a permission to set or clear. It can be any of the 
following values:
<code>
e_print				// print the document.	
e_doc_modify		// edit the document more than adding or modifying text notes.
e_extract_content	// enable content extraction
e_mod_annot			// allow modifications to annotations
e_fill_forms		// allow changes to fill in forms
e_access_support	// content access for the visually impaired.
e_assemble_doc		// allow document assembly
e_print_high		// high resolution print.
</code></param>
            <param name="value">true if the permission/s should be granted, false otherwise.
</param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.GetMasterPassword">
            <summary>Gets master password
</summary>
            <returns>master password
</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.ChangeMasterPassword(System.Byte[])">
            <summary>
Changes the master/owner password.
</summary>
            <param name="passwordBuffer">The new master/owner password.</param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.ChangeMasterPassword(System.String)">
            <summary>Changes master password
</summary>
            <param name="password">new master password
</param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.GetUserPassword">
            <summary>Gets user password
</summary>
            <returns>user password
</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.ChangeUserPassword(System.Byte[])">
            <summary>
Changes the user password.
</summary>
            <param name="passwordBuffer">The new user password.</param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.ChangeUserPassword(System.String)">
            <summary>Changes user password
</summary>
            <param name="password">new password
</param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.Initialize(pdftron.SDF.SDFDoc,pdftron.SDF.Obj,System.Int32)">
            <summary />
            <param name="doc" />
            <param name="encrypt_dict" />
            <param name="custom_data" />
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.InitPassword(System.Byte[])">
            <summary>
Initializes the password.
</summary>
            <param name="passwordBuffer">The initial password.</param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.InitPassword(System.String)">
            <summary>
Initializes the password.
</summary>
            <param name="password">The initial password.</param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.Clone">
            <summary>Clones instance of SecurityHandler.
</summary>
            <returns>A new, cloned instance of SecurityHandler.
</returns>
            <remarks>this method must be implemented in any derived class from SecurityHandler.
</remarks>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.EditSecurityData(pdftron.SDF.SDFDoc)">
            <summary>Called when the security handler should activate a dialog box with the current security settings that may be modified.</summary>
            <param name="doc">document to change security data</param>
            <returns>true if the operation was successful false otherwise.</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.AuthorizeFailed">
            <summary>A callback method indicating repeated failed authorization. Override this callback in order to provide a UI feedback for failed authorization. Default implementation returns immediately.</summary>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.GetAuthorizationData(pdftron.SDF.SecurityHandler.Permission)">
            <summary>This method is invoked in case Authorize() failed.The callback must determine the user’s authorization properties for the document by obtaining authorization data (e.g. a password through a GUI dialog).The authorization data is subsequently used by the security handler’s Authorize() to determine whether or not the user is authorized to open the file.</summary>
            <param name="req_opr">the permission for which authorization data is requested.</param>
            <returns>false if the operation was canceled, true otherwise.</returns>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.#ctor(pdftron.SDF.SecurityHandler)">
            <summary>Create a standard security handler from a given handler</summary>
            <param name="s">a SecurityHandler instance</param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.#ctor(pdftron.SDF.StdSecurityHandler!System.Runtime.CompilerServices.IsConst)">
            <summary>Create a standard security handler from a given handler</summary>
            <param name="s">a SecurityHandler instance</param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.#ctor(System.Int32,System.Int32)">
            <summary>Creates a standard security handler</summary>
            <param name="key_len">The bit length of the encryption key (40 or 128 bit).</param>
            <param name="enc_code">The encryption algorithm identifier. The number corresponds to the V entry in encryption dictionary. Currently allowed values are (see Table 3.18 in PDF Reference Manual v1.6 for more details):			
<list type="number"><item><description>Encryption using 40-bit RC4 algorithm.</description></item><item><description>Encryption using 128-bit RC4 algorithm. Available in PDF 1.4 and above.</description></item><item><description>This algorithm was deprecated by PDF standard and is not supported.</description></item><item><description>Encryption using Crypt filters and 128-bit AES (Advanced Encryption Standard) algorithm. Available in PDF 1.6 and above.</description></item></list></param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.#ctor(pdftron.SDF.StdSecurityHandler.AlgorithmType)">
            <summary>Create a standard security handler from a given handler</summary>
            <param name="type">type of encryption algorithm to use</param>
        </member>
        <member name="M:pdftron.SDF.StdSecurityHandler.#ctor">
            <summary>Create a standard security handler from a given handler</summary>
        </member>
        <member name="F:pdftron.SDF.StdSecurityHandler.AlgorithmType.e_AES_256">
            <summary> Use Crypt filters with 256-bit AES (Advanced Encryption Standard) algorithm.</summary>
        </member>
        <member name="F:pdftron.SDF.StdSecurityHandler.AlgorithmType.e_AES">
            <summary> Use Crypt filters with 128-bit AES (Advanced Encryption Standard) algorithm.</summary>
        </member>
        <member name="F:pdftron.SDF.StdSecurityHandler.AlgorithmType.e_RC4_128">
            <summary> 128-bit RC4 algorithm.</summary>
        </member>
        <member name="F:pdftron.SDF.StdSecurityHandler.AlgorithmType.e_RC4_40">
            <summary> 40-bit RC4 algorithm.</summary>
        </member>
        <member name="T:pdftron.SDF.StdSecurityHandler.AlgorithmType">
            <summary>Algorithm types. New in PDFNet v3.1</summary>
        </member>
        <member name="T:pdftron.SDF.StdSecurityHandler">
            <summary> Standard Security Handler is a built-in password-based security handler.</summary>
        </member>
        <member name="T:pdftron.SDF.SecHdlrFwd">
            <summary>
SecHdlrFwd forwards all method calls to the unmanaged implementation.
The unmanaged implementation than either executes the method (e.g. StdHdlr) 
or forwards it to the unmanaged implementation of the security handler.
</summary>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.Finalize">
            <summary> Allows an SecurityHandler to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.Dispose">
            <summary> Releases all resources used by the SecurityHandler </summary>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.SetModified(System.Boolean)">
            <summary>The method allows derived classes to set SecurityHandler is modified flag. This method should be called whenever there are changes (e.g. a password change) to the SecurityHandler</summary>
            <param name="is_modified">new is_modified flag</param>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.SetModified">
            <summary>The method allows derived classes to set SecurityHandler is modified flag. This method should be called whenever there are changes (e.g. a password change) to the SecurityHandler</summary>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.IsModified">
            <summary>If the user changes SecurityHandler's settings (e.g. by changing a password), IsModified() should return true.</summary>
            <returns>true if the SecurityHandler was modified (by calling SetModified()) or false otherwise.</returns>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.GetHandlerDocName">
            <summary> Gets the handler doc name.

</summary>
            <returns> The name of the security handler as it appears in the serialized file
as the value of /Filter key in /Encrypt dictionary.
</returns>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.GetEncryptionAlgorithmID">
            <summary> Gets the encryption algorithm id.

</summary>
            <returns> The encryption algorithm identifier. A code specifying the algorithm
to be used in encrypting and decrypting the document. Returned number corrsponds
to V entry in encryption dictionary. Currently allowed values are from 0-4.
See PDF Reference Manual for more details.
</returns>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.GetKeyLength">
            <summary> Gets the key length.

</summary>
            <returns> The length of the encryption key in bytes.
</returns>
            <remarks>  The returned key length is given in bytes. </remarks>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.AuthorizeFailed">
            <summary>A callback method indicating repeated failed authorization. Override this callback in order to provide a UI feedback for failed authorization. Default implementation returns immediately.</summary>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.GetPermission(pdftron.SDF.SecurityHandler.Permission)">
            <summary>Gets permission</summary>
            <param name="p">A Permission to be granted.</param>
            <returns>true if the SecurityHandler permits the specified action <c>p</c> on the document, or false if the permission was not granted</returns>
            <remarks>in order to check for permission the method will repeatedly (up to three times) attempt to GetAuthorizationData() and Authorize() permission. If the permission is not granted AuthorizeFailed() callback will be called. This callback method allows derived class to provide UI feedback for failed authorization.</remarks>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.Clone">
            <summary>Clones instance of SecurityHandler.
</summary>
            <returns>A new, cloned instance of SecurityHandler.
</returns>
            <remarks>this method must be implemented in any derived class from SecurityHandler.
</remarks>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.EditSecurityData(pdftron.SDF.SDFDoc)">
            <summary>Called when the security handler should activate a dialog box with the current security settings that may be modified.</summary>
            <param name="doc">document to change security data</param>
            <returns>true if the operation was successful false otherwise.</returns>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.FillEncryptDict(pdftron.SDF.SDFDoc)">
            <summary>Fills the document's Encryption dictionary with whatever information the security handler wants to store in the document.
The sequence of events during creation of the encrypt_dict is as follows:
<list type="bullet"><item><description>encrypt_dict is created (if it does not exist)</description></item><item><description>Filter attribute is added to the dictionary</description></item><item><description>call this method to allow the security handler to add its own attributes</description></item><item><description>call the GetCryptKey to get the algorithm version, key, and key length</description></item><item><description>checks if the V attribute has been added to the dictionary and, if not, then sets V to the algorithm version</description></item><item><description>set the Length attribute if V is 2 or greater</description></item><item><description>add the encrypt_dict to the document</description></item></list></summary>
            <param name="doc">document to save</param>
            <returns>encrypted dictionary</returns>
            <remarks>Called when an encrypted document is saved. Unlike all other strings and streams, direct object elements of the encrypt_dict are not encrypted automatically. If you want them encrypted, you must encrypt them before inserting them into the dictionary.</remarks>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.GetAuthorizationData(pdftron.SDF.SecurityHandler.Permission)">
            <summary>This method is invoked in case Authorize() failed.The callback must determine the user’s authorization properties for the document by obtaining authorization data (e.g. a password through a GUI dialog).The authorization data is subsequently used by the security handler’s Authorize() to determine whether or not the user is authorized to open the file.</summary>
            <param name="req_opr">the permission for which authorization data is requested.</param>
            <returns>false if the operation was canceled, true otherwise.</returns>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.Authorize(pdftron.SDF.SecurityHandler.Permission)">
            <summary>The method is called when a user tries to set security for an encrypted document and when a user tries to open a file. It must decide, based on the contents of the authorization data structure, whether or not the user is permitted to open the file, and what permissions the user has for this file.</summary>
            <param name="p">permission to authorize</param>
            <returns />
            <remarks>This callback must not obtain the authorization data <example> by displaying a user interface into which a user can type a password). This is handled by the security handler’s GetAuthorizationData(), which must be called before this callback. Instead, Authorize() should work with authorization data it has access to.</example></remarks>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.Initialize(pdftron.SDF.SDFDoc,pdftron.SDF.Obj,System.Int32)">
            <summary />
            <param name="doc" />
            <param name="encrypt_dict" />
            <param name="custom_data" />
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.#ctor(pdftron.SDF.SecurityHandler!System.Runtime.CompilerServices.IsConst)">
            <summary>Create a standard security handler from a given handler</summary>
            <param name="s">a SecurityHandler instance</param>
        </member>
        <member name="M:pdftron.SDF.SecurityHandler.#ctor(System.Int32,System.Int32,System.String)">
            <summary>Creates a standard security handler</summary>
            <param name="key_len">The bit length of the encryption key (40 or 128 bit).</param>
            <param name="enc_code">The encryption algorithm identifier. The number corresponds to the V entry in encryption dictionary. Currently allowed values are (see Table 3.18 in PDF Reference Manual v1.6 for more details):
<list type="number"><item><description>Encryption using 40-bit RC4 algorithm.</description></item><item><description>Encryption using 128-bit RC4 algorithm. Available in PDF 1.4 and above.</description></item><item><description>This algorithm was deprecated by PDF standard and is not supported.</description></item><item><description>Encryption using Crypt filters and 128-bit AES (Advanced Encryption Standard) algorithm. Available in PDF 1.6 and above.</description></item></list></param>
            <param name="name">name of the security handler</param>
        </member>
        <member name="F:pdftron.SDF.SecurityHandler.Permission.e_assemble_doc">
            <summary> allow document assembly</summary>
        </member>
        <member name="F:pdftron.SDF.SecurityHandler.Permission.e_access_support">
            <summary> content access for the visually impaired.</summary>
        </member>
        <member name="F:pdftron.SDF.SecurityHandler.Permission.e_fill_forms">
            <summary> allow changes to fill in forms</summary>
        </member>
        <member name="F:pdftron.SDF.SecurityHandler.Permission.e_mod_annot">
            <summary> allow modifications to annotations</summary>
        </member>
        <member name="F:pdftron.SDF.SecurityHandler.Permission.e_extract_content">
            <summary> enable content extraction</summary>
        </member>
        <member name="F:pdftron.SDF.SecurityHandler.Permission.e_print_high">
            <summary> high resolution print.</summary>
        </member>
        <member name="F:pdftron.SDF.SecurityHandler.Permission.e_print">
            <summary> print the document.</summary>
        </member>
        <member name="F:pdftron.SDF.SecurityHandler.Permission.e_doc_modify">
            <summary> edit the document more than adding or modifying text notes.</summary>
        </member>
        <member name="F:pdftron.SDF.SecurityHandler.Permission.e_doc_open">
            <summary> open and decrypt the document.</summary>
        </member>
        <member name="F:pdftron.SDF.SecurityHandler.Permission.e_owner">
            <summary> the user has 'owner' rights (e.g. rights to change the document's security settings)</summary>
        </member>
        <member name="T:pdftron.SDF.SecurityHandler.Permission">
            <summary>permission types</summary>
        </member>
        <member name="T:pdftron.SDF.SecurityHandler">
            <summary> Standard Security Handler is a built-in password-based security handler.</summary>
        </member>
        <member name="M:pdftron.SDF.Obj.Finalize">
            <summary> Allows an Obj to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.SDF.Obj.Dispose">
            <summary> Releases all resources used by the Obj </summary>
        </member>
        <member name="M:pdftron.SDF.Obj.SetStreamData(System.Byte[],pdftron.Filters.Filter)">
            <summary>allows to replace the content stream with a new one without creating a new object
</summary>
            <param name="buf">buffer contain new content stream
</param>
            <param name="filter" />
        </member>
        <member name="M:pdftron.SDF.Obj.SetStreamData(System.Byte[])">
            <summary>allows to replace the content stream with a new one without creating a new object
</summary>
            <param name="buf">buffer contain new content stream
</param>
        </member>
        <member name="M:pdftron.SDF.Obj.GetDecodedStream">
            <summary> Gets the decoded stream.

</summary>
            <returns> - A filter to the decoded stream
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.GetRawStream(System.Boolean)">
            <summary> Gets the raw stream.

</summary>
            <param name="decrypt">- If true decrypt the stream if the stream is encrypted.
</param>
            <returns> - A filter to the encoded stream
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.GetRawStreamLength">
            <summary> Gets the raw stream length.

</summary>
            <returns> the length of the raw/encoded stream equal to the Lenght parameter
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.EraseAt(System.Int32)">
            <summary> Checks whether the position is within the array bounds and then removes it from the
array and moves each subsequent element to the slot with the next smaller index and
decrements the arrays length by 1.

</summary>
            <param name="pos">the pos
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.PushBackMatrix(pdftron.Common.Matrix2D)">
            <summary> Appends an array of 6 numbers at the end of the array.

</summary>
            <param name="value">- A matrix used to set the values in an array of six numbers.
The resulting array will be then inserted in this array.
</param>
            <returns> A newly appended array object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.PushBackRect(System.Double,System.Double,System.Double,System.Double)">
            <summary> Appends an array of 4 numbers at the end of the array.

</summary>
            <param name="x1">the x1
</param>
            <param name="y1">the y1
</param>
            <param name="x2">the x2
</param>
            <param name="y2">the y2
</param>
            <returns> A newly appended array object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.PushBack(pdftron.SDF.Obj)">
            <summary> Appends an existing Obj at the end of the array.

</summary>
            <param name="obj">The value to be inserted into the dictionary. If 'obj' is
indirect (i.e. is a shared) object it will be inserted by reference,
otherwise the object will be cloned and then appended.
</param>
            <returns> A newly appended object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.PushBackNull">
            <summary> Appends a new Obj::Type::e_null object at the end of the array.

</summary>
            <returns> The new null object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.PushBackText(System.String)">
            <summary> Appends a new Obj::Type::e_string object at the end of the array.

</summary>
            <param name="value">The value of the Obj::Type::e_string object to be inserted.
</param>
            <returns> The new string object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  InsertText will create the string object as a 'PDF Text' object. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.PushBackString(System.Byte[])">
            <summary> Appends a new Obj::Type::e_string object at the end of the array.

</summary>
            <param name="buf">The buffer used to set the value of the Obj::Type::e_string
object to be inserted.
</param>
            <returns> The new string object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.PushBackString(System.String)">
            <summary> Appends a new Obj::Type::e_string object at the end of the array.

</summary>
            <param name="value">- The value of the Obj::Type::e_string object.
</param>
            <returns> The new string object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.PushBackNumber(System.Double)">
            <summary> Appends a new Obj::Type::e_number object at the end of the array.

</summary>
            <param name="value">- The value of the Obj::Type::e_number object.
</param>
            <returns> The new number object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.PushBackDict">
            <summary> Appends a new Obj::Type::e_dict object at the end of the array.

</summary>
            <returns> The new dictionary object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.PushBackBool(System.Boolean)">
            <summary> Appends a new Obj::Type::e_bool object at the end of the array.

</summary>
            <param name="value">the value
</param>
            <returns> The new boolean object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.PushBackArray">
            <summary> Appends a new Obj::Type::e_array object at the end of the array.

</summary>
            <returns> The new array object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.PushBackName(System.String)">
            <summary> Appends a new Obj::Type::e_name object at the end of the array.

</summary>
            <param name="name">- The value of the Obj::Type::e_name object.
</param>
            <returns> The new array object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.Insert(System.Int32,pdftron.SDF.Obj)">
            <summary> Inserts an existing Obj in this array.

</summary>
            <param name="pos">- The location in the array to insert the object . The object is inserted
before the specified location. The first element in an array has a pos of
zero. If pos &gt;= Array-&gt;Length(), appends obj to array.
</param>
            <param name="obj">The value to be inserted into the dictionary. If 'obj' is
indirect (i.e. is a shared) object it will be inserted by reference,
otherwise the object will be cloned and then inserted.
</param>
            <returns> A newly inserted object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.InsertMatrix(System.Int32,pdftron.Common.Matrix2D)">
            <summary> Inserts an array of 6 numbers in this array.

</summary>
            <param name="pos">- The location in the array to insert the object . The object is inserted
before the specified location. The first element in an array has a pos of
zero. If pos &gt;= Array-&gt;Length(), appends obj to array.
</param>
            <param name="value">- A matrix used to set the values in an array of six numbers.
The resulting array will be then inserted in this array.
</param>
            <returns> A newly created array object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.InsertRect(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary> Inserts an array of 4 numbers in this array.

</summary>
            <param name="pos">- The location in the array to insert the object . The object is inserted
before the specified location. The first element in an array has a pos of
zero. If pos &gt;= Array-&gt;Length(), appends obj to array.
</param>
            <param name="x1">the x1
</param>
            <param name="y1">the y1
</param>
            <param name="x2">the x2
</param>
            <param name="y2">the y2
</param>
            <returns> A newly created array object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.InsertNull(System.Int32)">
            <summary> Inserts an Obj::Type::e_null object in the array.

</summary>
            <param name="pos">- The location in the array to insert the object . The object is inserted
before the specified location. The first element in an array has a pos of
zero. If pos &gt;= Array-&gt;Length(), appends obj to array.
</param>
            <returns> A newly created null object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.InsertText(System.Int32,System.String)">
            <summary> Inserts an Obj::Type::e_string object in the array.

</summary>
            <param name="pos">- The location in the array to insert the object . The object is inserted
before the specified location. The first element in an array has a pos of
zero. If pos &gt;= Array-&gt;Length(), appends obj to array.
</param>
            <param name="value">The value of the Obj::Type::e_string object to be inserted.
</param>
            <returns> A newly created string object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  InsertText will create the string object as a 'PDF Text' object. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.InsertString(System.Int32,System.Byte[])">
            <summary> Inserts an Obj::Type::e_string object in the array.

</summary>
            <param name="pos">- The location in the array to insert the object . The object is inserted
before the specified location. The first element in an array has a pos of
zero. If pos &gt;= Array-&gt;Length(), appends obj to array.
</param>
            <param name="buf">The buffer used to set the value of the Obj::Type::e_string
object to be inserted.
</param>
            <returns> A newly created string object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.InsertString(System.Int32,System.String)">
            <summary> Inserts an Obj::Type::e_string object in the array.

</summary>
            <param name="pos">- The location in the array to insert the object . The object is inserted
before the specified location. The first element in an array has a pos of
zero. If pos &gt;= Array-&gt;Length(), appends obj to array.
</param>
            <param name="value">The value of the Obj::Type::e_string object to be inserted.
</param>
            <returns> A newly created string object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.InsertNumber(System.Int32,System.Double)">
            <summary> Inserts an Obj::Type::e_number object in the array.

</summary>
            <param name="pos">- The location in the array to insert the object . The object is inserted
before the specified location. The first element in an array has a pos of
zero. If pos &gt;= Array-&gt;Length(), appends obj to array.
</param>
            <param name="value">The value of the Obj::Type::e_number object to be inserted.
</param>
            <returns> A newly created number object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.InsertDict(System.Int32)">
            <summary> Inserts an Obj::Type::e_dict object in the array.

</summary>
            <param name="pos">- The location in the array to insert the object . The object is inserted
before the specified location. The first element in an array has a pos of
zero. If pos &gt;= Array-&gt;Length(), appends obj to array.
</param>
            <returns> A newly created dictionary object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.InsertBool(System.Int32,System.Boolean)">
            <summary> Inserts an <c>Obj::Type::e_bool</c> object in the array.

</summary>
            <param name="pos">- The location in the array to insert the object . The object is inserted
before the specified location. The first element in an array has a pos of
zero. If <c>pos &gt;= Array-&gt;Length()</c>, appends obj to array.
</param>
            <param name="value">The value of the Obj::Type::e_bool object to be inserted.
</param>
            <returns> A newly created boolean object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.InsertArray(System.Int32)">
            <summary> Inserts an <c>Obj::Type::e_array</c> object in the array.

</summary>
            <param name="pos">- The location in the array to insert the object . The object is inserted
before the specified location. The first element in an array has a pos of
zero. If <c>pos &gt;= Array-&gt;Length()</c>, appends obj to array.
</param>
            <returns> A newly created array object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.InsertName(System.Int32,System.String)">
            <summary> Inserts an Obj::Type::e_name object in the array.

</summary>
            <param name="pos">- The location in the array to insert the object . The object is inserted
before the specified location. The first element in an array has a pos of
zero. If <c>pos &gt;= Array-&gt;Length()</c>, appends obj to array.
</param>
            <param name="name">The value of the Obj::Type::e_name object to be inserted.
</param>
            <returns> A newly created name object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.GetAt(System.Int32)">
            <summary> Gets the at.

</summary>
            <param name="index">- The array element to obtain. The first element in an array has an index of zero.
</param>
            <returns> the at
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.Rename(System.String,System.String)">
            <summary> Change the key value of a dictionary entry.
The key can't be renamed if another key with the same name already exists
in the dictionary. In this case Rename returns false.

</summary>
            <param name="old_key">the old_key
</param>
            <param name="new_key">the new_key
</param>
            <returns> true, if successful
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.Erase(pdftron.SDF.DictIterator)">
            <summary> Removes an element in the dictionary from specified position.

</summary>
            <param name="pos">the pos
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.Erase(System.String)">
            <summary> Removes an element in the dictionary that matches the given key.

</summary>
            <param name="key">the key
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.PutMatrix(System.String,pdftron.Common.Matrix2D)">
            <summary> Inserts a <c>&lt;key, [a,b,c,d,h,v]&gt;</c> pair in the dictionary.
</summary>
            <param name="key">The key of the value to set.
</param>
            <param name="value">- A matrix used to set the values in an array of six numbers.
The resulting array will be inserted into the dictionary.
</param>
            <returns> A newly created array object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If a dictionary already contains an entry with the same key, the old entry
will be deleted and all DictIterators to this entry will be invalidated.
</remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.PutRect(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary> Inserts a <c>&lt;key, [x1,y1,x2,y2]&gt;</c> pair in the dictionary.

</summary>
            <param name="key">The key of the value to set.
</param>
            <param name="x1">the x1
</param>
            <param name="y1">the y1
</param>
            <param name="x2">the x2
</param>
            <param name="y2">the y2
</param>
            <returns> A newly created array object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If a dictionary already contains an entry with the same key, the old entry
will be deleted and all DictIterators to this entry will be invalidated.
</remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.Put(System.String,pdftron.SDF.Obj)">
            <summary> Inserts a <c>&lt;key, Obj&gt;</c> pair in the dictionary.

</summary>
            <param name="key">The key of the value to set.
</param>
            <param name="obj">The value to be inserted into the dictionary. If 'obj' is
indirect (i.e. is a shared) object it will be inserted by reference,
otherwise the object will be cloned and then inserted into the dictionary.
</param>
            <returns> A newly inserted object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.PutNull(System.String)">
            <summary> Inserts a <c>&lt;key, Obj::Type::e_null&gt;</c> pair in the dictionary.

</summary>
            <param name="key">The key of the value to set.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  The effect of calling this method is essentially the same as dict.Erase(key) . </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.PutText(System.String,System.String)">
            <summary> Inserts a <c>&lt;key, Obj::Type::e_string&gt;</c> pair in the dictionary.

</summary>
            <param name="key">The key of the value to set.
</param>
            <param name="value">The value of the Obj::Type::e_string object to be inserted into
the dictionary.
</param>
            <returns> A newly created string object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  PutText will create the string object as a 'PDF Text' object. 
If a dictionary already contains an entry with the same key, the old entry 
will be deleted and all DictIterators to this entry will be invalidated.</remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.PutString(System.String,System.Byte[])">
            <summary> Inserts a <c>&lt;key, Obj::Type::e_string&gt;</c> pair in the dictionary.

</summary>
            <param name="key">The key of the value to set.
</param>
            <param name="buf">The buffer used to set the value of the Obj::Type::e_string
object to be inserted into the dictionary.
</param>
            <returns> A newly created string object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If a dictionary already contains an entry with the same key, the old entry 
will be deleted and all DictIterators to this entry will be invalidated.</remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.PutString(System.String,System.String)">
            <summary> Inserts a <c>&lt;key, Obj::Type::e_string&gt;</c> pair in the dictionary.

</summary>
            <param name="key">The key of the value to set.
</param>
            <param name="value">The value of the Obj::Type::e_string object to be inserted into
the dictionary.
</param>
            <returns> A newly created string object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If a dictionary already contains an entry with the same key, the old entry 
will be deleted and all DictIterators to this entry will be invalidated.
</remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.PutNumber(System.String,System.Double)">
            <summary> Inserts a <c>&lt;key, Obj::Type::e_number&gt;</c> pair in the dictionary.

</summary>
            <param name="key">The key of the value to set.
</param>
            <param name="value">The value of the Obj::Type::e_number object to be inserted into
the dictionary.
</param>
            <returns> A newly created number object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If a dictionary already contains an entry with the same key, the old entry
will be deleted and all DictIterators to this entry will be invalidated.
</remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.PutDict(System.String)">
            <summary> Inserts a <c>&lt;key, Obj::Type::e_dict&gt;</c> pair in the dictionary.

</summary>
            <param name="key">The key of the value to set.
</param>
            <returns> A newly created dictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If a dictionary already contains an entry with the same key, the old entry 
will be deleted and all DictIterators to this entry will be invalidated.
</remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.PutBool(System.String,System.Boolean)">
            <summary> Inserts a <c>&lt;key, Obj::Type::e_bool&gt;</c> pair in the dictionary.

</summary>
            <param name="key">The key of the value to set.
</param>
            <param name="value">The value of the Obj::Type::e_bool object to be inserted into
the dictionary.
</param>
            <returns> A newly created boolean object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If a dictionary already contains an entry with the same key, the old entry 
will be deleted and all DictIterators to this entry will be invalidated.
</remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.PutArray(System.String)">
            <summary> Inserts a <c>&lt;key, Obj::Type::e_array&gt;</c> pair in the dictionary.

</summary>
            <param name="key">The key of the value to set.
</param>
            <returns> A newly created array object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If a dictionary already contains an entry with the same key, the old entry 
will be deleted and all DictIterators to this entry will be invalidated.
</remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.PutName(System.String,System.String)">
            <summary> Inserts a <c>&lt;key, Obj::Type::e_name&gt;</c> pair in the dictionary.

</summary>
            <param name="key">The key of the value to set.
</param>
            <param name="name">The value of the Obj::Type::e_name object to be inserted into
the dictionary.
</param>
            <returns> A newly created name object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  If a dictionary already contains an entry with the same key, the old entry 
will be deleted and all DictIterators to this entry will be invalidated.</remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.Get(System.String)">
            <summary> Search the dictionary for a given key and throw an exception if the key is not found.

</summary>
            <param name="key">- a key to search for in the dictionary
</param>
            <returns> Obj::Null object if the value matching specified key is a Obj::Null object.
otherwise return the interator to the matching key/value pair.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.FindObj(System.String)">
            <summary> Search the dictionary for a given key.

</summary>
            <param name="key">- a key to search for in the dictionary
</param>
            <returns> NULL if the dictionary does not contain the specified key.
Otherwise return the corresponding value.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  A dictionary entry whose value is Obj::Null is equivalent to an absent entry. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.Find(System.String)">
            <summary> Search the dictionary for a given key.

</summary>
            <param name="key">- a key to search for in the dictionary
</param>
            <returns> The iterator to the matching key/value pair or invalid iterator
(i.e. itr.hasNext()==fase) if the if the dictionary does not contain the given key.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>A dictionary entry whose value is Obj::Null is equivalent to an absent entry. </remarks>
            <code>  
DictIterator itr = info_dict.find("Info");
if (itr.hasNext()) {
Obj info = itr.value();
if (info.isDict())
info.putString("Producer", "PDFTron PDFNet SDK");
}
</code>
        </member>
        <member name="M:pdftron.SDF.Obj.GetDictIterator">
            <summary> Gets the dict iterator.

</summary>
            <returns> an iterator that addresses the first element in the dictionary.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <code>  
DictIterator itr = dict.getDictIterator();
while (itr.hasNext()) {
Obj key = itr.key();
Obj value = itr.value();
// ...
itr.next()
}
}
</code>
        </member>
        <member name="M:pdftron.SDF.Obj.SetName(System.String)">
            <summary> Sets the name.

</summary>
            <param name="name">- value used to set Name object.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.GetName">
            <summary> Gets the name.

</summary>
            <returns> string representing the Name object.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.SetString(System.Byte[])">
            <summary> Sets the string object value.

</summary>
            <param name="buf">the new string
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.SetString(System.String)">
            <summary> Sets the string object value.

</summary>
            <param name="str">the new string
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.GetAsPDFText">
            <summary> Convert the SDF/Cos String object to 'PDF Text String' (a Unicode string).

PDF Text Strings are not used to represent page content, however they
are used in text annotations, bookmark names, article names, document
information etc. These strings are encoded in either PDFDocEncoding or
Unicode character encoding. For more information on PDF Text Strings,
please refer to section 3.8.1 'Text Strings' in PDF Reference.

</summary>
            <returns> the as pdf text
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  Not all SDF/Cos String objects are used to represent 'PDF Text'. 
PDF Reference indicates (on a case by case basis ) where an SDF/Cos String
object can be used as 'PDF Text'.
</remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.GetRawBuffer">
            <summary> Gets the buffer.

</summary>
            <returns> An array containing the unencrypted string data
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>   Similar in behaviour to GetBuffer except that no decryption is done.
If the file is not encrypted the result should be the same as GetBuffer
</remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.GetBuffer">
            <summary> Gets the buffer.

</summary>
            <returns> a pointer to the string buffer. Please note that the string may not
be NULL terminated and that it may not be represented in ASCII or Unicode
encoding. For more information on SDF/Cos String objects, please refer to
section 3.2.3 'String Objects' in PDF Reference Manual.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  if SDF/Cos String object is represented as 'PDF Text' (Section 3.8.1 
'Text Strings' in PDF Reference) you can use GetAsPDFText method to obtain
Unicode representation of the string.
</remarks>
            <remarks>  use Size() member function in order to obtain the number of bytes in string buffer. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.SetNumber(System.Double)">
            <summary> Sets the number.

</summary>
            <param name="n">- value used to set Number object.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.GetNumber">
            <summary> Gets the number.

</summary>
            <returns> value, if this is Number.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.SetBool(System.Boolean)">
            <summary> Sets the bool.

</summary>
            <param name="b">- bool value used to set Bool object.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.GetBool">
            <summary> Gets the bool.

</summary>
            <returns> bool value if this is Bool.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.IsLoaded">
            <summary> Checks if is loaded.

</summary>
            <returns> true if the object is loaded in memory.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.IsMarked">
            <summary> Checks if is marked.

</summary>
            <returns> true if the object is marked.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.SetMark(System.Boolean)">
            <summary> Set the object mark. Mark is a boolean value that can be associated with every
indirect object. This is especially useful when and object graph should be
traversed and an operation should be performed on each node only once.

</summary>
            <param name="mark">the new mark
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.IsFree">
            <summary> Checks if is free.

</summary>
            <returns> true if the object is in use or is marked as free.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.GetOffset">
            <summary> Gets the offset.

</summary>
            <returns> object offset from the beginning of the file. If this is not an Indirect object,
offset of a containing indirect object is returned.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.GetGenNum">
            <summary> Gets the gen num.

</summary>
            <returns> generation number. If this is not an Indirect object, generation number of
a containing indirect object is returned.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.GetObjNum">
            <summary> Gets the obj num.

</summary>
            <returns> object number. If this is not an Indirect object, object number of
a containing indirect object is returned.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.op_Inequality(pdftron.SDF.Obj,pdftron.SDF.Obj)">
            <summary>Inequality operator checks whether two <c>Obj</c> objects are different.</summary>
            <param name="lhs">
                <c>Obj</c> at the left of the operator
</param>
            <param name="rhs">
                <c>Obj</c> at the right of the operator
</param>
            <returns>true if both objects are not equals, false otherwise
</returns>
        </member>
        <member name="M:pdftron.SDF.Obj.op_Equality(pdftron.SDF.Obj,pdftron.SDF.Obj)">
            <summary>Equality operator checks whether two <c>Obj</c> objects are the same.</summary>
            <param name="lhs">
                <c>Obj</c> at the left of the operator
</param>
            <param name="rhs">
                <c>Obj</c> at the right of the operator
</param>
            <returns>true if both objects are equals, false otherwise
</returns>
        </member>
        <member name="M:pdftron.SDF.Obj.IsEqual(pdftron.SDF.Obj)">
            <summary> Checks if is equal.

</summary>
            <param name="to">the to
</param>
            <returns> true if two Obj pointers point to the same object.
This method does not compare object content so you should not use
this method to compare two (e.g. Number) objects
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.Obj.Size">
            <summary> Size.

</summary>
            <returns> the 'size' of the object. The definition of 'size' depends on
the object type. In particular:
- For a dictionary or a stream object, the method will return the
number of key/value pairs in the dictionary.
- For an array object the method will return the number of Obj
enties in the array.
- For a string object the method will return the number of bytes
in the string buffer.
- For any other object the method will always return 1.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.Write(pdftron.Filters.FilterWriter)">
            <summary> The function writes the Obj to the output stream.

</summary>
            <param name="stream">- the input stream where the Obj will be written
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.GetDoc">
            <summary> Gets the doc.

</summary>
            <returns> the document to which this object belongs.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.IsStream">
            <summary> Checks if is stream.

</summary>
            <returns> true if this is a Stream, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.IsArray">
            <summary> Checks if is array.

</summary>
            <returns> true if this is an Array, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.IsDict">
            <summary> Checks if is dict.

</summary>
            <returns> true if this is a dictionary (i.e. Dict), false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.IsContainer">
            <summary> Checks if is container.

</summary>
            <returns> true if this is a Container (a dictionary, array, or a stream),
false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.IsIndirect">
            <summary> Checks if is indirect.

</summary>
            <returns> true if this is Indirect object (i.e. object referenced in the
cross-reference table), false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.IsName">
            <summary> Checks if is name.

</summary>
            <returns> true if this is Name, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.IsString">
            <summary> Checks if is string.

</summary>
            <returns> true if this is a Str (String) object, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.IsNull">
            <summary> Checks if is null.

</summary>
            <returns> true if this is a Null object, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.IsNumber">
            <summary> Checks if is number.

</summary>
            <returns> true if this is a Number object, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.IsBool">
            <summary> Checks if is bool.

</summary>
            <returns> true if this is a Bool object, false otherwise.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="M:pdftron.SDF.Obj.GetType">
            <summary> Gets the type.

</summary>
            <returns> the object type.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  this method can be invoked on any Obj. </remarks>
        </member>
        <member name="F:pdftron.SDF.Obj.ObjType.e_stream">
            <summary>stream object</summary>
        </member>
        <member name="F:pdftron.SDF.Obj.ObjType.e_array">
            <summary>array object</summary>
        </member>
        <member name="F:pdftron.SDF.Obj.ObjType.e_dict">
            <summary>dictionary object</summary>
        </member>
        <member name="F:pdftron.SDF.Obj.ObjType.e_string">
            <summary>string object</summary>
        </member>
        <member name="F:pdftron.SDF.Obj.ObjType.e_name">
            <summary>name object</summary>
        </member>
        <member name="F:pdftron.SDF.Obj.ObjType.e_number">
            <summary>number object</summary>
        </member>
        <member name="F:pdftron.SDF.Obj.ObjType.e_bool">
            <summary>bool object</summary>
        </member>
        <member name="F:pdftron.SDF.Obj.ObjType.e_null">
            <summary>null object</summary>
        </member>
        <member name="T:pdftron.SDF.Obj.ObjType">
            <summary>Obj types</summary>
        </member>
        <member name="T:pdftron.SDF.Obj">
            <summary> Obj is a concrete class for all SDF/Cos objects. Obj hierarchy implements the 
composite design pattern. As a result, you can invoke a member function of any 
'derived' object through Obj interface. If the member function is not supported 
(e.g. if you invoke Obj::GetNumber() on a boolean object) an Exception will be 
thrown.

You can use GetType() or obl.Is???() member functions to find out type-information at 
run time, however most of the time the type can be inferred from the PDF specification.
Therefore when you call Doc::GetTrailer() you can assume that returned object is 
a dictionary. If there is any ambiguity use Is???() methods. 

Objects can't be shared across documents, however you can use Doc::ImportObj() 
to copy objects from one document to another. 

Objects can be shared within a document provided that they are created as indirect.
Indirect objects are the ones that are referenced in cross-reference table.
To create an object as indirect use Doc::CreateIndirect???() (where ? is the 
Object type).
</summary>
        </member>
        <member name="M:pdftron.SDF.ObjSet.Finalize">
            <summary> Allows an ObjSet to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.SDF.ObjSet.CreateString(System.String)">
            <summary> Creates the string.

</summary>
            <param name="value">the value
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.ObjSet.CreateNumber(System.Double)">
            <summary> Creates the number.

</summary>
            <param name="value">the value
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.ObjSet.CreateNull">
            <summary> Creates the null.

</summary>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.ObjSet.CreateDict">
            <summary> Creates the dict.

</summary>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.ObjSet.CreateBool(System.Boolean)">
            <summary> Creates the bool.

</summary>
            <param name="value">the value
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.ObjSet.CreateArray">
            <summary> Creates the array.

</summary>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.ObjSet.CreateName(System.String)">
            <summary> Creates the name.

</summary>
            <param name="name">the name
</param>
            <returns> the obj
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.ObjSet.Dispose">
            <summary> Releases all resources used by the ObjSet </summary>
        </member>
        <member name="M:pdftron.SDF.ObjSet.#ctor">
            <summary> Instantiates a new obj set.</summary>
        </member>
        <member name="T:pdftron.SDF.ObjSet">
            <summary> ObjSet is a lightweight container that can hold a collection of SDF objects.</summary>
        </member>
        <member name="M:pdftron.SDF.DictIterator.Finalize">
            <summary> Allows an DictIterator to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.SDF.DictIterator.Dispose">
            <summary> Releases all resources used by the DictIterator </summary>
        </member>
        <member name="M:pdftron.SDF.DictIterator.op_Inequality(pdftron.SDF.DictIterator,pdftron.SDF.DictIterator)">
            <summary>Inequality operator checks whether two <c>DictIterator</c> objects are different.</summary>
            <param name="lhs">
                <c>DictIterator</c> at the left side of the operator
</param>
            <param name="rhs">
                <c>DictIterator</c> at the right side of the operator
</param>
            <returns>true if both objects are not equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.SDF.DictIterator.op_Equality(pdftron.SDF.DictIterator,pdftron.SDF.DictIterator)">
            <summary>Equality operator checks whether two <c>DictIterator</c> objects are the same.</summary>
            <param name="lhs">
                <c>DictIterator</c> at the left side of the operator
</param>
            <param name="rhs">
                <c>DictIterator</c> at the right side of the operator
</param>
            <returns>true if both objects are equal, false otherwise
</returns>
        </member>
        <member name="M:pdftron.SDF.DictIterator.op_Assign(pdftron.SDF.DictIterator)">
            <summary>Assignment operator</summary>
            <param name="rhs">
                <c>DictIterator</c> at the right side of the operator
</param>
            <returns>
                <c>DictIterator</c> that equals to the object at the right side of the operator
</returns>
        </member>
        <member name="M:pdftron.SDF.DictIterator.Equals(System.Object)">
            <summary>checks if equals to the specified <c>DictIterator</c> object
</summary>
            <param name="rhs">specified <c>DictIterator</c></param>
            <returns>true if both are equal
</returns>
        </member>
        <member name="M:pdftron.SDF.DictIterator.Set(pdftron.SDF.DictIterator)">
            <summary>Sets value to the specified <c>DictIterator</c></summary>
            <param name="p">another <c>DictIterator</c> object
</param>
        </member>
        <member name="M:pdftron.SDF.DictIterator.Value">
            <summary>Value
</summary>
            <returns>value of the current dictionary entry
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">PDFNetException the PDFNet exception</exception>
        </member>
        <member name="M:pdftron.SDF.DictIterator.Key">
            <summary>Key
</summary>
            <returns>key of the current dictionary entry
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.DictIterator.HasNext">
            <summary> Checks for next.

</summary>
            <returns> true if the iterator can be successfully advanced to the
next element; false if the end collection is reached.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.SDF.DictIterator.Next">
            <summary> Advances the iterator to the next element of the collection.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.SDF.DictIterator">
            <summary> DictIterator is used to traverse key-value pairs in a dictionary.	
<example>
DictIterator can be used to print out all the entries
in a given Obj dictionary as follows: 
<code>  
DictIterator itr = dict.getDictIterator();
while (itr.hasNext()) {
Obj key = itr.key();		
printf(key.getName());
Obj value = itr.value();
//...
itr.next()
}
}
</code></example></summary>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.Finalize">
            <summary> Allows an FilterWriter to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.Dispose">
            <summary> Releases all resources used by the FilterWriter </summary>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.FlushAll">
            <summary> Forces any data remaining in the filter chain to the source or destination.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.Flush">
            <summary> Forces any data remaining in the buffer to be written to input or output filter.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.Tell">
            <summary> Reports the current read position in the stream relative to the stream origin.

</summary>
            <returns> - The current position in the stream
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.Seek(System.Int32,pdftron.Filters.Filter.ReferencePos)">
            <summary> Sets the position within the current stream.

</summary>
            <param name="offset">- A byte offset relative to origin. If offset is negative,
the new position will precede the position specified by origin by the number
of bytes specified by offset. If offset is zero, the new position will be the
position specified by origin. If offset is positive, the new position will follow
the position specified by origin by the number of bytes specified by offset.
</param>
            <param name="origin">- A value of type ReferencePos indicating the reference point used
to obtain the new position
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  - After each Seek() operation the number of consumed bytes (i.e. Count()) is set to 0. </remarks>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.GetAttachedFilter">
            <summary> Gets the attached filter.

</summary>
            <returns> - The attached Filter or a NULL filter if no filter is attached.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.AttachFilter(pdftron.Filters.Filter)">
            <summary> Attaches a filter to the this FilterWriter.

</summary>
            <param name="filter">the filter
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.Count">
            <summary> Count.

</summary>
            <returns> - the number of bytes consumed since opening the filter or
since the last Seek operation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.WriteBuffer(System.Byte[])">
            <summary> Write buffer.

</summary>
            <param name="buf">the buf
</param>
            <returns> - returns the number of bytes actually written to a stream. This number may
less than buf_size if the stream is corrupted.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.WriteFilter(pdftron.Filters.FilterReader)">
            <summary> Write the entire input stream to the output stream (i.e. to this FilterWriter).

</summary>
            <param name="reader">A FilterReader attached to an input stream.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.WriteLine(System.String)">
            <summary> Write out a null terminated 'line' followed by a end of line character
default end of line character  is carriage return.

</summary>
            <param name="str">the line
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.WriteString(System.String)">
            <summary> Write a string to the output stream.

</summary>
            <param name="str">A string to write to the output stream.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.WriteInt(System.Int64)">
            <summary> Write a 64 bit integer to the output stream.

</summary>
            <param name="num">An integer to write to the output stream.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.WriteInt(System.Int32)">
            <summary> Write a 32 bit integer to the output stream.

</summary>
            <param name="num">An integer to write to the output stream.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.WriteUChar(System.Byte)">
            <summary> Write a single character to the output stream.

</summary>
            <param name="ch">An unsigned character to write to the output stream.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.#ctor(pdftron.Filters.Filter)">
            <summary> Instantiates a new filter writer.

</summary>
            <param name="output_filter">the filter
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterWriter.#ctor">
            <summary> Instantiates a new filter writer.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.Filters.FilterWriter">
            <summary> FilterWriter is a utility class providing a convenient way to write data
to an output filter (using Filter directly is not very intuitive).
</summary>
            <example>
                <code>  
StdFile outfile=new StdFile("file.dat"), StdFile.e_write_mode);
FilterWriter fwriter=new FilterWriter(outfile);
byte[] buf=...
fwriter.writeBuffer(buf);
fwriter.flush();
</code>
            </example>
        </member>
        <member name="M:pdftron.Filters.FilterReader.Finalize">
            <summary> Allows an FilterReader to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.Filters.FilterReader.Dispose">
            <summary> Releases all resources used by the FilterReader </summary>
        </member>
        <member name="M:pdftron.Filters.FilterReader.FlushAll">
            <summary> Forces any data remaining in the filter chain to the source or destination.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterReader.Flush">
            <summary> Forces any data remaining in the buffer to be written to input or output filter.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterReader.Tell">
            <summary> Reports the current read position in the stream relative to the stream origin.

</summary>
            <returns> - The current position in the stream
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterReader.Seek(System.Int32,pdftron.Filters.Filter.ReferencePos)">
            <summary> Sets the position within the current stream.

</summary>
            <param name="offset">- A byte offset relative to origin. If offset is negative,
the new position will precede the position specified by origin by the number
of bytes specified by offset. If offset is zero, the new position will be the
position specified by origin. If offset is positive, the new position will follow
the position specified by origin by the number of bytes specified by offset.
</param>
            <param name="origin">- A value of type ReferencePos indicating the reference point used
to obtain the new position
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  - After each Seek() operation the number of consumed bytes (i.e. Count()) is set to 0. </remarks>
        </member>
        <member name="M:pdftron.Filters.FilterReader.GetAttachedFilter">
            <summary> Gets the attached filter.

</summary>
            <returns> - The attached Filter or a NULL filter if no filter is attached.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterReader.AttachFilter(pdftron.Filters.Filter)">
            <summary> Attaches a filter to the this FilterReader.

</summary>
            <param name="filter">the filter to attach
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterReader.Count">
            <summary> Count.

</summary>
            <returns> - the number of bytes consumed since opening the filter or
since the last Seek operation.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterReader.Read(System.Byte[])">
            <summary> Read.

</summary>
            <param name="buf">the buf_size
</param>
            <returns> - returns the number of bytes actually read and stored in buffer (buf),
which may be less than buf_size if the end of the file is encountered before
reaching count.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterReader.Peek">
            <summary> Peek.

</summary>
            <returns> - the next character without extracting it from the stream or
or EOF (-1) if the end of file is reached.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterReader.Get">
            <summary> Gets the next character

</summary>
            <returns> - the next character from the stream or EOF (-1) if the end of file is reached.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterReader.#ctor(pdftron.Filters.Filter)">
            <summary> Instantiates a new filter reader.

</summary>
            <param name="input_filter">input filter
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FilterReader.#ctor">
            <summary> Instantiates a new filter reader.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.Filters.FilterReader">
            <summary> FilterReader is a utility class providing a convenient way to read data
from an input filter (using Filter directly is not very intuitive).		
</summary>
            <example>
                <code>  
MappedFile file=new MappedFile("my_stream.txt"));
FilterReader reader=new FilterReader(file);
while (reader.Read(...)) ...
</code>
            </example>
        </member>
        <member name="M:pdftron.Filters.StreamAdapterFilter.#ctor(System.IO.Stream)">
            <summary> Constructor for StreamAdapterFilter.

</summary>
            <param name="input_stream">the input data stream. Must be seekable.
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.Filters.StreamAdapterFilter">
            <summary> StreamAdapterFilter filter can be used to turn a readable System.Stream into a PDFNet Filter
</summary>
        </member>
        <member name="M:pdftron.Filters.FlateEncode.#ctor(pdftron.Filters.Filter,System.Int32,System.Int32)">
            <summary> Instantiates a new flate encode.

</summary>
            <param name="input_filter">input filter
</param>
            <param name="compression_level">compression level
</param>
            <param name="buf_sz">size of buffer
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FlateEncode.#ctor(pdftron.Filters.Filter,System.Int32)">
            <summary> Instantiates a new flate encode.

</summary>
            <param name="input_filter">the input_filter
</param>
            <param name="compression_level">compression level
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.FlateEncode.#ctor(pdftron.Filters.Filter)">
            <summary> Constructor for Flate encoder.

</summary>
            <param name="input_filter">the input data stream
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.Filters.FlateEncode">
            <summary> FlateEncode filter can be used to compress any data stream 
using Flate (i.e. ZIP) compression method. 
</summary>
        </member>
        <member name="M:pdftron.Filters.ASCII85Encode.#ctor(pdftron.Filters.Filter,System.Int32,System.Int32)">
            <summary> Instantiates a new ASCII85Encode.

</summary>
            <param name="input_filter">input filter
</param>
            <param name="line_width">specifies the width of the encoded line expressed in the number of characters.
</param>
            <param name="buf_sz">size of the buffer/input filter
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.ASCII85Encode.#ctor(pdftron.Filters.Filter)">
            <summary> Instantiates a new ASCII85Encode from specified input filter

</summary>
            <param name="input_filter">input filter
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.Filters.ASCII85Encode">
            <summary> ASCII85Encode filter can be used to encode any data stream
into a stream that does not contain any binary characters.
</summary>
        </member>
        <member name="M:pdftron.Filters.MemoryFilter.SetAsInputFilter">
            <summary> Sets this <c>MemoryFilter</c> as input filter.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks> MemoryFilter specific function used to change filter mode from output to input. </remarks>
            <remarks> The utility function is usefull in cases when and output data buffer should be
converted to an input stream.
</remarks>
            <remarks>  The function has no effect on an input MemoryFilter. </remarks>
        </member>
        <member name="M:pdftron.Filters.MemoryFilter.Reset">
            <summary />
        </member>
        <member name="M:pdftron.Filters.MemoryFilter.GetBuffer">
            <summary> Gets the buffer.

</summary>
            <returns> The entire memory buffer.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  MemoryFilter specific function. </remarks>
        </member>
        <member name="M:pdftron.Filters.MemoryFilter.#ctor(System.Int32,System.Boolean)">
            <summary> Instantiates a new memory filter.

</summary>
            <param name="buf_sz">buffer size
</param>
            <param name="is_input">whether the Mememory filter is input filter
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.Filters.MemoryFilter">
            <summary> MemoryFilter is a memory buffer that can be used as a source or a sink Filter in 
the Filter pipeline. When a MemoryFilter is the source, other filters can read data
stored in memory; When MemoryFilter is a sink, other filters generate data which
is then pushed in a memory buffer owned by MemoryFilter (MemoryFilter makes sure
that there is enough space to accomodate all data).
</summary>
        </member>
        <member name="M:pdftron.Filters.MappedFile.Finalize">
            <summary> Allows an MappedFile to try to free resources and perform
other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.Filters.MappedFile.Dispose">
            <summary> Releases all resources used by the MappedFile </summary>
        </member>
        <member name="M:pdftron.Filters.MappedFile.FileSize">
            <summary> Gets File size.

</summary>
            <returns> the size of the current file.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.MappedFile.GetFilePath">
            <summary>Gets file path</summary>
            <returns>file path</returns>
        </member>
        <member name="M:pdftron.Filters.MappedFile.Close">
            <summary>close filter and release relevant resources</summary>
        </member>
        <member name="M:pdftron.Filters.MappedFile.#ctor(System.String)">
            <summary> Create a new instance of MappedFile class with the specified path.

</summary>
            <param name="filename">filename
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="F:pdftron.Filters.MappedFile.OpenMode.e_append_mode">
            <summary>Opens for reading and appending. Creates the file first if it doesn't exist.</summary>
        </member>
        <member name="F:pdftron.Filters.MappedFile.OpenMode.e_write_mode">
            <summary>Opens an empty file for writing. If the given file exists, its contents are destroyed.</summary>
        </member>
        <member name="F:pdftron.Filters.MappedFile.OpenMode.e_read_mode">
            <summary>Opens file for reading. An exception is thrown if the file doesn't exist.</summary>
        </member>
        <member name="T:pdftron.Filters.MappedFile.OpenMode">
            <summary>open file mode</summary>
        </member>
        <member name="T:pdftron.Filters.MappedFile">
            <summary> MappedFile is a utility class to read files on a file system. Because MappedFile file is 
derived from pdftron.Filters.Filter you can directly chain MappedFile objects to other
'pdftron.Filters'.

MappedFile objects support random access to files using the Seek method. Seek 
allows the read/write position to be moved to any position within the file. This
is done through a shared memory mapped chunk manager. The byte offset is relative 
to the seek reference point, which can be the beginning, the current position, 
or the end of the underlying file, as represented by the three properties of the 
Filter.ReferencePos class.
MappedFile objects are thread-safe, meaning separate copies of a MappedFile can Seek
to different locations in the file, without conflicting with one another.
Disk files always support random access. At the time of construction, the CanSeek()
property value is set to true or false depending on the underlying file type.

</summary>
            <remarks>  .NET or Java applications should explicitly Close() files when they are not needed. </remarks>
            <summary> If the files are not closed or disposed this may lead to the resource exhaustion.
</summary>
        </member>
        <member name="M:pdftron.Filters.Filter.Finalize">
            <summary> Allows a Filter to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.Filters.Filter.Dispose">
            <summary> Releases all resources used by the Filter </summary>
        </member>
        <member name="M:pdftron.Filters.Filter.WriteToFile(System.String,System.Boolean)">
            <summary> Writes the entire filter, starting at current position, to
specified filepath.  Should only be called on an input filter.
</summary>
            <param name="path"> The output filepath. </param>
            <param name="append"> 'Frue' to append to existing file contents, 'False' to overwrite. </param>
        </member>
        <member name="M:pdftron.Filters.Filter.GetFilePath">
            <summary> Gets the file path.
</summary>
            <returns> the file path to the underlying file stream.
Default implementation returns empty string.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.Filter.CreateInputIterator">
            <summary> Create Filter iterator. Filter iterator similar to a regular filter. However,
there can be only one owner of the attached filter.

</summary>
            <returns> the filter
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>  - Derived classes should make sure that there is only one owner of the attached stream. 
Otherwise the attached stream may be deleted several times.
</remarks>
        </member>
        <member name="M:pdftron.Filters.Filter.Tell">
            <summary> Reports the current read position in the stream relative to the stream origin.

</summary>
            <returns> - The current position in the stream
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.Filter.Seek(System.Int32,pdftron.Filters.Filter.ReferencePos)">
            <summary> When overridden in a derived class, sets the position within the current stream.

</summary>
            <param name="offset">A byte offset relative to origin. If offset is negative, the new position will 
precede the position specified by origin by the number of bytes specified by offset. If offset is zero, 
the new position will be the position specified by origin. If offset is positive, the new position will 
follow the position specified by origin by the number of bytes specified by offset.
</param>
            <param name="origin">A value of type ReferencePos indicating the reference point used to obtain the new position</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
            <remarks>After each Seek() operation the number of consumed bytes (i.e. 
Count()) is set to 0.</remarks>
        </member>
        <member name="F:pdftron.Filters.Filter.ReferencePos.e_cur">
            <summary>current position</summary>
        </member>
        <member name="F:pdftron.Filters.Filter.ReferencePos.e_end">
            <summary>end of the stream</summary>
        </member>
        <member name="F:pdftron.Filters.Filter.ReferencePos.e_begin">
            <summary>beginning of the stream</summary>
        </member>
        <member name="T:pdftron.Filters.Filter.ReferencePos">
            <summary>Provides the fields that represent reference points in streams for seeking.</summary>
        </member>
        <member name="M:pdftron.Filters.Filter.CanSeek">
            <summary> Check whether the stream supports seeking.

</summary>
            <returns> - true if the stream supports seeking; otherwise, false.
default is to return false.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.Filter.IsInputFilter">
            <summary> Checks if is input filter.

</summary>
            <returns> - boolean indicating whether this is an input filter.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.Filter.FlushAll">
            <summary> Forces any data remaining in the filter chain to the source or destination.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.Filter.Flush">
            <summary> Forces any data remaining in the buffer to be written to input or
output filter.

</summary>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.Filter.GetSourceFilter">
            <summary> Get the source filter.</summary>
            <returns>the first filter in the chain (usually a file filter)
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.Filter.GetAttachedFilter">
            <summary> Get the attached filter.</summary>
            <returns>attached Filter or a NULL filter if no filter is attached.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.Filter.ReleaseAttachedFilter">
            <summary> Release the ownership of the attached filter. After the attached filter is
released this filter points to NULL filter.

</summary>
            <returns> - Previously attached filter.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.Filter.AttachFilter(pdftron.Filters.Filter)">
            <summary> Attaches a filter to the this filter. If this filter owns another
filter it will be deleted. This filter then becomes the owner of the
attached filter.

</summary>
            <param name="attach_filter">the attach_filter
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.Filter.SetStreamLength(System.Int32)">
            <summary> The functions specifies the length of the data stream. The default
implementation does not do anything. For some derived filters such
as file segment filter it may be useful to override this function
in order to limit the stream.

</summary>
            <param name="bytes">the new stream length
</param>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.Filter.SetCount(System.Int32)">
            <summary>Sets a new counting point for the current filter. All subsequent <c>Consume()</c> operations will increment this counter. Make sure that the output filter is flushed before using SetCount().</summary>
            <param name="new_count">new counting point</param>
            <returns>the value of previous counter</returns>
        </member>
        <member name="M:pdftron.Filters.Filter.Count">
            <summary>Get the number of bytes consumed since opening the filter or the last Seek operation</summary>
            <returns>the number of bytes consumed since opening the filter or the last Seek operation</returns>
        </member>
        <member name="M:pdftron.Filters.Filter.Consume(System.Int32)">
            <summary>Moves the Begin() pointer num_bytes forward.</summary>
            <param name="num_bytes">number of bytes to consume. num_bytes must be less than or equal to <c>Size()</c>.</param>
        </member>
        <member name="M:pdftron.Filters.Filter.Size">
            <summary>Get size of buffer</summary>
            <returns>the size of buffer returned by <c>Begin()</c>. If the <c>Size()</c> returns 0 end of data has been reached.</returns>
        </member>
        <member name="M:pdftron.Filters.Filter.Begin">
            <summary> Get the begin of the buffer </summary>
            <returns>beginning of the buffer of <c>Size()</c> bytes that can be used to read or write data.</returns>
        </member>
        <member name="M:pdftron.Filters.Filter.GetDecodeName">
            <summary> Gets the decode name.

</summary>
            <returns>string representing the name of corresponding decode filter as
it should appear in document (e.g. both ASCIIHexDecode and ASCIIHexEncode
should return ASCIIHexDecode).
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="M:pdftron.Filters.Filter.GetName">
            <summary> Gets the name.

</summary>
            <returns>descriptive name of the filter.
</returns>
            <exception cref="T:pdftron.Common.PDFNetException">  PDFNetException the PDFNet exception </exception>
        </member>
        <member name="T:pdftron.Filters.Filter">
            <summary> Provides a generic view of a sequence of bytes. 
<para>
A Filter is the abstract base class of all filters. A filter is an abstraction of 
a sequence of bytes, such as a file, an input/output device, an inter-process communication 
pipe, or a TCP/IP socket. The Filter class and its derived classes provide a generic view 
of these different types of input and output, isolating the programmer from the specific 
details of the operating system and the underlying devices.
</para><para>
Besides providing access to input/output sources Filters can be also to transform the data
(e.g. to compress the data stream, to normalize the image data, to encrypt data, etc).
Filters can also be attached to each other to form pipelines. For example, a filter used to 
open an image data file can be attached to a filter that decompresses the data, which is 
attached to another filter that will normalize the image data.
</para><para>
Depending on the underlying data source or repository, filters might support only some of 
these capabilities. An application can query a stream for its capabilities by using the 
IsInputFilter() and CanSeek() properties.
</para><example>
To read or write data to a filter, a user will typically use FilterReader/FilterWriter class.
instead of using Filter methods	
<code>  
MappedFile file = new MappedFile("my_stream.txt");
FilterReader reader = new FilterReader(file);
while (reader.read(...)) ...
</code></example></summary>
        </member>
        <member name="M:pdftron.Common.ProgressMonitor.Dispose">
            <summary> Releases all resources used by the ProgressMonitor </summary>
        </member>
        <member name="M:pdftron.Common.ProgressMonitor.StepIt">
            <summary> Advances the current position for a progress monitor by the step
increment (see SetStep) and redraws the monitor to reflect the new
position.

</summary>
            <returns> new postion after stepping
</returns>
        </member>
        <member name="M:pdftron.Common.ProgressMonitor.SetStep(System.Int32)">
            <summary> Specifies the step increment for a progress bar monitor.

</summary>
            <param name="nstep">new step increment.
</param>
            <returns>the previous step increment
</returns>
        </member>
        <member name="M:pdftron.Common.ProgressMonitor.OffsetPos(System.Int32)">
            <summary> Advances the current position of a progress monitor by a specified
increment and redraws the bar to reflect the new position.

</summary>
            <param name="offset">advances the current position of a progress bar control by a
specified increment and redraws the bar to reflect the new
position.
</param>
            <returns>the previous position of the progress monitor
</returns>
        </member>
        <member name="M:pdftron.Common.ProgressMonitor.SetPos(System.Int32)">
            <summary> Set the current position for a progress monitor and redraws the bar to
reflect the new ranges.

</summary>
            <param name="pos"> the new position of the progress monitor
</param>
            <returns> the previous position of the progress monitor
</returns>
        </member>
        <member name="M:pdftron.Common.ProgressMonitor.GetPos">
            <summary> Get the current position of the progress monitor.

</summary>
            <returns> position of the progress monitor
</returns>
        </member>
        <member name="M:pdftron.Common.ProgressMonitor.GetRange(System.Int32@,System.Int32@)">
            <summary> get upper and lower limit of the progress monitor

</summary>
            <param name="start">lower limit of the range
</param>
            <param name="finish">upper limit of the range
</param>
        </member>
        <member name="M:pdftron.Common.ProgressMonitor.SetRange(System.Int32,System.Int32)">
            <summary> set upper and lower limit of the progress monitor

</summary>
            <param name="start">lower limit of the range
</param>
            <param name="finish">upper limit of the range
</param>
        </member>
        <member name="M:pdftron.Common.ProgressMonitor.#ctor">
            <summary> Instantiates a default ProgressMonitor object </summary>
        </member>
        <member name="T:pdftron.Common.ProgressMonitor">
            <summary> ProgressMonitor is an interface that an application can use to indicate the
progress of a lengthy operation (such as PDFDoc.Save()).

ProgressMonitor has a range and a current position. The range represents the
entire duration of the operation, and the current position represents the
progress the application has made toward completing the operation.
</summary>
        </member>
        <member name="M:pdftron.Common.Matrix2D.Finalize">
            <summary> Allows Matrix2D to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. </summary>
        </member>
        <member name="M:pdftron.Common.Matrix2D.Dispose">
            <summary> Releases all resources used by the Matrix2D </summary>
        </member>
        <member name="M:pdftron.Common.Matrix2D.RotationMatrix(System.Double!System.Runtime.CompilerServices.IsConst)">
            <summary> Rotation matrix.

</summary>
            <param name="angle">the angle of rotation in radians.
Positive values specify clockwise rotation.
</param>
            <returns> A rotation matrix for a given angle.
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.Common.Matrix2D.IdentityMatrix">
            <summary> Create identity matrix 
{1 0 
 0 1 
 0 0}.

</summary>
            <returns> the identity matrix
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.Common.Matrix2D.ZeroMatrix">
            <summary> Create zero matrix (0 0 0 0 0 0).

</summary>
            <returns> zero matrix
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.Common.Matrix2D.Scale(System.Double,System.Double)">
            <summary> The Scale method updates this matrix with the product of itself and a scaling matrix.

</summary>
            <param name="x">the horizontal scale factor.
</param>
            <param name="y">the vertical scale factor
</param>
            <returns> translated matrix
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.Common.Matrix2D.PostTranslate(System.Double,System.Double)">
            <summary> Updates this matrix by concatenating a translation matrix.
M' = M * T(h, v). It is equivalent to this.concat(1,0,0,1,h,v).

</summary>
            <param name="x">the horizontal component of the translation.
</param>
            <param name="y">the vertical component of the translation.
</param>
            <returns> this matrix after the update
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.Common.Matrix2D.PreTranslate(System.Double,System.Double)">
            <summary> Updates this matrix to the concatenation of a translation matrix and the original matrix.
M' = T(h, v) * M. It is equivalent to this.m_h += h; this.m_v += v.

</summary>
            <param name="x">the horizontal component of the translation.
</param>
            <param name="y">the vertical component of the translation.
</param>
            <returns> this matrix after the update
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.Common.Matrix2D.Translate(System.Double,System.Double)">
            <summary> The Translate method updates this matrix with the product of itself and a
translation matrix (i.e. it is equivalent to this.m_h += h; this.m_v += v).

</summary>
            <param name="x">the horizontal component of the translation.
</param>
            <param name="y">the vertical component of the translation.
</param>
            <returns> translated matrix
</returns>
            <remarks> This method is deprecated. Please use PreTranslate or PostTranslate instead. The behavior of this method is identical to PreTranslate, but
PostTranslate will be more suitable for some use cases.</remarks>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.Common.Matrix2D.Inverse">
            <summary> If this matrix is invertible, the Inverse method returns its inverse matrix.

</summary>
            <returns> inverse of the matrix
</returns>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.Common.Matrix2D.Mult(System.Double@,System.Double@)">
            <summary> Transform/multiply the point (in_out_x, in_out_y) using this matrix
</summary>
            <param name="in_out_x">x coordinate of the result point
</param>
            <param name="in_out_y">y coordinate of the result point
</param>
        </member>
        <member name="M:pdftron.Common.Matrix2D.op_Inequality(pdftron.Common.Matrix2D,pdftron.Common.Matrix2D)">
            <summary>check if two matrices are inequal
</summary>
            <param name="lm"> left matrix
</param>
            <param name="rm"> right matrix
</param>
            <returns> true, if both matrices are not equal, false, otherwise.
</returns>
        </member>
        <member name="M:pdftron.Common.Matrix2D.op_Equality(pdftron.Common.Matrix2D,pdftron.Common.Matrix2D)">
            <summary>check if two matrices are equal
</summary>
            <param name="lm"> left matrix
</param>
            <param name="rm"> right matrix
</param>
            <returns> true, if both matrices are equal. false, otherwise.
</returns>
        </member>
        <member name="M:pdftron.Common.Matrix2D.op_Multiply(pdftron.Common.Matrix2D,pdftron.Common.Matrix2D)">
            <summary>multiply two matrices
</summary>
            <param name="lm"> left matrix
</param>
            <param name="rm"> right matrix
</param>
            <returns> multiplication result matrix
</returns>
        </member>
        <member name="M:pdftron.Common.Matrix2D.op_Assign(pdftron.Common.Matrix2D)">
            <summary>assign value from another matrix
</summary>
            <param name="rm"> another matrix
</param>
            <returns>matrix with value from <c>rm</c></returns>
        </member>
        <member name="M:pdftron.Common.Matrix2D.Concat(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary> The Concat method updates this matrix with the product of itself and another matrix
specified through an argument list.

</summary>
            <param name="a">the matrix element in the first row, first column.
</param>
            <param name="b">the matrix element in the first row, second column.
</param>
            <param name="c">the matrix element in the second row, first column.
</param>
            <param name="d">the matrix element in the second row, second column.
</param>
            <param name="h">the matrix element in the third row, first column.
</param>
            <param name="v">the matrix element in the third row, second column.
</param>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.Common.Matrix2D.Set(pdftron.Common.Matrix2D)">
            <summary>set value to given matrix
</summary>
            <param name="p">matrix value for the created matrix
</param>
        </member>
        <member name="M:pdftron.Common.Matrix2D.Set(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary> The Set method sets the elements of this matrix.

</summary>
            <param name="a">the matrix element in the first row, first column. 
</param>
            <param name="b">the matrix element in the first row, second column. 
</param>
            <param name="c">the matrix element in the second row, first column. 
</param>
            <param name="d">the matrix element in the second row, second column. 
</param>
            <param name="h">the matrix element in the third row, first column. 
</param>
            <param name="v">the matrix element in the third row, second column. 
</param>
        </member>
        <member name="M:pdftron.Common.Matrix2D.#ctor(pdftron.Common.Matrix2D)">
            <summary>Create a matrix and initialize it with values from another matrix
</summary>
            <param name="m">matrix to initialize
</param>
        </member>
        <member name="M:pdftron.Common.Matrix2D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary> Creates a Matrix object based on six numbers that define an
affine transformation.

</summary>
            <param name="a">the matrix element in the first row, first column.
</param>
            <param name="b">the matrix element in the first row, second column.
</param>
            <param name="c">the matrix element in the second row, first column.
</param>
            <param name="d">the matrix element in the second row, second column.
</param>
            <param name="h">the matrix element in the third row, first column.
</param>
            <param name="v">the matrix element in the third row, second column.
</param>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="M:pdftron.Common.Matrix2D.#ctor">
            <summary> Creates an identity matrix 

</summary>
            <throws>  PDFNetException  </throws>
        </member>
        <member name="P:pdftron.Common.Matrix2D.m_v">
            <summary>the matrix element in the third row, second column.
</summary>
        </member>
        <member name="P:pdftron.Common.Matrix2D.m_h">
            <summary>the matrix element in the third row, first column.
</summary>
        </member>
        <member name="P:pdftron.Common.Matrix2D.m_d">
            <summary>the matrix element in the second row, second column.
</summary>
        </member>
        <member name="P:pdftron.Common.Matrix2D.m_c">
            <summary>the matrix element in the second row, first column
</summary>
        </member>
        <member name="P:pdftron.Common.Matrix2D.m_b">
            <summary> the matrix element in the first row, second column
</summary>
        </member>
        <member name="P:pdftron.Common.Matrix2D.m_a">
            <summary> the matrix element in the first row, first column.
</summary>
        </member>
        <member name="T:pdftron.Common.Matrix2D">
            <summary> 2D Matrix

A Matrix2D object represents a 3x3 matrix that, in turn, represents an affine transformation. 
A Matrix2D object stores only six of the nine numbers in a 3x3 matrix because all 3x3 
matrices that represent affine transformations have the same third column (0, 0, 1).

Affine transformations include rotating, scaling, reflecting, shearing, and translating. 
In PDFNet, the Matrix2D class provides the foundation for performing affine transformations 
on vector drawings, images, and text.

A transformation matrix specifies the relationship between two coordinate spaces.
By modifying a transformation matrix, objects can be scaled, rotated, translated,
or transformed in other ways.

A transformation matrix in PDF is specified by six numbers, usually in the form
of an array containing six elements. In its most general form, this array is denoted
[a b c d h v]; The following table lists the arrays that specify the most common
transformations:

<list type="bullet"><item><description>   
Translations are specified as [1 0 0 1 tx ty], where tx and ty are the distances
to translate the origin of the coordinate system in the horizontal and vertical
dimensions, respectively.
</description></item><item><description>
Scaling is obtained by [sx 0 0 sy 0 0]. This scales the coordinates so that 1
unit in the horizontal and vertical dimensions of the new coordinate system is
the same size as sx and sy units, respectively, in the previous coordinate system.
</description></item><item><description>
Rotations are produced by [cos(A) sin(A) -sin(A) cos(A) 0 0], which has the effect
of rotating the coordinate system axes by an angle 'A' counterclockwise.
</description></item><item><description>
Skew is specified by [1 tan(A) tan(B) 1 0 0], which skews the x axis by an angle
A and the y axis by an angle B.
</description></item></list>
Matrix2D elements are positioned as follows :

| m_a m_b 0 |
| m_c m_d 0 |
| m_h m_v 1 |

A single Matrix2D object can store a single transformation or a sequence of transformations. 
The latter is called a composite transformation. The matrix of a composite transformation is 
obtained by multiplying (concatenating) the matrices of the individual transformations. 
Because matrix multiplication is not commutative-the order in which matrices are multiplied
is significant. For example, if you first rotate, then scale, then translate, you get a 
different result than if you first translate, then rotate, then scale.

For more information on properties of PDF matrices please refer to PDF Reference Manual 
(Sections 4.2 'Coordinate Systems' and 4.2.3 'Transformation Matrices')
	

<example>
The following sample illustrates how to use Matrix2D in order to position
an image on the page. Note that PDFNet uses the same convention of matrix 
multiplication used in PostScript and OpenGL.
<code> 
Element element = eb.CreateImage(Image(...));
double deg2rad = 3.1415926535 / 180.0;

Matrix2D mtx = Matrix2D(1, 0, 0, 1, 0, 200); // Translate
mtx.multiply(Matrix2D(300, 0, 0, 200, 0, 0));    // Scale
mtx.multiply(Matrix2D.RotationMatrix( 90 * deg2rad )); // Rotate
element.GetGState().SetTransform(mtx);
writer.WritePlacedElement(element);	
</code>

The following sample sample illustrates how to use Matrix2D in order to calculate 
absolute positioning for the text on the page.
<code>
...
Matrix2D text_mtx = text_element.GetTextMatrix();
double x, y;
for (CharIterator itr = text_element.getCharIterator(); itr.HasNext(); itr.Next()) {
x = itr.current().x; // character positioning information
y = itr.current().y;
</code>


Get current transformation matrix (CTM)
<code>
Matrix2D ctm = text_element.getCTM();
</code>

To get the absolute character positioning information concatenate current 
text matrix with CTM and then multiply relative postitioning coordinates with 
the resulting matrix.
<code>
Matrix2D mtx = ctm.multiply(text_mtx);
mtx.multPoint(x, y);	
</code></example></summary>
        </member>
        <member name="M:pdftron.Common.PDFNetException.GetErrorCode">
            <summary> Get the error code.

</summary>
            <returns> the error code of this Exception object.
</returns>
        </member>
        <member name="M:pdftron.Common.PDFNetException.GetMessage">
            <summary> Get the detailed error message.

</summary>
            <returns> the error message string of this Exception object.
</returns>
        </member>
        <member name="M:pdftron.Common.PDFNetException.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary> Instantiates a new <c>PDFNetException</c> object with given string.		
</summary>
            <param name="s"> exception message
</param>
        </member>
        <member name="M:pdftron.Common.PDFNetException.#ctor">
            <summary>Instantiates a default <c>PDFNetException</c> object
</summary>
        </member>
        <member name="M:pdftron.Common.PDFNetException.#ctor(System.Exception)">
            <summary>Instantiates from <c>System::Exception</c> object
</summary>
            <param name="e">a <c>System::Exception</c> object</param>
        </member>
        <member name="M:pdftron.Common.PDFNetException.#ctor(trn.Common.Exception*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Instantiates from <c>trn::Common::Exception</c> object
</summary>
            <param name="e">a <c>trn::Common::Exception</c> object</param>
        </member>
        <member name="T:pdftron.Common.PDFNetException">
            <summary>  PDFNetException is derived from the standard exception class and it is a superclass 
for all PDFNet library exceptions.

PDFNetException and its subclasses have two constructors: one that takes no arguments and 
one that takes a string argument that can be used to report an error message.
</summary>
        </member>
        <member name="M:Gdiplus.Region.IsVisible(Gdiplus.PointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Gdiplus.Graphics!System.Runtime.CompilerServices.IsConst*)">
Hit testing operations

</member>
        <member name="M:trn.pdf2html.HtmlConverter.GetImageExt">
either '.png' or '.jpg'

</member>
        <member name="M:trn.pdf2html.HtmlConverter.GetViewportScale(trn.PDF.Page!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
return the scaling factor to get page to fit into viewport

</member>
        <member name="T:trn.pdf2html.HtmlConverter">
 Responsible for creating (X)HTML and CSS output. Also generates font
 and image output.

 subclasses are responsible for setting m_writer to the correct output
 before HtmlConverter starts writing. Subclasses are also responsible
 for any other format specific content (such as OPF files for EPUB).

 /m_root
		/xhtml
		/image
		/font
		/css

 !!! Implementation Invariants: 
  ! All std::strings should be UTF8
  ! All UStrings should be converted to string using ConvertUStringToUTF8(ustring) function
  ! DONT use ConvertUStringToPath(ustring) function, 
         instead use TRN_BoostPath(ConvertUStringToUTF8(ustring))

</member>
        <member name="M:trn.pdf2html.ResourceTracker.ImgFirst">
This is not for flattener.
This for use with GetImgId method above...

</member>
        <member name="M:trn.pdf2html.ResourceTracker.HasFonts">
return true if there is a font that needs to be written out

</member>
        <member name="M:trn.pdf2html.ResourceTracker.FontFirst">
Use the following to write out the fonts themselves

</member>
        <member name="M:trn.pdf2html.ResourceTracker.WriteFontFaces(trn.Filters.FilterWriter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,boost.filesystem.path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Write out the font-face styles

</member>
        <member name="M:trn.pdf2html.ResourceTracker.WriteStyles(trn.pdf2html.HtmlWriter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Write out the classes in CSS to filter.

</member>
        <member name="M:trn.pdf2html.ResourceTracker.WriteStylesPre(trn.pdf2html.HtmlWriter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Call this before writing anything to the styles css

</member>
        <member name="M:trn.pdf2html.ResourceTracker.GetImgId(trn.SDF.Obj*)">
Use the following methods to get the class id of resources

</member>
        <member name="M:trn.pdf2html.ResourceTracker.OnChar(trn.PDF.Font*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.Byte,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;System.UInt16,std.allocator&lt;System.UInt16&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Informs this that 'font' and 'char_code' are used in the output.
returns true if char_code maps to private unicode (i.e. use gidx)

</member>
        <member name="M:trn.pdf2html.ResourceTracker.CapGlyphData">
Some HTML viewers, such as Safari and iBooks, are unable to handle glyphs over a certain amount of complexity (high number of operators and data points)
Call this to put cap on complex glyphs. Currently only useful for general HTML and EPUB output.

</member>
        <member name="M:trn.pdf2html.ResourceTracker.PreserveRtlUni">
 If a char code maps to a right to left unicode value, then by default this will be mapped to PUA
 Calling this will tell XPSFont to preserve the unicode value.

 This method is written to be used in Reflow.

</member>
        <member name="M:trn.pdf2html.ResourceTracker.PreserveLigatures">
 If a char code maps to multiple unicode values, then by default this will be mapped to PUA
 Calling this will tell XPSFont to see if it can map the unicode values to single ligature unicode

 For example, if charcode maps to "ffi" (three unicode values), then instead of going to PUA, it
 will go to U+FB03

</member>
        <member name="M:trn.pdf2html.ResourceTracker.AddInvalidUnicode(System.UInt16)">
Forces otherwise valid unicode values to be forced to SSP or PUA unicode value

</member>
        <member name="M:trn.pdf2html.ResourceTracker.SetMaxImageSize(trn.pdf2html.ResourceTracker.ImageCompatibility)">
Set the maximum image resolution.

</member>
        <member name="T:trn.pdf2html.ResourceTracker">
Use this to track the resources required to successfully generate output

</member>
        <member name="M:trn.pdf2html.GetLeading(System.Int32,System.Int32)">
 figure out how many leading zeros we need for num_values
 for example
 1. GetLeading(2, 6) returns 2, so later you can have 00, 01, 02, 03, 04, 05
 2. GetLeading(2, 106) returns 3, since you need 3 digits to hold 106 values...

 code below only supports min_width upto 5... but num_values can be anything...

</member>
        <member name="M:trn.pdf2html.Matrix2Html(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
"matrix(a,b,c,d,h,v)"

</member>
        <member name="M:trn.pdf2html.HtmlWriter.CreateStyleRuleSet(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
create style rule set using declarations and selector
should only be called within a 'style' element

</member>
        <member name="M:trn.pdf2html.HtmlWriter.WriteString(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Raw write string (no formatting done)

</member>
        <member name="M:trn.pdf2html.CreateDeclaration(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
returns "property:value;"

</member>
        <member name="M:trn.StopWatch.TimerPeriod">
@return The smallest unit of time (in seconds) that can be resolved
with this particular StopWatch. Strongly system dependent. 

</member>
        <member name="M:trn.StopWatch.Read">
@return Reads the elapsed time in seconds.
If the stopwatch is not stopped, reurns the current elapsed time.
If it's stopped, returns the time when stop was last called.

</member>
        <member name="M:trn.StopWatch.Stop">
Halts the timer.
@return The elapsed time in seconds.

</member>
        <member name="M:trn.StopWatch.Start">
resets the current elapsed time and starts the timer.

</member>
        <member name="F:trn.CommonRect.x1">
Rectangle's coordinates

</member>
        <member name="M:trn.CommonRect.Area">
@return The Rectangle area

</member>
        <member name="M:trn.CommonRect.NormalizeAndCompare(trn.CommonRect*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Compare all values between two rectangle object to see if they are match.

 @return true if the value of x1,x2,y1,y2 in the two rects are all match (within slightly difference 0.006)
 false otherwise.

</member>
        <member name="M:trn.CommonRect.Normalize">
Arrange the points in the Rectangle so that the first point is the lower-left 
corner and the second point is the upper-right corner of the Rectangle.

@note Although Rectangles are conventionally specified by their lower-left 
and upper-right corners, it is acceptable to specify any two diagonally 
opposite corners.

</member>
        <member name="M:trn.CommonRect.ExpandToContain(System.Double,System.Double)">
 Expands the Rectangle the minimum required such that it contains (x, y). 


</member>
        <member name="M:trn.CommonRect.InflateToInt">
 Expands the Rectangle such that each of it's coordinates are integral. 


</member>
        <member name="M:trn.CommonRect.Inflate(System.Double,System.Double)">
Expands the Rectangle by the specified size, in all diCommonRections. 

@param x Specifies the amount to increase the Rectangle's Left (x1) and Right (x2) properties. 
@param y Specifies the amount to increase the Rectangle's Top (y1) and Bottom (y1) properties.

</member>
        <member name="M:trn.CommonRect.Inflate(System.Double)">
Expands the Rectangle by the specified size, in all diCommonRections. 

@param amount Specifies the amount to increase the Rectangle in all diCommonRections.

</member>
        <member name="M:trn.CommonRect.Union(trn.CommonRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Calculate the union of this Rectangle and another Rectangle.

</member>
        <member name="M:trn.CommonRect.IntersectRect(trn.CommonRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.CommonRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Makes a CommonRect equal to the intersection of two existing Rectangles.	 

@param CommonRect1 - A CommonRect object that contains a source Rectangle. 
@param CommonRect2 - A CommonRect object that contains a source Rectangle. 

@return true if the intersection is not empty; 0 if the intersection is empty.

@note The intersection is the largest Rectangle contained in both existing Rectangles.

</member>
        <member name="M:trn.CommonRect.Contains(trn.CommonRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Determines if the specified Rectangle is entirely inside this Rectangle.

@return true is the specified Rectangle is inside, false otherwise.

</member>
        <member name="M:trn.CommonRect.Contains(System.Double,System.Double)">
Determines if the specified point is contained within the CommonRectangular region 
defined by this Rectangle

@return true is the point is in the Rectangle, false otherwise.

</member>
        <member name="M:trn.CommonRect.Size">
@return Rectangle's width + height

</member>
        <member name="M:trn.CommonRect.Height">
@return Rectangle's height

</member>
        <member name="M:trn.CommonRect.Width">
@return Rectangle's width 

</member>
        <member name="M:trn.CommonRect.Set(System.Double,System.Double,System.Double,System.Double)">
Set the coordinates of the Rectangle

</member>
        <member name="M:trn.CommonRect.Get(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get the coordinates of the Rectangle

</member>
        <member name="M:trn.CommonRect.#ctor(System.Double,System.Double,System.Double,System.Double)">
Create a CommonRect and initialize it using specified parameters.
The CommonRect is not attached to any Cos/SDF object.

</member>
        <member name="M:trn.CommonRect.#ctor">
CommonRect default constructor.

</member>
        <member name="F:tbb.internal.atomic_backoff.LOOPS_BEFORE_YIELD">
Should be equal to approximately the number of "pause" instructions
        that take the same time as an context switch. 
</member>
        <member name="T:tbb.internal.atomic_backoff">
See implementation of spin_wait_while_eq for an example. 
</member>
        <member name="T:tbb.internal.version_tag_v3">
Version tag can be necessary to prevent loader on Linux from using the wrong 
    symbol in debug builds (when inline functions are compiled as out-of-line). *
</member>
        <member name="M:tbb.internal.handle_perror(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
The standard offsetof macro is not sufficient for TBB as it can be used for
    POD-types only. The constant 0x1000 (not NULL) is necessary to appease GCC. *
</member>
        <member name="T:tbb.split">
See description of parallel_for and parallel_reduce for example usages.
@ingroup algorithms

</member>
        <member name="M:tbb.TBB_runtime_interface_version">
The version it returns is determined at runtime, not at compile/link time.
So it can be different than the value of TBB_INTERFACE_VERSION obtained at compile time.

</member>
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.StartElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.EndElement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Matrix2HtmlAttr(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Pair2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Origin2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pdftron.PDF.DigitalSignatureField.UseSubFilter(pdftron.PDF.DigitalSignatureField.SubFilterType!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pdftron.PDF.Convert.WordOutputOptions.SetPages(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.StartElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.EndElement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Matrix2HtmlAttr(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Pair2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Origin2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pdftron.PDF.DigitalSignatureField.UseSubFilter(pdftron.PDF.DigitalSignatureField.SubFilterType!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pdftron.PDF.Convert.WordOutputOptions.SetPages(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.StartElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.EndElement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Matrix2HtmlAttr(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Pair2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Origin2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.StartElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.EndElement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Matrix2HtmlAttr(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Pair2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Origin2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.StartElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.EndElement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Matrix2HtmlAttr(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Pair2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Origin2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pdftron.PDF.DigitalSignatureField.UseSubFilter(pdftron.PDF.DigitalSignatureField.SubFilterType!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pdftron.PDF.Convert.WordOutputOptions.SetPages(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.StartElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.EndElement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Matrix2HtmlAttr(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Pair2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Origin2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pdftron.PDF.DigitalSignatureField.UseSubFilter(pdftron.PDF.DigitalSignatureField.SubFilterType!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pdftron.PDF.Convert.WordOutputOptions.SetPages(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.StartElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.EndElement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Matrix2HtmlAttr(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Pair2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Origin2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pdftron.PDF.DigitalSignatureField.UseSubFilter(pdftron.PDF.DigitalSignatureField.SubFilterType!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pdftron.PDF.Convert.WordOutputOptions.SetPages(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.StartElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.EndElement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Matrix2HtmlAttr(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Pair2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Origin2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.StartElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.EndElement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Matrix2HtmlAttr(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Pair2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Origin2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.StartElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.EndElement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Matrix2HtmlAttr(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Pair2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Origin2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pdftron.PDF.DigitalSignatureField.UseSubFilter(pdftron.PDF.DigitalSignatureField.SubFilterType!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pdftron.PDF.Convert.WordOutputOptions.SetPages(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.StartElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.EndElement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Matrix2HtmlAttr(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Pair2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Origin2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.StartElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.EndElement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Matrix2HtmlAttr(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Pair2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Origin2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.StartElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.EndElement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.HtmlWriter.CreateElement(std.basic_string<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Matrix2HtmlAttr(trn.Common.Matrix2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Pair2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trn.pdf2html.Origin2Html(trn.pdf2html.CSSLength*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trn.pdf2html.CSSLength)'. -->
    </members>
</doc>